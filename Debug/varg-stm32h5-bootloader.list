
varg-stm32h5-bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f8  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800b344  0800b344  0000c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b354  0800b354  0000d00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b354  0800b354  0000d00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b354  0800b354  0000d00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b358  0800b358  0000c358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800b35c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000000c  0800b368  0000d00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800b368  0000d670  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d845  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395d  00000000  00000000  0002a887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  0002e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001378  00000000  00000000  0002fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036229  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020f8f  00000000  00000000  000670f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b51d  00000000  00000000  00088080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e359d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c18  00000000  00000000  001e35e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001ea1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800b32c 	.word	0x0800b32c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	0800b32c 	.word	0x0800b32c

0800028c <MX_ADC1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	463b      	mov	r3, r7
 8000294:	2220      	movs	r2, #32
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f00b f81b 	bl	800b2d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800029e:	4b51      	ldr	r3, [pc, #324]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002a0:	4a51      	ldr	r2, [pc, #324]	@ (80003e8 <MX_ADC1_Init+0x15c>)
 80002a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80002a4:	4b4f      	ldr	r3, [pc, #316]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80002aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ac:	4b4d      	ldr	r3, [pc, #308]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b2:	4b4c      	ldr	r3, [pc, #304]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002b8:	4b4a      	ldr	r3, [pc, #296]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002be:	4b49      	ldr	r3, [pc, #292]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002c0:	2208      	movs	r2, #8
 80002c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002c4:	4b47      	ldr	r3, [pc, #284]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ca:	4b46      	ldr	r3, [pc, #280]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80002d0:	4b44      	ldr	r3, [pc, #272]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002d2:	2206      	movs	r2, #6
 80002d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d6:	4b43      	ldr	r3, [pc, #268]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002d8:	2200      	movs	r2, #0
 80002da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80002de:	4b41      	ldr	r3, [pc, #260]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002e0:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80002e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80002e6:	4b3f      	ldr	r3, [pc, #252]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002e8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002ee:	4b3d      	ldr	r3, [pc, #244]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80002f6:	4b3b      	ldr	r3, [pc, #236]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002fc:	4b39      	ldr	r3, [pc, #228]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80002fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000302:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000304:	4b37      	ldr	r3, [pc, #220]	@ (80003e4 <MX_ADC1_Init+0x158>)
 8000306:	2200      	movs	r2, #0
 8000308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030c:	4835      	ldr	r0, [pc, #212]	@ (80003e4 <MX_ADC1_Init+0x158>)
 800030e:	f002 fb6b 	bl	80029e8 <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000318:	f000 ffb8 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800031c:	4b33      	ldr	r3, [pc, #204]	@ (80003ec <MX_ADC1_Init+0x160>)
 800031e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000320:	2306      	movs	r3, #6
 8000322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000324:	2302      	movs	r3, #2
 8000326:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000328:	237f      	movs	r3, #127	@ 0x7f
 800032a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800032c:	2304      	movs	r3, #4
 800032e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4619      	mov	r1, r3
 8000338:	482a      	ldr	r0, [pc, #168]	@ (80003e4 <MX_ADC1_Init+0x158>)
 800033a:	f002 fca9 	bl	8002c90 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000344:	f000 ffa2 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000348:	4b29      	ldr	r3, [pc, #164]	@ (80003f0 <MX_ADC1_Init+0x164>)
 800034a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034c:	230c      	movs	r3, #12
 800034e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	4823      	ldr	r0, [pc, #140]	@ (80003e4 <MX_ADC1_Init+0x158>)
 8000356:	f002 fc9b 	bl	8002c90 <HAL_ADC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000360:	f000 ff94 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000364:	4b23      	ldr	r3, [pc, #140]	@ (80003f4 <MX_ADC1_Init+0x168>)
 8000366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000368:	2312      	movs	r3, #18
 800036a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	4619      	mov	r1, r3
 8000370:	481c      	ldr	r0, [pc, #112]	@ (80003e4 <MX_ADC1_Init+0x158>)
 8000372:	f002 fc8d 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800037c:	f000 ff86 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000380:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <MX_ADC1_Init+0x16c>)
 8000382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000384:	2318      	movs	r3, #24
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4815      	ldr	r0, [pc, #84]	@ (80003e4 <MX_ADC1_Init+0x158>)
 800038e:	f002 fc7f 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000398:	f000 ff78 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800039c:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_ADC1_Init+0x170>)
 800039e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80003a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	4619      	mov	r1, r3
 80003ae:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80003b0:	f002 fc6e 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80003ba:	f000 ff67 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_ADC1_Init+0x174>)
 80003c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80003c2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80003c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c8:	463b      	mov	r3, r7
 80003ca:	4619      	mov	r1, r3
 80003cc:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_ADC1_Init+0x158>)
 80003ce:	f002 fc5f 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80003d8:	f000 ff58 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000028 	.word	0x20000028
 80003e8:	42028000 	.word	0x42028000
 80003ec:	10c00010 	.word	0x10c00010
 80003f0:	3ef08000 	.word	0x3ef08000
 80003f4:	3ac04000 	.word	0x3ac04000
 80003f8:	32601000 	.word	0x32601000
 80003fc:	c3210000 	.word	0xc3210000
 8000400:	c7520000 	.word	0xc7520000

08000404 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040a:	463b      	mov	r3, r7
 800040c:	2220      	movs	r2, #32
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f00a ff5f 	bl	800b2d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000416:	4b60      	ldr	r3, [pc, #384]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000418:	4a60      	ldr	r2, [pc, #384]	@ (800059c <MX_ADC2_Init+0x198>)
 800041a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800041c:	4b5e      	ldr	r3, [pc, #376]	@ (8000598 <MX_ADC2_Init+0x194>)
 800041e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000422:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000424:	4b5c      	ldr	r3, [pc, #368]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042a:	4b5b      	ldr	r3, [pc, #364]	@ (8000598 <MX_ADC2_Init+0x194>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000430:	4b59      	ldr	r3, [pc, #356]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000432:	2201      	movs	r2, #1
 8000434:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000436:	4b58      	ldr	r3, [pc, #352]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000438:	2208      	movs	r2, #8
 800043a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800043c:	4b56      	ldr	r3, [pc, #344]	@ (8000598 <MX_ADC2_Init+0x194>)
 800043e:	2200      	movs	r2, #0
 8000440:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000442:	4b55      	ldr	r3, [pc, #340]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000444:	2200      	movs	r2, #0
 8000446:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 7;
 8000448:	4b53      	ldr	r3, [pc, #332]	@ (8000598 <MX_ADC2_Init+0x194>)
 800044a:	2207      	movs	r2, #7
 800044c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800044e:	4b52      	ldr	r3, [pc, #328]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000456:	4b50      	ldr	r3, [pc, #320]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800045c:	4b4e      	ldr	r3, [pc, #312]	@ (8000598 <MX_ADC2_Init+0x194>)
 800045e:	2200      	movs	r2, #0
 8000460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000462:	4b4d      	ldr	r3, [pc, #308]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000464:	2201      	movs	r2, #1
 8000466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800046a:	4b4b      	ldr	r3, [pc, #300]	@ (8000598 <MX_ADC2_Init+0x194>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000470:	4b49      	ldr	r3, [pc, #292]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000472:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000476:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = ENABLE;
 8000478:	4b47      	ldr	r3, [pc, #284]	@ (8000598 <MX_ADC2_Init+0x194>)
 800047a:	2201      	movs	r2, #1
 800047c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8000480:	4b45      	ldr	r3, [pc, #276]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000482:	2204      	movs	r2, #4
 8000484:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8000486:	4b44      	ldr	r3, [pc, #272]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000488:	2240      	movs	r2, #64	@ 0x40
 800048a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800048c:	4b42      	ldr	r3, [pc, #264]	@ (8000598 <MX_ADC2_Init+0x194>)
 800048e:	2200      	movs	r2, #0
 8000490:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000492:	4b41      	ldr	r3, [pc, #260]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000494:	2201      	movs	r2, #1
 8000496:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000498:	483f      	ldr	r0, [pc, #252]	@ (8000598 <MX_ADC2_Init+0x194>)
 800049a:	f002 faa5 	bl	80029e8 <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80004a4:	f000 fef2 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a8:	2301      	movs	r3, #1
 80004aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	2306      	movs	r3, #6
 80004ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b4:	237f      	movs	r3, #127	@ 0x7f
 80004b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b8:	2304      	movs	r3, #4
 80004ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4834      	ldr	r0, [pc, #208]	@ (8000598 <MX_ADC2_Init+0x194>)
 80004c6:	f002 fbe3 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80004d0:	f000 fedc 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004d4:	4b32      	ldr	r3, [pc, #200]	@ (80005a0 <MX_ADC2_Init+0x19c>)
 80004d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004d8:	230c      	movs	r3, #12
 80004da:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80004dc:	4b31      	ldr	r3, [pc, #196]	@ (80005a4 <MX_ADC2_Init+0x1a0>)
 80004de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	4619      	mov	r1, r3
 80004e4:	482c      	ldr	r0, [pc, #176]	@ (8000598 <MX_ADC2_Init+0x194>)
 80004e6:	f002 fbd3 	bl	8002c90 <HAL_ADC_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80004f0:	f000 fecc 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004f4:	4b2c      	ldr	r3, [pc, #176]	@ (80005a8 <MX_ADC2_Init+0x1a4>)
 80004f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004f8:	2312      	movs	r3, #18
 80004fa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004fc:	237f      	movs	r3, #127	@ 0x7f
 80004fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	4619      	mov	r1, r3
 8000504:	4824      	ldr	r0, [pc, #144]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000506:	f002 fbc3 	bl	8002c90 <HAL_ADC_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 8000510:	f000 febc 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <MX_ADC2_Init+0x1a8>)
 8000516:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000518:	2318      	movs	r3, #24
 800051a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	481d      	ldr	r0, [pc, #116]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000522:	f002 fbb5 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 800052c:	f000 feae 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <MX_ADC2_Init+0x1ac>)
 8000532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000538:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4816      	ldr	r0, [pc, #88]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000540:	f002 fba6 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC2_Init+0x14a>
  {
    Error_Handler();
 800054a:	f000 fe9f 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <MX_ADC2_Init+0x1b0>)
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000552:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000558:	2307      	movs	r3, #7
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000562:	f002 fb95 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC2_Init+0x16c>
  {
    Error_Handler();
 800056c:	f000 fe8e 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VCORE;
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <MX_ADC2_Init+0x1b4>)
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000574:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	@ (8000598 <MX_ADC2_Init+0x194>)
 8000580:	f002 fb86 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 800058a:	f000 fe7f 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000090 	.word	0x20000090
 800059c:	42028100 	.word	0x42028100
 80005a0:	0c900008 	.word	0x0c900008
 80005a4:	407f0000 	.word	0x407f0000
 80005a8:	21800100 	.word	0x21800100
 80005ac:	25b00200 	.word	0x25b00200
 80005b0:	2a000400 	.word	0x2a000400
 80005b4:	43290000 	.word	0x43290000
 80005b8:	475a0000 	.word	0x475a0000

080005bc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0ec      	sub	sp, #432	@ 0x1b0
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80005c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80005ca:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 80005dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80005e0:	226c      	movs	r2, #108	@ 0x6c
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00a fe75 	bl	800b2d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ea:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80005ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80005f2:	4618      	mov	r0, r3
 80005f4:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80005f8:	461a      	mov	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f00a fe6a 	bl	800b2d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000600:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000604:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a8c      	ldr	r2, [pc, #560]	@ (8000840 <HAL_ADC_MspInit+0x284>)
 800060e:	4293      	cmp	r3, r2
 8000610:	f040 8128 	bne.w	8000864 <HAL_ADC_MspInit+0x2a8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000614:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000618:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 800061c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000628:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800062c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fbfe 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 8000646:	f000 fe21 	bl	800128c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800064a:	4b7e      	ldr	r3, [pc, #504]	@ (8000844 <HAL_ADC_MspInit+0x288>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a7c      	ldr	r2, [pc, #496]	@ (8000844 <HAL_ADC_MspInit+0x288>)
 8000652:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000654:	4b7b      	ldr	r3, [pc, #492]	@ (8000844 <HAL_ADC_MspInit+0x288>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d116      	bne.n	800068a <HAL_ADC_MspInit+0xce>
      __HAL_RCC_ADC_CLK_ENABLE();
 800065c:	4b7a      	ldr	r3, [pc, #488]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 800065e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000662:	4a79      	ldr	r2, [pc, #484]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 8000664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000668:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800066c:	4b76      	ldr	r3, [pc, #472]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 800066e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000672:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000676:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800067a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000684:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000688:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b6f      	ldr	r3, [pc, #444]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 800068c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000690:	4a6d      	ldr	r2, [pc, #436]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800069a:	4b6b      	ldr	r3, [pc, #428]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 800069c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a0:	f003 0204 	and.w	r2, r3, #4
 80006a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80006a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80006b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80006b6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b63      	ldr	r3, [pc, #396]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 80006ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006be:	4a62      	ldr	r2, [pc, #392]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000848 <HAL_ADC_MspInit+0x28c>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	f003 0201 	and.w	r2, r3, #1
 80006d2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80006d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80006e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80006e4:	681b      	ldr	r3, [r3, #0]
    PC2     ------> ADC1_INP12
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80006e6:	2314      	movs	r3, #20
 80006e8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ec:	2303      	movs	r3, #3
 80006ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80006fc:	4619      	mov	r1, r3
 80006fe:	4853      	ldr	r0, [pc, #332]	@ (800084c <HAL_ADC_MspInit+0x290>)
 8000700:	f005 faae 	bl	8005c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000704:	230c      	movs	r3, #12
 8000706:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800071a:	4619      	mov	r1, r3
 800071c:	484c      	ldr	r0, [pc, #304]	@ (8000850 <HAL_ADC_MspInit+0x294>)
 800071e:	f005 fa9f 	bl	8005c60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000722:	2321      	movs	r3, #33	@ 0x21
 8000724:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000740:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000744:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800074e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000752:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    NodeConfig.Init.SrcBurstLength = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.Init.DestBurstLength = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8000768:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800076c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    NodeConfig.Init.Mode = DMA_NORMAL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8000788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800078c:	4931      	ldr	r1, [pc, #196]	@ (8000854 <HAL_ADC_MspInit+0x298>)
 800078e:	4618      	mov	r0, r3
 8000790:	f004 f932 	bl	80049f8 <HAL_DMAEx_List_BuildNode>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_ADC_MspInit+0x1e2>
    {
      Error_Handler();
 800079a:	f000 fd77 	bl	800128c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800079e:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <HAL_ADC_MspInit+0x298>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	482d      	ldr	r0, [pc, #180]	@ (8000858 <HAL_ADC_MspInit+0x29c>)
 80007a4:	f004 f93e 	bl	8004a24 <HAL_DMAEx_List_InsertNode>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_ADC_MspInit+0x1f6>
    {
      Error_Handler();
 80007ae:	f000 fd6d 	bl	800128c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80007b2:	4829      	ldr	r0, [pc, #164]	@ (8000858 <HAL_ADC_MspInit+0x29c>)
 80007b4:	f004 f9ff 	bl	8004bb6 <HAL_DMAEx_List_SetCircularMode>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_ADC_MspInit+0x206>
    {
      Error_Handler();
 80007be:	f000 fd65 	bl	800128c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007c4:	4a26      	ldr	r2, [pc, #152]	@ (8000860 <HAL_ADC_MspInit+0x2a4>)
 80007c6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80007c8:	4b24      	ldr	r3, [pc, #144]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007ce:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80007e2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007e6:	2281      	movs	r2, #129	@ 0x81
 80007e8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80007ea:	481c      	ldr	r0, [pc, #112]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007ec:	f003 ffd8 	bl	80047a0 <HAL_DMAEx_List_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_MspInit+0x23e>
    {
      Error_Handler();
 80007f6:	f000 fd49 	bl	800128c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80007fa:	4917      	ldr	r1, [pc, #92]	@ (8000858 <HAL_ADC_MspInit+0x29c>)
 80007fc:	4817      	ldr	r0, [pc, #92]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 80007fe:	f004 fa3b 	bl	8004c78 <HAL_DMAEx_List_LinkQ>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_ADC_MspInit+0x250>
    {
      Error_Handler();
 8000808:	f000 fd40 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 800080c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000810:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a11      	ldr	r2, [pc, #68]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 8000818:	651a      	str	r2, [r3, #80]	@ 0x50
 800081a:	4a10      	ldr	r2, [pc, #64]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 800081c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000820:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000828:	2110      	movs	r1, #16
 800082a:	480c      	ldr	r0, [pc, #48]	@ (800085c <HAL_ADC_MspInit+0x2a0>)
 800082c:	f003 fcf7 	bl	800421e <HAL_DMA_ConfigChannelAttributes>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8119 	beq.w	8000a6a <HAL_ADC_MspInit+0x4ae>
    {
      Error_Handler();
 8000838:	f000 fd28 	bl	800128c <Error_Handler>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800083c:	e115      	b.n	8000a6a <HAL_ADC_MspInit+0x4ae>
 800083e:	bf00      	nop
 8000840:	42028000 	.word	0x42028000
 8000844:	20000224 	.word	0x20000224
 8000848:	44020c00 	.word	0x44020c00
 800084c:	42020800 	.word	0x42020800
 8000850:	42020000 	.word	0x42020000
 8000854:	200000f8 	.word	0x200000f8
 8000858:	2000011c 	.word	0x2000011c
 800085c:	20000134 	.word	0x20000134
 8000860:	40020050 	.word	0x40020050
  else if(adcHandle->Instance==ADC2)
 8000864:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000868:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a80      	ldr	r2, [pc, #512]	@ (8000a74 <HAL_ADC_MspInit+0x4b8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 80f9 	bne.w	8000a6a <HAL_ADC_MspInit+0x4ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000878:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800087c:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8000880:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 800088c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000890:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000894:	2200      	movs	r2, #0
 8000896:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 facc 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_ADC_MspInit+0x2f2>
      Error_Handler();
 80008aa:	f000 fcef 	bl	800128c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80008ae:	4b72      	ldr	r3, [pc, #456]	@ (8000a78 <HAL_ADC_MspInit+0x4bc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a70      	ldr	r2, [pc, #448]	@ (8000a78 <HAL_ADC_MspInit+0x4bc>)
 80008b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000a78 <HAL_ADC_MspInit+0x4bc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d116      	bne.n	80008ee <HAL_ADC_MspInit+0x332>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008c0:	4b6e      	ldr	r3, [pc, #440]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 80008c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c6:	4a6d      	ldr	r2, [pc, #436]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 80008c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008d0:	4b6a      	ldr	r3, [pc, #424]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 80008d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80008da:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80008de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80008e8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80008ec:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b63      	ldr	r3, [pc, #396]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 80008f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f4:	4a61      	ldr	r2, [pc, #388]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008fe:	4b5f      	ldr	r3, [pc, #380]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 8000900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000904:	f003 0204 	and.w	r2, r3, #4
 8000908:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800090c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000916:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800091a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b57      	ldr	r3, [pc, #348]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 800091e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000922:	4a56      	ldr	r2, [pc, #344]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800092c:	4b53      	ldr	r3, [pc, #332]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 800092e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800093a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000944:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8000948:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 800094c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000950:	4a4a      	ldr	r2, [pc, #296]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800095a:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <HAL_ADC_MspInit+0x4c0>)
 800095c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000960:	f003 0202 	and.w	r2, r3, #2
 8000964:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000968:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000972:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8000976:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000978:	2321      	movs	r3, #33	@ 0x21
 800097a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800098e:	4619      	mov	r1, r3
 8000990:	483b      	ldr	r0, [pc, #236]	@ (8000a80 <HAL_ADC_MspInit+0x4c4>)
 8000992:	f005 f965 	bl	8005c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000996:	23c1      	movs	r3, #193	@ 0xc1
 8000998:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099c:	2303      	movs	r3, #3
 800099e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80009ac:	4619      	mov	r1, r3
 80009ae:	4835      	ldr	r0, [pc, #212]	@ (8000a84 <HAL_ADC_MspInit+0x4c8>)
 80009b0:	f005 f956 	bl	8005c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80009ca:	4619      	mov	r1, r3
 80009cc:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <HAL_ADC_MspInit+0x4cc>)
 80009ce:	f005 f947 	bl	8005c60 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a90 <HAL_ADC_MspInit+0x4d4>)
 80009d6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_ADC2;
 80009d8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009f6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a04:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a1a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000a2c:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a2e:	f003 f953 	bl	8003cd8 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_ADC_MspInit+0x480>
      Error_Handler();
 8000a38:	f000 fc28 	bl	800128c <Error_Handler>
    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel1);
 8000a3c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000a40:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a48:	651a      	str	r2, [r3, #80]	@ 0x50
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a4c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000a50:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a58:	2110      	movs	r1, #16
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <HAL_ADC_MspInit+0x4d0>)
 8000a5c:	f003 fbdf 	bl	800421e <HAL_DMA_ConfigChannelAttributes>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_ADC_MspInit+0x4ae>
      Error_Handler();
 8000a66:	f000 fc11 	bl	800128c <Error_Handler>
}
 8000a6a:	bf00      	nop
 8000a6c:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	42028100 	.word	0x42028100
 8000a78:	20000224 	.word	0x20000224
 8000a7c:	44020c00 	.word	0x44020c00
 8000a80:	42020800 	.word	0x42020800
 8000a84:	42020000 	.word	0x42020000
 8000a88:	42020400 	.word	0x42020400
 8000a8c:	200001ac 	.word	0x200001ac
 8000a90:	400200d0 	.word	0x400200d0

08000a94 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	222c      	movs	r2, #44	@ 0x2c
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00a fc17 	bl	800b2d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_DAC1_Init+0x7c>)
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b14 <MX_DAC1_Init+0x80>)
 8000aaa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000aac:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <MX_DAC1_Init+0x7c>)
 8000aae:	f002 ff5a 	bl	8003966 <HAL_DAC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ab8:	f000 fbe8 	bl	800128c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <MX_DAC1_Init+0x7c>)
 8000ae4:	f002 ff62 	bl	80039ac <HAL_DAC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 fbcd 	bl	800128c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2210      	movs	r2, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_DAC1_Init+0x7c>)
 8000afa:	f002 ff57 	bl	80039ac <HAL_DAC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_DAC1_Init+0x74>
  {
    Error_Handler();
 8000b04:	f000 fbc2 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	@ 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000228 	.word	0x20000228
 8000b14:	42028400 	.word	0x42028400

08000b18 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a18      	ldr	r2, [pc, #96]	@ (8000b98 <HAL_DAC_MspInit+0x80>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d129      	bne.n	8000b8e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b40:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_DAC_MspInit+0x84>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b76:	2330      	movs	r3, #48	@ 0x30
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_DAC_MspInit+0x88>)
 8000b8a:	f005 f869 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	42028400 	.word	0x42028400
 8000b9c:	44020c00 	.word	0x44020c00
 8000ba0:	42020000 	.word	0x42020000

08000ba4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000baa:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_FDCAN1_Init+0x88>)
 8000bac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 178;
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000be0:	22b2      	movs	r2, #178	@ 0xb2
 8000be2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 61;
 8000be4:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000be6:	223d      	movs	r2, #61	@ 0x3d
 8000be8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000c04:	221c      	movs	r2, #28
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_FDCAN1_Init+0x84>)
 8000c16:	f004 fcbf 	bl	8005598 <HAL_FDCAN_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c20:	f000 fb34 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000023c 	.word	0x2000023c
 8000c2c:	4000a400 	.word	0x4000a400

08000c30 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0ce      	sub	sp, #312	@ 0x138
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c3e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c54:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2100      	movs	r1, #0
 8000c62:	f00a fb37 	bl	800b2d4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c6a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a4e      	ldr	r2, [pc, #312]	@ (8000dac <HAL_FDCAN_MspInit+0x17c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	f040 8094 	bne.w	8000da2 <HAL_FDCAN_MspInit+0x172>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c7e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0304 	mov.w	r3, #4
 8000c8a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c9a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 f8ca 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_FDCAN_MspInit+0x82>
    {
      Error_Handler();
 8000cae:	f000 faed 	bl	800128c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000cb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cbe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cc8:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cda:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000cde:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf6:	f003 0202 	and.w	r2, r3, #2
 8000cfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d08:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d0c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d14:	4a26      	ldr	r2, [pc, #152]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <HAL_FDCAN_MspInit+0x180>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	f003 0210 	and.w	r2, r3, #16
 8000d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d3a:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PE0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d56:	2309      	movs	r3, #9
 8000d58:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <HAL_FDCAN_MspInit+0x184>)
 8000d64:	f004 ff7c 	bl	8005c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d80:	2309      	movs	r3, #9
 8000d82:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d86:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <HAL_FDCAN_MspInit+0x188>)
 8000d8e:	f004 ff67 	bl	8005c60 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2027      	movs	r0, #39	@ 0x27
 8000d98:	f002 fc42 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d9c:	2027      	movs	r0, #39	@ 0x27
 8000d9e:	f002 fc59 	bl	8003654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	4000a400 	.word	0x4000a400
 8000db0:	44020c00 	.word	0x44020c00
 8000db4:	42020400 	.word	0x42020400
 8000db8:	42021000 	.word	0x42021000

08000dbc <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_GPDMA1_Init+0x4c>)
 8000dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <MX_GPDMA1_Init+0x4c>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_GPDMA1_Init+0x4c>)
 8000dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	201b      	movs	r0, #27
 8000de6:	f002 fc1b 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000dea:	201b      	movs	r0, #27
 8000dec:	f002 fc32 	bl	8003654 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 2, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2102      	movs	r1, #2
 8000df4:	201c      	movs	r0, #28
 8000df6:	f002 fc13 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000dfa:	201c      	movs	r0, #28
 8000dfc:	f002 fc2a 	bl	8003654 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	44020c00 	.word	0x44020c00

08000e0c <MX_GPIO_Init>:
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15(JTDI)   ------> DEBUG_JTDI
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	4b93      	ldr	r3, [pc, #588]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e28:	4a91      	ldr	r2, [pc, #580]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e32:	4b8f      	ldr	r3, [pc, #572]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b8b      	ldr	r3, [pc, #556]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e46:	4a8a      	ldr	r2, [pc, #552]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e50:	4b87      	ldr	r3, [pc, #540]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b84      	ldr	r3, [pc, #528]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e64:	4a82      	ldr	r2, [pc, #520]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e6e:	4b80      	ldr	r3, [pc, #512]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e82:	4a7b      	ldr	r2, [pc, #492]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8c:	4b78      	ldr	r3, [pc, #480]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b75      	ldr	r3, [pc, #468]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea0:	4a73      	ldr	r2, [pc, #460]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eaa:	4b71      	ldr	r3, [pc, #452]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec8:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b66      	ldr	r3, [pc, #408]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000edc:	4a64      	ldr	r2, [pc, #400]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee6:	4b62      	ldr	r3, [pc, #392]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000efa:	4a5d      	ldr	r2, [pc, #372]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f04:	4b5a      	ldr	r3, [pc, #360]	@ (8001070 <MX_GPIO_Init+0x264>)
 8000f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	4857      	ldr	r0, [pc, #348]	@ (8001074 <MX_GPIO_Init+0x268>)
 8000f18:	f005 f800 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000f22:	4855      	ldr	r0, [pc, #340]	@ (8001078 <MX_GPIO_Init+0x26c>)
 8000f24:	f004 fffa 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4853      	ldr	r0, [pc, #332]	@ (800107c <MX_GPIO_Init+0x270>)
 8000f2e:	f004 fff5 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8000f38:	4851      	ldr	r0, [pc, #324]	@ (8001080 <MX_GPIO_Init+0x274>)
 8000f3a:	f004 ffef 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f44:	484f      	ldr	r0, [pc, #316]	@ (8001084 <MX_GPIO_Init+0x278>)
 8000f46:	f004 ffe9 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	484e      	ldr	r0, [pc, #312]	@ (8001088 <MX_GPIO_Init+0x27c>)
 8000f50:	f004 ffe4 	bl	8005f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4843      	ldr	r0, [pc, #268]	@ (8001074 <MX_GPIO_Init+0x268>)
 8000f68:	f004 fe7a 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	483c      	ldr	r0, [pc, #240]	@ (8001074 <MX_GPIO_Init+0x268>)
 8000f84:	f004 fe6c 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f88:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4835      	ldr	r0, [pc, #212]	@ (8001078 <MX_GPIO_Init+0x26c>)
 8000fa2:	f004 fe5d 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482f      	ldr	r0, [pc, #188]	@ (800107c <MX_GPIO_Init+0x270>)
 8000fbe:	f004 fe4f 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000fc2:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4829      	ldr	r0, [pc, #164]	@ (8001080 <MX_GPIO_Init+0x274>)
 8000fdc:	f004 fe40 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4822      	ldr	r0, [pc, #136]	@ (8001084 <MX_GPIO_Init+0x278>)
 8000ffa:	f004 fe31 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481c      	ldr	r0, [pc, #112]	@ (8001088 <MX_GPIO_Init+0x27c>)
 8001016:	f004 fe23 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <MX_GPIO_Init+0x280>)
 8001030:	f004 fe16 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001034:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <MX_GPIO_Init+0x270>)
 800104a:	f004 fe09 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104e:	2301      	movs	r3, #1
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <MX_GPIO_Init+0x278>)
 8001062:	f004 fdfd 	bl	8005c60 <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	@ 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	44020c00 	.word	0x44020c00
 8001074:	42021000 	.word	0x42021000
 8001078:	42021400 	.word	0x42021400
 800107c:	42020800 	.word	0x42020800
 8001080:	42020400 	.word	0x42020400
 8001084:	42020c00 	.word	0x42020c00
 8001088:	42021800 	.word	0x42021800
 800108c:	42020000 	.word	0x42020000

08001090 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001094:	2000      	movs	r0, #0
 8001096:	f004 ff59 	bl	8005f4c <HAL_ICACHE_ConfigAssociativityMode>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80010a0:	f000 f8f4 	bl	800128c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010a4:	f004 ff72 	bl	8005f8c <HAL_ICACHE_Enable>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80010ae:	f000 f8ed 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010ba:	f000 f8b1 	bl	8001220 <MPU_Config>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f001 f9d9 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f827 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f7ff fea1 	bl	8000e0c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80010ca:	f7ff fe77 	bl	8000dbc <MX_GPDMA1_Init>
  MX_ADC1_Init();
 80010ce:	f7ff f8dd 	bl	800028c <MX_ADC1_Init>
  MX_ADC2_Init();
 80010d2:	f7ff f997 	bl	8000404 <MX_ADC2_Init>
  MX_DAC1_Init();
 80010d6:	f7ff fcdd 	bl	8000a94 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80010da:	f7ff fd63 	bl	8000ba4 <MX_FDCAN1_Init>
  MX_ICACHE_Init();
 80010de:	f7ff ffd7 	bl	8001090 <MX_ICACHE_Init>
  MX_TIM1_Init();
 80010e2:	f000 fb79 	bl	80017d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010e6:	f000 fc49 	bl	800197c <MX_TIM3_Init>
  MX_TIM8_Init();
 80010ea:	f000 fd75 	bl	8001bd8 <MX_TIM8_Init>
  MX_TIM13_Init();
 80010ee:	f000 fe5b 	bl	8001da8 <MX_TIM13_Init>
  MX_TIM16_Init();
 80010f2:	f000 fef9 	bl	8001ee8 <MX_TIM16_Init>
  MX_SPI2_Init();
 80010f6:	f000 f8cf 	bl	8001298 <MX_SPI2_Init>
  MX_SPI4_Init();
 80010fa:	f000 f925 	bl	8001348 <MX_SPI4_Init>
  MX_TIM15_Init();
 80010fe:	f000 fe9b 	bl	8001e38 <MX_TIM15_Init>
  MX_TIM4_Init();
 8001102:	f000 fcd3 	bl	8001aac <MX_TIM4_Init>
  MX_TIM14_Init();
 8001106:	f000 fe73 	bl	8001df0 <MX_TIM14_Init>
  MX_TIM17_Init();
 800110a:	f000 ff67 	bl	8001fdc <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110e:	bf00      	nop
 8001110:	e7fd      	b.n	800110e <main+0x58>
	...

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b09c      	sub	sp, #112	@ 0x70
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2250      	movs	r2, #80	@ 0x50
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a f8d6 	bl	800b2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800113a:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <SystemClock_Config+0x100>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4a35      	ldr	r2, [pc, #212]	@ (8001214 <SystemClock_Config+0x100>)
 8001140:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001144:	6113      	str	r3, [r2, #16]
 8001146:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <SystemClock_Config+0x100>)
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001152:	bf00      	nop
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <SystemClock_Config+0x100>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b08      	cmp	r3, #8
 800115e:	d1f9      	bne.n	8001154 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001160:	231a      	movs	r3, #26
 8001162:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2340      	movs	r3, #64	@ 0x40
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001170:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001176:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800117c:	2320      	movs	r3, #32
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8001184:	2301      	movs	r3, #1
 8001186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 800118c:	231e      	movs	r3, #30
 800118e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800119c:	230c      	movs	r3, #12
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 ff0d 	bl	8005fcc <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80011b8:	f000 f868 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	231f      	movs	r3, #31
 80011be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2303      	movs	r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2105      	movs	r1, #5
 80011da:	4618      	mov	r0, r3
 80011dc:	f005 fb2e 	bl	800683c <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80011e6:	f000 f851 	bl	800128c <Error_Handler>
  }

  /** Enables PLL2P clock output
  */
  __HAL_RCC_TIMIC_ENABLE();
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <SystemClock_Config+0x104>)
 80011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f0:	4a09      	ldr	r2, [pc, #36]	@ (8001218 <SystemClock_Config+0x104>)
 80011f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <SystemClock_Config+0x108>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001202:	4a06      	ldr	r2, [pc, #24]	@ (800121c <SystemClock_Config+0x108>)
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	6013      	str	r3, [r2, #0]
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	@ 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	44020800 	.word	0x44020800
 8001218:	44020c00 	.word	0x44020c00
 800121c:	40022000 	.word	0x40022000

08001220 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  MPU_Attributes_InitTypeDef MPU_AttributesInit = {0};
 8001234:	2300      	movs	r3, #0
 8001236:	80bb      	strh	r3, [r7, #4]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001238:	f002 faec 	bl	8003814 <HAL_MPU_Disable>

  /** Initializes and configures the Region 0 and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800123c:	2301      	movs	r3, #1
 800123e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001240:	2300      	movs	r3, #0
 8001242:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.BaseAddress = 0x08FFF800;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MPU_Config+0x64>)
 8001246:	60fb      	str	r3, [r7, #12]
  MPU_InitStruct.LimitAddress = 0x08FFF8FF;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MPU_Config+0x68>)
 800124a:	613b      	str	r3, [r7, #16]
  MPU_InitStruct.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
 800124c:	2300      	movs	r3, #0
 800124e:	753b      	strb	r3, [r7, #20]
  MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 8001250:	2303      	movs	r3, #3
 8001252:	757b      	strb	r3, [r7, #21]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001254:	2301      	movs	r3, #1
 8001256:	75bb      	strb	r3, [r7, #22]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f002 faf7 	bl	8003854 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Attribute 0 and the memory to be protected
  */
  MPU_AttributesInit.Number = MPU_ATTRIBUTES_NUMBER0;
 8001266:	2300      	movs	r3, #0
 8001268:	713b      	strb	r3, [r7, #4]
  MPU_AttributesInit.Attributes = INNER_OUTER(MPU_NOT_CACHEABLE);
 800126a:	2344      	movs	r3, #68	@ 0x44
 800126c:	717b      	strb	r3, [r7, #5]

  HAL_MPU_ConfigMemoryAttributes(&MPU_AttributesInit);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fafd 	bl	8003870 <HAL_MPU_ConfigMemoryAttributes>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001276:	2004      	movs	r0, #4
 8001278:	f002 faaa 	bl	80037d0 <HAL_MPU_Enable>

}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08fff800 	.word	0x08fff800
 8001288:	08fff8ff 	.word	0x08fff8ff

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <MX_SPI2_Init+0xa8>)
 800129e:	4a29      	ldr	r2, [pc, #164]	@ (8001344 <MX_SPI2_Init+0xac>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012b2:	220f      	movs	r2, #15
 80012b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b6:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012e6:	2207      	movs	r2, #7
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001300:	2200      	movs	r2, #0
 8001302:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <MX_SPI2_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_ENABLE;
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001318:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800131c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI2_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_SPI2_Init+0xa8>)
 800132c:	f007 fe40 	bl	8008fb0 <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001336:	f7ff ffa9 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002a0 	.word	0x200002a0
 8001344:	40003800 	.word	0x40003800

08001348 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800134e:	4a28      	ldr	r2, [pc, #160]	@ (80013f0 <MX_SPI4_Init+0xa8>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001354:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001358:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001362:	2203      	movs	r2, #3
 8001364:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001374:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001378:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x7;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_SPI4_Init+0xa4>)
 8001394:	2207      	movs	r2, #7
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_SPI4_Init+0xa4>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi4.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi4.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_SPI4_Init+0xa4>)
 80013d8:	f007 fdea 	bl	8008fb0 <HAL_SPI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80013e2:	f7ff ff53 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000330 	.word	0x20000330
 80013f0:	40014c00 	.word	0x40014c00

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ce      	sub	sp, #312	@ 0x138
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001402:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001418:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800141c:	4618      	mov	r0, r3
 800141e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001422:	461a      	mov	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	f009 ff55 	bl	800b2d4 <memset>
  if(spiHandle->Instance==SPI2)
 800142a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800142e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a68      	ldr	r2, [pc, #416]	@ (80015d8 <HAL_SPI_MspInit+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d15f      	bne.n	80014fc <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800143c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001440:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 8001450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001454:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001458:	2200      	movs	r2, #0
 800145a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fcea 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 800146e:	f7ff ff0d 	bl	800128c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001472:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001478:	4a58      	ldr	r2, [pc, #352]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001482:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001484:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001488:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800148c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001490:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800149a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800149e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b4e      	ldr	r3, [pc, #312]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a6:	4a4d      	ldr	r2, [pc, #308]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b0:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	f003 0202 	and.w	r2, r3, #2
 80014ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014cc:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e8:	2305      	movs	r3, #5
 80014ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80014f2:	4619      	mov	r1, r3
 80014f4:	483a      	ldr	r0, [pc, #232]	@ (80015e0 <HAL_SPI_MspInit+0x1ec>)
 80014f6:	f004 fbb3 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80014fa:	e067      	b.n	80015cc <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI4)
 80014fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001500:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a36      	ldr	r2, [pc, #216]	@ (80015e4 <HAL_SPI_MspInit+0x1f0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d15e      	bne.n	80015cc <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800150e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001512:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001516:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi4ClockSelection = RCC_SPI4CLKSOURCE_PCLK2;
 8001522:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001526:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800152a:	2200      	movs	r2, #0
 800152c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fc81 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8001540:	f7ff fea4 	bl	800128c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800154a:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 800154c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001550:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800155a:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800155e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001562:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800156c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001570:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_SPI_MspInit+0x1e8>)
 8001584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001588:	f003 0210 	and.w	r2, r3, #16
 800158c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001590:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800159a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800159e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_13;
 80015a0:	f242 0344 	movw	r3, #8260	@ 0x2044
 80015a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ba:	2305      	movs	r3, #5
 80015bc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80015c4:	4619      	mov	r1, r3
 80015c6:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <HAL_SPI_MspInit+0x1f4>)
 80015c8:	f004 fb4a 	bl	8005c60 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40003800 	.word	0x40003800
 80015dc:	44020c00 	.word	0x44020c00
 80015e0:	42020400 	.word	0x42020400
 80015e4:	40014c00 	.word	0x40014c00
 80015e8:	42021000 	.word	0x42021000

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2102      	movs	r1, #2
 80015f4:	f06f 0004 	mvn.w	r0, #4
 80015f8:	f002 f812 	bl	8003620 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2102      	movs	r1, #2
 8001600:	f06f 0003 	mvn.w	r0, #3
 8001604:	f002 f80c 	bl	8003620 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	f06f 0001 	mvn.w	r0, #1
 8001610:	f002 f806 	bl	8003620 <HAL_NVIC_SetPriority>

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001614:	f004 fcca 	bl	8005fac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <MemManage_Handler+0x4>

08001634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <UsageFault_Handler+0x4>

08001644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001672:	f000 ff9d 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001682:	f002 fc6b 	bl	8003f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000134 	.word	0x20000134

08001690 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001696:	f002 fc61 	bl	8003f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001ac 	.word	0x200001ac

080016a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80016aa:	f004 f8cf 	bl	800584c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000023c 	.word	0x2000023c

080016b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <TIM1_UP_IRQHandler+0x10>)
 80016be:	f007 ff72 	bl	80095a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003c0 	.word	0x200003c0

080016cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <TIM17_IRQHandler+0x10>)
 80016d2:	f007 ff68 	bl	80095a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000620 	.word	0x20000620

080016e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e6:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <SystemInit+0xdc>)
 80016e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ec:	4a33      	ldr	r2, [pc, #204]	@ (80017bc <SystemInit+0xdc>)
 80016ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <SystemInit+0xe0>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <SystemInit+0xe0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <SystemInit+0xe0>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <SystemInit+0xe0>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	492c      	ldr	r1, [pc, #176]	@ (80017c0 <SystemInit+0xe0>)
 800170e:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <SystemInit+0xe4>)
 8001710:	4013      	ands	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001714:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <SystemInit+0xe0>)
 8001716:	2200      	movs	r2, #0
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <SystemInit+0xe0>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <SystemInit+0xe0>)
 8001722:	2200      	movs	r2, #0
 8001724:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <SystemInit+0xe0>)
 8001728:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <SystemInit+0xe8>)
 800172a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <SystemInit+0xe0>)
 800172e:	2200      	movs	r2, #0
 8001730:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <SystemInit+0xe0>)
 8001734:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <SystemInit+0xe8>)
 8001736:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <SystemInit+0xe0>)
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <SystemInit+0xe0>)
 8001740:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <SystemInit+0xe8>)
 8001742:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <SystemInit+0xe0>)
 8001746:	2200      	movs	r2, #0
 8001748:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <SystemInit+0xe0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <SystemInit+0xe0>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001754:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <SystemInit+0xe0>)
 8001758:	2200      	movs	r2, #0
 800175a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <SystemInit+0xdc>)
 800175e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001762:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <SystemInit+0xec>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800176c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001774:	d003      	beq.n	800177e <SystemInit+0x9e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800177c:	d117      	bne.n	80017ae <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <SystemInit+0xec>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <SystemInit+0xec>)
 800178c:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <SystemInit+0xf0>)
 800178e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <SystemInit+0xec>)
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <SystemInit+0xf4>)
 8001794:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <SystemInit+0xec>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <SystemInit+0xec>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <SystemInit+0xec>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <SystemInit+0xec>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	61d3      	str	r3, [r2, #28]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	44020c00 	.word	0x44020c00
 80017c4:	eae2eae3 	.word	0xeae2eae3
 80017c8:	01010280 	.word	0x01010280
 80017cc:	40022000 	.word	0x40022000
 80017d0:	08192a3b 	.word	0x08192a3b
 80017d4:	4c5d6e7f 	.word	0x4c5d6e7f

080017d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09c      	sub	sp, #112	@ 0x70
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2234      	movs	r2, #52	@ 0x34
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f009 fd5e 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001818:	4b56      	ldr	r3, [pc, #344]	@ (8001974 <MX_TIM1_Init+0x19c>)
 800181a:	4a57      	ldr	r2, [pc, #348]	@ (8001978 <MX_TIM1_Init+0x1a0>)
 800181c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800181e:	4b55      	ldr	r3, [pc, #340]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 800182a:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <MX_TIM1_Init+0x19c>)
 800182c:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001830:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 20;
 8001838:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <MX_TIM1_Init+0x19c>)
 800183a:	2214      	movs	r2, #20
 800183c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b4d      	ldr	r3, [pc, #308]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001844:	484b      	ldr	r0, [pc, #300]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001846:	f007 fd3e 	bl	80092c6 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001850:	f7ff fd1c 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001858:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800185a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800185e:	4619      	mov	r1, r3
 8001860:	4844      	ldr	r0, [pc, #272]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001862:	f008 fa19 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800186c:	f7ff fd0e 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001870:	4840      	ldr	r0, [pc, #256]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001872:	f007 fd7f 	bl	8009374 <HAL_TIM_OC_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800187c:	f7ff fd06 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001880:	483c      	ldr	r0, [pc, #240]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001882:	f007 fdd8 	bl	8009436 <HAL_TIM_PWM_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800188c:	f7ff fcfe 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001890:	2340      	movs	r3, #64	@ 0x40
 8001892:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001894:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001898:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018a2:	4619      	mov	r1, r3
 80018a4:	4833      	ldr	r0, [pc, #204]	@ (8001974 <MX_TIM1_Init+0x19c>)
 80018a6:	f009 fb65 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80018b0:	f7ff fcec 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80018b4:	2330      	movs	r3, #48	@ 0x30
 80018b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 791;
 80018b8:	f240 3317 	movw	r3, #791	@ 0x317
 80018bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4826      	ldr	r0, [pc, #152]	@ (8001974 <MX_TIM1_Init+0x19c>)
 80018dc:	f007 ffb2 	bl	8009844 <HAL_TIM_OC_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80018e6:	f7ff fcd1 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ea:	2360      	movs	r3, #96	@ 0x60
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018f6:	220c      	movs	r2, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	481e      	ldr	r0, [pc, #120]	@ (8001974 <MX_TIM1_Init+0x19c>)
 80018fc:	f008 f8b8 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001906:	f7ff fcc1 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_TIM1_Init+0x19c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001918:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001958:	f009 fbdc 	bl	800b114 <HAL_TIMEx_ConfigBreakDeadTime>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8001962:	f7ff fc93 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <MX_TIM1_Init+0x19c>)
 8001968:	f000 fc7a 	bl	8002260 <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3770      	adds	r7, #112	@ 0x70
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200003c0 	.word	0x200003c0
 8001978:	40012c00 	.word	0x40012c00

0800197c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	@ 0x50
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019be:	4b39      	ldr	r3, [pc, #228]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019c0:	4a39      	ldr	r2, [pc, #228]	@ (8001aa8 <MX_TIM3_Init+0x12c>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019c4:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 80019d0:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019d2:	f640 125f 	movw	r2, #2399	@ 0x95f
 80019d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e4:	482f      	ldr	r0, [pc, #188]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 80019e6:	f007 fc6e 	bl	80092c6 <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019f0:	f7ff fc4c 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019fe:	4619      	mov	r1, r3
 8001a00:	4828      	ldr	r0, [pc, #160]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a02:	f008 f949 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a0c:	f7ff fc3e 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a10:	4824      	ldr	r0, [pc, #144]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a12:	f007 fd10 	bl	8009436 <HAL_TIM_PWM_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001a1c:	f7ff fc36 	bl	800128c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a20:	2304      	movs	r3, #4
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 8001a24:	f04f 1310 	mov.w	r3, #1048592	@ 0x100010
 8001a28:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a32:	f008 fa4f 	bl	8009ed4 <HAL_TIM_SlaveConfigSynchro>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001a3c:	f7ff fc26 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a50:	f009 fa90 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001a5a:	f7ff fc17 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	@ 0x60
 8001a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2204      	movs	r2, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a76:	f007 fffb 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001a80:	f7ff fc04 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a92:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a94:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <MX_TIM3_Init+0x128>)
 8001a96:	f000 fbe3 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	@ 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000040c 	.word	0x2000040c
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	@ 0x50
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aee:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001af0:	4a38      	ldr	r2, [pc, #224]	@ (8001bd4 <MX_TIM4_Init+0x128>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af4:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b35      	ldr	r3, [pc, #212]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 8001b00:	4b33      	ldr	r3, [pc, #204]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b02:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b30      	ldr	r3, [pc, #192]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b14:	482e      	ldr	r0, [pc, #184]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b16:	f007 fbd6 	bl	80092c6 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b20:	f7ff fbb4 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4827      	ldr	r0, [pc, #156]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b32:	f008 f8b1 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b3c:	f7ff fba6 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b40:	4823      	ldr	r0, [pc, #140]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b42:	f007 fc78 	bl	8009436 <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8001b4c:	f7ff fb9e 	bl	800128c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b50:	2306      	movs	r3, #6
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481c      	ldr	r0, [pc, #112]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b60:	f008 f9b8 	bl	8009ed4 <HAL_TIM_SlaveConfigSynchro>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001b6a:	f7ff fb8f 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4814      	ldr	r0, [pc, #80]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001b7e:	f009 f9f9 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001b88:	f7ff fb80 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8c:	2360      	movs	r3, #96	@ 0x60
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001ba4:	f007 ff64 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001bae:	f7ff fb6d 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc0:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bc2:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <MX_TIM4_Init+0x124>)
 8001bc4:	f000 fb4c 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001bc8:	bf00      	nop
 8001bca:	3750      	adds	r7, #80	@ 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000458 	.word	0x20000458
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0a0      	sub	sp, #128	@ 0x80
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	2234      	movs	r2, #52	@ 0x34
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f009 fb56 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c28:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001da4 <MX_TIM8_Init+0x1cc>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2399;
 8001c3a:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c3c:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001c40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b57      	ldr	r3, [pc, #348]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c48:	4b55      	ldr	r3, [pc, #340]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b54      	ldr	r3, [pc, #336]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c54:	4852      	ldr	r0, [pc, #328]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c56:	f007 fb36 	bl	80092c6 <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f7ff fb14 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c68:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001c6e:	4619      	mov	r1, r3
 8001c70:	484b      	ldr	r0, [pc, #300]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c72:	f008 f811 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001c7c:	f7ff fb06 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001c80:	4847      	ldr	r0, [pc, #284]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c82:	f007 fb77 	bl	8009374 <HAL_TIM_OC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001c8c:	f7ff fafe 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c90:	4843      	ldr	r0, [pc, #268]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001c92:	f007 fbd0 	bl	8009436 <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001c9c:	f7ff faf6 	bl	800128c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001ca8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cac:	4619      	mov	r1, r3
 8001cae:	483c      	ldr	r0, [pc, #240]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001cb0:	f008 f910 	bl	8009ed4 <HAL_TIM_SlaveConfigSynchro>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001cba:	f7ff fae7 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001cbe:	2340      	movs	r3, #64	@ 0x40
 8001cc0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4833      	ldr	r0, [pc, #204]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001cd2:	f009 f94f 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001cdc:	f7ff fad6 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001ce0:	2330      	movs	r3, #48	@ 0x30
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 791;
 8001ce4:	f240 3317 	movw	r3, #791	@ 0x317
 8001ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4826      	ldr	r0, [pc, #152]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d08:	f007 fd9c 	bl	8009844 <HAL_TIM_OC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001d12:	f7ff fabb 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d16:	2360      	movs	r3, #96	@ 0x60
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d22:	220c      	movs	r2, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	481e      	ldr	r0, [pc, #120]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d28:	f007 fea2 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM8_Init+0x15e>
  {
    Error_Handler();
 8001d32:	f7ff faab 	bl	800128c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_4);
 8001d36:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d44:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d84:	f009 f9c6 	bl	800b114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0x1ba>
  {
    Error_Handler();
 8001d8e:	f7ff fa7d 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d92:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <MX_TIM8_Init+0x1c8>)
 8001d94:	f000 fa64 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001d98:	bf00      	nop
 8001d9a:	3780      	adds	r7, #128	@ 0x80
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200004a4 	.word	0x200004a4
 8001da4:	40013400 	.word	0x40013400

08001da8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dae:	4a0f      	ldr	r2, [pc, #60]	@ (8001dec <MX_TIM13_Init+0x44>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_TIM13_Init+0x40>)
 8001dd4:	f007 fa77 	bl	80092c6 <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001dde:	f7ff fa55 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200004f0 	.word	0x200004f0
 8001dec:	40001c00 	.word	0x40001c00

08001df0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <MX_TIM14_Init+0x44>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e1c:	f007 fa53 	bl	80092c6 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001e26:	f7ff fa31 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000053c 	.word	0x2000053c
 8001e34:	40002000 	.word	0x40002000

08001e38 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e58:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <MX_TIM15_Init+0xac>)
 8001e5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001e82:	4817      	ldr	r0, [pc, #92]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001e84:	f007 fb38 	bl	80094f8 <HAL_TIM_IC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001e8e:	f7ff f9fd 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480f      	ldr	r0, [pc, #60]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001ea2:	f009 f867 	bl	800af74 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001eac:	f7ff f9ee 	bl	800128c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <MX_TIM15_Init+0xa8>)
 8001ec8:	f007 fd36 	bl	8009938 <HAL_TIM_IC_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8001ed2:	f7ff f9db 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000588 	.word	0x20000588
 8001ee4:	40014000 	.word	0x40014000

08001ee8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b094      	sub	sp, #80	@ 0x50
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f02:	463b      	mov	r3, r7
 8001f04:	2234      	movs	r2, #52	@ 0x34
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f009 f9e3 	bl	800b2d4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f10:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <MX_TIM16_Init+0xf0>)
 8001f12:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f14:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001f20:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f26:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f2e:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f3a:	4826      	ldr	r0, [pc, #152]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f3c:	f007 f9c3 	bl	80092c6 <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001f46:	f7ff f9a1 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001f4a:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f4c:	f007 fa73 	bl	8009436 <HAL_TIM_PWM_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001f56:	f7ff f999 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	@ 0x60
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4815      	ldr	r0, [pc, #84]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001f80:	f007 fd76 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001f8a:	f7ff f97f 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001fb6:	f009 f8ad 	bl	800b114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001fc0:	f7ff f964 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <MX_TIM16_Init+0xec>)
 8001fc6:	f000 f94b 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3750      	adds	r7, #80	@ 0x50
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200005d4 	.word	0x200005d4
 8001fd8:	40014400 	.word	0x40014400

08001fdc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <MX_TIM17_Init+0x44>)
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <MX_TIM17_Init+0x48>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <MX_TIM17_Init+0x44>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_TIM17_Init+0x44>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 12500;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_TIM17_Init+0x44>)
 8001ff4:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001ff8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_TIM17_Init+0x44>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <MX_TIM17_Init+0x44>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_TIM17_Init+0x44>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	@ (8002020 <MX_TIM17_Init+0x44>)
 800200e:	f007 f95a 	bl	80092c6 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002018:	f7ff f938 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000620 	.word	0x20000620
 8002024:	40014800 	.word	0x40014800

08002028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5c      	ldr	r2, [pc, #368]	@ (80021a8 <HAL_TIM_Base_MspInit+0x180>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d117      	bne.n	800206a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203a:	4b5c      	ldr	r3, [pc, #368]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800203c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002040:	4a5a      	ldr	r2, [pc, #360]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002042:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002046:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800204a:	4b58      	ldr	r3, [pc, #352]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800204c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2102      	movs	r1, #2
 800205c:	202a      	movs	r0, #42	@ 0x2a
 800205e:	f001 fadf 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002062:	202a      	movs	r0, #42	@ 0x2a
 8002064:	f001 faf6 	bl	8003654 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002068:	e099      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_TIM_Base_MspInit+0x188>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10f      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002074:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800207a:	4a4c      	ldr	r2, [pc, #304]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002084:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002086:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6a3b      	ldr	r3, [r7, #32]
}
 8002092:	e084      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a46      	ldr	r2, [pc, #280]	@ (80021b4 <HAL_TIM_Base_MspInit+0x18c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10f      	bne.n	80020be <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209e:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020a4:	4a41      	ldr	r2, [pc, #260]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020ae:	4b3f      	ldr	r3, [pc, #252]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fb      	ldr	r3, [r7, #28]
}
 80020bc:	e06f      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3d      	ldr	r2, [pc, #244]	@ (80021b8 <HAL_TIM_Base_MspInit+0x190>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d10f      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020c8:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020ce:	4a37      	ldr	r2, [pc, #220]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	e05a      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM13)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_TIM_Base_MspInit+0x194>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10f      	bne.n	8002112 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020f8:	4a2c      	ldr	r2, [pc, #176]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 80020fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002102:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
}
 8002110:	e045      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2a      	ldr	r2, [pc, #168]	@ (80021c0 <HAL_TIM_Base_MspInit+0x198>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d10f      	bne.n	800213c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800211e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002122:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800212e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
}
 800213a:	e030      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <HAL_TIM_Base_MspInit+0x19c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10f      	bne.n	8002166 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002148:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002152:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	e01b      	b.n	800219e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_TIM_Base_MspInit+0x1a0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d116      	bne.n	800219e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002176:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_TIM_Base_MspInit+0x184>)
 8002182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2101      	movs	r1, #1
 8002192:	2049      	movs	r0, #73	@ 0x49
 8002194:	f001 fa44 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002198:	2049      	movs	r0, #73	@ 0x49
 800219a:	f001 fa5b 	bl	8003654 <HAL_NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	@ 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	44020c00 	.word	0x44020c00
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40013400 	.word	0x40013400
 80021bc:	40001c00 	.word	0x40001c00
 80021c0:	40002000 	.word	0x40002000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800

080021cc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002254 <HAL_TIM_IC_MspInit+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d12d      	bne.n	800224a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 80021f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021f4:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 8002200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 800220e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_TIM_IC_MspInit+0x8c>)
 800221e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800222a:	2320      	movs	r3, #32
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800223a:	2304      	movs	r3, #4
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	@ (800225c <HAL_TIM_IC_MspInit+0x90>)
 8002246:	f003 fd0b 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	@ 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40014000 	.word	0x40014000
 8002258:	44020c00 	.word	0x44020c00
 800225c:	42021000 	.word	0x42021000

08002260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	@ 0x30
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5e      	ldr	r2, [pc, #376]	@ (80023f8 <HAL_TIM_MspPostInit+0x198>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d120      	bne.n	80022c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b5e      	ldr	r3, [pc, #376]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	4a5c      	ldr	r2, [pc, #368]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002292:	4b5a      	ldr	r3, [pc, #360]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	4850      	ldr	r0, [pc, #320]	@ (8002400 <HAL_TIM_MspPostInit+0x1a0>)
 80022be:	f003 fccf 	bl	8005c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80022c2:	e094      	b.n	80023ee <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002404 <HAL_TIM_MspPostInit+0x1a4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d11f      	bne.n	800230e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	4b4b      	ldr	r3, [pc, #300]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022d4:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80022e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4840      	ldr	r0, [pc, #256]	@ (8002408 <HAL_TIM_MspPostInit+0x1a8>)
 8002308:	f003 fcaa 	bl	8005c60 <HAL_GPIO_Init>
}
 800230c:	e06f      	b.n	80023ee <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3e      	ldr	r2, [pc, #248]	@ (800240c <HAL_TIM_MspPostInit+0x1ac>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d120      	bne.n	800235a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002318:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 800231a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231e:	4a37      	ldr	r2, [pc, #220]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002328:	4b34      	ldr	r3, [pc, #208]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 800232a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002348:	2302      	movs	r3, #2
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	482f      	ldr	r0, [pc, #188]	@ (8002410 <HAL_TIM_MspPostInit+0x1b0>)
 8002354:	f003 fc84 	bl	8005c60 <HAL_GPIO_Init>
}
 8002358:	e049      	b.n	80023ee <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM8)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <HAL_TIM_MspPostInit+0x1b4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d120      	bne.n	80023a6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002364:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 8002366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800236a:	4a24      	ldr	r2, [pc, #144]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 8002376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002394:	2303      	movs	r3, #3
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	481a      	ldr	r0, [pc, #104]	@ (8002408 <HAL_TIM_MspPostInit+0x1a8>)
 80023a0:	f003 fc5e 	bl	8005c60 <HAL_GPIO_Init>
}
 80023a4:	e023      	b.n	80023ee <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM16)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002418 <HAL_TIM_MspPostInit+0x1b8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d11e      	bne.n	80023ee <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b6:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_TIM_MspPostInit+0x19c>)
 80023c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ce:	2340      	movs	r3, #64	@ 0x40
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80023de:	2301      	movs	r3, #1
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	@ (800241c <HAL_TIM_MspPostInit+0x1bc>)
 80023ea:	f003 fc39 	bl	8005c60 <HAL_GPIO_Init>
}
 80023ee:	bf00      	nop
 80023f0:	3730      	adds	r7, #48	@ 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	44020c00 	.word	0x44020c00
 8002400:	42020000 	.word	0x42020000
 8002404:	40000400 	.word	0x40000400
 8002408:	42020800 	.word	0x42020800
 800240c:	40000800 	.word	0x40000800
 8002410:	42020c00 	.word	0x42020c00
 8002414:	40013400 	.word	0x40013400
 8002418:	40014400 	.word	0x40014400
 800241c:	42021400 	.word	0x42021400

08002420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002420:	480d      	ldr	r0, [pc, #52]	@ (8002458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002424:	f7ff f95c 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <LoopForever+0x6>)
  ldr r1, =_edata
 800242a:	490d      	ldr	r1, [pc, #52]	@ (8002460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800242c:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <LoopForever+0xe>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002440:	4c0a      	ldr	r4, [pc, #40]	@ (800246c <LoopForever+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800244e:	f008 ff49 	bl	800b2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002452:	f7fe fe30 	bl	80010b6 <main>

08002456 <LoopForever>:

LoopForever:
    b LoopForever
 8002456:	e7fe      	b.n	8002456 <LoopForever>
  ldr   r0, =_estack
 8002458:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002464:	0800b35c 	.word	0x0800b35c
  ldr r2, =_sbss
 8002468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800246c:	20000670 	.word	0x20000670

08002470 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC1_IRQHandler>
	...

08002474 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f001 f8c6 	bl	800360a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800247e:	f004 fb95 	bl	8006bac <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_Init+0x44>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	490b      	ldr	r1, [pc, #44]	@ (80024bc <HAL_Init+0x48>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_Init+0x4c>)
 8002496:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002498:	2004      	movs	r0, #4
 800249a:	f001 f90b 	bl	80036b4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249e:	200f      	movs	r0, #15
 80024a0:	f000 f810 	bl	80024c4 <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e002      	b.n	80024b4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ae:	f7ff f89d 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	44020c00 	.word	0x44020c00
 80024bc:	0800b344 	.word	0x0800b344
 80024c0:	20000000 	.word	0x20000000

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80024d0:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <HAL_InitTick+0xdc>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e05c      	b.n	8002596 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_InitTick+0xe0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d10c      	bne.n	8002502 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <HAL_InitTick+0xe4>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <HAL_InitTick+0xdc>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e037      	b.n	8002572 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002502:	f001 f92f 	bl	8003764 <HAL_SYSTICK_GetCLKSourceConfig>
 8002506:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d023      	beq.n	8002556 <HAL_InitTick+0x92>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d82d      	bhi.n	8002570 <HAL_InitTick+0xac>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_InitTick+0x5e>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d00d      	beq.n	800253c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002520:	e026      	b.n	8002570 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002522:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_InitTick+0xe4>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_InitTick+0xdc>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002530:	fbb3 f3f1 	udiv	r3, r3, r1
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	60fb      	str	r3, [r7, #12]
        break;
 800253a:	e01a      	b.n	8002572 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_InitTick+0xdc>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002546:	fbb3 f3f2 	udiv	r3, r3, r2
 800254a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	60fb      	str	r3, [r7, #12]
        break;
 8002554:	e00d      	b.n	8002572 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_InitTick+0xdc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002560:	fbb3 f3f2 	udiv	r3, r3, r2
 8002564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	60fb      	str	r3, [r7, #12]
        break;
 800256e:	e000      	b.n	8002572 <HAL_InitTick+0xae>
        break;
 8002570:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f001 f87c 	bl	8003670 <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e009      	b.n	8002596 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002582:	2200      	movs	r2, #0
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800258a:	f001 f849 	bl	8003620 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_InitTick+0xe8>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008
 80025a4:	e000e010 	.word	0xe000e010
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008
 80025d4:	2000066c 	.word	0x2000066c

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000066c 	.word	0x2000066c

080025f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002686:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800268a:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	42028000 	.word	0x42028000

080026a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3360      	adds	r3, #96	@ 0x60
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <LL_ADC_SetOffset+0x44>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	03fff000 	.word	0x03fff000

080026ec <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3360      	adds	r3, #96	@ 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3360      	adds	r3, #96	@ 0x60
 8002728:	461a      	mov	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3360      	adds	r3, #96	@ 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3360      	adds	r3, #96	@ 0x60
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	615a      	str	r2, [r3, #20]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3330      	adds	r3, #48	@ 0x30
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	4413      	add	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	211f      	movs	r1, #31
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	f003 011f 	and.w	r1, r3, #31
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	431a      	orrs	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3314      	adds	r3, #20
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0e5b      	lsrs	r3, r3, #25
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0d1b      	lsrs	r3, r3, #20
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2107      	movs	r1, #7
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	401a      	ands	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0318 	and.w	r3, r3, #24
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028b4:	40d9      	lsrs	r1, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	400b      	ands	r3, r1
 80028ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	000fffff 	.word	0x000fffff

080028d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6093      	str	r3, [r2, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800290c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002910:	d101      	bne.n	8002916 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002938:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002960:	d101      	bne.n	8002966 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <LL_ADC_IsEnabled+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_ADC_IsEnabled+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d101      	bne.n	80029b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d101      	bne.n	80029d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e136      	b.n	8002c70 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fdd3 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff67 	bl	80028fc <LL_ADC_IsDeepPowerDownEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff4d 	bl	80028d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff82 	bl	800294c <LL_ADC_IsInternalRegulatorEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff66 	bl	8002924 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a58:	4b87      	ldr	r3, [pc, #540]	@ (8002c78 <HAL_ADC_Init+0x290>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	4a87      	ldr	r2, [pc, #540]	@ (8002c7c <HAL_ADC_Init+0x294>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff64 	bl	800294c <LL_ADC_IsInternalRegulatorEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff75 	bl	800299a <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80cf 	bne.w	8002c5e <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 80cb 	bne.w	8002c5e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ad0:	f043 0202 	orr.w	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff49 	bl	8002974 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae8:	4865      	ldr	r0, [pc, #404]	@ (8002c80 <HAL_ADC_Init+0x298>)
 8002aea:	f7ff ff43 	bl	8002974 <LL_ADC_IsEnabled>
 8002aee:	4604      	mov	r4, r0
 8002af0:	4864      	ldr	r0, [pc, #400]	@ (8002c84 <HAL_ADC_Init+0x29c>)
 8002af2:	f7ff ff3f 	bl	8002974 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4323      	orrs	r3, r4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4860      	ldr	r0, [pc, #384]	@ (8002c88 <HAL_ADC_Init+0x2a0>)
 8002b06:	f7ff fd73 	bl	80025f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7e5b      	ldrb	r3, [r3, #25]
 8002b0e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b14:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b1a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b20:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b28:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	045b      	lsls	r3, r3, #17
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4b48      	ldr	r3, [pc, #288]	@ (8002c8c <HAL_ADC_Init+0x2a4>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff15 	bl	80029c0 <LL_ADC_INJ_IsConversionOngoing>
 8002b96:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d13d      	bne.n	8002c1a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d13a      	bne.n	8002c1a <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7e1b      	ldrb	r3, [r3, #24]
 8002ba8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bb0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bc0:	f023 0302 	bic.w	r3, r3, #2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d118      	bne.n	8002c0a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	611a      	str	r2, [r3, #16]
 8002c08:	e007      	b.n	8002c1a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10c      	bne.n	8002c3c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	f023 010f 	bic.w	r1, r3, #15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c3a:	e007      	b.n	8002c4c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020f 	bic.w	r2, r2, #15
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c5c:	e007      	b.n	8002c6e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3724      	adds	r7, #36	@ 0x24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	053e2d63 	.word	0x053e2d63
 8002c80:	42028000 	.word	0x42028000
 8002c84:	42028100 	.word	0x42028100
 8002c88:	42028300 	.word	0x42028300
 8002c8c:	fff04007 	.word	0xfff04007

08002c90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0b6      	sub	sp, #216	@ 0xd8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x22>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e3e6      	b.n	8003480 <HAL_ADC_ConfigChannel+0x7f0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fe6b 	bl	800299a <LL_ADC_REG_IsConversionOngoing>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 83cb 	bne.w	8003462 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d009      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4ab0      	ldr	r2, [pc, #704]	@ (8002f9c <HAL_ADC_ConfigChannel+0x30c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x62>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4aaf      	ldr	r2, [pc, #700]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x310>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d104      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fcc5 	bl	800267c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fd6e 	bl	80027e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fe46 	bl	800299a <LL_ADC_REG_IsConversionOngoing>
 8002d0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fe52 	bl	80029c0 <LL_ADC_INJ_IsConversionOngoing>
 8002d1c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 81dd 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 81d8 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d3c:	d10f      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7ff fd75 	bl	8002838 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fd2f 	bl	80027ba <LL_ADC_SetSamplingTimeCommonConfig>
 8002d5c:	e00e      	b.n	8002d7c <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7ff fd64 	bl	8002838 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fd1f 	bl	80027ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d022      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6919      	ldr	r1, [r3, #16]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dae:	f7ff fc79 	bl	80026a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f7ff fcc5 	bl	800274e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x14a>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x14c>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f7ff fcd1 	bl	8002784 <LL_ADC_SetOffsetSaturation>
 8002de2:	e17f      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fc7e 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x180>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fc73 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	e01e      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1be>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fc68 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8002e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e004      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8002e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x1d6>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	e018      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x208>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8002e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fc37 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fc1b 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x246>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fc10 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	e01e      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x284>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fc05 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e004      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8002f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x29c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	e018      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x2ce>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e004      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8002f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fbd4 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fbb8 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x314>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fbad 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	e022      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x352>
 8002f9c:	04300002 	.word	0x04300002
 8002fa0:	407f0000 	.word	0x407f0000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fb9e 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e004      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x36a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e016      	b.n	8003028 <HAL_ADC_ConfigChannel+0x398>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800300c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 800301a:	2320      	movs	r3, #32
 800301c:	e004      	b.n	8003028 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 800301e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fb6f 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2103      	movs	r1, #3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb53 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x3d6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2103      	movs	r1, #3
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fb48 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	e017      	b.n	8003096 <HAL_ADC_ConfigChannel+0x406>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2103      	movs	r1, #3
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fb3d 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800307e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003080:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e003      	b.n	8003094 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800308c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x41e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	e011      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x442>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	e003      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 80030ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d106      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	2103      	movs	r1, #3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fb1a 	bl	8002718 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fc43 	bl	8002974 <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 813f 	bne.w	8003374 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f7ff fbc4 	bl	8002890 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a8e      	ldr	r2, [pc, #568]	@ (8003348 <HAL_ADC_ConfigChannel+0x6b8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f040 8130 	bne.w	8003374 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4ac>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	3301      	adds	r3, #1
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2b09      	cmp	r3, #9
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e019      	b.n	8003170 <HAL_ADC_ConfigChannel+0x4e0>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800314a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800314e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8003158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b09      	cmp	r3, #9
 8003168:	bf94      	ite	ls
 800316a:	2301      	movls	r3, #1
 800316c:	2300      	movhi	r3, #0
 800316e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	2b00      	cmp	r3, #0
 8003172:	d079      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x500>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318e:	e015      	b.n	80031bc <HAL_ADC_ConfigChannel+0x52c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800319e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x54c>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	e017      	b.n	800320c <HAL_ADC_ConfigChannel+0x57c>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 80031f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x5a2>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	e018      	b.n	8003264 <HAL_ADC_ConfigChannel+0x5d4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e003      	b.n	8003256 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 800324e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003264:	430b      	orrs	r3, r1
 8003266:	e080      	b.n	800336a <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x5f4>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	3301      	adds	r3, #1
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003282:	e015      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x620>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	069b      	lsls	r3, r3, #26
 80032ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x640>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	e017      	b.n	8003300 <HAL_ADC_ConfigChannel+0x670>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	61fb      	str	r3, [r7, #28]
  return result;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	ea42 0103 	orr.w	r1, r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_ADC_ConfigChannel+0x69c>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	3b1e      	subs	r3, #30
 8003324:	051b      	lsls	r3, r3, #20
 8003326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800332a:	e01d      	b.n	8003368 <HAL_ADC_ConfigChannel+0x6d8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	613b      	str	r3, [r7, #16]
  return result;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e005      	b.n	8003354 <HAL_ADC_ConfigChannel+0x6c4>
 8003348:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f003 021f 	and.w	r2, r3, #31
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	3b1e      	subs	r3, #30
 8003362:	051b      	lsls	r3, r3, #20
 8003364:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800336e:	4619      	mov	r1, r3
 8003370:	f7ff fa62 	bl	8002838 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b43      	ldr	r3, [pc, #268]	@ (8003488 <HAL_ADC_ConfigChannel+0x7f8>)
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d079      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003380:	4842      	ldr	r0, [pc, #264]	@ (800348c <HAL_ADC_ConfigChannel+0x7fc>)
 8003382:	f7ff f95b 	bl	800263c <LL_ADC_GetCommonPathInternalCh>
 8003386:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a40      	ldr	r2, [pc, #256]	@ (8003490 <HAL_ADC_ConfigChannel+0x800>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d124      	bne.n	80033de <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11e      	bne.n	80033de <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003494 <HAL_ADC_ConfigChannel+0x804>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d164      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033b2:	4619      	mov	r1, r3
 80033b4:	4835      	ldr	r0, [pc, #212]	@ (800348c <HAL_ADC_ConfigChannel+0x7fc>)
 80033b6:	f7ff f92e 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_ADC_ConfigChannel+0x808>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	4a36      	ldr	r2, [pc, #216]	@ (800349c <HAL_ADC_ConfigChannel+0x80c>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	3301      	adds	r3, #1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033ce:	e002      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f9      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033dc:	e04a      	b.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_ADC_ConfigChannel+0x810>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2a      	ldr	r2, [pc, #168]	@ (80034a4 <HAL_ADC_ConfigChannel+0x814>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d13a      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003406:	4619      	mov	r1, r3
 8003408:	4820      	ldr	r0, [pc, #128]	@ (800348c <HAL_ADC_ConfigChannel+0x7fc>)
 800340a:	f7ff f904 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800340e:	e031      	b.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <HAL_ADC_ConfigChannel+0x818>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800341a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800341e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_ADC_ConfigChannel+0x804>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d121      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003434:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003438:	4619      	mov	r1, r3
 800343a:	4814      	ldr	r0, [pc, #80]	@ (800348c <HAL_ADC_ConfigChannel+0x7fc>)
 800343c:	f7ff f8eb 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003440:	e018      	b.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <HAL_ADC_ConfigChannel+0x81c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d113      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <HAL_ADC_ConfigChannel+0x804>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f8fc 	bl	8002658 <LL_ADC_EnableChannelVDDcore>
 8003460:	e008      	b.n	8003474 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800347c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003480:	4618      	mov	r0, r3
 8003482:	37d8      	adds	r7, #216	@ 0xd8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	80080000 	.word	0x80080000
 800348c:	42028300 	.word	0x42028300
 8003490:	c3210000 	.word	0xc3210000
 8003494:	42028000 	.word	0x42028000
 8003498:	20000000 	.word	0x20000000
 800349c:	053e2d63 	.word	0x053e2d63
 80034a0:	43290000 	.word	0x43290000
 80034a4:	42028100 	.word	0x42028100
 80034a8:	c7520000 	.word	0xc7520000
 80034ac:	475a0000 	.word	0x475a0000

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	@ (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	@ (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	@ (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	@ 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff4c 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800362e:	f7ff ff63 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 8003632:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	6978      	ldr	r0, [r7, #20]
 800363a:	f7ff ffb3 	bl	80035a4 <NVIC_EncodePriority>
 800363e:	4602      	mov	r2, r0
 8003640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff82 	bl	8003550 <__NVIC_SetPriority>
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff56 	bl	8003514 <__NVIC_EnableIRQ>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003680:	d301      	bcc.n	8003686 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003682:	2301      	movs	r3, #1
 8003684:	e00d      	b.n	80036a2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <HAL_SYSTICK_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800368e:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <HAL_SYSTICK_Config+0x40>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_SYSTICK_Config+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <HAL_SYSTICK_Config+0x40>)
 800369a:	f043 0303 	orr.w	r3, r3, #3
 800369e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d844      	bhi.n	800374c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036eb 	.word	0x080036eb
 80036cc:	08003709 	.word	0x08003709
 80036d0:	0800372b 	.word	0x0800372b
 80036d4:	0800374d 	.word	0x0800374d
 80036d8:	080036dd 	.word	0x080036dd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80036dc:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6013      	str	r3, [r2, #0]
      break;
 80036e8:	e031      	b.n	800374e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80036f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80036f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80036fe:	f023 030c 	bic.w	r3, r3, #12
 8003702:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003706:	e022      	b.n	800374e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a13      	ldr	r2, [pc, #76]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800370e:	f023 0304 	bic.w	r3, r3, #4
 8003712:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800371a:	f023 030c 	bic.w	r3, r3, #12
 800371e:	4a10      	ldr	r2, [pc, #64]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003728:	e011      	b.n	800374e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800372a:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003736:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003738:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800373c:	f023 030c 	bic.w	r3, r3, #12
 8003740:	4a07      	ldr	r2, [pc, #28]	@ (8003760 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800374a:	e000      	b.n	800374e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800374c:	bf00      	nop
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010
 8003760:	44020c00 	.word	0x44020c00

08003764 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800376a:	4b17      	ldr	r3, [pc, #92]	@ (80037c8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003776:	2304      	movs	r3, #4
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	e01e      	b.n	80037ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800377e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d00f      	beq.n	80037ae <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d80f      	bhi.n	80037b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d003      	beq.n	80037a8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80037a0:	e008      	b.n	80037b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
        break;
 80037a6:	e008      	b.n	80037ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80037a8:	2301      	movs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
        break;
 80037ac:	e005      	b.n	80037ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80037ae:	2302      	movs	r3, #2
 80037b0:	607b      	str	r3, [r7, #4]
        break;
 80037b2:	e002      	b.n	80037ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037b4:	2300      	movs	r3, #0
 80037b6:	607b      	str	r3, [r7, #4]
        break;
 80037b8:	bf00      	nop
    }
  }
  return systick_source;
 80037ba:	687b      	ldr	r3, [r7, #4]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e010 	.word	0xe000e010
 80037cc:	44020c00 	.word	0x44020c00

080037d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80037d8:	f3bf 8f5f 	dmb	sy
}
 80037dc:	bf00      	nop
  __DMB(); /* Data Memory Barrier operation to force any outstanding writes to memory before enabling the MPU */

  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80037de:	4a0b      	ldr	r2, [pc, #44]	@ (800380c <HAL_MPU_Enable+0x3c>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_MPU_Enable+0x40>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <HAL_MPU_Enable+0x40>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80037f4:	f3bf 8f4f 	dsb	sy
}
 80037f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037fa:	f3bf 8f6f 	isb	sy
}
 80037fe:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed90 	.word	0xe000ed90
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003818:	f3bf 8f5f 	dmb	sy
}
 800381c:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800381e:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_MPU_Disable+0x38>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <HAL_MPU_Disable+0x38>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003828:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 800382a:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_MPU_Disable+0x3c>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a08      	ldr	r2, [pc, #32]	@ (8003850 <HAL_MPU_Disable+0x3c>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8003836:	f3bf 8f4f 	dsb	sy
}
 800383a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800383c:	f3bf 8f6f 	isb	sy
}
 8003840:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00
 8003850:	e000ed90 	.word	0xe000ed90

08003854 <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4803      	ldr	r0, [pc, #12]	@ (800386c <HAL_MPU_ConfigRegion+0x18>)
 8003860:	f000 f814 	bl	800388c <MPU_ConfigRegion>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	e000ed90 	.word	0xe000ed90

08003870 <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4803      	ldr	r0, [pc, #12]	@ (8003888 <HAL_MPU_ConfigMemoryAttributes+0x18>)
 800387c:	f000 f83d 	bl	80038fa <MPU_ConfigMemoryAttributes>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed90 	.word	0xe000ed90

0800388c <MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003896:	f3bf 8f5f 	dmb	sy
}
 800389a:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPUx->RLAR, MPU_RLAR_EN_Msk);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	611a      	str	r2, [r3, #16]

  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	7bdb      	ldrb	r3, [r3, #15]
 80038be:	00db      	lsls	r3, r3, #3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80038c0:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	7b5b      	ldrb	r3, [r3, #13]
 80038c6:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80038c8:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->DisableExec           << MPU_RBAR_XN_Pos));
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	7b92      	ldrb	r2, [r2, #14]
                ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80038ce:	431a      	orrs	r2, r3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	7b1b      	ldrb	r3, [r3, #12]
 80038e0:	005b      	lsls	r3, r3, #1
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80038e2:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->Enable                << MPU_RLAR_EN_Pos));
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80038e8:	431a      	orrs	r2, r3
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	611a      	str	r2, [r3, #16]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003904:	f3bf 8f5f 	dmb	sy
}
 8003908:	bf00      	nop
  /* No need to check Attributes value as all 0x0..0xFF possible */

  /* Follow ARM recommendation with Data Memory Barrier prior to MPUx configuration */
  __DMB();

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d806      	bhi.n	8003920 <MPU_ConfigMemoryAttributes+0x26>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3330      	adds	r3, #48	@ 0x30
 8003916:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e006      	b.n	800392e <MPU_ConfigMemoryAttributes+0x34>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3334      	adds	r3, #52	@ 0x34
 8003924:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	3b04      	subs	r3, #4
 800392c:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFUL << (attr_number * 8U));
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	22ff      	movs	r2, #255	@ 0xff
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	461a      	mov	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	409a      	lsls	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e014      	b.n	80039a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	791b      	ldrb	r3, [r3, #4]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd f8c5 	bl	8000b18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_DAC_ConfigChannel+0x1c>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e17c      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x31a>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	795b      	ldrb	r3, [r3, #5]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_DAC_ConfigChannel+0x32>
 80039da:	2302      	movs	r3, #2
 80039dc:	e173      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x31a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2202      	movs	r2, #2
 80039e8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d17a      	bne.n	8003ae8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80039f2:	f7fe fdf1 	bl	80025d8 <HAL_GetTick>
 80039f6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d13d      	bne.n	8003a7a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039fe:	e018      	b.n	8003a32 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a00:	f7fe fdea 	bl	80025d8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d911      	bls.n	8003a32 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f043 0208 	orr.w	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e149      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1df      	bne.n	8003a00 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	6a12      	ldr	r2, [r2, #32]
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a4a:	e020      	b.n	8003a8e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a4c:	f7fe fdc4 	bl	80025d8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d90f      	bls.n	8003a7a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da0a      	bge.n	8003a7a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f043 0208 	orr.w	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2203      	movs	r2, #3
 8003a74:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e125      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dbe3      	blt.n	8003a4c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	6a12      	ldr	r2, [r2, #32]
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	ea02 0103 	and.w	r1, r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	21ff      	movs	r1, #255	@ 0xff
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	ea02 0103 	and.w	r1, r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d11d      	bne.n	8003b2c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	221f      	movs	r2, #31
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b08:	4013      	ands	r3, r2
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b20:	4313      	orrs	r3, r2
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b44:	4013      	ands	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	e00f      	b.n	8003b76 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d102      	bne.n	8003b64 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	e008      	b.n	8003b76 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	e001      	b.n	8003b76 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b98:	4013      	ands	r3, r2
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	791b      	ldrb	r3, [r3, #4]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_DAC_ConfigChannel+0x1fe>
 8003ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ba8:	e000      	b.n	8003bac <HAL_DAC_ConfigChannel+0x200>
 8003baa:	2300      	movs	r3, #0
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	795b      	ldrb	r3, [r3, #5]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_DAC_ConfigChannel+0x22a>
 8003bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bd4:	e000      	b.n	8003bd8 <HAL_DAC_ConfigChannel+0x22c>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d114      	bne.n	8003c18 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003bee:	f003 f909 	bl	8006e04 <HAL_RCC_GetHCLKFreq>
 8003bf2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <HAL_DAC_ConfigChannel+0x324>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d904      	bls.n	8003c06 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	e00f      	b.n	8003c26 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4a32      	ldr	r2, [pc, #200]	@ (8003cd4 <HAL_DAC_ConfigChannel+0x328>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d90a      	bls.n	8003c24 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c16:	e006      	b.n	8003c26 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c22:	e000      	b.n	8003c26 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003c24:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	4313      	orrs	r3, r2
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43da      	mvns	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c78:	4013      	ands	r3, r2
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	4313      	orrs	r3, r2
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	22c0      	movs	r2, #192	@ 0xc0
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3728      	adds	r7, #40	@ 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	09896800 	.word	0x09896800
 8003cd4:	04c4b400 	.word	0x04c4b400

08003cd8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7fe fc7a 	bl	80025d8 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0f0      	b.n	8003ed2 <HAL_DMA_Init+0x1fa>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a79      	ldr	r2, [pc, #484]	@ (8003edc <HAL_DMA_Init+0x204>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	f000 809f 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a77      	ldr	r2, [pc, #476]	@ (8003ee0 <HAL_DMA_Init+0x208>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	f000 8099 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a75      	ldr	r2, [pc, #468]	@ (8003ee4 <HAL_DMA_Init+0x20c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f000 8093 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a73      	ldr	r2, [pc, #460]	@ (8003ee8 <HAL_DMA_Init+0x210>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f000 808d 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a71      	ldr	r2, [pc, #452]	@ (8003eec <HAL_DMA_Init+0x214>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f000 8087 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef0 <HAL_DMA_Init+0x218>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f000 8081 	beq.w	8003e3a <HAL_DMA_Init+0x162>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6d      	ldr	r2, [pc, #436]	@ (8003ef4 <HAL_DMA_Init+0x21c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d07b      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef8 <HAL_DMA_Init+0x220>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d076      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <HAL_DMA_Init+0x224>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d071      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a69      	ldr	r2, [pc, #420]	@ (8003f00 <HAL_DMA_Init+0x228>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d06c      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a67      	ldr	r2, [pc, #412]	@ (8003f04 <HAL_DMA_Init+0x22c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d067      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a66      	ldr	r2, [pc, #408]	@ (8003f08 <HAL_DMA_Init+0x230>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d062      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a64      	ldr	r2, [pc, #400]	@ (8003f0c <HAL_DMA_Init+0x234>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d05d      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a63      	ldr	r2, [pc, #396]	@ (8003f10 <HAL_DMA_Init+0x238>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d058      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a61      	ldr	r2, [pc, #388]	@ (8003f14 <HAL_DMA_Init+0x23c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d053      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a60      	ldr	r2, [pc, #384]	@ (8003f18 <HAL_DMA_Init+0x240>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04e      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f1c <HAL_DMA_Init+0x244>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d049      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5d      	ldr	r2, [pc, #372]	@ (8003f20 <HAL_DMA_Init+0x248>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d044      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5b      	ldr	r2, [pc, #364]	@ (8003f24 <HAL_DMA_Init+0x24c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03f      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8003f28 <HAL_DMA_Init+0x250>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d03a      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a58      	ldr	r2, [pc, #352]	@ (8003f2c <HAL_DMA_Init+0x254>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d035      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a57      	ldr	r2, [pc, #348]	@ (8003f30 <HAL_DMA_Init+0x258>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d030      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <HAL_DMA_Init+0x25c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02b      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a54      	ldr	r2, [pc, #336]	@ (8003f38 <HAL_DMA_Init+0x260>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d026      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a52      	ldr	r2, [pc, #328]	@ (8003f3c <HAL_DMA_Init+0x264>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d021      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a51      	ldr	r2, [pc, #324]	@ (8003f40 <HAL_DMA_Init+0x268>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01c      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4f      	ldr	r2, [pc, #316]	@ (8003f44 <HAL_DMA_Init+0x26c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f48 <HAL_DMA_Init+0x270>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d012      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a4c      	ldr	r2, [pc, #304]	@ (8003f4c <HAL_DMA_Init+0x274>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4b      	ldr	r2, [pc, #300]	@ (8003f50 <HAL_DMA_Init+0x278>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d008      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a49      	ldr	r2, [pc, #292]	@ (8003f54 <HAL_DMA_Init+0x27c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <HAL_DMA_Init+0x162>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a48      	ldr	r2, [pc, #288]	@ (8003f58 <HAL_DMA_Init+0x280>)
 8003e38:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10e      	bne.n	8003e6c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0206 	orr.w	r2, r2, #6
 8003e82:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003e84:	e00f      	b.n	8003ea6 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003e86:	f7fe fba7 	bl	80025d8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d908      	bls.n	8003ea6 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2210      	movs	r2, #16
 8003e98:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e015      	b.n	8003ed2 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e8      	bne.n	8003e86 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9ef 	bl	8004298 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40020050 	.word	0x40020050
 8003ee0:	50020050 	.word	0x50020050
 8003ee4:	400200d0 	.word	0x400200d0
 8003ee8:	500200d0 	.word	0x500200d0
 8003eec:	40020150 	.word	0x40020150
 8003ef0:	50020150 	.word	0x50020150
 8003ef4:	400201d0 	.word	0x400201d0
 8003ef8:	500201d0 	.word	0x500201d0
 8003efc:	40020250 	.word	0x40020250
 8003f00:	50020250 	.word	0x50020250
 8003f04:	400202d0 	.word	0x400202d0
 8003f08:	500202d0 	.word	0x500202d0
 8003f0c:	40020350 	.word	0x40020350
 8003f10:	50020350 	.word	0x50020350
 8003f14:	400203d0 	.word	0x400203d0
 8003f18:	500203d0 	.word	0x500203d0
 8003f1c:	40021050 	.word	0x40021050
 8003f20:	50021050 	.word	0x50021050
 8003f24:	400210d0 	.word	0x400210d0
 8003f28:	500210d0 	.word	0x500210d0
 8003f2c:	40021150 	.word	0x40021150
 8003f30:	50021150 	.word	0x50021150
 8003f34:	400211d0 	.word	0x400211d0
 8003f38:	500211d0 	.word	0x500211d0
 8003f3c:	40021250 	.word	0x40021250
 8003f40:	50021250 	.word	0x50021250
 8003f44:	400212d0 	.word	0x400212d0
 8003f48:	500212d0 	.word	0x500212d0
 8003f4c:	40021350 	.word	0x40021350
 8003f50:	50021350 	.word	0x50021350
 8003f54:	400213d0 	.word	0x400213d0
 8003f58:	500213d0 	.word	0x500213d0

08003f5c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003f6c:	f023 030f 	bic.w	r3, r3, #15
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	3b50      	subs	r3, #80	@ 0x50
 8003f7c:	09db      	lsrs	r3, r3, #7
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 813b 	beq.w	8004212 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fc0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	f043 0202 	orr.w	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004024:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d011      	beq.n	8004064 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004056:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	f043 0208 	orr.w	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004088:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d04c      	beq.n	8004142 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d045      	beq.n	8004142 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040be:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d12e      	bne.n	800412a <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040da:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0202 	orr.w	r2, r2, #2
 80040ea:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004104:	2201      	movs	r2, #1
 8004106:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d07a      	beq.n	8004216 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
        }

        return;
 8004128:	e075      	b.n	8004216 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2205      	movs	r2, #5
 800412e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d039      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d032      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d012      	beq.n	8004190 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d116      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417a:	2b00      	cmp	r3, #0
 800417c:	d111      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418a:	2201      	movs	r2, #1
 800418c:	731a      	strb	r2, [r3, #12]
 800418e:	e008      	b.n	80041a2 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80041aa:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d025      	beq.n	8004218 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0202 	orr.w	r2, r2, #2
 80041da:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f4:	2201      	movs	r2, #1
 80041f6:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
 8004210:	e002      	b.n	8004218 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004216:	bf00      	nop
    }
  }
}
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e02b      	b.n	800428a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800423a:	f023 030f 	bic.w	r3, r3, #15
 800423e:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	3b50      	subs	r3, #80	@ 0x50
 800424a:	09db      	lsrs	r3, r3, #7
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2201      	movs	r2, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d012      	beq.n	8004288 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f003 0311 	and.w	r3, r3, #17
 8004268:	2b11      	cmp	r3, #17
 800426a:	d106      	bne.n	800427a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	e006      	b.n	8004288 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a53      	ldr	r2, [pc, #332]	@ (8004424 <DMA_Init+0x18c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	f000 80a0 	beq.w	800441e <DMA_Init+0x186>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a51      	ldr	r2, [pc, #324]	@ (8004428 <DMA_Init+0x190>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f000 809a 	beq.w	800441e <DMA_Init+0x186>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a4f      	ldr	r2, [pc, #316]	@ (800442c <DMA_Init+0x194>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f000 8094 	beq.w	800441e <DMA_Init+0x186>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <DMA_Init+0x198>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f000 808e 	beq.w	800441e <DMA_Init+0x186>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4b      	ldr	r2, [pc, #300]	@ (8004434 <DMA_Init+0x19c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	f000 8088 	beq.w	800441e <DMA_Init+0x186>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a49      	ldr	r2, [pc, #292]	@ (8004438 <DMA_Init+0x1a0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f000 8082 	beq.w	800441e <DMA_Init+0x186>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a47      	ldr	r2, [pc, #284]	@ (800443c <DMA_Init+0x1a4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d07c      	beq.n	800441e <DMA_Init+0x186>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a45      	ldr	r2, [pc, #276]	@ (8004440 <DMA_Init+0x1a8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d077      	beq.n	800441e <DMA_Init+0x186>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a44      	ldr	r2, [pc, #272]	@ (8004444 <DMA_Init+0x1ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d072      	beq.n	800441e <DMA_Init+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a42      	ldr	r2, [pc, #264]	@ (8004448 <DMA_Init+0x1b0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d06d      	beq.n	800441e <DMA_Init+0x186>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a41      	ldr	r2, [pc, #260]	@ (800444c <DMA_Init+0x1b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d068      	beq.n	800441e <DMA_Init+0x186>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a3f      	ldr	r2, [pc, #252]	@ (8004450 <DMA_Init+0x1b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d063      	beq.n	800441e <DMA_Init+0x186>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a3e      	ldr	r2, [pc, #248]	@ (8004454 <DMA_Init+0x1bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d05e      	beq.n	800441e <DMA_Init+0x186>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <DMA_Init+0x1c0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d059      	beq.n	800441e <DMA_Init+0x186>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3b      	ldr	r2, [pc, #236]	@ (800445c <DMA_Init+0x1c4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d054      	beq.n	800441e <DMA_Init+0x186>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a39      	ldr	r2, [pc, #228]	@ (8004460 <DMA_Init+0x1c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04f      	beq.n	800441e <DMA_Init+0x186>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <DMA_Init+0x1cc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d04a      	beq.n	800441e <DMA_Init+0x186>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a36      	ldr	r2, [pc, #216]	@ (8004468 <DMA_Init+0x1d0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d045      	beq.n	800441e <DMA_Init+0x186>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a35      	ldr	r2, [pc, #212]	@ (800446c <DMA_Init+0x1d4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d040      	beq.n	800441e <DMA_Init+0x186>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a33      	ldr	r2, [pc, #204]	@ (8004470 <DMA_Init+0x1d8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d03b      	beq.n	800441e <DMA_Init+0x186>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a32      	ldr	r2, [pc, #200]	@ (8004474 <DMA_Init+0x1dc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d036      	beq.n	800441e <DMA_Init+0x186>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a30      	ldr	r2, [pc, #192]	@ (8004478 <DMA_Init+0x1e0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d031      	beq.n	800441e <DMA_Init+0x186>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <DMA_Init+0x1e4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d02c      	beq.n	800441e <DMA_Init+0x186>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004480 <DMA_Init+0x1e8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d027      	beq.n	800441e <DMA_Init+0x186>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <DMA_Init+0x1ec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <DMA_Init+0x186>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004488 <DMA_Init+0x1f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01d      	beq.n	800441e <DMA_Init+0x186>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a29      	ldr	r2, [pc, #164]	@ (800448c <DMA_Init+0x1f4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <DMA_Init+0x186>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a27      	ldr	r2, [pc, #156]	@ (8004490 <DMA_Init+0x1f8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <DMA_Init+0x186>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a26      	ldr	r2, [pc, #152]	@ (8004494 <DMA_Init+0x1fc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <DMA_Init+0x186>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a24      	ldr	r2, [pc, #144]	@ (8004498 <DMA_Init+0x200>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <DMA_Init+0x186>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a23      	ldr	r2, [pc, #140]	@ (800449c <DMA_Init+0x204>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <DMA_Init+0x186>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a21      	ldr	r2, [pc, #132]	@ (80044a0 <DMA_Init+0x208>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d142      	bne.n	80044a4 <DMA_Init+0x20c>
 800441e:	2301      	movs	r3, #1
 8004420:	e041      	b.n	80044a6 <DMA_Init+0x20e>
 8004422:	bf00      	nop
 8004424:	40020050 	.word	0x40020050
 8004428:	50020050 	.word	0x50020050
 800442c:	400200d0 	.word	0x400200d0
 8004430:	500200d0 	.word	0x500200d0
 8004434:	40020150 	.word	0x40020150
 8004438:	50020150 	.word	0x50020150
 800443c:	400201d0 	.word	0x400201d0
 8004440:	500201d0 	.word	0x500201d0
 8004444:	40020250 	.word	0x40020250
 8004448:	50020250 	.word	0x50020250
 800444c:	400202d0 	.word	0x400202d0
 8004450:	500202d0 	.word	0x500202d0
 8004454:	40020350 	.word	0x40020350
 8004458:	50020350 	.word	0x50020350
 800445c:	400203d0 	.word	0x400203d0
 8004460:	500203d0 	.word	0x500203d0
 8004464:	40021050 	.word	0x40021050
 8004468:	50021050 	.word	0x50021050
 800446c:	400210d0 	.word	0x400210d0
 8004470:	500210d0 	.word	0x500210d0
 8004474:	40021150 	.word	0x40021150
 8004478:	50021150 	.word	0x50021150
 800447c:	400211d0 	.word	0x400211d0
 8004480:	500211d0 	.word	0x500211d0
 8004484:	40021250 	.word	0x40021250
 8004488:	50021250 	.word	0x50021250
 800448c:	400212d0 	.word	0x400212d0
 8004490:	500212d0 	.word	0x500212d0
 8004494:	40021350 	.word	0x40021350
 8004498:	50021350 	.word	0x50021350
 800449c:	400213d0 	.word	0x400213d0
 80044a0:	500213d0 	.word	0x500213d0
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80044ba:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	3b01      	subs	r3, #1
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80044c8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004500:	f040 80b0 	bne.w	8004664 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a84      	ldr	r2, [pc, #528]	@ (800471c <DMA_Init+0x484>)
 800450a:	4293      	cmp	r3, r2
 800450c:	f000 80a0 	beq.w	8004650 <DMA_Init+0x3b8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a82      	ldr	r2, [pc, #520]	@ (8004720 <DMA_Init+0x488>)
 8004516:	4293      	cmp	r3, r2
 8004518:	f000 809a 	beq.w	8004650 <DMA_Init+0x3b8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a80      	ldr	r2, [pc, #512]	@ (8004724 <DMA_Init+0x48c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f000 8094 	beq.w	8004650 <DMA_Init+0x3b8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7e      	ldr	r2, [pc, #504]	@ (8004728 <DMA_Init+0x490>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f000 808e 	beq.w	8004650 <DMA_Init+0x3b8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7c      	ldr	r2, [pc, #496]	@ (800472c <DMA_Init+0x494>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f000 8088 	beq.w	8004650 <DMA_Init+0x3b8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7a      	ldr	r2, [pc, #488]	@ (8004730 <DMA_Init+0x498>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f000 8082 	beq.w	8004650 <DMA_Init+0x3b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a78      	ldr	r2, [pc, #480]	@ (8004734 <DMA_Init+0x49c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d07c      	beq.n	8004650 <DMA_Init+0x3b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a77      	ldr	r2, [pc, #476]	@ (8004738 <DMA_Init+0x4a0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d077      	beq.n	8004650 <DMA_Init+0x3b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a75      	ldr	r2, [pc, #468]	@ (800473c <DMA_Init+0x4a4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d072      	beq.n	8004650 <DMA_Init+0x3b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a74      	ldr	r2, [pc, #464]	@ (8004740 <DMA_Init+0x4a8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d06d      	beq.n	8004650 <DMA_Init+0x3b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a72      	ldr	r2, [pc, #456]	@ (8004744 <DMA_Init+0x4ac>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d068      	beq.n	8004650 <DMA_Init+0x3b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a71      	ldr	r2, [pc, #452]	@ (8004748 <DMA_Init+0x4b0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d063      	beq.n	8004650 <DMA_Init+0x3b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6f      	ldr	r2, [pc, #444]	@ (800474c <DMA_Init+0x4b4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d05e      	beq.n	8004650 <DMA_Init+0x3b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6e      	ldr	r2, [pc, #440]	@ (8004750 <DMA_Init+0x4b8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d059      	beq.n	8004650 <DMA_Init+0x3b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004754 <DMA_Init+0x4bc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d054      	beq.n	8004650 <DMA_Init+0x3b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004758 <DMA_Init+0x4c0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d04f      	beq.n	8004650 <DMA_Init+0x3b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a69      	ldr	r2, [pc, #420]	@ (800475c <DMA_Init+0x4c4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04a      	beq.n	8004650 <DMA_Init+0x3b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a68      	ldr	r2, [pc, #416]	@ (8004760 <DMA_Init+0x4c8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d045      	beq.n	8004650 <DMA_Init+0x3b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a66      	ldr	r2, [pc, #408]	@ (8004764 <DMA_Init+0x4cc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d040      	beq.n	8004650 <DMA_Init+0x3b8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a65      	ldr	r2, [pc, #404]	@ (8004768 <DMA_Init+0x4d0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d03b      	beq.n	8004650 <DMA_Init+0x3b8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a63      	ldr	r2, [pc, #396]	@ (800476c <DMA_Init+0x4d4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d036      	beq.n	8004650 <DMA_Init+0x3b8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a62      	ldr	r2, [pc, #392]	@ (8004770 <DMA_Init+0x4d8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d031      	beq.n	8004650 <DMA_Init+0x3b8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a60      	ldr	r2, [pc, #384]	@ (8004774 <DMA_Init+0x4dc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02c      	beq.n	8004650 <DMA_Init+0x3b8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004778 <DMA_Init+0x4e0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d027      	beq.n	8004650 <DMA_Init+0x3b8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5d      	ldr	r2, [pc, #372]	@ (800477c <DMA_Init+0x4e4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <DMA_Init+0x3b8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5c      	ldr	r2, [pc, #368]	@ (8004780 <DMA_Init+0x4e8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d01d      	beq.n	8004650 <DMA_Init+0x3b8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5a      	ldr	r2, [pc, #360]	@ (8004784 <DMA_Init+0x4ec>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <DMA_Init+0x3b8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a59      	ldr	r2, [pc, #356]	@ (8004788 <DMA_Init+0x4f0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <DMA_Init+0x3b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a57      	ldr	r2, [pc, #348]	@ (800478c <DMA_Init+0x4f4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <DMA_Init+0x3b8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <DMA_Init+0x4f8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <DMA_Init+0x3b8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a54      	ldr	r2, [pc, #336]	@ (8004794 <DMA_Init+0x4fc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <DMA_Init+0x3b8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <DMA_Init+0x500>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <DMA_Init+0x3bc>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <DMA_Init+0x3be>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e008      	b.n	8004676 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800466c:	d103      	bne.n	8004676 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004674:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	4b45      	ldr	r3, [pc, #276]	@ (800479c <DMA_Init+0x504>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	430b      	orrs	r3, r1
 8004692:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2a      	ldr	r2, [pc, #168]	@ (800474c <DMA_Init+0x4b4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <DMA_Init+0x454>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <DMA_Init+0x4b8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01d      	beq.n	80046ec <DMA_Init+0x454>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a27      	ldr	r2, [pc, #156]	@ (8004754 <DMA_Init+0x4bc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <DMA_Init+0x454>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <DMA_Init+0x4c0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <DMA_Init+0x454>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	@ (800478c <DMA_Init+0x4f4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <DMA_Init+0x454>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <DMA_Init+0x4f8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <DMA_Init+0x454>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <DMA_Init+0x4fc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <DMA_Init+0x454>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <DMA_Init+0x500>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <DMA_Init+0x458>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <DMA_Init+0x45a>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40020050 	.word	0x40020050
 8004720:	50020050 	.word	0x50020050
 8004724:	400200d0 	.word	0x400200d0
 8004728:	500200d0 	.word	0x500200d0
 800472c:	40020150 	.word	0x40020150
 8004730:	50020150 	.word	0x50020150
 8004734:	400201d0 	.word	0x400201d0
 8004738:	500201d0 	.word	0x500201d0
 800473c:	40020250 	.word	0x40020250
 8004740:	50020250 	.word	0x50020250
 8004744:	400202d0 	.word	0x400202d0
 8004748:	500202d0 	.word	0x500202d0
 800474c:	40020350 	.word	0x40020350
 8004750:	50020350 	.word	0x50020350
 8004754:	400203d0 	.word	0x400203d0
 8004758:	500203d0 	.word	0x500203d0
 800475c:	40021050 	.word	0x40021050
 8004760:	50021050 	.word	0x50021050
 8004764:	400210d0 	.word	0x400210d0
 8004768:	500210d0 	.word	0x500210d0
 800476c:	40021150 	.word	0x40021150
 8004770:	50021150 	.word	0x50021150
 8004774:	400211d0 	.word	0x400211d0
 8004778:	500211d0 	.word	0x500211d0
 800477c:	40021250 	.word	0x40021250
 8004780:	50021250 	.word	0x50021250
 8004784:	400212d0 	.word	0x400212d0
 8004788:	500212d0 	.word	0x500212d0
 800478c:	40021350 	.word	0x40021350
 8004790:	50021350 	.word	0x50021350
 8004794:	400213d0 	.word	0x400213d0
 8004798:	500213d0 	.word	0x500213d0
 800479c:	3cc02100 	.word	0x3cc02100

080047a0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7fd ff16 	bl	80025d8 <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0db      	b.n	8004970 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004978 <HAL_DMAEx_List_Init+0x1d8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f000 809f 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a6c      	ldr	r2, [pc, #432]	@ (800497c <HAL_DMAEx_List_Init+0x1dc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 8099 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004980 <HAL_DMAEx_List_Init+0x1e0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	f000 8093 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a68      	ldr	r2, [pc, #416]	@ (8004984 <HAL_DMAEx_List_Init+0x1e4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f000 808d 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a66      	ldr	r2, [pc, #408]	@ (8004988 <HAL_DMAEx_List_Init+0x1e8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	f000 8087 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a64      	ldr	r2, [pc, #400]	@ (800498c <HAL_DMAEx_List_Init+0x1ec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f000 8081 	beq.w	8004902 <HAL_DMAEx_List_Init+0x162>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a62      	ldr	r2, [pc, #392]	@ (8004990 <HAL_DMAEx_List_Init+0x1f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d07b      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a61      	ldr	r2, [pc, #388]	@ (8004994 <HAL_DMAEx_List_Init+0x1f4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d076      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5f      	ldr	r2, [pc, #380]	@ (8004998 <HAL_DMAEx_List_Init+0x1f8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d071      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_DMAEx_List_Init+0x1fc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d06c      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5c      	ldr	r2, [pc, #368]	@ (80049a0 <HAL_DMAEx_List_Init+0x200>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d067      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5b      	ldr	r2, [pc, #364]	@ (80049a4 <HAL_DMAEx_List_Init+0x204>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d062      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a59      	ldr	r2, [pc, #356]	@ (80049a8 <HAL_DMAEx_List_Init+0x208>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d05d      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a58      	ldr	r2, [pc, #352]	@ (80049ac <HAL_DMAEx_List_Init+0x20c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d058      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a56      	ldr	r2, [pc, #344]	@ (80049b0 <HAL_DMAEx_List_Init+0x210>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d053      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a55      	ldr	r2, [pc, #340]	@ (80049b4 <HAL_DMAEx_List_Init+0x214>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04e      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a53      	ldr	r2, [pc, #332]	@ (80049b8 <HAL_DMAEx_List_Init+0x218>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d049      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a52      	ldr	r2, [pc, #328]	@ (80049bc <HAL_DMAEx_List_Init+0x21c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d044      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a50      	ldr	r2, [pc, #320]	@ (80049c0 <HAL_DMAEx_List_Init+0x220>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03f      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4f      	ldr	r2, [pc, #316]	@ (80049c4 <HAL_DMAEx_List_Init+0x224>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d03a      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a4d      	ldr	r2, [pc, #308]	@ (80049c8 <HAL_DMAEx_List_Init+0x228>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d035      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a4c      	ldr	r2, [pc, #304]	@ (80049cc <HAL_DMAEx_List_Init+0x22c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d030      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <HAL_DMAEx_List_Init+0x230>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02b      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a49      	ldr	r2, [pc, #292]	@ (80049d4 <HAL_DMAEx_List_Init+0x234>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d026      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a47      	ldr	r2, [pc, #284]	@ (80049d8 <HAL_DMAEx_List_Init+0x238>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d021      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a46      	ldr	r2, [pc, #280]	@ (80049dc <HAL_DMAEx_List_Init+0x23c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01c      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a44      	ldr	r2, [pc, #272]	@ (80049e0 <HAL_DMAEx_List_Init+0x240>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a43      	ldr	r2, [pc, #268]	@ (80049e4 <HAL_DMAEx_List_Init+0x244>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d012      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a41      	ldr	r2, [pc, #260]	@ (80049e8 <HAL_DMAEx_List_Init+0x248>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00d      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a40      	ldr	r2, [pc, #256]	@ (80049ec <HAL_DMAEx_List_Init+0x24c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d008      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3e      	ldr	r2, [pc, #248]	@ (80049f0 <HAL_DMAEx_List_Init+0x250>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <HAL_DMAEx_List_Init+0x162>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	@ (80049f4 <HAL_DMAEx_List_Init+0x254>)
 8004900:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0206 	orr.w	r2, r2, #6
 8004920:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004922:	e00f      	b.n	8004944 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004924:	f7fd fe58 	bl	80025d8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b05      	cmp	r3, #5
 8004930:	d908      	bls.n	8004944 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2210      	movs	r2, #16
 8004936:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2203      	movs	r2, #3
 800493c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e015      	b.n	8004970 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e8      	bne.n	8004924 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa2c 	bl	8004db0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40020050 	.word	0x40020050
 800497c:	50020050 	.word	0x50020050
 8004980:	400200d0 	.word	0x400200d0
 8004984:	500200d0 	.word	0x500200d0
 8004988:	40020150 	.word	0x40020150
 800498c:	50020150 	.word	0x50020150
 8004990:	400201d0 	.word	0x400201d0
 8004994:	500201d0 	.word	0x500201d0
 8004998:	40020250 	.word	0x40020250
 800499c:	50020250 	.word	0x50020250
 80049a0:	400202d0 	.word	0x400202d0
 80049a4:	500202d0 	.word	0x500202d0
 80049a8:	40020350 	.word	0x40020350
 80049ac:	50020350 	.word	0x50020350
 80049b0:	400203d0 	.word	0x400203d0
 80049b4:	500203d0 	.word	0x500203d0
 80049b8:	40021050 	.word	0x40021050
 80049bc:	50021050 	.word	0x50021050
 80049c0:	400210d0 	.word	0x400210d0
 80049c4:	500210d0 	.word	0x500210d0
 80049c8:	40021150 	.word	0x40021150
 80049cc:	50021150 	.word	0x50021150
 80049d0:	400211d0 	.word	0x400211d0
 80049d4:	500211d0 	.word	0x500211d0
 80049d8:	40021250 	.word	0x40021250
 80049dc:	50021250 	.word	0x50021250
 80049e0:	400212d0 	.word	0x400212d0
 80049e4:	500212d0 	.word	0x500212d0
 80049e8:	40021350 	.word	0x40021350
 80049ec:	50021350 	.word	0x50021350
 80049f0:	400213d0 	.word	0x400213d0
 80049f4:	500213d0 	.word	0x500213d0

080049f8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_DMAEx_List_BuildNode+0x16>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e004      	b.n	8004a1c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb23 	bl	8005060 <DMA_List_BuildNode>

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	@ 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_DMAEx_List_InsertNode+0x18>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b6      	b.n	8004bae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d104      	bne.n	8004a52 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e0ad      	b.n	8004bae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fc60 	bl	8005320 <DMA_List_CheckNodesBaseAddresses>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2205      	movs	r2, #5
 8004a6a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e09e      	b.n	8004bae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fc81 	bl	8005380 <DMA_List_CheckNodesTypes>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2204      	movs	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e08f      	b.n	8004bae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2202      	movs	r2, #2
 8004a92:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004a9a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004a9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fca7 	bl	80053f8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11a      	bne.n	8004ae8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	e06c      	b.n	8004ba0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad8:	4319      	orrs	r1, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	609a      	str	r2, [r3, #8]
 8004ae6:	e05b      	b.n	8004ba0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004af8:	4013      	ands	r3, r2
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004afe:	4319      	orrs	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e043      	b.n	8004b96 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	461a      	mov	r2, r3
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fc9c 	bl	8005458 <DMA_List_FindNode>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d132      	bne.n	8004b8c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d11a      	bne.n	8004b66 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004b42:	4013      	ands	r3, r2
 8004b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b48:	4319      	orrs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004b56:	4013      	ands	r3, r2
 8004b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b5c:	4319      	orrs	r1, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b64:	e017      	b.n	8004b96 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b82:	4319      	orrs	r1, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b8a:	e004      	b.n	8004b96 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2206      	movs	r2, #6
 8004b90:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e00b      	b.n	8004bae <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3730      	adds	r7, #48	@ 0x30
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	@ 0x28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e052      	b.n	8004c6e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e049      	b.n	8004c6e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d101      	bne.n	8004bf2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e03d      	b.n	8004c6e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e038      	b.n	8004c6e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d104      	bne.n	8004c0e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2204      	movs	r2, #4
 8004c08:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e02f      	b.n	8004c6e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f107 0220 	add.w	r2, r7, #32
 8004c22:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fbe6 	bl	80053f8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	461a      	mov	r2, r3
 8004c36:	2100      	movs	r1, #0
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fc0d 	bl	8005458 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004c48:	4013      	ands	r3, r2
 8004c4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4610      	mov	r0, r2
 8004c50:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004c52:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004c54:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	@ 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_DMAEx_List_LinkQ+0x16>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e078      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_DMAEx_List_LinkQ+0x26>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e072      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Get DMA state */
  state = hdma->State;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ca4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d002      	beq.n	8004cb8 <HAL_DMAEx_List_LinkQ+0x40>
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d108      	bne.n	8004cca <HAL_DMAEx_List_LinkQ+0x52>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2240      	movs	r2, #64	@ 0x40
 8004cbc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e05c      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7b1b      	ldrb	r3, [r3, #12]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d104      	bne.n	8004cde <HAL_DMAEx_List_LinkQ+0x66>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e052      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d90 <HAL_DMAEx_List_LinkQ+0x118>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a29      	ldr	r2, [pc, #164]	@ (8004d94 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a28      	ldr	r2, [pc, #160]	@ (8004d98 <HAL_DMAEx_List_LinkQ+0x120>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a26      	ldr	r2, [pc, #152]	@ (8004d9c <HAL_DMAEx_List_LinkQ+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a25      	ldr	r2, [pc, #148]	@ (8004da0 <HAL_DMAEx_List_LinkQ+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a23      	ldr	r2, [pc, #140]	@ (8004da4 <HAL_DMAEx_List_LinkQ+0x12c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a22      	ldr	r2, [pc, #136]	@ (8004da8 <HAL_DMAEx_List_LinkQ+0x130>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_DMAEx_List_LinkQ+0xb6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <HAL_DMAEx_List_LinkQ+0x134>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_DMAEx_List_LinkQ+0xba>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_DMAEx_List_LinkQ+0xbc>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_DMAEx_List_LinkQ+0xd8>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_DMAEx_List_LinkQ+0xd8>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e019      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	2b81      	cmp	r3, #129	@ 0x81
 8004d56:	d108      	bne.n	8004d6a <HAL_DMAEx_List_LinkQ+0xf2>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2204      	movs	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e00c      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2204      	movs	r2, #4
 8004d76:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e003      	b.n	8004d84 <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40020350 	.word	0x40020350
 8004d94:	50020350 	.word	0x50020350
 8004d98:	400203d0 	.word	0x400203d0
 8004d9c:	500203d0 	.word	0x500203d0
 8004da0:	40021350 	.word	0x40021350
 8004da4:	50021350 	.word	0x50021350
 8004da8:	400213d0 	.word	0x400213d0
 8004dac:	500213d0 	.word	0x500213d0

08004db0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a85      	ldr	r2, [pc, #532]	@ (8004fe0 <DMA_List_Init+0x230>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	f000 80a0 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a83      	ldr	r2, [pc, #524]	@ (8004fe4 <DMA_List_Init+0x234>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f000 809a 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a81      	ldr	r2, [pc, #516]	@ (8004fe8 <DMA_List_Init+0x238>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f000 8094 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7f      	ldr	r2, [pc, #508]	@ (8004fec <DMA_List_Init+0x23c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f000 808e 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ff0 <DMA_List_Init+0x240>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f000 8088 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7b      	ldr	r2, [pc, #492]	@ (8004ff4 <DMA_List_Init+0x244>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	f000 8082 	beq.w	8004f10 <DMA_List_Init+0x160>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a79      	ldr	r2, [pc, #484]	@ (8004ff8 <DMA_List_Init+0x248>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d07c      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a78      	ldr	r2, [pc, #480]	@ (8004ffc <DMA_List_Init+0x24c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d077      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a76      	ldr	r2, [pc, #472]	@ (8005000 <DMA_List_Init+0x250>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d072      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <DMA_List_Init+0x254>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d06d      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a73      	ldr	r2, [pc, #460]	@ (8005008 <DMA_List_Init+0x258>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d068      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a72      	ldr	r2, [pc, #456]	@ (800500c <DMA_List_Init+0x25c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d063      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a70      	ldr	r2, [pc, #448]	@ (8005010 <DMA_List_Init+0x260>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d05e      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6f      	ldr	r2, [pc, #444]	@ (8005014 <DMA_List_Init+0x264>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d059      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6d      	ldr	r2, [pc, #436]	@ (8005018 <DMA_List_Init+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d054      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800501c <DMA_List_Init+0x26c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d04f      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6a      	ldr	r2, [pc, #424]	@ (8005020 <DMA_List_Init+0x270>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d04a      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a69      	ldr	r2, [pc, #420]	@ (8005024 <DMA_List_Init+0x274>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d045      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a67      	ldr	r2, [pc, #412]	@ (8005028 <DMA_List_Init+0x278>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d040      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a66      	ldr	r2, [pc, #408]	@ (800502c <DMA_List_Init+0x27c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d03b      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a64      	ldr	r2, [pc, #400]	@ (8005030 <DMA_List_Init+0x280>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d036      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a63      	ldr	r2, [pc, #396]	@ (8005034 <DMA_List_Init+0x284>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d031      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a61      	ldr	r2, [pc, #388]	@ (8005038 <DMA_List_Init+0x288>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02c      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a60      	ldr	r2, [pc, #384]	@ (800503c <DMA_List_Init+0x28c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d027      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8005040 <DMA_List_Init+0x290>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d022      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5d      	ldr	r2, [pc, #372]	@ (8005044 <DMA_List_Init+0x294>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d01d      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8005048 <DMA_List_Init+0x298>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800504c <DMA_List_Init+0x29c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d013      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a58      	ldr	r2, [pc, #352]	@ (8005050 <DMA_List_Init+0x2a0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a57      	ldr	r2, [pc, #348]	@ (8005054 <DMA_List_Init+0x2a4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d009      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a55      	ldr	r2, [pc, #340]	@ (8005058 <DMA_List_Init+0x2a8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <DMA_List_Init+0x160>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a54      	ldr	r2, [pc, #336]	@ (800505c <DMA_List_Init+0x2ac>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d101      	bne.n	8004f14 <DMA_List_Init+0x164>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <DMA_List_Init+0x166>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <DMA_List_Init+0x260>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a28      	ldr	r2, [pc, #160]	@ (8005014 <DMA_List_Init+0x264>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01d      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a27      	ldr	r2, [pc, #156]	@ (8005018 <DMA_List_Init+0x268>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a25      	ldr	r2, [pc, #148]	@ (800501c <DMA_List_Init+0x26c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <DMA_List_Init+0x2a0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2e      	ldr	r2, [pc, #184]	@ (8005054 <DMA_List_Init+0x2a4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8005058 <DMA_List_Init+0x2a8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <DMA_List_Init+0x202>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2b      	ldr	r2, [pc, #172]	@ (800505c <DMA_List_Init+0x2ac>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <DMA_List_Init+0x206>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <DMA_List_Init+0x208>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40020050 	.word	0x40020050
 8004fe4:	50020050 	.word	0x50020050
 8004fe8:	400200d0 	.word	0x400200d0
 8004fec:	500200d0 	.word	0x500200d0
 8004ff0:	40020150 	.word	0x40020150
 8004ff4:	50020150 	.word	0x50020150
 8004ff8:	400201d0 	.word	0x400201d0
 8004ffc:	500201d0 	.word	0x500201d0
 8005000:	40020250 	.word	0x40020250
 8005004:	50020250 	.word	0x50020250
 8005008:	400202d0 	.word	0x400202d0
 800500c:	500202d0 	.word	0x500202d0
 8005010:	40020350 	.word	0x40020350
 8005014:	50020350 	.word	0x50020350
 8005018:	400203d0 	.word	0x400203d0
 800501c:	500203d0 	.word	0x500203d0
 8005020:	40021050 	.word	0x40021050
 8005024:	50021050 	.word	0x50021050
 8005028:	400210d0 	.word	0x400210d0
 800502c:	500210d0 	.word	0x500210d0
 8005030:	40021150 	.word	0x40021150
 8005034:	50021150 	.word	0x50021150
 8005038:	400211d0 	.word	0x400211d0
 800503c:	500211d0 	.word	0x500211d0
 8005040:	40021250 	.word	0x40021250
 8005044:	50021250 	.word	0x50021250
 8005048:	400212d0 	.word	0x400212d0
 800504c:	500212d0 	.word	0x500212d0
 8005050:	40021350 	.word	0x40021350
 8005054:	50021350 	.word	0x50021350
 8005058:	400213d0 	.word	0x400213d0
 800505c:	500213d0 	.word	0x500213d0

08005060 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005072:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005078:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800507e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005084:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d017      	beq.n	80050c6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	051b      	lsls	r3, r3, #20
 80050ac:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80050b0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	3b01      	subs	r3, #1
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80050be:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80050c0:	431a      	orrs	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80050d2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80050d4:	431a      	orrs	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e2:	d10c      	bne.n	80050fe <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d011      	beq.n	8005114 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	e00a      	b.n	8005114 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005106:	d105      	bne.n	8005114 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	431a      	orrs	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00f      	beq.n	800514a <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005142:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005144:	431a      	orrs	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800514e:	b29a      	uxth	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04e      	beq.n	80051fe <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	3b01      	subs	r3, #1
 800516a:	0419      	lsls	r1, r3, #16
 800516c:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <DMA_List_BuildNode+0x2b8>)
 800516e:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005170:	431a      	orrs	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517a:	2b00      	cmp	r3, #0
 800517c:	da06      	bge.n	800518c <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	e005      	b.n	8005198 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519c:	2b00      	cmp	r3, #0
 800519e:	da06      	bge.n	80051ae <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	e005      	b.n	80051ba <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da06      	bge.n	80051d0 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	e005      	b.n	80051dc <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da06      	bge.n	80051f2 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	e005      	b.n	80051fe <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d05d      	beq.n	80052d6 <DMA_List_BuildNode+0x276>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521e:	2b00      	cmp	r3, #0
 8005220:	da09      	bge.n	8005236 <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	425b      	negs	r3, r3
 8005228:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	615a      	str	r2, [r3, #20]
 8005234:	e005      	b.n	8005242 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800523a:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	da0d      	bge.n	8005266 <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	425b      	negs	r3, r3
 8005250:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	0419      	lsls	r1, r3, #16
 800525a:	4b30      	ldr	r3, [pc, #192]	@ (800531c <DMA_List_BuildNode+0x2bc>)
 800525c:	400b      	ands	r3, r1
 800525e:	431a      	orrs	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	615a      	str	r2, [r3, #20]
 8005264:	e009      	b.n	800527a <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	0419      	lsls	r1, r3, #16
 8005270:	4b2a      	ldr	r3, [pc, #168]	@ (800531c <DMA_List_BuildNode+0x2bc>)
 8005272:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005274:	431a      	orrs	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	2b00      	cmp	r3, #0
 8005280:	da08      	bge.n	8005294 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	425b      	negs	r3, r3
 8005288:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	b29a      	uxth	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	619a      	str	r2, [r3, #24]
 8005292:	e004      	b.n	800529e <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005298:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da0b      	bge.n	80052be <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052aa:	425b      	negs	r3, r3
 80052ac:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80052b6:	431a      	orrs	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	619a      	str	r2, [r3, #24]
 80052bc:	e007      	b.n	80052ce <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80052c8:	431a      	orrs	r2, r3
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	619a      	str	r2, [r3, #24]
    }
    /********************************************************************************* CBR2 register value is updated */

    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2200      	movs	r2, #0
 80052d2:	61da      	str	r2, [r3, #28]
 80052d4:	e002      	b.n	80052dc <DMA_List_BuildNode+0x27c>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <DMA_List_BuildNode+0x29e>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80052fc:	e005      	b.n	800530a <DMA_List_BuildNode+0x2aa>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	07ff0000 	.word	0x07ff0000
 800531c:	1fff0000 	.word	0x1fff0000

08005320 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e00a      	b.n	8005362 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e004      	b.n	8005362 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e00e      	b.n	80053be <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e006      	b.n	80053be <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e00b      	b.n	80053ec <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d001      	beq.n	80053ea <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e000      	b.n	80053ec <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00c      	beq.n	800542a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a0d      	ldr	r2, [pc, #52]	@ (8005450 <DMA_List_GetCLLRNodeInfo+0x58>)
 800541a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2207      	movs	r2, #7
 8005426:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005428:	e00b      	b.n	8005442 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005434:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2205      	movs	r2, #5
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	fe010000 	.word	0xfe010000
 8005454:	f8010000 	.word	0xf8010000

08005458 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	@ 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d142      	bne.n	8005502 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800547c:	e01d      	b.n	80054ba <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e00f      	b.n	80054b4 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4413      	add	r3, r2
 80054a4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80054ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3dc      	bcc.n	800547e <DMA_List_FindNode+0x26>
 80054c4:	e029      	b.n	800551a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e00f      	b.n	80054fc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4413      	add	r3, r2
 80054ec:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80054f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	3301      	adds	r3, #1
 8005500:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	429a      	cmp	r2, r3
 800550a:	d206      	bcs.n	800551a <DMA_List_FindNode+0xc2>
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005512:	4013      	ands	r3, r2
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	429a      	cmp	r2, r3
 8005518:	d1d5      	bne.n	80054c6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005526:	4013      	ands	r3, r2
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	429a      	cmp	r2, r3
 800552c:	d001      	beq.n	8005532 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800552e:	2301      	movs	r3, #1
 8005530:	e02b      	b.n	800558a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	461a      	mov	r2, r3
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	461a      	mov	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005574:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8005578:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3724      	adds	r7, #36	@ 0x24
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e147      	b.n	800583a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fb36 	bl	8000c30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0210 	bic.w	r2, r2, #16
 80055d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d4:	f7fd f800 	bl	80025d8 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055da:	e012      	b.n	8005602 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055dc:	f7fc fffc 	bl	80025d8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b0a      	cmp	r3, #10
 80055e8:	d90b      	bls.n	8005602 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ee:	f043 0201 	orr.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e11b      	b.n	800583a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d0e5      	beq.n	80055dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005620:	f7fc ffda 	bl	80025d8 <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005626:	e012      	b.n	800564e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005628:	f7fc ffd6 	bl	80025d8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b0a      	cmp	r3, #10
 8005634:	d90b      	bls.n	800564e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563a:	f043 0201 	orr.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2203      	movs	r2, #3
 8005646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e0f5      	b.n	800583a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0e5      	beq.n	8005628 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0202 	orr.w	r2, r2, #2
 800566a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a74      	ldr	r2, [pc, #464]	@ (8005844 <HAL_FDCAN_Init+0x2ac>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d103      	bne.n	800567e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005676:	4a74      	ldr	r2, [pc, #464]	@ (8005848 <HAL_FDCAN_Init+0x2b0>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	7c1b      	ldrb	r3, [r3, #16]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d108      	bne.n	8005698 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005694:	619a      	str	r2, [r3, #24]
 8005696:	e007      	b.n	80056a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7c5b      	ldrb	r3, [r3, #17]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d108      	bne.n	80056c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056be:	619a      	str	r2, [r3, #24]
 80056c0:	e007      	b.n	80056d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7c9b      	ldrb	r3, [r3, #18]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d108      	bne.n	80056ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056e8:	619a      	str	r2, [r3, #24]
 80056ea:	e007      	b.n	80056fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005720:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0210 	bic.w	r2, r2, #16
 8005730:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d108      	bne.n	800574c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0204 	orr.w	r2, r2, #4
 8005748:	619a      	str	r2, [r3, #24]
 800574a:	e02c      	b.n	80057a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d028      	beq.n	80057a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d01c      	beq.n	8005796 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800576a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0210 	orr.w	r2, r2, #16
 800577a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d110      	bne.n	80057a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0220 	orr.w	r2, r2, #32
 8005792:	619a      	str	r2, [r3, #24]
 8005794:	e007      	b.n	80057a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0220 	orr.w	r2, r2, #32
 80057a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057da:	d115      	bne.n	8005808 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	3b01      	subs	r3, #1
 80057e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	3b01      	subs	r3, #1
 80057f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	3b01      	subs	r3, #1
 80057fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005804:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005806:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9bc 	bl	8005b9c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	4000a400 	.word	0x4000a400
 8005848:	4000a500 	.word	0x4000a500

0800584c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	@ 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005868:	4013      	ands	r3, r2
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005880:	4013      	ands	r3, r2
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005898:	4013      	ands	r3, r2
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80058a6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	4013      	ands	r3, r2
 80058b2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80058be:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	099b      	lsrs	r3, r3, #6
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	099b      	lsrs	r3, r3, #6
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2240      	movs	r2, #64	@ 0x40
 80058fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f92d 	bl	8005b5c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01a      	beq.n	8005944 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d014      	beq.n	8005944 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005922:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800593a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800593c:	6939      	ldr	r1, [r7, #16]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f8ed 	bl	8005b1e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8ac 	bl	8005ab2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005966:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8ac 	bl	8005ac8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800597e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8ac 	bl	8005ade <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	0a5b      	lsrs	r3, r3, #9
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	0a5b      	lsrs	r3, r3, #9
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8a3 	bl	8005af4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	09db      	lsrs	r3, r3, #7
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d019      	beq.n	80059ee <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80059ce:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2280      	movs	r2, #128	@ 0x80
 80059e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f88d 	bl	8005b08 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	0b5b      	lsrs	r3, r3, #13
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	0b5b      	lsrs	r3, r3, #13
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f88f 	bl	8005b34 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	0bdb      	lsrs	r3, r3, #15
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	0bdb      	lsrs	r3, r3, #15
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f885 	bl	8005b48 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	0b9b      	lsrs	r3, r3, #14
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	0b9b      	lsrs	r3, r3, #14
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005a7a:	69f9      	ldr	r1, [r7, #28]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f881 	bl	8005b84 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f863 	bl	8005b70 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3730      	adds	r7, #48	@ 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8005c58 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8005ba6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2b      	ldr	r2, [pc, #172]	@ (8005c5c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d103      	bne.n	8005bba <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005bb8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd0:	041a      	lsls	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bee:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	061a      	lsls	r2, r3, #24
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e005      	b.n	8005c3c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d3f3      	bcc.n	8005c30 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	4000ac00 	.word	0x4000ac00
 8005c5c:	4000a800 	.word	0x4000a800

08005c60 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c6e:	e142      	b.n	8005ef6 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8134 	beq.w	8005ef0 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x38>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b12      	cmp	r3, #18
 8005c96:	d125      	bne.n	8005ce4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	08da      	lsrs	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3208      	adds	r2, #8
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	220f      	movs	r2, #15
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	08da      	lsrs	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d00b      	beq.n	8005d38 <HAL_GPIO_Init+0xd8>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d007      	beq.n	8005d38 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2c:	2b11      	cmp	r3, #17
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b12      	cmp	r3, #18
 8005d36:	d130      	bne.n	8005d9a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	2203      	movs	r2, #3
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6e:	2201      	movs	r2, #1
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f003 0201 	and.w	r2, r3, #1
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d109      	bne.n	8005dba <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d11b      	bne.n	8005dea <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d017      	beq.n	8005dea <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d07c      	beq.n	8005ef0 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005df6:	4a47      	ldr	r2, [pc, #284]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e02:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	220f      	movs	r2, #15
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4013      	ands	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0a9a      	lsrs	r2, r3, #10
 8005e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f18 <HAL_GPIO_Init+0x2b8>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	f002 0203 	and.w	r2, r2, #3
 8005e28:	00d2      	lsls	r2, r2, #3
 8005e2a:	4093      	lsls	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005e32:	4938      	ldr	r1, [pc, #224]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	3318      	adds	r3, #24
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005e40:	4b34      	ldr	r3, [pc, #208]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005e64:	4a2b      	ldr	r2, [pc, #172]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4013      	ands	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005e8e:	4a21      	ldr	r2, [pc, #132]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005e94:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005eba:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <HAL_GPIO_Init+0x2b4>)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f aeb5 	bne.w	8005c70 <HAL_GPIO_Init+0x10>
  }
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	44022000 	.word	0x44022000
 8005f18:	002f7f7f 	.word	0x002f7f7f

08005f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	807b      	strh	r3, [r7, #2]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f2c:	787b      	ldrb	r3, [r7, #1]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f38:	e002      	b.n	8005f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f3a:	887a      	ldrh	r2, [r7, #2]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005f58:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e007      	b.n	8005f7a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 0204 	bic.w	r2, r3, #4
 8005f72:	4905      	ldr	r1, [pc, #20]	@ (8005f88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40030400 	.word	0x40030400

08005f8c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <HAL_ICACHE_Enable+0x1c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a04      	ldr	r2, [pc, #16]	@ (8005fa8 <HAL_ICACHE_Enable+0x1c>)
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40030400 	.word	0x40030400

08005fac <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	4a04      	ldr	r2, [pc, #16]	@ (8005fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	44020800 	.word	0x44020800

08005fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f000 bc28 	b.w	8006830 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe0:	4b94      	ldr	r3, [pc, #592]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 0318 	and.w	r3, r3, #24
 8005fe8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005fea:	4b92      	ldr	r3, [pc, #584]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05b      	beq.n	80060b8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b08      	cmp	r3, #8
 8006004:	d005      	beq.n	8006012 <HAL_RCC_OscConfig+0x46>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b18      	cmp	r3, #24
 800600a:	d114      	bne.n	8006036 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d111      	bne.n	8006036 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f000 bc08 	b.w	8006830 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006020:	4b84      	ldr	r3, [pc, #528]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	4981      	ldr	r1, [pc, #516]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006030:	4313      	orrs	r3, r2
 8006032:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006034:	e040      	b.n	80060b8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d023      	beq.n	8006086 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800603e:	4b7d      	ldr	r3, [pc, #500]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a7c      	ldr	r2, [pc, #496]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fc fac5 	bl	80025d8 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006052:	f7fc fac1 	bl	80025d8 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e3e5      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006064:	4b73      	ldr	r3, [pc, #460]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006070:	4b70      	ldr	r3, [pc, #448]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	496d      	ldr	r1, [pc, #436]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006080:	4313      	orrs	r3, r2
 8006082:	618b      	str	r3, [r1, #24]
 8006084:	e018      	b.n	80060b8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006086:	4b6b      	ldr	r3, [pc, #428]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a6a      	ldr	r2, [pc, #424]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800608c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006092:	f7fc faa1 	bl	80025d8 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800609a:	f7fc fa9d 	bl	80025d8 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e3c1      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80060ac:	4b61      	ldr	r3, [pc, #388]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80a0 	beq.w	8006206 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_OscConfig+0x10c>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b18      	cmp	r3, #24
 80060d0:	d109      	bne.n	80060e6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d106      	bne.n	80060e6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8092 	bne.w	8006206 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e3a4      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ee:	d106      	bne.n	80060fe <HAL_RCC_OscConfig+0x132>
 80060f0:	4b50      	ldr	r3, [pc, #320]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80060f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e058      	b.n	80061b0 <HAL_RCC_OscConfig+0x1e4>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d112      	bne.n	800612c <HAL_RCC_OscConfig+0x160>
 8006106:	4b4b      	ldr	r3, [pc, #300]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4a      	ldr	r2, [pc, #296]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b48      	ldr	r3, [pc, #288]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a47      	ldr	r2, [pc, #284]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006118:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4b45      	ldr	r3, [pc, #276]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a44      	ldr	r2, [pc, #272]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e041      	b.n	80061b0 <HAL_RCC_OscConfig+0x1e4>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006134:	d112      	bne.n	800615c <HAL_RCC_OscConfig+0x190>
 8006136:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3e      	ldr	r2, [pc, #248]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b3c      	ldr	r3, [pc, #240]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3b      	ldr	r2, [pc, #236]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006148:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b39      	ldr	r3, [pc, #228]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a38      	ldr	r2, [pc, #224]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e029      	b.n	80061b0 <HAL_RCC_OscConfig+0x1e4>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006164:	d112      	bne.n	800618c <HAL_RCC_OscConfig+0x1c0>
 8006166:	4b33      	ldr	r3, [pc, #204]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a32      	ldr	r2, [pc, #200]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800616c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	4b30      	ldr	r3, [pc, #192]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2f      	ldr	r2, [pc, #188]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4b2d      	ldr	r3, [pc, #180]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e011      	b.n	80061b0 <HAL_RCC_OscConfig+0x1e4>
 800618c:	4b29      	ldr	r3, [pc, #164]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a28      	ldr	r2, [pc, #160]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 8006192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	4b26      	ldr	r3, [pc, #152]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a25      	ldr	r2, [pc, #148]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 800619e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b23      	ldr	r3, [pc, #140]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80061aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d013      	beq.n	80061e0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fc fa0e 	bl	80025d8 <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80061c0:	f7fc fa0a 	bl	80025d8 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	@ 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e32e      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d2:	4b18      	ldr	r3, [pc, #96]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x1f4>
 80061de:	e012      	b.n	8006206 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e0:	f7fc f9fa 	bl	80025d8 <HAL_GetTick>
 80061e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80061e8:	f7fc f9f6 	bl	80025d8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b64      	cmp	r3, #100	@ 0x64
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e31a      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <HAL_RCC_OscConfig+0x268>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 809a 	beq.w	8006348 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_RCC_OscConfig+0x25a>
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b18      	cmp	r3, #24
 800621e:	d149      	bne.n	80062b4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d146      	bne.n	80062b4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e2fe      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
 8006232:	bf00      	nop
 8006234:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11c      	bne.n	8006278 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800623e:	4b9a      	ldr	r3, [pc, #616]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0218 	and.w	r2, r3, #24
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	d014      	beq.n	8006278 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800624e:	4b96      	ldr	r3, [pc, #600]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 0218 	bic.w	r2, r3, #24
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4993      	ldr	r1, [pc, #588]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006260:	f000 fdd0 	bl	8006e04 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006264:	4b91      	ldr	r3, [pc, #580]	@ (80064ac <HAL_RCC_OscConfig+0x4e0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fc f92b 	bl	80024c4 <HAL_InitTick>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e2db      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fc f9ae 	bl	80025d8 <HAL_GetTick>
 800627c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006280:	f7fc f9aa 	bl	80025d8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e2ce      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006292:	4b85      	ldr	r3, [pc, #532]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800629e:	4b82      	ldr	r3, [pc, #520]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	497e      	ldr	r1, [pc, #504]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80062b2:	e049      	b.n	8006348 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02c      	beq.n	8006316 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80062bc:	4b7a      	ldr	r3, [pc, #488]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f023 0218 	bic.w	r2, r3, #24
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	4977      	ldr	r1, [pc, #476]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7fc f97d 	bl	80025d8 <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80062e2:	f7fc f979 	bl	80025d8 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e29d      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f4:	4b6c      	ldr	r3, [pc, #432]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006300:	4b69      	ldr	r3, [pc, #420]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	4966      	ldr	r1, [pc, #408]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	610b      	str	r3, [r1, #16]
 8006314:	e018      	b.n	8006348 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b64      	ldr	r3, [pc, #400]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a63      	ldr	r2, [pc, #396]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc f959 	bl	80025d8 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800632a:	f7fc f955 	bl	80025d8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e279      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800633c:	4b5a      	ldr	r3, [pc, #360]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d03c      	beq.n	80063ce <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01c      	beq.n	8006396 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800635c:	4b52      	ldr	r3, [pc, #328]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800635e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006362:	4a51      	ldr	r2, [pc, #324]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006364:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006368:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fc f934 	bl	80025d8 <HAL_GetTick>
 8006370:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006374:	f7fc f930 	bl	80025d8 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e254      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006386:	4b48      	ldr	r3, [pc, #288]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800638c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ef      	beq.n	8006374 <HAL_RCC_OscConfig+0x3a8>
 8006394:	e01b      	b.n	80063ce <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006396:	4b44      	ldr	r3, [pc, #272]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800639c:	4a42      	ldr	r2, [pc, #264]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800639e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a6:	f7fc f917 	bl	80025d8 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80063ae:	f7fc f913 	bl	80025d8 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e237      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063c0:	4b39      	ldr	r3, [pc, #228]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 80063c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ef      	bne.n	80063ae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80d2 	beq.w	8006580 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80063dc:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x4e4>)
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d118      	bne.n	800641a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80063e8:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <HAL_RCC_OscConfig+0x4e4>)
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	4a30      	ldr	r2, [pc, #192]	@ (80064b0 <HAL_RCC_OscConfig+0x4e4>)
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063f4:	f7fc f8f0 	bl	80025d8 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063fc:	f7fc f8ec 	bl	80025d8 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e210      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800640e:	4b28      	ldr	r3, [pc, #160]	@ (80064b0 <HAL_RCC_OscConfig+0x4e4>)
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f0      	beq.n	80063fc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d108      	bne.n	8006434 <HAL_RCC_OscConfig+0x468>
 8006422:	4b21      	ldr	r3, [pc, #132]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006428:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006432:	e074      	b.n	800651e <HAL_RCC_OscConfig+0x552>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d118      	bne.n	800646e <HAL_RCC_OscConfig+0x4a2>
 800643c:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800643e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006442:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800644c:	4b16      	ldr	r3, [pc, #88]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800644e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006458:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800645c:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800645e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006462:	4a11      	ldr	r2, [pc, #68]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800646c:	e057      	b.n	800651e <HAL_RCC_OscConfig+0x552>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b05      	cmp	r3, #5
 8006474:	d11e      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4e8>
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800647c:	4a0a      	ldr	r2, [pc, #40]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800647e:	f043 0304 	orr.w	r3, r3, #4
 8006482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006486:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800648c:	4a06      	ldr	r2, [pc, #24]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800648e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006492:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006496:	4b04      	ldr	r3, [pc, #16]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 8006498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800649c:	4a02      	ldr	r2, [pc, #8]	@ (80064a8 <HAL_RCC_OscConfig+0x4dc>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064a6:	e03a      	b.n	800651e <HAL_RCC_OscConfig+0x552>
 80064a8:	44020c00 	.word	0x44020c00
 80064ac:	20000004 	.word	0x20000004
 80064b0:	44020800 	.word	0x44020800
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b85      	cmp	r3, #133	@ 0x85
 80064ba:	d118      	bne.n	80064ee <HAL_RCC_OscConfig+0x522>
 80064bc:	4ba2      	ldr	r3, [pc, #648]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064c2:	4aa1      	ldr	r2, [pc, #644]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064d2:	4a9d      	ldr	r2, [pc, #628]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064dc:	4b9a      	ldr	r3, [pc, #616]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e2:	4a99      	ldr	r2, [pc, #612]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064ec:	e017      	b.n	800651e <HAL_RCC_OscConfig+0x552>
 80064ee:	4b96      	ldr	r3, [pc, #600]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f4:	4a94      	ldr	r2, [pc, #592]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064fe:	4b92      	ldr	r3, [pc, #584]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006504:	4a90      	ldr	r2, [pc, #576]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006506:	f023 0304 	bic.w	r3, r3, #4
 800650a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800650e:	4b8e      	ldr	r3, [pc, #568]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006514:	4a8c      	ldr	r2, [pc, #560]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006526:	f7fc f857 	bl	80025d8 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652c:	e00a      	b.n	8006544 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fc f853 	bl	80025d8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e175      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006544:	4b80      	ldr	r3, [pc, #512]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0ed      	beq.n	800652e <HAL_RCC_OscConfig+0x562>
 8006552:	e015      	b.n	8006580 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7fc f840 	bl	80025d8 <HAL_GetTick>
 8006558:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800655a:	e00a      	b.n	8006572 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fc f83c 	bl	80025d8 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e15e      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006572:	4b75      	ldr	r3, [pc, #468]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ed      	bne.n	800655c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d036      	beq.n	80065fa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006594:	4b6c      	ldr	r3, [pc, #432]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6b      	ldr	r2, [pc, #428]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 800659a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800659e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a0:	f7fc f81a 	bl	80025d8 <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80065a8:	f7fc f816 	bl	80025d8 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e13a      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80065ba:	4b63      	ldr	r3, [pc, #396]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x5dc>
 80065c6:	e018      	b.n	80065fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065c8:	4b5f      	ldr	r3, [pc, #380]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80065ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fc f800 	bl	80025d8 <HAL_GetTick>
 80065d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80065dc:	f7fb fffc 	bl	80025d8 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e120      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80065ee:	4b56      	ldr	r3, [pc, #344]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8115 	beq.w	800682e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b18      	cmp	r3, #24
 8006608:	f000 80af 	beq.w	800676a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	2b02      	cmp	r3, #2
 8006612:	f040 8086 	bne.w	8006722 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006616:	4b4c      	ldr	r3, [pc, #304]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4b      	ldr	r2, [pc, #300]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 800661c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fb ffd9 	bl	80025d8 <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800662a:	f7fb ffd5 	bl	80025d8 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e0f9      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800663c:	4b42      	ldr	r3, [pc, #264]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1f0      	bne.n	800662a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006648:	4b3f      	ldr	r3, [pc, #252]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006650:	f023 0303 	bic.w	r3, r3, #3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800665c:	0212      	lsls	r2, r2, #8
 800665e:	430a      	orrs	r2, r1
 8006660:	4939      	ldr	r1, [pc, #228]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	628b      	str	r3, [r1, #40]	@ 0x28
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	3b01      	subs	r3, #1
 800666c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	3b01      	subs	r3, #1
 8006676:	025b      	lsls	r3, r3, #9
 8006678:	b29b      	uxth	r3, r3
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	3b01      	subs	r3, #1
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	3b01      	subs	r3, #1
 8006690:	061b      	lsls	r3, r3, #24
 8006692:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006696:	492c      	ldr	r1, [pc, #176]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800669c:	4b2a      	ldr	r3, [pc, #168]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	4a29      	ldr	r2, [pc, #164]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ac:	4a26      	ldr	r2, [pc, #152]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80066b2:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066b8:	f043 0310 	orr.w	r3, r3, #16
 80066bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80066be:	4b22      	ldr	r3, [pc, #136]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f023 020c 	bic.w	r2, r3, #12
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	491f      	ldr	r1, [pc, #124]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	f023 0220 	bic.w	r2, r3, #32
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066dc:	491a      	ldr	r1, [pc, #104]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066e2:	4b19      	ldr	r3, [pc, #100]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80066ee:	4b16      	ldr	r3, [pc, #88]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 80066f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fb ff6d 	bl	80025d8 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006702:	f7fb ff69 	bl	80025d8 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e08d      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x736>
 8006720:	e085      	b.n	800682e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006722:	4b09      	ldr	r3, [pc, #36]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a08      	ldr	r2, [pc, #32]	@ (8006748 <HAL_RCC_OscConfig+0x77c>)
 8006728:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800672c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672e:	f7fb ff53 	bl	80025d8 <HAL_GetTick>
 8006732:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006734:	e00a      	b.n	800674c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006736:	f7fb ff4f 	bl	80025d8 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d903      	bls.n	800674c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e073      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
 8006748:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800674c:	4b3a      	ldr	r3, [pc, #232]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1ee      	bne.n	8006736 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006758:	4b37      	ldr	r3, [pc, #220]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	4a36      	ldr	r2, [pc, #216]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 800675e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	6293      	str	r3, [r2, #40]	@ 0x28
 8006768:	e061      	b.n	800682e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800676a:	4b33      	ldr	r3, [pc, #204]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 800676c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006770:	4b31      	ldr	r3, [pc, #196]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 8006772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006774:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	2b01      	cmp	r3, #1
 800677c:	d031      	beq.n	80067e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 0203 	and.w	r2, r3, #3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d12a      	bne.n	80067e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d122      	bne.n	80067e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d11a      	bne.n	80067e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	0a5b      	lsrs	r3, r3, #9
 80067b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d111      	bne.n	80067e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	0c1b      	lsrs	r3, r3, #16
 80067c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d108      	bne.n	80067e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d001      	beq.n	80067e6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e024      	b.n	8006830 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d01a      	beq.n	800682e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80067f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	4a0e      	ldr	r2, [pc, #56]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fb fee8 	bl	80025d8 <HAL_GetTick>
 8006808:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800680a:	bf00      	nop
 800680c:	f7fb fee4 	bl	80025d8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4293      	cmp	r3, r2
 8006816:	d0f9      	beq.n	800680c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681c:	4a06      	ldr	r2, [pc, #24]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006822:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	4a04      	ldr	r2, [pc, #16]	@ (8006838 <HAL_RCC_OscConfig+0x86c>)
 8006828:	f043 0310 	orr.w	r3, r3, #16
 800682c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	44020c00 	.word	0x44020c00

0800683c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e19e      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b83      	ldr	r3, [pc, #524]	@ (8006a60 <HAL_RCC_ClockConfig+0x224>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d910      	bls.n	8006880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b80      	ldr	r3, [pc, #512]	@ (8006a60 <HAL_RCC_ClockConfig+0x224>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 020f 	bic.w	r2, r3, #15
 8006866:	497e      	ldr	r1, [pc, #504]	@ (8006a60 <HAL_RCC_ClockConfig+0x224>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a60 <HAL_RCC_ClockConfig+0x224>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e186      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	4b74      	ldr	r3, [pc, #464]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800689a:	429a      	cmp	r2, r3
 800689c:	d909      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800689e:	4b71      	ldr	r3, [pc, #452]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	496d      	ldr	r1, [pc, #436]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d012      	beq.n	80068e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	4b68      	ldr	r3, [pc, #416]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d909      	bls.n	80068e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80068d0:	4b64      	ldr	r3, [pc, #400]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4961      	ldr	r1, [pc, #388]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d010      	beq.n	8006912 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d908      	bls.n	8006912 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006900:	4b58      	ldr	r3, [pc, #352]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4955      	ldr	r1, [pc, #340]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 800690e:	4313      	orrs	r3, r2
 8006910:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d010      	beq.n	8006940 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	4b50      	ldr	r3, [pc, #320]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	429a      	cmp	r2, r3
 800692c:	d908      	bls.n	8006940 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800692e:	4b4d      	ldr	r3, [pc, #308]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 020f 	bic.w	r2, r3, #15
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	494a      	ldr	r1, [pc, #296]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 800693c:	4313      	orrs	r3, r2
 800693e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8093 	beq.w	8006a74 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d107      	bne.n	8006966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006956:	4b43      	ldr	r3, [pc, #268]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d121      	bne.n	80069a6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e113      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d107      	bne.n	800697e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800696e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d115      	bne.n	80069a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e107      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d107      	bne.n	8006996 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006986:	4b37      	ldr	r3, [pc, #220]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e0fb      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006996:	4b33      	ldr	r3, [pc, #204]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e0f3      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80069a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f023 0203 	bic.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	492c      	ldr	r1, [pc, #176]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b8:	f7fb fe0e 	bl	80025d8 <HAL_GetTick>
 80069bc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d112      	bne.n	80069ec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80069c8:	f7fb fe06 	bl	80025d8 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0d7      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069de:	4b21      	ldr	r3, [pc, #132]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0318 	and.w	r3, r3, #24
 80069e6:	2b18      	cmp	r3, #24
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x18c>
 80069ea:	e043      	b.n	8006a74 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d112      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80069f6:	f7fb fdef 	bl	80025d8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0c0      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a0c:	4b15      	ldr	r3, [pc, #84]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f003 0318 	and.w	r3, r3, #24
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d1ee      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ba>
 8006a18:	e02c      	b.n	8006a74 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d122      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006a22:	e00a      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006a24:	f7fb fdd8 	bl	80025d8 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e0a9      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <HAL_RCC_ClockConfig+0x228>)
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f003 0318 	and.w	r3, r3, #24
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d1ee      	bne.n	8006a24 <HAL_RCC_ClockConfig+0x1e8>
 8006a46:	e015      	b.n	8006a74 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006a48:	f7fb fdc6 	bl	80025d8 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d906      	bls.n	8006a68 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e097      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
 8006a5e:	bf00      	nop
 8006a60:	40022000 	.word	0x40022000
 8006a64:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a68:	4b4b      	ldr	r3, [pc, #300]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f003 0318 	and.w	r3, r3, #24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e9      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4b44      	ldr	r3, [pc, #272]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d208      	bcs.n	8006aa2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006a90:	4b41      	ldr	r3, [pc, #260]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f023 020f 	bic.w	r2, r3, #15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	493e      	ldr	r1, [pc, #248]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d210      	bcs.n	8006ad2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f023 020f 	bic.w	r2, r3, #15
 8006ab8:	4938      	ldr	r1, [pc, #224]	@ (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac0:	4b36      	ldr	r3, [pc, #216]	@ (8006b9c <HAL_RCC_ClockConfig+0x360>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e05d      	b.n	8006b8e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d208      	bcs.n	8006b00 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006aee:	4b2a      	ldr	r3, [pc, #168]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	4927      	ldr	r1, [pc, #156]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d012      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	4b21      	ldr	r3, [pc, #132]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d209      	bcs.n	8006b32 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	491a      	ldr	r1, [pc, #104]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	4b15      	ldr	r3, [pc, #84]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d209      	bcs.n	8006b64 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006b50:	4b11      	ldr	r3, [pc, #68]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	490e      	ldr	r1, [pc, #56]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006b64:	f000 f822 	bl	8006bac <HAL_RCC_GetSysClockFreq>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <HAL_RCC_ClockConfig+0x35c>)
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	490b      	ldr	r1, [pc, #44]	@ (8006ba0 <HAL_RCC_ClockConfig+0x364>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba4 <HAL_RCC_ClockConfig+0x368>)
 8006b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <HAL_RCC_ClockConfig+0x36c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fb fc9e 	bl	80024c4 <HAL_InitTick>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	44020c00 	.word	0x44020c00
 8006b9c:	40022000 	.word	0x40022000
 8006ba0:	0800b344 	.word	0x0800b344
 8006ba4:	20000000 	.word	0x20000000
 8006ba8:	20000004 	.word	0x20000004

08006bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b089      	sub	sp, #36	@ 0x24
 8006bb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006bb2:	4b8c      	ldr	r3, [pc, #560]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 0318 	and.w	r3, r3, #24
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006bbe:	4b8a      	ldr	r3, [pc, #552]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	e107      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bc4:	4b87      	ldr	r3, [pc, #540]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 0318 	and.w	r3, r3, #24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d112      	bne.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006bd0:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bdc:	4b81      	ldr	r3, [pc, #516]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	08db      	lsrs	r3, r3, #3
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	4a81      	ldr	r2, [pc, #516]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x240>)
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	e0f1      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x240>)
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e0ee      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f003 0318 	and.w	r3, r3, #24
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d102      	bne.n	8006c08 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c02:	4b7b      	ldr	r3, [pc, #492]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0x244>)
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e0e5      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c08:	4b76      	ldr	r3, [pc, #472]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f003 0318 	and.w	r3, r3, #24
 8006c10:	2b18      	cmp	r3, #24
 8006c12:	f040 80dd 	bne.w	8006dd0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006c16:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006c20:	4b70      	ldr	r3, [pc, #448]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	0a1b      	lsrs	r3, r3, #8
 8006c26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006c2c:	4b6d      	ldr	r3, [pc, #436]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006c38:	4b6a      	ldr	r3, [pc, #424]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c50:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80b7 	beq.w	8006dca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d003      	beq.n	8006c6a <HAL_RCC_GetSysClockFreq+0xbe>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d056      	beq.n	8006d16 <HAL_RCC_GetSysClockFreq+0x16a>
 8006c68:	e077      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02d      	beq.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	4a5a      	ldr	r2, [pc, #360]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x240>)
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca0:	4b50      	ldr	r3, [pc, #320]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006df4 <HAL_RCC_GetSysClockFreq+0x248>
 8006cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ccc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006cd0:	e065      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cdc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x24c>
 8006ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006df4 <HAL_RCC_GetSysClockFreq+0x248>
 8006cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d10:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006d14:	e043      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d20:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006dfc <HAL_RCC_GetSysClockFreq+0x250>
 8006d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d28:	4b2e      	ldr	r3, [pc, #184]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006df4 <HAL_RCC_GetSysClockFreq+0x248>
 8006d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d54:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006d58:	e021      	b.n	8006d9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e00 <HAL_RCC_GetSysClockFreq+0x254>
 8006d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d80:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006df4 <HAL_RCC_GetSysClockFreq+0x248>
 8006d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006d9c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006d9e:	4b11      	ldr	r3, [pc, #68]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da2:	0a5b      	lsrs	r3, r3, #9
 8006da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da8:	3301      	adds	r3, #1
 8006daa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006db6:	edd7 6a06 	vldr	s13, [r7, #24]
 8006dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc2:	ee17 3a90 	vmov	r3, s15
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e004      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	e001      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006dd0:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x240>)
 8006dd2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3724      	adds	r7, #36	@ 0x24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	44020c00 	.word	0x44020c00
 8006de8:	003d0900 	.word	0x003d0900
 8006dec:	03d09000 	.word	0x03d09000
 8006df0:	017d7840 	.word	0x017d7840
 8006df4:	46000000 	.word	0x46000000
 8006df8:	4c742400 	.word	0x4c742400
 8006dfc:	4bbebc20 	.word	0x4bbebc20
 8006e00:	4a742400 	.word	0x4a742400

08006e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006e08:	f7ff fed0 	bl	8006bac <HAL_RCC_GetSysClockFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006e12:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006e16:	4907      	ldr	r1, [pc, #28]	@ (8006e34 <HAL_RCC_GetHCLKFreq+0x30>)
 8006e18:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006e1a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e22:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <HAL_RCC_GetHCLKFreq+0x34>)
 8006e24:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006e26:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <HAL_RCC_GetHCLKFreq+0x34>)
 8006e28:	681b      	ldr	r3, [r3, #0]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	44020c00 	.word	0x44020c00
 8006e34:	0800b344 	.word	0x0800b344
 8006e38:	20000000 	.word	0x20000000

08006e3c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b0d8      	sub	sp, #352	@ 0x160
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006e60:	2500      	movs	r5, #0
 8006e62:	ea54 0305 	orrs.w	r3, r4, r5
 8006e66:	d00b      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006e68:	4bcd      	ldr	r3, [pc, #820]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e6e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	4ac9      	ldr	r2, [pc, #804]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f002 0801 	and.w	r8, r2, #1
 8006e8c:	f04f 0900 	mov.w	r9, #0
 8006e90:	ea58 0309 	orrs.w	r3, r8, r9
 8006e94:	d042      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9c:	2b05      	cmp	r3, #5
 8006e9e:	d823      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ef1 	.word	0x08006ef1
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ef1 	.word	0x08006ef1
 8006eb8:	08006ef1 	.word	0x08006ef1
 8006ebc:	08006ef1 	.word	0x08006ef1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 ff42 	bl	8008d50 <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006ed2:	e00e      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ed8:	3330      	adds	r3, #48	@ 0x30
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 ffd0 	bl	8008e80 <RCCEx_PLL3_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10c      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006efa:	4ba9      	ldr	r3, [pc, #676]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f00:	f023 0107 	bic.w	r1, r3, #7
 8006f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0a:	4aa5      	ldr	r2, [pc, #660]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f002 0a02 	and.w	sl, r2, #2
 8006f28:	f04f 0b00 	mov.w	fp, #0
 8006f2c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f30:	f000 8088 	beq.w	8007044 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f3a:	2b28      	cmp	r3, #40	@ 0x28
 8006f3c:	d868      	bhi.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08007019 	.word	0x08007019
 8006f48:	08007011 	.word	0x08007011
 8006f4c:	08007011 	.word	0x08007011
 8006f50:	08007011 	.word	0x08007011
 8006f54:	08007011 	.word	0x08007011
 8006f58:	08007011 	.word	0x08007011
 8006f5c:	08007011 	.word	0x08007011
 8006f60:	08007011 	.word	0x08007011
 8006f64:	08006fe9 	.word	0x08006fe9
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007011 	.word	0x08007011
 8006f70:	08007011 	.word	0x08007011
 8006f74:	08007011 	.word	0x08007011
 8006f78:	08007011 	.word	0x08007011
 8006f7c:	08007011 	.word	0x08007011
 8006f80:	08007011 	.word	0x08007011
 8006f84:	08006ffd 	.word	0x08006ffd
 8006f88:	08007011 	.word	0x08007011
 8006f8c:	08007011 	.word	0x08007011
 8006f90:	08007011 	.word	0x08007011
 8006f94:	08007011 	.word	0x08007011
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08007011 	.word	0x08007011
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007019 	.word	0x08007019
 8006fa8:	08007011 	.word	0x08007011
 8006fac:	08007011 	.word	0x08007011
 8006fb0:	08007011 	.word	0x08007011
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007011 	.word	0x08007011
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007011 	.word	0x08007011
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	08007019 	.word	0x08007019
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fec:	3308      	adds	r3, #8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 feae 	bl	8008d50 <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006ffa:	e00e      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007000:	3330      	adds	r3, #48	@ 0x30
 8007002:	4618      	mov	r0, r3
 8007004:	f001 ff3c 	bl	8008e80 <RCCEx_PLL3_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800700e:	e004      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007016:	e000      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10c      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007022:	4b5f      	ldr	r3, [pc, #380]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007028:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800702c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007032:	4a5b      	ldr	r2, [pc, #364]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007034:	430b      	orrs	r3, r1
 8007036:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800703a:	e003      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007040:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f002 0304 	and.w	r3, r2, #4
 8007050:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800705a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800705e:	460b      	mov	r3, r1
 8007060:	4313      	orrs	r3, r2
 8007062:	d04e      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800706a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800706e:	d02c      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007070:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007074:	d825      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800707a:	d028      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 800707c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007080:	d81f      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007082:	2bc0      	cmp	r3, #192	@ 0xc0
 8007084:	d025      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007086:	2bc0      	cmp	r3, #192	@ 0xc0
 8007088:	d81b      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800708a:	2b80      	cmp	r3, #128	@ 0x80
 800708c:	d00f      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x272>
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	d817      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01f      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d113      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800709a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800709e:	3308      	adds	r3, #8
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fe55 	bl	8008d50 <RCCEx_PLL2_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80070ac:	e014      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070b2:	3330      	adds	r3, #48	@ 0x30
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fee3 	bl	8008e80 <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80070c0:	e00a      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80070ca:	bf00      	nop
 80070cc:	e004      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80070ce:	bf00      	nop
 80070d0:	e002      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80070d2:	bf00      	nop
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80070d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10c      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80070e0:	4b2f      	ldr	r3, [pc, #188]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80070e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070e6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80070ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070f0:	4a2b      	ldr	r2, [pc, #172]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80070f2:	430b      	orrs	r3, r1
 80070f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80070f8:	e003      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f002 0308 	and.w	r3, r2, #8
 800710e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007112:	2300      	movs	r3, #0
 8007114:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007118:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800711c:	460b      	mov	r3, r1
 800711e:	4313      	orrs	r3, r2
 8007120:	d056      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007128:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800712c:	d031      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800712e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007132:	d82a      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007138:	d02d      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713e:	d824      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007140:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007144:	d029      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007146:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800714a:	d81e      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007150:	d011      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007156:	d818      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d023      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800715c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007160:	d113      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007162:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007166:	3308      	adds	r3, #8
 8007168:	4618      	mov	r0, r3
 800716a:	f001 fdf1 	bl	8008d50 <RCCEx_PLL2_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007174:	e017      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800717a:	3330      	adds	r3, #48	@ 0x30
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fe7f 	bl	8008e80 <RCCEx_PLL3_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007188:	e00d      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007190:	e009      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007192:	bf00      	nop
 8007194:	e007      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007196:	bf00      	nop
 8007198:	e005      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800719a:	bf00      	nop
 800719c:	e003      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800719e:	bf00      	nop
 80071a0:	44020c00 	.word	0x44020c00
        break;
 80071a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80071ae:	4bbb      	ldr	r3, [pc, #748]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80071b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071b4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80071b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071be:	4ab7      	ldr	r2, [pc, #732]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80071c0:	430b      	orrs	r3, r1
 80071c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071c6:	e003      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f002 0310 	and.w	r3, r2, #16
 80071dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80071e6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d053      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80071f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071fa:	d031      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80071fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007200:	d82a      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007206:	d02d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720c:	d824      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800720e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007212:	d029      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007218:	d81e      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800721a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721e:	d011      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007224:	d818      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d020      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722e:	d113      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007234:	3308      	adds	r3, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fd8a 	bl	8008d50 <RCCEx_PLL2_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007242:	e014      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007248:	3330      	adds	r3, #48	@ 0x30
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fe18 	bl	8008e80 <RCCEx_PLL3_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007256:	e00a      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800725e:	e006      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007260:	bf00      	nop
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10c      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007276:	4b89      	ldr	r3, [pc, #548]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800727c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007286:	4a85      	ldr	r2, [pc, #532]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007288:	430b      	orrs	r3, r1
 800728a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007294:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f002 0320 	and.w	r3, r2, #32
 80072a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80072ae:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d053      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80072b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80072c2:	d031      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80072c4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80072c8:	d82a      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80072ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ce:	d02d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80072d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d4:	d824      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80072d6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80072da:	d029      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80072dc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80072e0:	d81e      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80072e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e6:	d011      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d818      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d020      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80072f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f6:	d113      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fc:	3308      	adds	r3, #8
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fd26 	bl	8008d50 <RCCEx_PLL2_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800730a:	e014      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800730c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007310:	3330      	adds	r3, #48	@ 0x30
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fdb4 	bl	8008e80 <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800731e:	e00a      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800733e:	4b57      	ldr	r3, [pc, #348]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007344:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	4a53      	ldr	r2, [pc, #332]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007350:	430b      	orrs	r3, r1
 8007352:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007356:	e003      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800735c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800736c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007370:	2300      	movs	r3, #0
 8007372:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007376:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800737a:	460b      	mov	r3, r1
 800737c:	4313      	orrs	r3, r2
 800737e:	d053      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800738a:	d031      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800738c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007390:	d82a      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007396:	d02d      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739c:	d824      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800739e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80073a2:	d029      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80073a8:	d81e      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80073aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073ae:	d011      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80073b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073b4:	d818      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d020      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073be:	d113      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c4:	3308      	adds	r3, #8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fcc2 	bl	8008d50 <RCCEx_PLL2_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80073d2:	e014      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073d8:	3330      	adds	r3, #48	@ 0x30
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 fd50 	bl	8008e80 <RCCEx_PLL3_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80073e6:	e00a      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073ee:	e006      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80073f0:	bf00      	nop
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007406:	4b25      	ldr	r3, [pc, #148]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800740c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007418:	430b      	orrs	r3, r1
 800741a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007424:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007434:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800743e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007442:	460b      	mov	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	d055      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800744c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800744e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007452:	d033      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007454:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007458:	d82c      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800745a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800745e:	d02f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007460:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007464:	d826      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007466:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800746a:	d02b      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800746c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007470:	d820      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007476:	d013      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747c:	d81a      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d022      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007486:	d115      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800748c:	3308      	adds	r3, #8
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fc5e 	bl	8008d50 <RCCEx_PLL2_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800749a:	e016      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800749c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a4:	3330      	adds	r3, #48	@ 0x30
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 fcea 	bl	8008e80 <RCCEx_PLL3_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80074b2:	e00a      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074ba:	e006      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80074bc:	bf00      	nop
 80074be:	e004      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80074c0:	bf00      	nop
 80074c2:	e002      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80074c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10c      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80074d2:	4bbb      	ldr	r3, [pc, #748]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80074dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074e2:	4ab7      	ldr	r2, [pc, #732]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80074e4:	430b      	orrs	r3, r1
 80074e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074ea:	e003      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80074f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007500:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800750a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800750e:	460b      	mov	r3, r1
 8007510:	4313      	orrs	r3, r2
 8007512:	d053      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800751e:	d031      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007520:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007524:	d82a      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800752a:	d02d      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800752c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007530:	d824      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007532:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007536:	d029      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007538:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800753c:	d81e      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800753e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007542:	d011      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007548:	d818      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d020      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800754e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007552:	d113      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007558:	3308      	adds	r3, #8
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fbf8 	bl	8008d50 <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007566:	e014      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007568:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800756c:	3330      	adds	r3, #48	@ 0x30
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fc86 	bl	8008e80 <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800757a:	e00a      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007582:	e006      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007584:	bf00      	nop
 8007586:	e004      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007588:	bf00      	nop
 800758a:	e002      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007592:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800759a:	4b89      	ldr	r3, [pc, #548]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800759c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80075a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075aa:	4a85      	ldr	r2, [pc, #532]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80075bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80075c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80075d2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	d055      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80075dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80075e8:	d031      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80075ea:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80075ee:	d82a      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f4:	d02d      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80075f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fa:	d824      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80075fc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007600:	d029      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007602:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007606:	d81e      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800760c:	d011      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d818      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d020      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800761c:	d113      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800761e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007622:	3308      	adds	r3, #8
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fb93 	bl	8008d50 <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007630:	e014      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007632:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007636:	3330      	adds	r3, #48	@ 0x30
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fc21 	bl	8008e80 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007644:	e00a      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800764c:	e006      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800764e:	bf00      	nop
 8007650:	e004      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007652:	bf00      	nop
 8007654:	e002      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800765a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007664:	4b56      	ldr	r3, [pc, #344]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007666:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800766a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800766e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007676:	4a52      	ldr	r2, [pc, #328]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007678:	430b      	orrs	r3, r1
 800767a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007684:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007694:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800769e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d044      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80076a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	d823      	bhi.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	08007705 	.word	0x08007705
 80076c0:	080076d5 	.word	0x080076d5
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	08007705 	.word	0x08007705
 80076cc:	08007705 	.word	0x08007705
 80076d0:	08007705 	.word	0x08007705
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d8:	3308      	adds	r3, #8
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fb38 	bl	8008d50 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80076e6:	e00e      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ec:	3330      	adds	r3, #48	@ 0x30
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fbc6 	bl	8008e80 <RCCEx_PLL3_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80076fa:	e004      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007702:	e000      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007706:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10d      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800770e:	4b2c      	ldr	r3, [pc, #176]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007710:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007714:	f023 0107 	bic.w	r1, r3, #7
 8007718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007720:	4a27      	ldr	r2, [pc, #156]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007722:	430b      	orrs	r3, r1
 8007724:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007728:	e003      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800772e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800773e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007742:	2300      	movs	r3, #0
 8007744:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007748:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800774c:	460b      	mov	r3, r1
 800774e:	4313      	orrs	r3, r2
 8007750:	d04f      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	2b50      	cmp	r3, #80	@ 0x50
 800775c:	d029      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800775e:	2b50      	cmp	r3, #80	@ 0x50
 8007760:	d823      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007762:	2b40      	cmp	r3, #64	@ 0x40
 8007764:	d027      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007766:	2b40      	cmp	r3, #64	@ 0x40
 8007768:	d81f      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800776a:	2b30      	cmp	r3, #48	@ 0x30
 800776c:	d025      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800776e:	2b30      	cmp	r3, #48	@ 0x30
 8007770:	d81b      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007772:	2b20      	cmp	r3, #32
 8007774:	d00f      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007776:	2b20      	cmp	r3, #32
 8007778:	d817      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d022      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800777e:	2b10      	cmp	r3, #16
 8007780:	d113      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007786:	3308      	adds	r3, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fae1 	bl	8008d50 <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007794:	e017      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007796:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800779a:	3330      	adds	r3, #48	@ 0x30
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fb6f 	bl	8008e80 <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80077a8:	e00d      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80077b0:	e009      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80077b2:	bf00      	nop
 80077b4:	e007      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80077b6:	bf00      	nop
 80077b8:	e005      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80077ba:	bf00      	nop
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80077be:	bf00      	nop
 80077c0:	44020c00 	.word	0x44020c00
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10d      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80077ce:	4baf      	ldr	r3, [pc, #700]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80077d4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80077d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e0:	4aaa      	ldr	r2, [pc, #680]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80077e2:	430b      	orrs	r3, r1
 80077e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80077e8:	e003      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80077fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007802:	2300      	movs	r3, #0
 8007804:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007808:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800780c:	460b      	mov	r3, r1
 800780e:	4313      	orrs	r3, r2
 8007810:	d055      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800781a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800781e:	d031      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007820:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007824:	d82a      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800782a:	d02d      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800782c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007830:	d824      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007836:	d029      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007838:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800783c:	d81e      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800783e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007842:	d011      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007848:	d818      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d020      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800784e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007852:	d113      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007858:	3308      	adds	r3, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fa78 	bl	8008d50 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007866:	e014      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786c:	3330      	adds	r3, #48	@ 0x30
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fb06 	bl	8008e80 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800787a:	e00a      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007882:	e006      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800789a:	4b7c      	ldr	r3, [pc, #496]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800789c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ac:	4a77      	ldr	r2, [pc, #476]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078b4:	e003      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d03d      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80078de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078ea:	d01b      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80078ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078f0:	d814      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80078f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f6:	d017      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80078f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078fc:	d80e      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007906:	d109      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800790c:	3330      	adds	r3, #48	@ 0x30
 800790e:	4618      	mov	r0, r3
 8007910:	f001 fab6 	bl	8008e80 <RCCEx_PLL3_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800791a:	e008      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007922:	e004      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800792c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007936:	4b55      	ldr	r3, [pc, #340]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800793c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007940:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007948:	4a50      	ldr	r2, [pc, #320]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800794a:	430b      	orrs	r3, r1
 800794c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007950:	e003      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007952:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007956:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800795a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007966:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800796a:	2300      	movs	r3, #0
 800796c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007970:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d03d      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800797a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800797e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007982:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007986:	d01b      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007988:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800798c:	d814      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800798e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007992:	d017      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007994:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007998:	d80e      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d014      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800799e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079a2:	d109      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	3330      	adds	r3, #48	@ 0x30
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 fa68 	bl	8008e80 <RCCEx_PLL3_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80079b6:	e008      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079be:	e004      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80079c0:	bf00      	nop
 80079c2:	e002      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80079c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10d      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80079d2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80079d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079d8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80079dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e4:	4a29      	ldr	r2, [pc, #164]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079ec:	e003      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a06:	2300      	movs	r3, #0
 8007a08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a0c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a10:	460b      	mov	r3, r1
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d040      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a22:	d01b      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007a24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a28:	d814      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007a2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a2e:	d017      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007a30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a34:	d80e      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d014      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a44:	3330      	adds	r3, #48	@ 0x30
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 fa1a 	bl	8008e80 <RCCEx_PLL3_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007a52:	e008      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a5a:	e004      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d110      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007a6e:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a74:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a80:	4a02      	ldr	r2, [pc, #8]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a88:	e006      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007a8a:	bf00      	nop
 8007a8c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	d03d      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ac0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ac4:	d01b      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007ac6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007aca:	d814      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007acc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad0:	d017      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007ad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad6:	d80e      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d014      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae0:	d109      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae6:	3330      	adds	r3, #48	@ 0x30
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 f9c9 	bl	8008e80 <RCCEx_PLL3_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007afc:	e004      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007afe:	bf00      	nop
 8007b00:	e002      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10d      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007b10:	4bbe      	ldr	r3, [pc, #760]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b22:	4aba      	ldr	r2, [pc, #744]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b2a:	e003      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4313      	orrs	r3, r2
 8007b52:	d035      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b60:	d015      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b66:	d80e      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d012      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b70:	d109      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b76:	3330      	adds	r3, #48	@ 0x30
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 f981 	bl	8008e80 <RCCEx_PLL3_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007b84:	e006      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b8c:	e002      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007b8e:	bf00      	nop
 8007b90:	e000      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10d      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ba2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bae:	4a97      	ldr	r2, [pc, #604]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	2100      	movs	r1, #0
 8007bca:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d00e      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007be0:	4b8a      	ldr	r3, [pc, #552]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	4a89      	ldr	r2, [pc, #548]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007be6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bea:	61d3      	str	r3, [r2, #28]
 8007bec:	4b87      	ldr	r3, [pc, #540]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007bee:	69d9      	ldr	r1, [r3, #28]
 8007bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007bf8:	4a84      	ldr	r2, [pc, #528]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c14:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d055      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c26:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007c2a:	d031      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007c2c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007c30:	d82a      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c36:	d02d      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3c:	d824      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c42:	d029      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c48:	d81e      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4e:	d011      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c54:	d818      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c5e:	d113      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c64:	3308      	adds	r3, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 f872 	bl	8008d50 <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007c72:	e014      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c78:	3330      	adds	r3, #48	@ 0x30
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f900 	bl	8008e80 <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007c86:	e00a      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c8e:	e006      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007c90:	bf00      	nop
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007ca6:	4b59      	ldr	r3, [pc, #356]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ca8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007cac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cb8:	4a54      	ldr	r2, [pc, #336]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007cc0:	e003      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ce0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d055      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cf2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007cf6:	d031      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007cf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007cfc:	d82a      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d02:	d02d      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d08:	d824      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d0e:	d029      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007d10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d14:	d81e      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1a:	d011      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d20:	d818      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d020      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2a:	d113      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d30:	3308      	adds	r3, #8
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f80c 	bl	8008d50 <RCCEx_PLL2_Config>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007d3e:	e014      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d44:	3330      	adds	r3, #48	@ 0x30
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f89a 	bl	8008e80 <RCCEx_PLL3_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007d52:	e00a      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d5a:	e006      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007d5c:	bf00      	nop
 8007d5e:	e004      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007d60:	bf00      	nop
 8007d62:	e002      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007d72:	4b26      	ldr	r3, [pc, #152]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d84:	4a21      	ldr	r2, [pc, #132]	@ (8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007db0:	460b      	mov	r3, r1
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d057      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007dbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dc2:	d033      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dc8:	d82c      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dce:	d02f      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007dd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dd4:	d826      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007dd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dda:	d02b      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007de0:	d820      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de6:	d013      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dec:	d81a      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d022      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df6:	d115      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ffa6 	bl	8008d50 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007e0a:	e016      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007e0c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e14:	3330      	adds	r3, #48	@ 0x30
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 f832 	bl	8008e80 <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007e22:	e00a      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e2a:	e006      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007e2c:	bf00      	nop
 8007e2e:	e004      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007e30:	bf00      	nop
 8007e32:	e002      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007e34:	bf00      	nop
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10d      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007e42:	4bbb      	ldr	r3, [pc, #748]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007e48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e54:	4ab6      	ldr	r2, [pc, #728]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007e56:	430b      	orrs	r3, r1
 8007e58:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007e5c:	e003      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e62:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	d055      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e8e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007e92:	d031      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007e94:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007e98:	d82a      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e9e:	d02d      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ea4:	d824      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eaa:	d029      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007eac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eb0:	d81e      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eb6:	d011      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ebc:	d818      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d020      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ec6:	d113      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ecc:	3308      	adds	r3, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 ff3e 	bl	8008d50 <RCCEx_PLL2_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007eda:	e014      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ee0:	3330      	adds	r3, #48	@ 0x30
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 ffcc 	bl	8008e80 <RCCEx_PLL3_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007eee:	e00a      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ef6:	e006      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007ef8:	bf00      	nop
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007efc:	bf00      	nop
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10d      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007f0e:	4b88      	ldr	r3, [pc, #544]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f14:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f20:	4a83      	ldr	r2, [pc, #524]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007f28:	e003      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f48:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	d055      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007f5e:	d031      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007f60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007f64:	d82a      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007f66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f6a:	d02d      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007f6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f70:	d824      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007f72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f76:	d029      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007f78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f7c:	d81e      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f82:	d011      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f88:	d818      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d020      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f92:	d113      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f98:	3308      	adds	r3, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fed8 	bl	8008d50 <RCCEx_PLL2_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007fa6:	e014      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fac:	3330      	adds	r3, #48	@ 0x30
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 ff66 	bl	8008e80 <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fc2:	e006      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007fc4:	bf00      	nop
 8007fc6:	e004      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007fc8:	bf00      	nop
 8007fca:	e002      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10d      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007fda:	4b55      	ldr	r3, [pc, #340]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007fdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007fe0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fec:	4a50      	ldr	r2, [pc, #320]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007ff4:	e003      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ffa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	2100      	movs	r1, #0
 8008008:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800800c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008014:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008018:	460b      	mov	r3, r1
 800801a:	4313      	orrs	r3, r2
 800801c:	d055      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800801e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008022:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800802a:	d031      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800802c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008030:	d82a      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008036:	d02d      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803c:	d824      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800803e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008042:	d029      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008048:	d81e      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800804a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804e:	d011      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008054:	d818      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800805a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800805e:	d113      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008060:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008064:	3308      	adds	r3, #8
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fe72 	bl	8008d50 <RCCEx_PLL2_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008072:	e014      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008078:	3330      	adds	r3, #48	@ 0x30
 800807a:	4618      	mov	r0, r3
 800807c:	f000 ff00 	bl	8008e80 <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008086:	e00a      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800808e:	e006      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008090:	bf00      	nop
 8008092:	e004      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008094:	bf00      	nop
 8008096:	e002      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008098:	bf00      	nop
 800809a:	e000      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800809c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10d      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80080a6:	4b22      	ldr	r3, [pc, #136]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80080a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80080ba:	430b      	orrs	r3, r1
 80080bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80080c0:	e003      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080da:	2300      	movs	r3, #0
 80080dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80080e4:	460b      	mov	r3, r1
 80080e6:	4313      	orrs	r3, r2
 80080e8:	d055      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80080ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080f6:	d035      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80080f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080fc:	d82e      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80080fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008102:	d031      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008104:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008108:	d828      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800810a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810e:	d01b      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008114:	d822      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800811a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800811e:	d009      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008120:	e01c      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008122:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	4a02      	ldr	r2, [pc, #8]	@ (8008130 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800812c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800812e:	e01c      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008130:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008138:	3308      	adds	r3, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fe08 	bl	8008d50 <RCCEx_PLL2_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008146:	e010      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800814c:	3330      	adds	r3, #48	@ 0x30
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fe96 	bl	8008e80 <RCCEx_PLL3_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800815a:	e006      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008162:	e002      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800816a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008172:	4bc3      	ldr	r3, [pc, #780]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008178:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800817c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008184:	4abe      	ldr	r2, [pc, #760]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008186:	430b      	orrs	r3, r1
 8008188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800818c:	e003      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008192:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081b0:	460b      	mov	r3, r1
 80081b2:	4313      	orrs	r3, r2
 80081b4:	d051      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80081b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081c2:	d033      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80081c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081c8:	d82c      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80081ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80081ce:	d02d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80081d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80081d4:	d826      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80081d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081da:	d019      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80081dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e0:	d820      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80081e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081ea:	d007      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80081ec:	e01a      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ee:	4ba4      	ldr	r3, [pc, #656]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	4aa3      	ldr	r2, [pc, #652]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80081fa:	e018      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008200:	3308      	adds	r3, #8
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fda4 	bl	8008d50 <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800820e:	e00e      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008214:	3330      	adds	r3, #48	@ 0x30
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fe32 	bl	8008e80 <RCCEx_PLL3_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008222:	e004      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800822c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10d      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008236:	4b92      	ldr	r3, [pc, #584]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800823c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008244:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008248:	4a8d      	ldr	r2, [pc, #564]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800824a:	430b      	orrs	r3, r1
 800824c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008250:	e003      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008256:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800825a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008266:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008268:	2300      	movs	r3, #0
 800826a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800826c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008270:	460b      	mov	r3, r1
 8008272:	4313      	orrs	r3, r2
 8008274:	d032      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800827a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800827e:	2b05      	cmp	r3, #5
 8008280:	d80f      	bhi.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8008282:	2b03      	cmp	r3, #3
 8008284:	d211      	bcs.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d911      	bls.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800828a:	2b02      	cmp	r3, #2
 800828c:	d109      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800828e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008292:	3308      	adds	r3, #8
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fd5b 	bl	8008d50 <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082a0:	e006      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80082ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80082b8:	4b71      	ldr	r3, [pc, #452]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082be:	f023 0107 	bic.w	r1, r3, #7
 80082c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80082ca:	4a6d      	ldr	r2, [pc, #436]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80082cc:	430b      	orrs	r3, r1
 80082ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80082dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	2100      	movs	r1, #0
 80082e6:	6739      	str	r1, [r7, #112]	@ 0x70
 80082e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80082ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082f2:	460b      	mov	r3, r1
 80082f4:	4313      	orrs	r3, r2
 80082f6:	d024      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80082f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008304:	2b08      	cmp	r3, #8
 8008306:	d005      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800830e:	e002      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008310:	bf00      	nop
 8008312:	e000      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008316:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10d      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800831e:	4b58      	ldr	r3, [pc, #352]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008324:	f023 0108 	bic.w	r1, r3, #8
 8008328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800832c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008330:	4a53      	ldr	r2, [pc, #332]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008332:	430b      	orrs	r3, r1
 8008334:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008338:	e003      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800833e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800834e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008350:	2300      	movs	r3, #0
 8008352:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008354:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008358:	460b      	mov	r3, r1
 800835a:	4313      	orrs	r3, r2
 800835c:	f000 80b9 	beq.w	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008360:	4b48      	ldr	r3, [pc, #288]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	4a47      	ldr	r2, [pc, #284]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800836c:	f7fa f934 	bl	80025d8 <HAL_GetTick>
 8008370:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008374:	e00b      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008376:	f7fa f92f 	bl	80025d8 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d903      	bls.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800838c:	e005      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800838e:	4b3d      	ldr	r3, [pc, #244]	@ (8008484 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0ed      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800839a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 8093 	bne.w	80084ca <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083a4:	4b36      	ldr	r3, [pc, #216]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80083b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d023      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80083ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083be:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80083c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01b      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083d8:	4b29      	ldr	r3, [pc, #164]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083de:	4a28      	ldr	r2, [pc, #160]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083e8:	4b25      	ldr	r3, [pc, #148]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ee:	4a24      	ldr	r2, [pc, #144]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083f8:	4a21      	ldr	r2, [pc, #132]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80083fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008402:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d019      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840e:	f7fa f8e3 	bl	80025d8 <HAL_GetTick>
 8008412:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008416:	e00d      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008418:	f7fa f8de 	bl	80025d8 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008428:	429a      	cmp	r2, r3
 800842a:	d903      	bls.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008432:	e006      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008434:	4b12      	ldr	r3, [pc, #72]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0ea      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008446:	2b00      	cmp	r3, #0
 8008448:	d13a      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800844a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800844e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800845a:	d115      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800845c:	4b08      	ldr	r3, [pc, #32]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008468:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008472:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008476:	4a02      	ldr	r2, [pc, #8]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008478:	430b      	orrs	r3, r1
 800847a:	61d3      	str	r3, [r2, #28]
 800847c:	e00a      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800847e:	bf00      	nop
 8008480:	44020c00 	.word	0x44020c00
 8008484:	44020800 	.word	0x44020800
 8008488:	4b9f      	ldr	r3, [pc, #636]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	4a9e      	ldr	r2, [pc, #632]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800848e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008492:	61d3      	str	r3, [r2, #28]
 8008494:	4b9c      	ldr	r3, [pc, #624]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800849a:	4a9b      	ldr	r2, [pc, #620]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800849c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80084a4:	4b98      	ldr	r3, [pc, #608]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084a6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80084aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80084b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b6:	4a94      	ldr	r2, [pc, #592]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80084b8:	430b      	orrs	r3, r1
 80084ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80084be:	e008      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80084c8:	e003      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80084de:	663b      	str	r3, [r7, #96]	@ 0x60
 80084e0:	2300      	movs	r3, #0
 80084e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80084e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80084e8:	460b      	mov	r3, r1
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d035      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80084ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80084f6:	2b30      	cmp	r3, #48	@ 0x30
 80084f8:	d014      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80084fa:	2b30      	cmp	r3, #48	@ 0x30
 80084fc:	d80e      	bhi.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d012      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008502:	2b20      	cmp	r3, #32
 8008504:	d80a      	bhi.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d010      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800850a:	2b10      	cmp	r3, #16
 800850c:	d106      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850e:	4b7e      	ldr	r3, [pc, #504]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	4a7d      	ldr	r2, [pc, #500]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008518:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800851a:	e008      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008522:	e004      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008524:	bf00      	nop
 8008526:	e002      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008528:	bf00      	nop
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800852c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008536:	4b74      	ldr	r3, [pc, #464]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800853c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008544:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008548:	4a6f      	ldr	r2, [pc, #444]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800854a:	430b      	orrs	r3, r1
 800854c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008550:	e003      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008556:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800855a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008566:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008568:	2300      	movs	r3, #0
 800856a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800856c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008570:	460b      	mov	r3, r1
 8008572:	4313      	orrs	r3, r2
 8008574:	d033      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800857a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008582:	2b40      	cmp	r3, #64	@ 0x40
 8008584:	d007      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008586:	e010      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008588:	4b5f      	ldr	r3, [pc, #380]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	4a5e      	ldr	r2, [pc, #376]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800858e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008592:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008594:	e00d      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800859a:	3308      	adds	r3, #8
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fbd7 	bl	8008d50 <RCCEx_PLL2_Config>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80085a8:	e003      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10d      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80085ba:	4b53      	ldr	r3, [pc, #332]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085c0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80085c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80085cc:	4a4e      	ldr	r2, [pc, #312]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80085ce:	430b      	orrs	r3, r1
 80085d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80085d4:	e003      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80085de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80085ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80085ec:	2300      	movs	r3, #0
 80085ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80085f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80085f4:	460b      	mov	r3, r1
 80085f6:	4313      	orrs	r3, r2
 80085f8:	d033      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80085fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008606:	2b80      	cmp	r3, #128	@ 0x80
 8008608:	d007      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800860a:	e010      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4b3e      	ldr	r3, [pc, #248]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	4a3d      	ldr	r2, [pc, #244]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008616:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008618:	e00d      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800861a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800861e:	3308      	adds	r3, #8
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fb95 	bl	8008d50 <RCCEx_PLL2_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800862c:	e003      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800863e:	4b32      	ldr	r3, [pc, #200]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008644:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800864c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008650:	4a2d      	ldr	r2, [pc, #180]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008652:	430b      	orrs	r3, r1
 8008654:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008658:	e003      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800865e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008662:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800866e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008670:	2300      	movs	r3, #0
 8008672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008674:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008678:	460b      	mov	r3, r1
 800867a:	4313      	orrs	r3, r2
 800867c:	d04a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800867e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008686:	2b04      	cmp	r3, #4
 8008688:	d827      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800868a:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086b3 	.word	0x080086b3
 8008698:	080086c7 	.word	0x080086c7
 800869c:	080086e3 	.word	0x080086e3
 80086a0:	080086e3 	.word	0x080086e3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a4:	4b18      	ldr	r3, [pc, #96]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a8:	4a17      	ldr	r2, [pc, #92]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80086aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80086b0:	e018      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086b6:	3308      	adds	r3, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fb49 	bl	8008d50 <RCCEx_PLL2_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80086c4:	e00e      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ca:	3330      	adds	r3, #48	@ 0x30
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fbd7 	bl	8008e80 <RCCEx_PLL3_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80086d8:	e004      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80086e0:	e000      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80086e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10f      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80086ec:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80086ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086f2:	f023 0107 	bic.w	r1, r3, #7
 80086f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086fe:	4a02      	ldr	r2, [pc, #8]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008700:	430b      	orrs	r3, r1
 8008702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008706:	e005      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008708:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008720:	643b      	str	r3, [r7, #64]	@ 0x40
 8008722:	2300      	movs	r3, #0
 8008724:	647b      	str	r3, [r7, #68]	@ 0x44
 8008726:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800872a:	460b      	mov	r3, r1
 800872c:	4313      	orrs	r3, r2
 800872e:	f000 8081 	beq.w	8008834 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800873a:	2b20      	cmp	r3, #32
 800873c:	d85f      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800873e:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	080087c9 	.word	0x080087c9
 8008748:	080087ff 	.word	0x080087ff
 800874c:	080087ff 	.word	0x080087ff
 8008750:	080087ff 	.word	0x080087ff
 8008754:	080087ff 	.word	0x080087ff
 8008758:	080087ff 	.word	0x080087ff
 800875c:	080087ff 	.word	0x080087ff
 8008760:	080087ff 	.word	0x080087ff
 8008764:	080087d7 	.word	0x080087d7
 8008768:	080087ff 	.word	0x080087ff
 800876c:	080087ff 	.word	0x080087ff
 8008770:	080087ff 	.word	0x080087ff
 8008774:	080087ff 	.word	0x080087ff
 8008778:	080087ff 	.word	0x080087ff
 800877c:	080087ff 	.word	0x080087ff
 8008780:	080087ff 	.word	0x080087ff
 8008784:	080087eb 	.word	0x080087eb
 8008788:	080087ff 	.word	0x080087ff
 800878c:	080087ff 	.word	0x080087ff
 8008790:	080087ff 	.word	0x080087ff
 8008794:	080087ff 	.word	0x080087ff
 8008798:	080087ff 	.word	0x080087ff
 800879c:	080087ff 	.word	0x080087ff
 80087a0:	080087ff 	.word	0x080087ff
 80087a4:	08008807 	.word	0x08008807
 80087a8:	080087ff 	.word	0x080087ff
 80087ac:	080087ff 	.word	0x080087ff
 80087b0:	080087ff 	.word	0x080087ff
 80087b4:	080087ff 	.word	0x080087ff
 80087b8:	080087ff 	.word	0x080087ff
 80087bc:	080087ff 	.word	0x080087ff
 80087c0:	080087ff 	.word	0x080087ff
 80087c4:	08008807 	.word	0x08008807
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c8:	4bab      	ldr	r3, [pc, #684]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	4aaa      	ldr	r2, [pc, #680]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80087ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80087d4:	e018      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087da:	3308      	adds	r3, #8
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fab7 	bl	8008d50 <RCCEx_PLL2_Config>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80087e8:	e00e      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ee:	3330      	adds	r3, #48	@ 0x30
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fb45 	bl	8008e80 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80087fc:	e004      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008804:	e000      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008808:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10d      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008810:	4b99      	ldr	r3, [pc, #612]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008816:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800881a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800881e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008822:	4a95      	ldr	r2, [pc, #596]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008824:	430b      	orrs	r3, r1
 8008826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800882a:	e003      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008830:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008846:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800884a:	460b      	mov	r3, r1
 800884c:	4313      	orrs	r3, r2
 800884e:	d04e      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885c:	d02e      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800885e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008862:	d827      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008864:	2bc0      	cmp	r3, #192	@ 0xc0
 8008866:	d02b      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008868:	2bc0      	cmp	r3, #192	@ 0xc0
 800886a:	d823      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800886c:	2b80      	cmp	r3, #128	@ 0x80
 800886e:	d017      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008870:	2b80      	cmp	r3, #128	@ 0x80
 8008872:	d81f      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d007      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800887c:	e01a      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800887e:	4b7e      	ldr	r3, [pc, #504]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008882:	4a7d      	ldr	r2, [pc, #500]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008888:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800888a:	e01a      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800888c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008890:	3308      	adds	r3, #8
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fa5c 	bl	8008d50 <RCCEx_PLL2_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800889e:	e010      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088a4:	3330      	adds	r3, #48	@ 0x30
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 faea 	bl	8008e80 <RCCEx_PLL3_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80088b2:	e006      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80088bc:	bf00      	nop
 80088be:	e000      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80088c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80088ca:	4b6b      	ldr	r3, [pc, #428]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80088cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80088d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088dc:	4a66      	ldr	r2, [pc, #408]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80088de:	430b      	orrs	r3, r1
 80088e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088e4:	e003      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80088ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80088fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80088fc:	2300      	movs	r3, #0
 80088fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008900:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008904:	460b      	mov	r3, r1
 8008906:	4313      	orrs	r3, r2
 8008908:	d055      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800890a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800890e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008912:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008916:	d031      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008918:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800891c:	d82a      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800891e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008922:	d02d      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d824      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800892a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800892e:	d029      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008930:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008934:	d81e      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800893a:	d011      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800893c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008940:	d818      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d020      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800894a:	d113      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800894c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008950:	3308      	adds	r3, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f9fc 	bl	8008d50 <RCCEx_PLL2_Config>
 8008958:	4603      	mov	r3, r0
 800895a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800895e:	e014      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008964:	3330      	adds	r3, #48	@ 0x30
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fa8a 	bl	8008e80 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008972:	e00a      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800897a:	e006      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800897c:	bf00      	nop
 800897e:	e004      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008980:	bf00      	nop
 8008982:	e002      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008984:	bf00      	nop
 8008986:	e000      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800898a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10d      	bne.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008992:	4b39      	ldr	r3, [pc, #228]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008998:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800899c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80089a4:	4a34      	ldr	r2, [pc, #208]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80089a6:	430b      	orrs	r3, r1
 80089a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80089ac:	e003      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80089b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80089b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80089c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089c4:	2300      	movs	r3, #0
 80089c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80089cc:	460b      	mov	r3, r1
 80089ce:	4313      	orrs	r3, r2
 80089d0:	d058      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80089d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80089de:	d031      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80089e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80089e4:	d82a      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80089e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ea:	d02d      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80089ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f0:	d824      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80089f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089f6:	d029      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80089f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089fc:	d81e      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80089fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a02:	d011      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a08:	d818      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d020      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a12:	d113      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a18:	3308      	adds	r3, #8
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f998 	bl	8008d50 <RCCEx_PLL2_Config>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008a26:	e014      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a2c:	3330      	adds	r3, #48	@ 0x30
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fa26 	bl	8008e80 <RCCEx_PLL3_Config>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008a3a:	e00a      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a42:	e006      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008a44:	bf00      	nop
 8008a46:	e004      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008a48:	bf00      	nop
 8008a4a:	e002      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008a4c:	bf00      	nop
 8008a4e:	e000      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d110      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8008a5a:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a60:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a6c:	4902      	ldr	r1, [pc, #8]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008a74:	e006      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008a76:	bf00      	nop
 8008a78:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	6239      	str	r1, [r7, #32]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	d055      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008aa8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008aac:	d031      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008aae:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008ab2:	d82a      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab8:	d02d      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008abe:	d824      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008ac0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008ac4:	d029      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8008ac6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008aca:	d81e      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad0:	d011      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad6:	d818      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d020      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae0:	d113      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 f931 	bl	8008d50 <RCCEx_PLL2_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008af4:	e014      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008afa:	3330      	adds	r3, #48	@ 0x30
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f9bf 	bl	8008e80 <RCCEx_PLL3_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b08:	e00a      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b10:	e006      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008b12:	bf00      	nop
 8008b14:	e004      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008b16:	bf00      	nop
 8008b18:	e002      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10d      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008b28:	4b88      	ldr	r3, [pc, #544]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b2e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b3a:	4984      	ldr	r1, [pc, #528]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008b42:	e003      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	2100      	movs	r1, #0
 8008b56:	61b9      	str	r1, [r7, #24]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b62:	460b      	mov	r3, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	d03d      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d81c      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008b74:	a201      	add	r2, pc, #4	@ (adr r2, 8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008bb7 	.word	0x08008bb7
 8008b80:	08008b8d 	.word	0x08008b8d
 8008b84:	08008b9b 	.word	0x08008b9b
 8008b88:	08008bb7 	.word	0x08008bb7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b90:	4a6e      	ldr	r2, [pc, #440]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b96:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008b98:	e00e      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f8d5 	bl	8008d50 <RCCEx_PLL2_Config>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008bac:	e004      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008bb4:	e000      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10d      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008bc0:	4b62      	ldr	r3, [pc, #392]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008bc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bc6:	f023 0203 	bic.w	r2, r3, #3
 8008bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008bd2:	495e      	ldr	r1, [pc, #376]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008bda:	e003      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008be0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	2100      	movs	r1, #0
 8008bee:	6139      	str	r1, [r7, #16]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d03a      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0c:	d00e      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c12:	d815      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d017      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c1c:	d110      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	4a4a      	ldr	r2, [pc, #296]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c28:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008c2a:	e00e      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c30:	3308      	adds	r3, #8
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f88c 	bl	8008d50 <RCCEx_PLL2_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008c52:	4b3e      	ldr	r3, [pc, #248]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c64:	4939      	ldr	r1, [pc, #228]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008c6c:	e003      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	2100      	movs	r1, #0
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	d038      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c96:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008c9a:	2b30      	cmp	r3, #48	@ 0x30
 8008c9c:	d01b      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008c9e:	2b30      	cmp	r3, #48	@ 0x30
 8008ca0:	d815      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d002      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d007      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008caa:	e010      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cac:	4b27      	ldr	r3, [pc, #156]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb0:	4a26      	ldr	r2, [pc, #152]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cb8:	e00e      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cbe:	3330      	adds	r3, #48	@ 0x30
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f8dd 	bl	8008e80 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ce6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008cf2:	4916      	ldr	r1, [pc, #88]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008cfa:	e003      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6039      	str	r1, [r7, #0]
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	d00c      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008d20:	4b0a      	ldr	r3, [pc, #40]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008d32:	4906      	ldr	r1, [pc, #24]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008d3a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008d44:	46bd      	mov	sp, r7
 8008d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d4a:	bf00      	nop
 8008d4c:	44020c00 	.word	0x44020c00

08008d50 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008d58:	4b48      	ldr	r3, [pc, #288]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a47      	ldr	r2, [pc, #284]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d64:	f7f9 fc38 	bl	80025d8 <HAL_GetTick>
 8008d68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d6a:	e008      	b.n	8008d7e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d6c:	f7f9 fc34 	bl	80025d8 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e07a      	b.n	8008e74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6852      	ldr	r2, [r2, #4]
 8008d9e:	0212      	lsls	r2, r2, #8
 8008da0:	430a      	orrs	r2, r1
 8008da2:	4936      	ldr	r1, [pc, #216]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	025b      	lsls	r3, r3, #9
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	041b      	lsls	r3, r3, #16
 8008dc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	061b      	lsls	r3, r3, #24
 8008dd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008dd8:	4928      	ldr	r1, [pc, #160]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008dde:	4b27      	ldr	r3, [pc, #156]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	f023 020c 	bic.w	r2, r3, #12
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	4924      	ldr	r1, [pc, #144]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008df0:	4b22      	ldr	r3, [pc, #136]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	f023 0220 	bic.w	r2, r3, #32
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	491f      	ldr	r1, [pc, #124]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008e02:	4b1e      	ldr	r3, [pc, #120]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0a:	491c      	ldr	r1, [pc, #112]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008e10:	4b1a      	ldr	r3, [pc, #104]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e16:	f023 0310 	bic.w	r3, r3, #16
 8008e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008e1c:	4b17      	ldr	r3, [pc, #92]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6a12      	ldr	r2, [r2, #32]
 8008e2c:	00d2      	lsls	r2, r2, #3
 8008e2e:	4913      	ldr	r1, [pc, #76]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008e34:	4b11      	ldr	r3, [pc, #68]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e38:	4a10      	ldr	r2, [pc, #64]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e3a:	f043 0310 	orr.w	r3, r3, #16
 8008e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008e40:	4b0e      	ldr	r3, [pc, #56]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a0d      	ldr	r2, [pc, #52]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e4c:	f7f9 fbc4 	bl	80025d8 <HAL_GetTick>
 8008e50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e52:	e008      	b.n	8008e66 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e54:	f7f9 fbc0 	bl	80025d8 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e006      	b.n	8008e74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e66:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <RCCEx_PLL2_Config+0x12c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0

}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	44020c00 	.word	0x44020c00

08008e80 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008e88:	4b48      	ldr	r3, [pc, #288]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a47      	ldr	r2, [pc, #284]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e94:	f7f9 fba0 	bl	80025d8 <HAL_GetTick>
 8008e98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e9a:	e008      	b.n	8008eae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e9c:	f7f9 fb9c 	bl	80025d8 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e07a      	b.n	8008fa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008eae:	4b3f      	ldr	r3, [pc, #252]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f0      	bne.n	8008e9c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008eba:	4b3c      	ldr	r3, [pc, #240]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6852      	ldr	r2, [r2, #4]
 8008ece:	0212      	lsls	r2, r2, #8
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	4936      	ldr	r1, [pc, #216]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	630b      	str	r3, [r1, #48]	@ 0x30
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	025b      	lsls	r3, r3, #9
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	041b      	lsls	r3, r3, #16
 8008ef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	061b      	lsls	r3, r3, #24
 8008f04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f08:	4928      	ldr	r1, [pc, #160]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f0e:	4b27      	ldr	r3, [pc, #156]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f12:	f023 020c 	bic.w	r2, r3, #12
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	4924      	ldr	r1, [pc, #144]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008f20:	4b22      	ldr	r3, [pc, #136]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f24:	f023 0220 	bic.w	r2, r3, #32
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	491f      	ldr	r1, [pc, #124]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008f32:	4b1e      	ldr	r3, [pc, #120]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	491c      	ldr	r1, [pc, #112]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008f40:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f44:	4a19      	ldr	r2, [pc, #100]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f46:	f023 0310 	bic.w	r3, r3, #16
 8008f4a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008f4c:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6a12      	ldr	r2, [r2, #32]
 8008f5c:	00d2      	lsls	r2, r2, #3
 8008f5e:	4913      	ldr	r1, [pc, #76]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008f64:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f68:	4a10      	ldr	r2, [pc, #64]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f6a:	f043 0310 	orr.w	r3, r3, #16
 8008f6e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008f70:	4b0e      	ldr	r3, [pc, #56]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0d      	ldr	r2, [pc, #52]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f7c:	f7f9 fb2c 	bl	80025d8 <HAL_GetTick>
 8008f80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f82:	e008      	b.n	8008f96 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f84:	f7f9 fb28 	bl	80025d8 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e006      	b.n	8008fa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f96:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <RCCEx_PLL3_Config+0x12c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f0      	beq.n	8008f84 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	44020c00 	.word	0x44020c00

08008fb0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e162      	b.n	8009288 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a70      	ldr	r2, [pc, #448]	@ (8009188 <HAL_SPI_Init+0x1d8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d018      	beq.n	8008ffe <HAL_SPI_Init+0x4e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800918c <HAL_SPI_Init+0x1dc>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d013      	beq.n	8008ffe <HAL_SPI_Init+0x4e>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a6d      	ldr	r2, [pc, #436]	@ (8009190 <HAL_SPI_Init+0x1e0>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00e      	beq.n	8008ffe <HAL_SPI_Init+0x4e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a6b      	ldr	r2, [pc, #428]	@ (8009194 <HAL_SPI_Init+0x1e4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d009      	beq.n	8008ffe <HAL_SPI_Init+0x4e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a6a      	ldr	r2, [pc, #424]	@ (8009198 <HAL_SPI_Init+0x1e8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d004      	beq.n	8008ffe <HAL_SPI_Init+0x4e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a68      	ldr	r2, [pc, #416]	@ (800919c <HAL_SPI_Init+0x1ec>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	e000      	b.n	8009000 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008ffe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a5f      	ldr	r2, [pc, #380]	@ (8009188 <HAL_SPI_Init+0x1d8>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d018      	beq.n	8009042 <HAL_SPI_Init+0x92>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a5d      	ldr	r2, [pc, #372]	@ (800918c <HAL_SPI_Init+0x1dc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <HAL_SPI_Init+0x92>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a5c      	ldr	r2, [pc, #368]	@ (8009190 <HAL_SPI_Init+0x1e0>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00e      	beq.n	8009042 <HAL_SPI_Init+0x92>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a5a      	ldr	r2, [pc, #360]	@ (8009194 <HAL_SPI_Init+0x1e4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d009      	beq.n	8009042 <HAL_SPI_Init+0x92>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a59      	ldr	r2, [pc, #356]	@ (8009198 <HAL_SPI_Init+0x1e8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d004      	beq.n	8009042 <HAL_SPI_Init+0x92>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a57      	ldr	r2, [pc, #348]	@ (800919c <HAL_SPI_Init+0x1ec>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d105      	bne.n	800904e <HAL_SPI_Init+0x9e>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d901      	bls.n	800904e <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e11c      	b.n	8009288 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f91e 	bl	8009290 <SPI_GetPacketSize>
 8009054:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a4b      	ldr	r2, [pc, #300]	@ (8009188 <HAL_SPI_Init+0x1d8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d018      	beq.n	8009092 <HAL_SPI_Init+0xe2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a49      	ldr	r2, [pc, #292]	@ (800918c <HAL_SPI_Init+0x1dc>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d013      	beq.n	8009092 <HAL_SPI_Init+0xe2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a48      	ldr	r2, [pc, #288]	@ (8009190 <HAL_SPI_Init+0x1e0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00e      	beq.n	8009092 <HAL_SPI_Init+0xe2>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a46      	ldr	r2, [pc, #280]	@ (8009194 <HAL_SPI_Init+0x1e4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d009      	beq.n	8009092 <HAL_SPI_Init+0xe2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a45      	ldr	r2, [pc, #276]	@ (8009198 <HAL_SPI_Init+0x1e8>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d004      	beq.n	8009092 <HAL_SPI_Init+0xe2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a43      	ldr	r2, [pc, #268]	@ (800919c <HAL_SPI_Init+0x1ec>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Init+0xe8>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d820      	bhi.n	80090da <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800909c:	4a40      	ldr	r2, [pc, #256]	@ (80091a0 <HAL_SPI_Init+0x1f0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d018      	beq.n	80090d4 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a3f      	ldr	r2, [pc, #252]	@ (80091a4 <HAL_SPI_Init+0x1f4>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d013      	beq.n	80090d4 <HAL_SPI_Init+0x124>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a3d      	ldr	r2, [pc, #244]	@ (80091a8 <HAL_SPI_Init+0x1f8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00e      	beq.n	80090d4 <HAL_SPI_Init+0x124>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a3c      	ldr	r2, [pc, #240]	@ (80091ac <HAL_SPI_Init+0x1fc>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d009      	beq.n	80090d4 <HAL_SPI_Init+0x124>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a3a      	ldr	r2, [pc, #232]	@ (80091b0 <HAL_SPI_Init+0x200>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d004      	beq.n	80090d4 <HAL_SPI_Init+0x124>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a39      	ldr	r2, [pc, #228]	@ (80091b4 <HAL_SPI_Init+0x204>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d104      	bne.n	80090de <HAL_SPI_Init+0x12e>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d901      	bls.n	80090de <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e0d4      	b.n	8009288 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d106      	bne.n	80090f8 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f8 f97e 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800911a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009124:	d119      	bne.n	800915a <HAL_SPI_Init+0x1aa>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800912e:	d103      	bne.n	8009138 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10c      	bne.n	800915a <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009148:	d107      	bne.n	800915a <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009158:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d028      	beq.n	80091b8 <HAL_SPI_Init+0x208>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2b06      	cmp	r3, #6
 800916c:	d924      	bls.n	80091b8 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e020      	b.n	80091c8 <HAL_SPI_Init+0x218>
 8009186:	bf00      	nop
 8009188:	40014c00 	.word	0x40014c00
 800918c:	50014c00 	.word	0x50014c00
 8009190:	44002000 	.word	0x44002000
 8009194:	54002000 	.word	0x54002000
 8009198:	40015000 	.word	0x40015000
 800919c:	50015000 	.word	0x50015000
 80091a0:	40013000 	.word	0x40013000
 80091a4:	50013000 	.word	0x50013000
 80091a8:	40003800 	.word	0x40003800
 80091ac:	50003800 	.word	0x50003800
 80091b0:	40003c00 	.word	0x40003c00
 80091b4:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091c6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69da      	ldr	r2, [r3, #28]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d0:	431a      	orrs	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091da:	ea42 0103 	orr.w	r1, r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	431a      	orrs	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800921c:	431a      	orrs	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	431a      	orrs	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009234:	ea42 0103 	orr.w	r1, r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 0201 	bic.w	r2, r2, #1
 8009252:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3307      	adds	r3, #7
 80092ae:	08db      	lsrs	r3, r3, #3
 80092b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e049      	b.n	800936c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7f8 fe9b 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2202      	movs	r2, #2
 80092f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3304      	adds	r3, #4
 8009302:	4619      	mov	r1, r3
 8009304:	4610      	mov	r0, r2
 8009306:	f000 fe59 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e049      	b.n	800941a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f841 	bl	8009422 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f000 fe02 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e049      	b.n	80094dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f841 	bl	80094e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3304      	adds	r3, #4
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f000 fda1 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e049      	b.n	800959e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7f8 fe54 	bl	80021cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 fd40 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d020      	beq.n	800960a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01b      	beq.n	800960a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f06f 0202 	mvn.w	r2, #2
 80095da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	f003 0303 	and.w	r3, r3, #3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fcc5 	bl	8009f80 <HAL_TIM_IC_CaptureCallback>
 80095f6:	e005      	b.n	8009604 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fcb7 	bl	8009f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fcc8 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	d020      	beq.n	8009656 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01b      	beq.n	8009656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f06f 0204 	mvn.w	r2, #4
 8009626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fc9f 	bl	8009f80 <HAL_TIM_IC_CaptureCallback>
 8009642:	e005      	b.n	8009650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fc91 	bl	8009f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fca2 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	2b00      	cmp	r3, #0
 800965e:	d020      	beq.n	80096a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01b      	beq.n	80096a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f06f 0208 	mvn.w	r2, #8
 8009672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	f003 0303 	and.w	r3, r3, #3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fc79 	bl	8009f80 <HAL_TIM_IC_CaptureCallback>
 800968e:	e005      	b.n	800969c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fc6b 	bl	8009f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fc7c 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f003 0310 	and.w	r3, r3, #16
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d020      	beq.n	80096ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f003 0310 	and.w	r3, r3, #16
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01b      	beq.n	80096ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f06f 0210 	mvn.w	r2, #16
 80096be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2208      	movs	r2, #8
 80096c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc53 	bl	8009f80 <HAL_TIM_IC_CaptureCallback>
 80096da:	e005      	b.n	80096e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc45 	bl	8009f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc56 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00c      	beq.n	8009712 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f06f 0201 	mvn.w	r2, #1
 800970a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc23 	bl	8009f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00c      	beq.n	8009740 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 fd8e 	bl	800b25c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009750:	2b00      	cmp	r3, #0
 8009752:	d007      	beq.n	8009764 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800975c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 fd86 	bl	800b270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00c      	beq.n	8009788 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009774:	2b00      	cmp	r3, #0
 8009776:	d007      	beq.n	8009788 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fc10 	bl	8009fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00c      	beq.n	80097ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0220 	mvn.w	r2, #32
 80097a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fd4e 	bl	800b248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80097c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fd5a 	bl	800b284 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 fd52 	bl	800b298 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fd4a 	bl	800b2ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00c      	beq.n	800983c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 fd42 	bl	800b2c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <HAL_TIM_OC_ConfigChannel+0x1e>
 800985e:	2302      	movs	r3, #2
 8009860:	e066      	b.n	8009930 <HAL_TIM_OC_ConfigChannel+0xec>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b14      	cmp	r3, #20
 800986e:	d857      	bhi.n	8009920 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009870:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098cd 	.word	0x080098cd
 800987c:	08009921 	.word	0x08009921
 8009880:	08009921 	.word	0x08009921
 8009884:	08009921 	.word	0x08009921
 8009888:	080098db 	.word	0x080098db
 800988c:	08009921 	.word	0x08009921
 8009890:	08009921 	.word	0x08009921
 8009894:	08009921 	.word	0x08009921
 8009898:	080098e9 	.word	0x080098e9
 800989c:	08009921 	.word	0x08009921
 80098a0:	08009921 	.word	0x08009921
 80098a4:	08009921 	.word	0x08009921
 80098a8:	080098f7 	.word	0x080098f7
 80098ac:	08009921 	.word	0x08009921
 80098b0:	08009921 	.word	0x08009921
 80098b4:	08009921 	.word	0x08009921
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009921 	.word	0x08009921
 80098c0:	08009921 	.word	0x08009921
 80098c4:	08009921 	.word	0x08009921
 80098c8:	08009913 	.word	0x08009913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fc9c 	bl	800a210 <TIM_OC1_SetConfig>
      break;
 80098d8:	e025      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fd57 	bl	800a394 <TIM_OC2_SetConfig>
      break;
 80098e6:	e01e      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fe00 	bl	800a4f4 <TIM_OC3_SetConfig>
      break;
 80098f4:	e017      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 fea7 	bl	800a650 <TIM_OC4_SetConfig>
      break;
 8009902:	e010      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 ff50 	bl	800a7b0 <TIM_OC5_SetConfig>
      break;
 8009910:	e009      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 ffcb 	bl	800a8b4 <TIM_OC6_SetConfig>
      break;
 800991e:	e002      	b.n	8009926 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75fb      	strb	r3, [r7, #23]
      break;
 8009924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800992e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009952:	2302      	movs	r3, #2
 8009954:	e088      	b.n	8009a68 <HAL_TIM_IC_ConfigChannel+0x130>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d11b      	bne.n	800999c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009974:	f001 f90a 	bl	800ab8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	699a      	ldr	r2, [r3, #24]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 020c 	bic.w	r2, r2, #12
 8009986:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6999      	ldr	r1, [r3, #24]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	619a      	str	r2, [r3, #24]
 800999a:	e060      	b.n	8009a5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d11c      	bne.n	80099dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80099b2:	f001 f9bc 	bl	800ad2e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699a      	ldr	r2, [r3, #24]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80099c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6999      	ldr	r1, [r3, #24]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	021a      	lsls	r2, r3, #8
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	619a      	str	r2, [r3, #24]
 80099da:	e040      	b.n	8009a5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b08      	cmp	r3, #8
 80099e0:	d11b      	bne.n	8009a1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80099f2:	f001 fa09 	bl	800ae08 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69da      	ldr	r2, [r3, #28]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 020c 	bic.w	r2, r2, #12
 8009a04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69d9      	ldr	r1, [r3, #28]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	61da      	str	r2, [r3, #28]
 8009a18:	e021      	b.n	8009a5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d11c      	bne.n	8009a5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009a30:	f001 fa26 	bl	800ae80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69da      	ldr	r2, [r3, #28]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69d9      	ldr	r1, [r3, #28]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	021a      	lsls	r2, r3, #8
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	61da      	str	r2, [r3, #28]
 8009a58:	e001      	b.n	8009a5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d101      	bne.n	8009a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e0ff      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b14      	cmp	r3, #20
 8009a9a:	f200 80f0 	bhi.w	8009c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009c7f 	.word	0x08009c7f
 8009aac:	08009c7f 	.word	0x08009c7f
 8009ab0:	08009c7f 	.word	0x08009c7f
 8009ab4:	08009b39 	.word	0x08009b39
 8009ab8:	08009c7f 	.word	0x08009c7f
 8009abc:	08009c7f 	.word	0x08009c7f
 8009ac0:	08009c7f 	.word	0x08009c7f
 8009ac4:	08009b7b 	.word	0x08009b7b
 8009ac8:	08009c7f 	.word	0x08009c7f
 8009acc:	08009c7f 	.word	0x08009c7f
 8009ad0:	08009c7f 	.word	0x08009c7f
 8009ad4:	08009bbb 	.word	0x08009bbb
 8009ad8:	08009c7f 	.word	0x08009c7f
 8009adc:	08009c7f 	.word	0x08009c7f
 8009ae0:	08009c7f 	.word	0x08009c7f
 8009ae4:	08009bfd 	.word	0x08009bfd
 8009ae8:	08009c7f 	.word	0x08009c7f
 8009aec:	08009c7f 	.word	0x08009c7f
 8009af0:	08009c7f 	.word	0x08009c7f
 8009af4:	08009c3d 	.word	0x08009c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fb86 	bl	800a210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0208 	orr.w	r2, r2, #8
 8009b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0204 	bic.w	r2, r2, #4
 8009b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6999      	ldr	r1, [r3, #24]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	619a      	str	r2, [r3, #24]
      break;
 8009b36:	e0a5      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fc28 	bl	800a394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6999      	ldr	r1, [r3, #24]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	021a      	lsls	r2, r3, #8
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	619a      	str	r2, [r3, #24]
      break;
 8009b78:	e084      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fcb7 	bl	800a4f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0208 	orr.w	r2, r2, #8
 8009b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0204 	bic.w	r2, r2, #4
 8009ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69d9      	ldr	r1, [r3, #28]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	61da      	str	r2, [r3, #28]
      break;
 8009bb8:	e064      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fd45 	bl	800a650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69d9      	ldr	r1, [r3, #28]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	021a      	lsls	r2, r3, #8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	61da      	str	r2, [r3, #28]
      break;
 8009bfa:	e043      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fdd4 	bl	800a7b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0208 	orr.w	r2, r2, #8
 8009c16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0204 	bic.w	r2, r2, #4
 8009c26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	691a      	ldr	r2, [r3, #16]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c3a:	e023      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fe36 	bl	800a8b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	021a      	lsls	r2, r3, #8
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c7c:	e002      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop

08009c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e0fe      	b.n	8009eb2 <HAL_TIM_ConfigClockSource+0x21a>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009cd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cf0:	f000 80c9 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cf8:	f200 80ce 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009cfc:	4a6f      	ldr	r2, [pc, #444]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x224>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	f000 80c1 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d04:	4a6d      	ldr	r2, [pc, #436]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x224>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	f200 80c6 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d0c:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x228>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	f000 80b9 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d14:	4a6a      	ldr	r2, [pc, #424]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x228>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	f200 80be 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d1c:	4a69      	ldr	r2, [pc, #420]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x22c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f000 80b1 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d24:	4a67      	ldr	r2, [pc, #412]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x22c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	f200 80b6 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d2c:	4a66      	ldr	r2, [pc, #408]	@ (8009ec8 <HAL_TIM_ConfigClockSource+0x230>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	f000 80a9 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d34:	4a64      	ldr	r2, [pc, #400]	@ (8009ec8 <HAL_TIM_ConfigClockSource+0x230>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	f200 80ae 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d3c:	4a63      	ldr	r2, [pc, #396]	@ (8009ecc <HAL_TIM_ConfigClockSource+0x234>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	f000 80a1 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d44:	4a61      	ldr	r2, [pc, #388]	@ (8009ecc <HAL_TIM_ConfigClockSource+0x234>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	f200 80a6 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d4c:	4a60      	ldr	r2, [pc, #384]	@ (8009ed0 <HAL_TIM_ConfigClockSource+0x238>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	f000 8099 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d54:	4a5e      	ldr	r2, [pc, #376]	@ (8009ed0 <HAL_TIM_ConfigClockSource+0x238>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	f200 809e 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d60:	f000 8091 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d68:	f200 8096 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d70:	f000 8089 	beq.w	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009d74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d78:	f200 808e 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d80:	d03e      	beq.n	8009e00 <HAL_TIM_ConfigClockSource+0x168>
 8009d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d86:	f200 8087 	bhi.w	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d8e:	f000 8086 	beq.w	8009e9e <HAL_TIM_ConfigClockSource+0x206>
 8009d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d96:	d87f      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009d98:	2b70      	cmp	r3, #112	@ 0x70
 8009d9a:	d01a      	beq.n	8009dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8009d9c:	2b70      	cmp	r3, #112	@ 0x70
 8009d9e:	d87b      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009da0:	2b60      	cmp	r3, #96	@ 0x60
 8009da2:	d050      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x1ae>
 8009da4:	2b60      	cmp	r3, #96	@ 0x60
 8009da6:	d877      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009da8:	2b50      	cmp	r3, #80	@ 0x50
 8009daa:	d03c      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x18e>
 8009dac:	2b50      	cmp	r3, #80	@ 0x50
 8009dae:	d873      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009db0:	2b40      	cmp	r3, #64	@ 0x40
 8009db2:	d058      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x1ce>
 8009db4:	2b40      	cmp	r3, #64	@ 0x40
 8009db6:	d86f      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009db8:	2b30      	cmp	r3, #48	@ 0x30
 8009dba:	d064      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009dbc:	2b30      	cmp	r3, #48	@ 0x30
 8009dbe:	d86b      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d060      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d867      	bhi.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d05c      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009dcc:	2b10      	cmp	r3, #16
 8009dce:	d05a      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x1ee>
 8009dd0:	e062      	b.n	8009e98 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009de2:	f001 f8a7 	bl	800af34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	609a      	str	r2, [r3, #8]
      break;
 8009dfe:	e04f      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e10:	f001 f890 	bl	800af34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e22:	609a      	str	r2, [r3, #8]
      break;
 8009e24:	e03c      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e32:	461a      	mov	r2, r3
 8009e34:	f000 ff4c 	bl	800acd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2150      	movs	r1, #80	@ 0x50
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 f85b 	bl	800aefa <TIM_ITRx_SetConfig>
      break;
 8009e44:	e02c      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e52:	461a      	mov	r2, r3
 8009e54:	f000 ffa8 	bl	800ada8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2160      	movs	r1, #96	@ 0x60
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 f84b 	bl	800aefa <TIM_ITRx_SetConfig>
      break;
 8009e64:	e01c      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e72:	461a      	mov	r2, r3
 8009e74:	f000 ff2c 	bl	800acd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2140      	movs	r1, #64	@ 0x40
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f83b 	bl	800aefa <TIM_ITRx_SetConfig>
      break;
 8009e84:	e00c      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f001 f832 	bl	800aefa <TIM_ITRx_SetConfig>
      break;
 8009e96:	e003      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9c:	e000      	b.n	8009ea0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	00100070 	.word	0x00100070
 8009ec0:	00100060 	.word	0x00100060
 8009ec4:	00100050 	.word	0x00100050
 8009ec8:	00100040 	.word	0x00100040
 8009ecc:	00100030 	.word	0x00100030
 8009ed0:	00100020 	.word	0x00100020

08009ed4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e031      	b.n	8009f50 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fd5c 	bl	800a9bc <TIM_SlaveTimer_SetConfig>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d009      	beq.n	8009f1e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e018      	b.n	8009f50 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f2c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f3c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a7a      	ldr	r2, [pc, #488]	@ (800a1b8 <TIM_Base_SetConfig+0x1fc>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d02b      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a79      	ldr	r2, [pc, #484]	@ (800a1bc <TIM_Base_SetConfig+0x200>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d027      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe2:	d023      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fea:	d01f      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a74      	ldr	r2, [pc, #464]	@ (800a1c0 <TIM_Base_SetConfig+0x204>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d01b      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a73      	ldr	r2, [pc, #460]	@ (800a1c4 <TIM_Base_SetConfig+0x208>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d017      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a72      	ldr	r2, [pc, #456]	@ (800a1c8 <TIM_Base_SetConfig+0x20c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a71      	ldr	r2, [pc, #452]	@ (800a1cc <TIM_Base_SetConfig+0x210>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00f      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a70      	ldr	r2, [pc, #448]	@ (800a1d0 <TIM_Base_SetConfig+0x214>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00b      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a6f      	ldr	r2, [pc, #444]	@ (800a1d4 <TIM_Base_SetConfig+0x218>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d007      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a6e      	ldr	r2, [pc, #440]	@ (800a1d8 <TIM_Base_SetConfig+0x21c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d003      	beq.n	800a02c <TIM_Base_SetConfig+0x70>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a6d      	ldr	r2, [pc, #436]	@ (800a1dc <TIM_Base_SetConfig+0x220>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d108      	bne.n	800a03e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a5d      	ldr	r2, [pc, #372]	@ (800a1b8 <TIM_Base_SetConfig+0x1fc>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d05b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a5c      	ldr	r2, [pc, #368]	@ (800a1bc <TIM_Base_SetConfig+0x200>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d057      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a054:	d053      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a05c:	d04f      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a57      	ldr	r2, [pc, #348]	@ (800a1c0 <TIM_Base_SetConfig+0x204>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d04b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a56      	ldr	r2, [pc, #344]	@ (800a1c4 <TIM_Base_SetConfig+0x208>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d047      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a55      	ldr	r2, [pc, #340]	@ (800a1c8 <TIM_Base_SetConfig+0x20c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d043      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a54      	ldr	r2, [pc, #336]	@ (800a1cc <TIM_Base_SetConfig+0x210>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d03f      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a53      	ldr	r2, [pc, #332]	@ (800a1d0 <TIM_Base_SetConfig+0x214>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d03b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a52      	ldr	r2, [pc, #328]	@ (800a1d4 <TIM_Base_SetConfig+0x218>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d037      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a51      	ldr	r2, [pc, #324]	@ (800a1d8 <TIM_Base_SetConfig+0x21c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d033      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a50      	ldr	r2, [pc, #320]	@ (800a1dc <TIM_Base_SetConfig+0x220>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d02f      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a4f      	ldr	r2, [pc, #316]	@ (800a1e0 <TIM_Base_SetConfig+0x224>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d02b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a1e4 <TIM_Base_SetConfig+0x228>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d027      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a4d      	ldr	r2, [pc, #308]	@ (800a1e8 <TIM_Base_SetConfig+0x22c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d023      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a4c      	ldr	r2, [pc, #304]	@ (800a1ec <TIM_Base_SetConfig+0x230>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d01f      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a4b      	ldr	r2, [pc, #300]	@ (800a1f0 <TIM_Base_SetConfig+0x234>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d01b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a4a      	ldr	r2, [pc, #296]	@ (800a1f4 <TIM_Base_SetConfig+0x238>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d017      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a49      	ldr	r2, [pc, #292]	@ (800a1f8 <TIM_Base_SetConfig+0x23c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d013      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a48      	ldr	r2, [pc, #288]	@ (800a1fc <TIM_Base_SetConfig+0x240>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d00f      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a47      	ldr	r2, [pc, #284]	@ (800a200 <TIM_Base_SetConfig+0x244>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00b      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a46      	ldr	r2, [pc, #280]	@ (800a204 <TIM_Base_SetConfig+0x248>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d007      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a45      	ldr	r2, [pc, #276]	@ (800a208 <TIM_Base_SetConfig+0x24c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d003      	beq.n	800a0fe <TIM_Base_SetConfig+0x142>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a44      	ldr	r2, [pc, #272]	@ (800a20c <TIM_Base_SetConfig+0x250>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d108      	bne.n	800a110 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a20      	ldr	r2, [pc, #128]	@ (800a1b8 <TIM_Base_SetConfig+0x1fc>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d023      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1f      	ldr	r2, [pc, #124]	@ (800a1bc <TIM_Base_SetConfig+0x200>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d01f      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a24      	ldr	r2, [pc, #144]	@ (800a1d8 <TIM_Base_SetConfig+0x21c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d01b      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a23      	ldr	r2, [pc, #140]	@ (800a1dc <TIM_Base_SetConfig+0x220>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d017      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a28      	ldr	r2, [pc, #160]	@ (800a1f8 <TIM_Base_SetConfig+0x23c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a27      	ldr	r2, [pc, #156]	@ (800a1fc <TIM_Base_SetConfig+0x240>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a26      	ldr	r2, [pc, #152]	@ (800a200 <TIM_Base_SetConfig+0x244>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a25      	ldr	r2, [pc, #148]	@ (800a204 <TIM_Base_SetConfig+0x248>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a24      	ldr	r2, [pc, #144]	@ (800a208 <TIM_Base_SetConfig+0x24c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x1c8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a23      	ldr	r2, [pc, #140]	@ (800a20c <TIM_Base_SetConfig+0x250>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d103      	bne.n	800a18c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d105      	bne.n	800a1aa <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f023 0201 	bic.w	r2, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	611a      	str	r2, [r3, #16]
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	40012c00 	.word	0x40012c00
 800a1bc:	50012c00 	.word	0x50012c00
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	50000400 	.word	0x50000400
 800a1c8:	40000800 	.word	0x40000800
 800a1cc:	50000800 	.word	0x50000800
 800a1d0:	40000c00 	.word	0x40000c00
 800a1d4:	50000c00 	.word	0x50000c00
 800a1d8:	40013400 	.word	0x40013400
 800a1dc:	50013400 	.word	0x50013400
 800a1e0:	40001800 	.word	0x40001800
 800a1e4:	50001800 	.word	0x50001800
 800a1e8:	40001c00 	.word	0x40001c00
 800a1ec:	50001c00 	.word	0x50001c00
 800a1f0:	40002000 	.word	0x40002000
 800a1f4:	50002000 	.word	0x50002000
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	50014000 	.word	0x50014000
 800a200:	40014400 	.word	0x40014400
 800a204:	50014400 	.word	0x50014400
 800a208:	40014800 	.word	0x40014800
 800a20c:	50014800 	.word	0x50014800

0800a210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	f023 0201 	bic.w	r2, r3, #1
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a23e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f023 0302 	bic.w	r3, r3, #2
 800a25c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a40      	ldr	r2, [pc, #256]	@ (800a36c <TIM_OC1_SetConfig+0x15c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d023      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a3f      	ldr	r2, [pc, #252]	@ (800a370 <TIM_OC1_SetConfig+0x160>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d01f      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a3e      	ldr	r2, [pc, #248]	@ (800a374 <TIM_OC1_SetConfig+0x164>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d01b      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a3d      	ldr	r2, [pc, #244]	@ (800a378 <TIM_OC1_SetConfig+0x168>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d017      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a3c      	ldr	r2, [pc, #240]	@ (800a37c <TIM_OC1_SetConfig+0x16c>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d013      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a3b      	ldr	r2, [pc, #236]	@ (800a380 <TIM_OC1_SetConfig+0x170>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00f      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a3a      	ldr	r2, [pc, #232]	@ (800a384 <TIM_OC1_SetConfig+0x174>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00b      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a39      	ldr	r2, [pc, #228]	@ (800a388 <TIM_OC1_SetConfig+0x178>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d007      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a38      	ldr	r2, [pc, #224]	@ (800a38c <TIM_OC1_SetConfig+0x17c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_OC1_SetConfig+0xa8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a37      	ldr	r2, [pc, #220]	@ (800a390 <TIM_OC1_SetConfig+0x180>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d10c      	bne.n	800a2d2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f023 0308 	bic.w	r3, r3, #8
 800a2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f023 0304 	bic.w	r3, r3, #4
 800a2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a25      	ldr	r2, [pc, #148]	@ (800a36c <TIM_OC1_SetConfig+0x15c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d023      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a24      	ldr	r2, [pc, #144]	@ (800a370 <TIM_OC1_SetConfig+0x160>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d01f      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a23      	ldr	r2, [pc, #140]	@ (800a374 <TIM_OC1_SetConfig+0x164>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01b      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a22      	ldr	r2, [pc, #136]	@ (800a378 <TIM_OC1_SetConfig+0x168>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d017      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a21      	ldr	r2, [pc, #132]	@ (800a37c <TIM_OC1_SetConfig+0x16c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d013      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a20      	ldr	r2, [pc, #128]	@ (800a380 <TIM_OC1_SetConfig+0x170>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00f      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a1f      	ldr	r2, [pc, #124]	@ (800a384 <TIM_OC1_SetConfig+0x174>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00b      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a1e      	ldr	r2, [pc, #120]	@ (800a388 <TIM_OC1_SetConfig+0x178>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d007      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a1d      	ldr	r2, [pc, #116]	@ (800a38c <TIM_OC1_SetConfig+0x17c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d003      	beq.n	800a322 <TIM_OC1_SetConfig+0x112>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a1c      	ldr	r2, [pc, #112]	@ (800a390 <TIM_OC1_SetConfig+0x180>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d111      	bne.n	800a346 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	621a      	str	r2, [r3, #32]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	40012c00 	.word	0x40012c00
 800a370:	50012c00 	.word	0x50012c00
 800a374:	40013400 	.word	0x40013400
 800a378:	50013400 	.word	0x50013400
 800a37c:	40014000 	.word	0x40014000
 800a380:	50014000 	.word	0x50014000
 800a384:	40014400 	.word	0x40014400
 800a388:	50014400 	.word	0x50014400
 800a38c:	40014800 	.word	0x40014800
 800a390:	50014800 	.word	0x50014800

0800a394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	f023 0210 	bic.w	r2, r3, #16
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f023 0320 	bic.w	r3, r3, #32
 800a3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a36      	ldr	r2, [pc, #216]	@ (800a4cc <TIM_OC2_SetConfig+0x138>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d00b      	beq.n	800a410 <TIM_OC2_SetConfig+0x7c>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a35      	ldr	r2, [pc, #212]	@ (800a4d0 <TIM_OC2_SetConfig+0x13c>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d007      	beq.n	800a410 <TIM_OC2_SetConfig+0x7c>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a34      	ldr	r2, [pc, #208]	@ (800a4d4 <TIM_OC2_SetConfig+0x140>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d003      	beq.n	800a410 <TIM_OC2_SetConfig+0x7c>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a33      	ldr	r2, [pc, #204]	@ (800a4d8 <TIM_OC2_SetConfig+0x144>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10d      	bne.n	800a42c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	011b      	lsls	r3, r3, #4
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a42a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a27      	ldr	r2, [pc, #156]	@ (800a4cc <TIM_OC2_SetConfig+0x138>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d023      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a26      	ldr	r2, [pc, #152]	@ (800a4d0 <TIM_OC2_SetConfig+0x13c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d01f      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a25      	ldr	r2, [pc, #148]	@ (800a4d4 <TIM_OC2_SetConfig+0x140>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d01b      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a24      	ldr	r2, [pc, #144]	@ (800a4d8 <TIM_OC2_SetConfig+0x144>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d017      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a23      	ldr	r2, [pc, #140]	@ (800a4dc <TIM_OC2_SetConfig+0x148>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d013      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a22      	ldr	r2, [pc, #136]	@ (800a4e0 <TIM_OC2_SetConfig+0x14c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00f      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a21      	ldr	r2, [pc, #132]	@ (800a4e4 <TIM_OC2_SetConfig+0x150>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d00b      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a20      	ldr	r2, [pc, #128]	@ (800a4e8 <TIM_OC2_SetConfig+0x154>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d007      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ec <TIM_OC2_SetConfig+0x158>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <TIM_OC2_SetConfig+0xe8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a1e      	ldr	r2, [pc, #120]	@ (800a4f0 <TIM_OC2_SetConfig+0x15c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d113      	bne.n	800a4a4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a48a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	4313      	orrs	r3, r2
 800a496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	621a      	str	r2, [r3, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	40012c00 	.word	0x40012c00
 800a4d0:	50012c00 	.word	0x50012c00
 800a4d4:	40013400 	.word	0x40013400
 800a4d8:	50013400 	.word	0x50013400
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	50014000 	.word	0x50014000
 800a4e4:	40014400 	.word	0x40014400
 800a4e8:	50014400 	.word	0x50014400
 800a4ec:	40014800 	.word	0x40014800
 800a4f0:	50014800 	.word	0x50014800

0800a4f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a35      	ldr	r2, [pc, #212]	@ (800a628 <TIM_OC3_SetConfig+0x134>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d00b      	beq.n	800a56e <TIM_OC3_SetConfig+0x7a>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a34      	ldr	r2, [pc, #208]	@ (800a62c <TIM_OC3_SetConfig+0x138>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d007      	beq.n	800a56e <TIM_OC3_SetConfig+0x7a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a33      	ldr	r2, [pc, #204]	@ (800a630 <TIM_OC3_SetConfig+0x13c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d003      	beq.n	800a56e <TIM_OC3_SetConfig+0x7a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a32      	ldr	r2, [pc, #200]	@ (800a634 <TIM_OC3_SetConfig+0x140>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d10d      	bne.n	800a58a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a26      	ldr	r2, [pc, #152]	@ (800a628 <TIM_OC3_SetConfig+0x134>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d023      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a25      	ldr	r2, [pc, #148]	@ (800a62c <TIM_OC3_SetConfig+0x138>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d01f      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a24      	ldr	r2, [pc, #144]	@ (800a630 <TIM_OC3_SetConfig+0x13c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01b      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a23      	ldr	r2, [pc, #140]	@ (800a634 <TIM_OC3_SetConfig+0x140>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d017      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a22      	ldr	r2, [pc, #136]	@ (800a638 <TIM_OC3_SetConfig+0x144>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d013      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a21      	ldr	r2, [pc, #132]	@ (800a63c <TIM_OC3_SetConfig+0x148>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00f      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a20      	ldr	r2, [pc, #128]	@ (800a640 <TIM_OC3_SetConfig+0x14c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00b      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a644 <TIM_OC3_SetConfig+0x150>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d007      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a648 <TIM_OC3_SetConfig+0x154>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_OC3_SetConfig+0xe6>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a64c <TIM_OC3_SetConfig+0x158>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d113      	bne.n	800a602 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	011b      	lsls	r3, r3, #4
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	621a      	str	r2, [r3, #32]
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	50012c00 	.word	0x50012c00
 800a630:	40013400 	.word	0x40013400
 800a634:	50013400 	.word	0x50013400
 800a638:	40014000 	.word	0x40014000
 800a63c:	50014000 	.word	0x50014000
 800a640:	40014400 	.word	0x40014400
 800a644:	50014400 	.word	0x50014400
 800a648:	40014800 	.word	0x40014800
 800a64c:	50014800 	.word	0x50014800

0800a650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a67e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a69e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	031b      	lsls	r3, r3, #12
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a36      	ldr	r2, [pc, #216]	@ (800a788 <TIM_OC4_SetConfig+0x138>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00b      	beq.n	800a6cc <TIM_OC4_SetConfig+0x7c>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a35      	ldr	r2, [pc, #212]	@ (800a78c <TIM_OC4_SetConfig+0x13c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d007      	beq.n	800a6cc <TIM_OC4_SetConfig+0x7c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a34      	ldr	r2, [pc, #208]	@ (800a790 <TIM_OC4_SetConfig+0x140>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC4_SetConfig+0x7c>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a33      	ldr	r2, [pc, #204]	@ (800a794 <TIM_OC4_SetConfig+0x144>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10d      	bne.n	800a6e8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	031b      	lsls	r3, r3, #12
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a27      	ldr	r2, [pc, #156]	@ (800a788 <TIM_OC4_SetConfig+0x138>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d023      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a26      	ldr	r2, [pc, #152]	@ (800a78c <TIM_OC4_SetConfig+0x13c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d01f      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a25      	ldr	r2, [pc, #148]	@ (800a790 <TIM_OC4_SetConfig+0x140>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d01b      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a24      	ldr	r2, [pc, #144]	@ (800a794 <TIM_OC4_SetConfig+0x144>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d017      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a23      	ldr	r2, [pc, #140]	@ (800a798 <TIM_OC4_SetConfig+0x148>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d013      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a22      	ldr	r2, [pc, #136]	@ (800a79c <TIM_OC4_SetConfig+0x14c>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00f      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a21      	ldr	r2, [pc, #132]	@ (800a7a0 <TIM_OC4_SetConfig+0x150>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00b      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a20      	ldr	r2, [pc, #128]	@ (800a7a4 <TIM_OC4_SetConfig+0x154>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d007      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a1f      	ldr	r2, [pc, #124]	@ (800a7a8 <TIM_OC4_SetConfig+0x158>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d003      	beq.n	800a738 <TIM_OC4_SetConfig+0xe8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1e      	ldr	r2, [pc, #120]	@ (800a7ac <TIM_OC4_SetConfig+0x15c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d113      	bne.n	800a760 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a73e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a746:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	019b      	lsls	r3, r3, #6
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	019b      	lsls	r3, r3, #6
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	621a      	str	r2, [r3, #32]
}
 800a77a:	bf00      	nop
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40012c00 	.word	0x40012c00
 800a78c:	50012c00 	.word	0x50012c00
 800a790:	40013400 	.word	0x40013400
 800a794:	50013400 	.word	0x50013400
 800a798:	40014000 	.word	0x40014000
 800a79c:	50014000 	.word	0x50014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	50014400 	.word	0x50014400
 800a7a8:	40014800 	.word	0x40014800
 800a7ac:	50014800 	.word	0x50014800

0800a7b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a7f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a21      	ldr	r2, [pc, #132]	@ (800a88c <TIM_OC5_SetConfig+0xdc>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d023      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a20      	ldr	r2, [pc, #128]	@ (800a890 <TIM_OC5_SetConfig+0xe0>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d01f      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1f      	ldr	r2, [pc, #124]	@ (800a894 <TIM_OC5_SetConfig+0xe4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d01b      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1e      	ldr	r2, [pc, #120]	@ (800a898 <TIM_OC5_SetConfig+0xe8>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d017      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1d      	ldr	r2, [pc, #116]	@ (800a89c <TIM_OC5_SetConfig+0xec>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d013      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8a0 <TIM_OC5_SetConfig+0xf0>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00f      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a4 <TIM_OC5_SetConfig+0xf4>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00b      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8a8 <TIM_OC5_SetConfig+0xf8>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d007      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a19      	ldr	r2, [pc, #100]	@ (800a8ac <TIM_OC5_SetConfig+0xfc>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d003      	beq.n	800a852 <TIM_OC5_SetConfig+0xa2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a18      	ldr	r2, [pc, #96]	@ (800a8b0 <TIM_OC5_SetConfig+0x100>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d109      	bne.n	800a866 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	621a      	str	r2, [r3, #32]
}
 800a880:	bf00      	nop
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	40012c00 	.word	0x40012c00
 800a890:	50012c00 	.word	0x50012c00
 800a894:	40013400 	.word	0x40013400
 800a898:	50013400 	.word	0x50013400
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	50014000 	.word	0x50014000
 800a8a4:	40014400 	.word	0x40014400
 800a8a8:	50014400 	.word	0x50014400
 800a8ac:	40014800 	.word	0x40014800
 800a8b0:	50014800 	.word	0x50014800

0800a8b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	021b      	lsls	r3, r3, #8
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	051b      	lsls	r3, r3, #20
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	4313      	orrs	r3, r2
 800a906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a22      	ldr	r2, [pc, #136]	@ (800a994 <TIM_OC6_SetConfig+0xe0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d023      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a21      	ldr	r2, [pc, #132]	@ (800a998 <TIM_OC6_SetConfig+0xe4>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d01f      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a20      	ldr	r2, [pc, #128]	@ (800a99c <TIM_OC6_SetConfig+0xe8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d01b      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1f      	ldr	r2, [pc, #124]	@ (800a9a0 <TIM_OC6_SetConfig+0xec>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d017      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1e      	ldr	r2, [pc, #120]	@ (800a9a4 <TIM_OC6_SetConfig+0xf0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d013      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a8 <TIM_OC6_SetConfig+0xf4>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d00f      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a1c      	ldr	r2, [pc, #112]	@ (800a9ac <TIM_OC6_SetConfig+0xf8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00b      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b0 <TIM_OC6_SetConfig+0xfc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d007      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a1a      	ldr	r2, [pc, #104]	@ (800a9b4 <TIM_OC6_SetConfig+0x100>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <TIM_OC6_SetConfig+0xa4>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a19      	ldr	r2, [pc, #100]	@ (800a9b8 <TIM_OC6_SetConfig+0x104>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d109      	bne.n	800a96c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a95e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	029b      	lsls	r3, r3, #10
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	621a      	str	r2, [r3, #32]
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40012c00 	.word	0x40012c00
 800a998:	50012c00 	.word	0x50012c00
 800a99c:	40013400 	.word	0x40013400
 800a9a0:	50013400 	.word	0x50013400
 800a9a4:	40014000 	.word	0x40014000
 800a9a8:	50014000 	.word	0x50014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	50014400 	.word	0x50014400
 800a9b4:	40014800 	.word	0x40014800
 800a9b8:	50014800 	.word	0x50014800

0800a9bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a9d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ee:	f023 0307 	bic.w	r3, r3, #7
 800a9f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa0e:	f000 80aa 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa16:	f200 80a3 	bhi.w	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa1a:	4a56      	ldr	r2, [pc, #344]	@ (800ab74 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	f000 80a2 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa22:	4a54      	ldr	r2, [pc, #336]	@ (800ab74 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	f200 809b 	bhi.w	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa2a:	4a53      	ldr	r2, [pc, #332]	@ (800ab78 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	f000 809a 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa32:	4a51      	ldr	r2, [pc, #324]	@ (800ab78 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	f200 8093 	bhi.w	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa3a:	4a50      	ldr	r2, [pc, #320]	@ (800ab7c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	f000 8092 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa42:	4a4e      	ldr	r2, [pc, #312]	@ (800ab7c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	f200 808b 	bhi.w	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa4a:	4a4d      	ldr	r2, [pc, #308]	@ (800ab80 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	f000 808a 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa52:	4a4b      	ldr	r2, [pc, #300]	@ (800ab80 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	f200 8083 	bhi.w	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa5a:	4a4a      	ldr	r2, [pc, #296]	@ (800ab84 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	f000 8082 	beq.w	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa62:	4a48      	ldr	r2, [pc, #288]	@ (800ab84 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d87b      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa68:	4a47      	ldr	r2, [pc, #284]	@ (800ab88 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d07b      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa6e:	4a46      	ldr	r2, [pc, #280]	@ (800ab88 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d875      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa78:	d075      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa7a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa7e:	d86f      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa84:	d06f      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aa86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa8a:	d869      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa8c:	2b70      	cmp	r3, #112	@ 0x70
 800aa8e:	d01a      	beq.n	800aac6 <TIM_SlaveTimer_SetConfig+0x10a>
 800aa90:	2b70      	cmp	r3, #112	@ 0x70
 800aa92:	d865      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa94:	2b60      	cmp	r3, #96	@ 0x60
 800aa96:	d059      	beq.n	800ab4c <TIM_SlaveTimer_SetConfig+0x190>
 800aa98:	2b60      	cmp	r3, #96	@ 0x60
 800aa9a:	d861      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aa9c:	2b50      	cmp	r3, #80	@ 0x50
 800aa9e:	d04b      	beq.n	800ab38 <TIM_SlaveTimer_SetConfig+0x17c>
 800aaa0:	2b50      	cmp	r3, #80	@ 0x50
 800aaa2:	d85d      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aaa4:	2b40      	cmp	r3, #64	@ 0x40
 800aaa6:	d019      	beq.n	800aadc <TIM_SlaveTimer_SetConfig+0x120>
 800aaa8:	2b40      	cmp	r3, #64	@ 0x40
 800aaaa:	d859      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aaac:	2b30      	cmp	r3, #48	@ 0x30
 800aaae:	d05a      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aab0:	2b30      	cmp	r3, #48	@ 0x30
 800aab2:	d855      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d056      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	d851      	bhi.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d052      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	d050      	beq.n	800ab66 <TIM_SlaveTimer_SetConfig+0x1aa>
 800aac4:	e04c      	b.n	800ab60 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800aad6:	f000 fa2d 	bl	800af34 <TIM_ETR_SetConfig>
      break;
 800aada:	e045      	b.n	800ab68 <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b05      	cmp	r3, #5
 800aae2:	d004      	beq.n	800aaee <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800aae8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800aaec:	d101      	bne.n	800aaf2 <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e03b      	b.n	800ab6a <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a1a      	ldr	r2, [r3, #32]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	621a      	str	r2, [r3, #32]
      break;
 800ab36:	e017      	b.n	800ab68 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab44:	461a      	mov	r2, r3
 800ab46:	f000 f8c3 	bl	800acd0 <TIM_TI1_ConfigInputStage>
      break;
 800ab4a:	e00d      	b.n	800ab68 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab58:	461a      	mov	r2, r3
 800ab5a:	f000 f925 	bl	800ada8 <TIM_TI2_ConfigInputStage>
      break;
 800ab5e:	e003      	b.n	800ab68 <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
      break;
 800ab64:	e000      	b.n	800ab68 <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 800ab66:	bf00      	nop
  }

  return status;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	00100070 	.word	0x00100070
 800ab78:	00100060 	.word	0x00100060
 800ab7c:	00100050 	.word	0x00100050
 800ab80:	00100040 	.word	0x00100040
 800ab84:	00100030 	.word	0x00100030
 800ab88:	00100020 	.word	0x00100020

0800ab8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	f023 0201 	bic.w	r2, r3, #1
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4a38      	ldr	r2, [pc, #224]	@ (800ac98 <TIM_TI1_SetConfig+0x10c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d03b      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4a37      	ldr	r2, [pc, #220]	@ (800ac9c <TIM_TI1_SetConfig+0x110>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d037      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abc8:	d033      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abd0:	d02f      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4a32      	ldr	r2, [pc, #200]	@ (800aca0 <TIM_TI1_SetConfig+0x114>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d02b      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4a31      	ldr	r2, [pc, #196]	@ (800aca4 <TIM_TI1_SetConfig+0x118>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d027      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a30      	ldr	r2, [pc, #192]	@ (800aca8 <TIM_TI1_SetConfig+0x11c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d023      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	4a2f      	ldr	r2, [pc, #188]	@ (800acac <TIM_TI1_SetConfig+0x120>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01f      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4a2e      	ldr	r2, [pc, #184]	@ (800acb0 <TIM_TI1_SetConfig+0x124>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d01b      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4a2d      	ldr	r2, [pc, #180]	@ (800acb4 <TIM_TI1_SetConfig+0x128>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d017      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a2c      	ldr	r2, [pc, #176]	@ (800acb8 <TIM_TI1_SetConfig+0x12c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d013      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4a2b      	ldr	r2, [pc, #172]	@ (800acbc <TIM_TI1_SetConfig+0x130>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4a2a      	ldr	r2, [pc, #168]	@ (800acc0 <TIM_TI1_SetConfig+0x134>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4a29      	ldr	r2, [pc, #164]	@ (800acc4 <TIM_TI1_SetConfig+0x138>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4a28      	ldr	r2, [pc, #160]	@ (800acc8 <TIM_TI1_SetConfig+0x13c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_TI1_SetConfig+0xa6>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4a27      	ldr	r2, [pc, #156]	@ (800accc <TIM_TI1_SetConfig+0x140>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d101      	bne.n	800ac36 <TIM_TI1_SetConfig+0xaa>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <TIM_TI1_SetConfig+0xac>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d008      	beq.n	800ac4e <TIM_TI1_SetConfig+0xc2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f023 0303 	bic.w	r3, r3, #3
 800ac42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e003      	b.n	800ac56 <TIM_TI1_SetConfig+0xca>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f023 030a 	bic.w	r3, r3, #10
 800ac70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f003 030a 	and.w	r3, r3, #10
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	621a      	str	r2, [r3, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	40012c00 	.word	0x40012c00
 800ac9c:	50012c00 	.word	0x50012c00
 800aca0:	40000400 	.word	0x40000400
 800aca4:	50000400 	.word	0x50000400
 800aca8:	40000800 	.word	0x40000800
 800acac:	50000800 	.word	0x50000800
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	50000c00 	.word	0x50000c00
 800acb8:	40013400 	.word	0x40013400
 800acbc:	50013400 	.word	0x50013400
 800acc0:	40001800 	.word	0x40001800
 800acc4:	50001800 	.word	0x50001800
 800acc8:	40014000 	.word	0x40014000
 800accc:	50014000 	.word	0x50014000

0800acd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	f023 0201 	bic.w	r2, r3, #1
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f023 030a 	bic.w	r3, r3, #10
 800ad0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b087      	sub	sp, #28
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f023 0210 	bic.w	r2, r3, #16
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	031b      	lsls	r3, r3, #12
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	621a      	str	r2, [r3, #32]
}
 800ad9c:	bf00      	nop
 800ad9e:	371c      	adds	r7, #28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0210 	bic.w	r2, r3, #16
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800add2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	031b      	lsls	r3, r3, #12
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	621a      	str	r2, [r3, #32]
}
 800adfc:	bf00      	nop
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	011b      	lsls	r3, r3, #4
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ae58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	621a      	str	r2, [r3, #32]
}
 800ae74:	bf00      	nop
 800ae76:	371c      	adds	r7, #28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aeac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	021b      	lsls	r3, r3, #8
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aebe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	031b      	lsls	r3, r3, #12
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800aed2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	031b      	lsls	r3, r3, #12
 800aed8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	4313      	orrs	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f043 0307 	orr.w	r3, r3, #7
 800af20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	609a      	str	r2, [r3, #8]
}
 800af28:	bf00      	nop
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	021a      	lsls	r2, r3, #8
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	431a      	orrs	r2, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	609a      	str	r2, [r3, #8]
}
 800af68:	bf00      	nop
 800af6a:	371c      	adds	r7, #28
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af88:	2302      	movs	r3, #2
 800af8a:	e0a1      	b.n	800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a4a      	ldr	r2, [pc, #296]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00e      	beq.n	800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a49      	ldr	r2, [pc, #292]	@ (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d009      	beq.n	800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a47      	ldr	r2, [pc, #284]	@ (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d004      	beq.n	800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a46      	ldr	r2, [pc, #280]	@ (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d108      	bne.n	800afe6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800afec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	4313      	orrs	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a34      	ldr	r2, [pc, #208]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d04a      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a33      	ldr	r2, [pc, #204]	@ (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d045      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b020:	d040      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b02a:	d03b      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a2e      	ldr	r2, [pc, #184]	@ (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d036      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d031      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a2b      	ldr	r2, [pc, #172]	@ (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d02c      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a2a      	ldr	r2, [pc, #168]	@ (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d027      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a28      	ldr	r2, [pc, #160]	@ (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d022      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a27      	ldr	r2, [pc, #156]	@ (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d01d      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d018      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a20      	ldr	r2, [pc, #128]	@ (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00e      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a1f      	ldr	r2, [pc, #124]	@ (800b108 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d009      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a1d      	ldr	r2, [pc, #116]	@ (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a1c      	ldr	r2, [pc, #112]	@ (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d10c      	bne.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	40012c00 	.word	0x40012c00
 800b0e0:	50012c00 	.word	0x50012c00
 800b0e4:	40013400 	.word	0x40013400
 800b0e8:	50013400 	.word	0x50013400
 800b0ec:	40000400 	.word	0x40000400
 800b0f0:	50000400 	.word	0x50000400
 800b0f4:	40000800 	.word	0x40000800
 800b0f8:	50000800 	.word	0x50000800
 800b0fc:	40000c00 	.word	0x40000c00
 800b100:	50000c00 	.word	0x50000c00
 800b104:	40001800 	.word	0x40001800
 800b108:	50001800 	.word	0x50001800
 800b10c:	40014000 	.word	0x40014000
 800b110:	50014000 	.word	0x50014000

0800b114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e07d      	b.n	800b22c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1e      	ldr	r2, [pc, #120]	@ (800b238 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d00e      	beq.n	800b1e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a1d      	ldr	r2, [pc, #116]	@ (800b23c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d009      	beq.n	800b1e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1b      	ldr	r2, [pc, #108]	@ (800b240 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d004      	beq.n	800b1e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a1a      	ldr	r2, [pc, #104]	@ (800b244 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d11c      	bne.n	800b21a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	051b      	lsls	r3, r3, #20
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	40012c00 	.word	0x40012c00
 800b23c:	50012c00 	.word	0x50012c00
 800b240:	40013400 	.word	0x40013400
 800b244:	50013400 	.word	0x50013400

0800b248 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <memset>:
 800b2d4:	4402      	add	r2, r0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <__libc_init_array>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b31c <__libc_init_array+0x38>)
 800b2e8:	2600      	movs	r6, #0
 800b2ea:	4c0d      	ldr	r4, [pc, #52]	@ (800b320 <__libc_init_array+0x3c>)
 800b2ec:	1b64      	subs	r4, r4, r5
 800b2ee:	10a4      	asrs	r4, r4, #2
 800b2f0:	42a6      	cmp	r6, r4
 800b2f2:	d109      	bne.n	800b308 <__libc_init_array+0x24>
 800b2f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b324 <__libc_init_array+0x40>)
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b328 <__libc_init_array+0x44>)
 800b2fa:	f000 f817 	bl	800b32c <_init>
 800b2fe:	1b64      	subs	r4, r4, r5
 800b300:	10a4      	asrs	r4, r4, #2
 800b302:	42a6      	cmp	r6, r4
 800b304:	d105      	bne.n	800b312 <__libc_init_array+0x2e>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	f855 3b04 	ldr.w	r3, [r5], #4
 800b30c:	3601      	adds	r6, #1
 800b30e:	4798      	blx	r3
 800b310:	e7ee      	b.n	800b2f0 <__libc_init_array+0xc>
 800b312:	f855 3b04 	ldr.w	r3, [r5], #4
 800b316:	3601      	adds	r6, #1
 800b318:	4798      	blx	r3
 800b31a:	e7f2      	b.n	800b302 <__libc_init_array+0x1e>
 800b31c:	0800b354 	.word	0x0800b354
 800b320:	0800b354 	.word	0x0800b354
 800b324:	0800b354 	.word	0x0800b354
 800b328:	0800b358 	.word	0x0800b358

0800b32c <_init>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr

0800b338 <_fini>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	bf00      	nop
 800b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33e:	bc08      	pop	{r3}
 800b340:	469e      	mov	lr, r3
 800b342:	4770      	bx	lr
