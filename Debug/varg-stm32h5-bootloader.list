
varg-stm32h5-bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b34  080e8000  080e8000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080fab34  080fab34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080fb14c  080fb14c  00016084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080fb14c  080fb14c  00016084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080fb14c  080fb14c  00016084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080fb14c  080fb14c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080fb150  080fb150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080fb154  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a18  20000088  080fb1d8  00016088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005aa0  080fb1d8  00016aa0  2**0
                  ALLOC
 11 .shared_ram   0000000c  2009fe00  2009fe00  00016e00  2**2
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00016084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ba17  00000000  00000000  000160ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006997  00000000  00000000  00041ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002408  00000000  00000000  00048468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b9d  00000000  00000000  0004a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003b22a  00000000  00000000  0004c40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000350ba  00000000  00000000  00087637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001648a8  00000000  00000000  000bc6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00220f99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ea0  00000000  00000000  00220fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0022ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080e8000 <__do_global_dtors_aux>:
 80e8000:	b510      	push	{r4, lr}
 80e8002:	4c05      	ldr	r4, [pc, #20]	@ (80e8018 <__do_global_dtors_aux+0x18>)
 80e8004:	7823      	ldrb	r3, [r4, #0]
 80e8006:	b933      	cbnz	r3, 80e8016 <__do_global_dtors_aux+0x16>
 80e8008:	4b04      	ldr	r3, [pc, #16]	@ (80e801c <__do_global_dtors_aux+0x1c>)
 80e800a:	b113      	cbz	r3, 80e8012 <__do_global_dtors_aux+0x12>
 80e800c:	4804      	ldr	r0, [pc, #16]	@ (80e8020 <__do_global_dtors_aux+0x20>)
 80e800e:	f3af 8000 	nop.w
 80e8012:	2301      	movs	r3, #1
 80e8014:	7023      	strb	r3, [r4, #0]
 80e8016:	bd10      	pop	{r4, pc}
 80e8018:	20000088 	.word	0x20000088
 80e801c:	00000000 	.word	0x00000000
 80e8020:	080fab1c 	.word	0x080fab1c

080e8024 <frame_dummy>:
 80e8024:	b508      	push	{r3, lr}
 80e8026:	4b03      	ldr	r3, [pc, #12]	@ (80e8034 <frame_dummy+0x10>)
 80e8028:	b11b      	cbz	r3, 80e8032 <frame_dummy+0xe>
 80e802a:	4903      	ldr	r1, [pc, #12]	@ (80e8038 <frame_dummy+0x14>)
 80e802c:	4803      	ldr	r0, [pc, #12]	@ (80e803c <frame_dummy+0x18>)
 80e802e:	f3af 8000 	nop.w
 80e8032:	bd08      	pop	{r3, pc}
 80e8034:	00000000 	.word	0x00000000
 80e8038:	2000008c 	.word	0x2000008c
 80e803c:	080fab1c 	.word	0x080fab1c

080e8040 <MX_ADC1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;
DMA_HandleTypeDef handle_GPDMA1_Channel1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80e8040:	b580      	push	{r7, lr}
 80e8042:	b088      	sub	sp, #32
 80e8044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80e8046:	463b      	mov	r3, r7
 80e8048:	2220      	movs	r2, #32
 80e804a:	2100      	movs	r1, #0
 80e804c:	4618      	mov	r0, r3
 80e804e:	f011 fee4 	bl	80f9e1a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80e8052:	4b51      	ldr	r3, [pc, #324]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8054:	4a51      	ldr	r2, [pc, #324]	@ (80e819c <MX_ADC1_Init+0x15c>)
 80e8056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80e8058:	4b4f      	ldr	r3, [pc, #316]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e805a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80e805e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80e8060:	4b4d      	ldr	r3, [pc, #308]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8062:	2200      	movs	r2, #0
 80e8064:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80e8066:	4b4c      	ldr	r3, [pc, #304]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8068:	2200      	movs	r2, #0
 80e806a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80e806c:	4b4a      	ldr	r3, [pc, #296]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e806e:	2201      	movs	r2, #1
 80e8070:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80e8072:	4b49      	ldr	r3, [pc, #292]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8074:	2208      	movs	r2, #8
 80e8076:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80e8078:	4b47      	ldr	r3, [pc, #284]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e807a:	2200      	movs	r2, #0
 80e807c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80e807e:	4b46      	ldr	r3, [pc, #280]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8080:	2200      	movs	r2, #0
 80e8082:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80e8084:	4b44      	ldr	r3, [pc, #272]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8086:	2206      	movs	r2, #6
 80e8088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80e808a:	4b43      	ldr	r3, [pc, #268]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e808c:	2200      	movs	r2, #0
 80e808e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80e8092:	4b41      	ldr	r3, [pc, #260]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8094:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 80e8098:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80e809a:	4b3f      	ldr	r3, [pc, #252]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e809c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80e80a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80e80a2:	4b3d      	ldr	r3, [pc, #244]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80a4:	2201      	movs	r2, #1
 80e80a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80e80aa:	4b3b      	ldr	r3, [pc, #236]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80ac:	2200      	movs	r2, #0
 80e80ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80e80b0:	4b39      	ldr	r3, [pc, #228]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80e80b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80e80b8:	4b37      	ldr	r3, [pc, #220]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80ba:	2200      	movs	r2, #0
 80e80bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80e80c0:	4835      	ldr	r0, [pc, #212]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80c2:	f002 fd4f 	bl	80eab64 <HAL_ADC_Init>
 80e80c6:	4603      	mov	r3, r0
 80e80c8:	2b00      	cmp	r3, #0
 80e80ca:	d001      	beq.n	80e80d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80e80cc:	f001 f88a 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80e80d0:	4b33      	ldr	r3, [pc, #204]	@ (80e81a0 <MX_ADC1_Init+0x160>)
 80e80d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80e80d4:	2306      	movs	r3, #6
 80e80d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80e80d8:	2302      	movs	r3, #2
 80e80da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80e80dc:	237f      	movs	r3, #127	@ 0x7f
 80e80de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80e80e0:	2304      	movs	r3, #4
 80e80e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80e80e4:	2300      	movs	r3, #0
 80e80e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e80e8:	463b      	mov	r3, r7
 80e80ea:	4619      	mov	r1, r3
 80e80ec:	482a      	ldr	r0, [pc, #168]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e80ee:	f002 fe8d 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e80f2:	4603      	mov	r3, r0
 80e80f4:	2b00      	cmp	r3, #0
 80e80f6:	d001      	beq.n	80e80fc <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80e80f8:	f001 f874 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80e80fc:	4b29      	ldr	r3, [pc, #164]	@ (80e81a4 <MX_ADC1_Init+0x164>)
 80e80fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80e8100:	230c      	movs	r3, #12
 80e8102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e8104:	463b      	mov	r3, r7
 80e8106:	4619      	mov	r1, r3
 80e8108:	4823      	ldr	r0, [pc, #140]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e810a:	f002 fe7f 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e810e:	4603      	mov	r3, r0
 80e8110:	2b00      	cmp	r3, #0
 80e8112:	d001      	beq.n	80e8118 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80e8114:	f001 f866 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80e8118:	4b23      	ldr	r3, [pc, #140]	@ (80e81a8 <MX_ADC1_Init+0x168>)
 80e811a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80e811c:	2312      	movs	r3, #18
 80e811e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e8120:	463b      	mov	r3, r7
 80e8122:	4619      	mov	r1, r3
 80e8124:	481c      	ldr	r0, [pc, #112]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8126:	f002 fe71 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e812a:	4603      	mov	r3, r0
 80e812c:	2b00      	cmp	r3, #0
 80e812e:	d001      	beq.n	80e8134 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80e8130:	f001 f858 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80e8134:	4b1d      	ldr	r3, [pc, #116]	@ (80e81ac <MX_ADC1_Init+0x16c>)
 80e8136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80e8138:	2318      	movs	r3, #24
 80e813a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e813c:	463b      	mov	r3, r7
 80e813e:	4619      	mov	r1, r3
 80e8140:	4815      	ldr	r0, [pc, #84]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8142:	f002 fe63 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e8146:	4603      	mov	r3, r0
 80e8148:	2b00      	cmp	r3, #0
 80e814a:	d001      	beq.n	80e8150 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80e814c:	f001 f84a 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80e8150:	4b17      	ldr	r3, [pc, #92]	@ (80e81b0 <MX_ADC1_Init+0x170>)
 80e8152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80e8154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80e8158:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80e815a:	2300      	movs	r3, #0
 80e815c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e815e:	463b      	mov	r3, r7
 80e8160:	4619      	mov	r1, r3
 80e8162:	480d      	ldr	r0, [pc, #52]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8164:	f002 fe52 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e8168:	4603      	mov	r3, r0
 80e816a:	2b00      	cmp	r3, #0
 80e816c:	d001      	beq.n	80e8172 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80e816e:	f001 f839 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80e8172:	4b10      	ldr	r3, [pc, #64]	@ (80e81b4 <MX_ADC1_Init+0x174>)
 80e8174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80e8176:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80e817a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80e817c:	463b      	mov	r3, r7
 80e817e:	4619      	mov	r1, r3
 80e8180:	4805      	ldr	r0, [pc, #20]	@ (80e8198 <MX_ADC1_Init+0x158>)
 80e8182:	f002 fe43 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e8186:	4603      	mov	r3, r0
 80e8188:	2b00      	cmp	r3, #0
 80e818a:	d001      	beq.n	80e8190 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80e818c:	f001 f82a 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80e8190:	bf00      	nop
 80e8192:	3720      	adds	r7, #32
 80e8194:	46bd      	mov	sp, r7
 80e8196:	bd80      	pop	{r7, pc}
 80e8198:	200000a4 	.word	0x200000a4
 80e819c:	42028000 	.word	0x42028000
 80e81a0:	10c00010 	.word	0x10c00010
 80e81a4:	3ef08000 	.word	0x3ef08000
 80e81a8:	3ac04000 	.word	0x3ac04000
 80e81ac:	32601000 	.word	0x32601000
 80e81b0:	c3210000 	.word	0xc3210000
 80e81b4:	c7520000 	.word	0xc7520000

080e81b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80e81b8:	b580      	push	{r7, lr}
 80e81ba:	b088      	sub	sp, #32
 80e81bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80e81be:	463b      	mov	r3, r7
 80e81c0:	2220      	movs	r2, #32
 80e81c2:	2100      	movs	r1, #0
 80e81c4:	4618      	mov	r0, r3
 80e81c6:	f011 fe28 	bl	80f9e1a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80e81ca:	4b60      	ldr	r3, [pc, #384]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81cc:	4a60      	ldr	r2, [pc, #384]	@ (80e8350 <MX_ADC2_Init+0x198>)
 80e81ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80e81d0:	4b5e      	ldr	r3, [pc, #376]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80e81d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80e81d8:	4b5c      	ldr	r3, [pc, #368]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81da:	2200      	movs	r2, #0
 80e81dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80e81de:	4b5b      	ldr	r3, [pc, #364]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81e0:	2200      	movs	r2, #0
 80e81e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80e81e4:	4b59      	ldr	r3, [pc, #356]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81e6:	2201      	movs	r2, #1
 80e81e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80e81ea:	4b58      	ldr	r3, [pc, #352]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81ec:	2208      	movs	r2, #8
 80e81ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80e81f0:	4b56      	ldr	r3, [pc, #344]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81f2:	2200      	movs	r2, #0
 80e81f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80e81f6:	4b55      	ldr	r3, [pc, #340]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81f8:	2200      	movs	r2, #0
 80e81fa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 7;
 80e81fc:	4b53      	ldr	r3, [pc, #332]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e81fe:	2207      	movs	r2, #7
 80e8200:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80e8202:	4b52      	ldr	r3, [pc, #328]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8204:	2200      	movs	r2, #0
 80e8206:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80e820a:	4b50      	ldr	r3, [pc, #320]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e820c:	2200      	movs	r2, #0
 80e820e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80e8210:	4b4e      	ldr	r3, [pc, #312]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8212:	2200      	movs	r2, #0
 80e8214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80e8216:	4b4d      	ldr	r3, [pc, #308]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8218:	2201      	movs	r2, #1
 80e821a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80e821e:	4b4b      	ldr	r3, [pc, #300]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8220:	2200      	movs	r2, #0
 80e8222:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80e8224:	4b49      	ldr	r3, [pc, #292]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8226:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80e822a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = ENABLE;
 80e822c:	4b47      	ldr	r3, [pc, #284]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e822e:	2201      	movs	r2, #1
 80e8230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80e8234:	4b45      	ldr	r3, [pc, #276]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8236:	2204      	movs	r2, #4
 80e8238:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80e823a:	4b44      	ldr	r3, [pc, #272]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e823c:	2240      	movs	r2, #64	@ 0x40
 80e823e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80e8240:	4b42      	ldr	r3, [pc, #264]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8242:	2200      	movs	r2, #0
 80e8244:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80e8246:	4b41      	ldr	r3, [pc, #260]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8248:	2201      	movs	r2, #1
 80e824a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80e824c:	483f      	ldr	r0, [pc, #252]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e824e:	f002 fc89 	bl	80eab64 <HAL_ADC_Init>
 80e8252:	4603      	mov	r3, r0
 80e8254:	2b00      	cmp	r3, #0
 80e8256:	d001      	beq.n	80e825c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80e8258:	f000 ffc4 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80e825c:	2301      	movs	r3, #1
 80e825e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80e8260:	2306      	movs	r3, #6
 80e8262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80e8264:	2302      	movs	r3, #2
 80e8266:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80e8268:	237f      	movs	r3, #127	@ 0x7f
 80e826a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80e826c:	2304      	movs	r3, #4
 80e826e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80e8270:	2300      	movs	r3, #0
 80e8272:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e8274:	463b      	mov	r3, r7
 80e8276:	4619      	mov	r1, r3
 80e8278:	4834      	ldr	r0, [pc, #208]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e827a:	f002 fdc7 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e827e:	4603      	mov	r3, r0
 80e8280:	2b00      	cmp	r3, #0
 80e8282:	d001      	beq.n	80e8288 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80e8284:	f000 ffae 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80e8288:	4b32      	ldr	r3, [pc, #200]	@ (80e8354 <MX_ADC2_Init+0x19c>)
 80e828a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80e828c:	230c      	movs	r3, #12
 80e828e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80e8290:	4b31      	ldr	r3, [pc, #196]	@ (80e8358 <MX_ADC2_Init+0x1a0>)
 80e8292:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e8294:	463b      	mov	r3, r7
 80e8296:	4619      	mov	r1, r3
 80e8298:	482c      	ldr	r0, [pc, #176]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e829a:	f002 fdb7 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e829e:	4603      	mov	r3, r0
 80e82a0:	2b00      	cmp	r3, #0
 80e82a2:	d001      	beq.n	80e82a8 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80e82a4:	f000 ff9e 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80e82a8:	4b2c      	ldr	r3, [pc, #176]	@ (80e835c <MX_ADC2_Init+0x1a4>)
 80e82aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80e82ac:	2312      	movs	r3, #18
 80e82ae:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80e82b0:	237f      	movs	r3, #127	@ 0x7f
 80e82b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e82b4:	463b      	mov	r3, r7
 80e82b6:	4619      	mov	r1, r3
 80e82b8:	4824      	ldr	r0, [pc, #144]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e82ba:	f002 fda7 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e82be:	4603      	mov	r3, r0
 80e82c0:	2b00      	cmp	r3, #0
 80e82c2:	d001      	beq.n	80e82c8 <MX_ADC2_Init+0x110>
  {
    Error_Handler();
 80e82c4:	f000 ff8e 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80e82c8:	4b25      	ldr	r3, [pc, #148]	@ (80e8360 <MX_ADC2_Init+0x1a8>)
 80e82ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80e82cc:	2318      	movs	r3, #24
 80e82ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e82d0:	463b      	mov	r3, r7
 80e82d2:	4619      	mov	r1, r3
 80e82d4:	481d      	ldr	r0, [pc, #116]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e82d6:	f002 fd99 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e82da:	4603      	mov	r3, r0
 80e82dc:	2b00      	cmp	r3, #0
 80e82de:	d001      	beq.n	80e82e4 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 80e82e0:	f000 ff80 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80e82e4:	4b1f      	ldr	r3, [pc, #124]	@ (80e8364 <MX_ADC2_Init+0x1ac>)
 80e82e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80e82e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80e82ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e82ee:	463b      	mov	r3, r7
 80e82f0:	4619      	mov	r1, r3
 80e82f2:	4816      	ldr	r0, [pc, #88]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e82f4:	f002 fd8a 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e82f8:	4603      	mov	r3, r0
 80e82fa:	2b00      	cmp	r3, #0
 80e82fc:	d001      	beq.n	80e8302 <MX_ADC2_Init+0x14a>
  {
    Error_Handler();
 80e82fe:	f000 ff71 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80e8302:	4b19      	ldr	r3, [pc, #100]	@ (80e8368 <MX_ADC2_Init+0x1b0>)
 80e8304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80e8306:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80e830a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80e830c:	2307      	movs	r3, #7
 80e830e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e8310:	463b      	mov	r3, r7
 80e8312:	4619      	mov	r1, r3
 80e8314:	480d      	ldr	r0, [pc, #52]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8316:	f002 fd79 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e831a:	4603      	mov	r3, r0
 80e831c:	2b00      	cmp	r3, #0
 80e831e:	d001      	beq.n	80e8324 <MX_ADC2_Init+0x16c>
  {
    Error_Handler();
 80e8320:	f000 ff60 	bl	80e91e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VCORE;
 80e8324:	4b11      	ldr	r3, [pc, #68]	@ (80e836c <MX_ADC2_Init+0x1b4>)
 80e8326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80e8328:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80e832c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80e832e:	463b      	mov	r3, r7
 80e8330:	4619      	mov	r1, r3
 80e8332:	4806      	ldr	r0, [pc, #24]	@ (80e834c <MX_ADC2_Init+0x194>)
 80e8334:	f002 fd6a 	bl	80eae0c <HAL_ADC_ConfigChannel>
 80e8338:	4603      	mov	r3, r0
 80e833a:	2b00      	cmp	r3, #0
 80e833c:	d001      	beq.n	80e8342 <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 80e833e:	f000 ff51 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80e8342:	bf00      	nop
 80e8344:	3720      	adds	r7, #32
 80e8346:	46bd      	mov	sp, r7
 80e8348:	bd80      	pop	{r7, pc}
 80e834a:	bf00      	nop
 80e834c:	2000010c 	.word	0x2000010c
 80e8350:	42028100 	.word	0x42028100
 80e8354:	0c900008 	.word	0x0c900008
 80e8358:	407f0000 	.word	0x407f0000
 80e835c:	21800100 	.word	0x21800100
 80e8360:	25b00200 	.word	0x25b00200
 80e8364:	2a000400 	.word	0x2a000400
 80e8368:	43290000 	.word	0x43290000
 80e836c:	475a0000 	.word	0x475a0000

080e8370 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80e8370:	b580      	push	{r7, lr}
 80e8372:	b0ec      	sub	sp, #432	@ 0x1b0
 80e8374:	af00      	add	r7, sp, #0
 80e8376:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e837a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e837e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e8380:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e8384:	2200      	movs	r2, #0
 80e8386:	601a      	str	r2, [r3, #0]
 80e8388:	605a      	str	r2, [r3, #4]
 80e838a:	609a      	str	r2, [r3, #8]
 80e838c:	60da      	str	r2, [r3, #12]
 80e838e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 80e8390:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80e8394:	226c      	movs	r2, #108	@ 0x6c
 80e8396:	2100      	movs	r1, #0
 80e8398:	4618      	mov	r0, r3
 80e839a:	f011 fd3e 	bl	80f9e1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e839e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e83a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80e83a6:	4618      	mov	r0, r3
 80e83a8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80e83ac:	461a      	mov	r2, r3
 80e83ae:	2100      	movs	r1, #0
 80e83b0:	f011 fd33 	bl	80f9e1a <memset>
  if(adcHandle->Instance==ADC1)
 80e83b4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e83b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e83bc:	681b      	ldr	r3, [r3, #0]
 80e83be:	681b      	ldr	r3, [r3, #0]
 80e83c0:	4a8c      	ldr	r2, [pc, #560]	@ (80e85f4 <HAL_ADC_MspInit+0x284>)
 80e83c2:	4293      	cmp	r3, r2
 80e83c4:	f040 8128 	bne.w	80e8618 <HAL_ADC_MspInit+0x2a8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80e83c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e83cc:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 80e83d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80e83d4:	f04f 0300 	mov.w	r3, #0
 80e83d8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80e83dc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e83e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80e83e4:	2200      	movs	r2, #0
 80e83e6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e83ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80e83ee:	4618      	mov	r0, r3
 80e83f0:	f007 fe7e 	bl	80f00f0 <HAL_RCCEx_PeriphCLKConfig>
 80e83f4:	4603      	mov	r3, r0
 80e83f6:	2b00      	cmp	r3, #0
 80e83f8:	d001      	beq.n	80e83fe <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 80e83fa:	f000 fef3 	bl	80e91e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80e83fe:	4b7e      	ldr	r3, [pc, #504]	@ (80e85f8 <HAL_ADC_MspInit+0x288>)
 80e8400:	681b      	ldr	r3, [r3, #0]
 80e8402:	3301      	adds	r3, #1
 80e8404:	4a7c      	ldr	r2, [pc, #496]	@ (80e85f8 <HAL_ADC_MspInit+0x288>)
 80e8406:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80e8408:	4b7b      	ldr	r3, [pc, #492]	@ (80e85f8 <HAL_ADC_MspInit+0x288>)
 80e840a:	681b      	ldr	r3, [r3, #0]
 80e840c:	2b01      	cmp	r3, #1
 80e840e:	d116      	bne.n	80e843e <HAL_ADC_MspInit+0xce>
      __HAL_RCC_ADC_CLK_ENABLE();
 80e8410:	4b7a      	ldr	r3, [pc, #488]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8416:	4a79      	ldr	r2, [pc, #484]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80e841c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8420:	4b76      	ldr	r3, [pc, #472]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8426:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80e842a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e842e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80e8432:	601a      	str	r2, [r3, #0]
 80e8434:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8438:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80e843c:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80e843e:	4b6f      	ldr	r3, [pc, #444]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8444:	4a6d      	ldr	r2, [pc, #436]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8446:	f043 0304 	orr.w	r3, r3, #4
 80e844a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e844e:	4b6b      	ldr	r3, [pc, #428]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8454:	f003 0204 	and.w	r2, r3, #4
 80e8458:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e845c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80e8460:	601a      	str	r2, [r3, #0]
 80e8462:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8466:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80e846a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80e846c:	4b63      	ldr	r3, [pc, #396]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e846e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8472:	4a62      	ldr	r2, [pc, #392]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e8474:	f043 0301 	orr.w	r3, r3, #1
 80e8478:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e847c:	4b5f      	ldr	r3, [pc, #380]	@ (80e85fc <HAL_ADC_MspInit+0x28c>)
 80e847e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8482:	f003 0201 	and.w	r2, r3, #1
 80e8486:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e848a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80e848e:	601a      	str	r2, [r3, #0]
 80e8490:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8494:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80e8498:	681b      	ldr	r3, [r3, #0]
    PC2     ------> ADC1_INP12
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80e849a:	2314      	movs	r3, #20
 80e849c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e84a0:	2303      	movs	r3, #3
 80e84a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e84a6:	2300      	movs	r3, #0
 80e84a8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80e84ac:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e84b0:	4619      	mov	r1, r3
 80e84b2:	4853      	ldr	r0, [pc, #332]	@ (80e8600 <HAL_ADC_MspInit+0x290>)
 80e84b4:	f006 fd16 	bl	80eeee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80e84b8:	230c      	movs	r3, #12
 80e84ba:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e84be:	2303      	movs	r3, #3
 80e84c0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e84c4:	2300      	movs	r3, #0
 80e84c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80e84ca:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e84ce:	4619      	mov	r1, r3
 80e84d0:	484c      	ldr	r0, [pc, #304]	@ (80e8604 <HAL_ADC_MspInit+0x294>)
 80e84d2:	f006 fd07 	bl	80eeee4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80e84d6:	2321      	movs	r3, #33	@ 0x21
 80e84d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80e84dc:	2300      	movs	r3, #0
 80e84de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80e84e2:	2300      	movs	r3, #0
 80e84e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80e84e8:	2300      	movs	r3, #0
 80e84ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80e84ee:	2300      	movs	r3, #0
 80e84f0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80e84f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80e84f8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80e84fc:	2302      	movs	r3, #2
 80e84fe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80e8502:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80e8506:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    NodeConfig.Init.SrcBurstLength = 1;
 80e850a:	2301      	movs	r3, #1
 80e850c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.Init.DestBurstLength = 1;
 80e8510:	2301      	movs	r3, #1
 80e8512:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80e8516:	2300      	movs	r3, #0
 80e8518:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80e851c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80e8520:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    NodeConfig.Init.Mode = DMA_NORMAL;
 80e8524:	2300      	movs	r3, #0
 80e8526:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80e852a:	2300      	movs	r3, #0
 80e852c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80e8530:	2300      	movs	r3, #0
 80e8532:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80e8536:	2300      	movs	r3, #0
 80e8538:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80e853c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80e8540:	4931      	ldr	r1, [pc, #196]	@ (80e8608 <HAL_ADC_MspInit+0x298>)
 80e8542:	4618      	mov	r0, r3
 80e8544:	f004 fd4c 	bl	80ecfe0 <HAL_DMAEx_List_BuildNode>
 80e8548:	4603      	mov	r3, r0
 80e854a:	2b00      	cmp	r3, #0
 80e854c:	d001      	beq.n	80e8552 <HAL_ADC_MspInit+0x1e2>
    {
      Error_Handler();
 80e854e:	f000 fe49 	bl	80e91e4 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80e8552:	4a2d      	ldr	r2, [pc, #180]	@ (80e8608 <HAL_ADC_MspInit+0x298>)
 80e8554:	2100      	movs	r1, #0
 80e8556:	482d      	ldr	r0, [pc, #180]	@ (80e860c <HAL_ADC_MspInit+0x29c>)
 80e8558:	f004 fd58 	bl	80ed00c <HAL_DMAEx_List_InsertNode>
 80e855c:	4603      	mov	r3, r0
 80e855e:	2b00      	cmp	r3, #0
 80e8560:	d001      	beq.n	80e8566 <HAL_ADC_MspInit+0x1f6>
    {
      Error_Handler();
 80e8562:	f000 fe3f 	bl	80e91e4 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80e8566:	4829      	ldr	r0, [pc, #164]	@ (80e860c <HAL_ADC_MspInit+0x29c>)
 80e8568:	f004 fe19 	bl	80ed19e <HAL_DMAEx_List_SetCircularMode>
 80e856c:	4603      	mov	r3, r0
 80e856e:	2b00      	cmp	r3, #0
 80e8570:	d001      	beq.n	80e8576 <HAL_ADC_MspInit+0x206>
    {
      Error_Handler();
 80e8572:	f000 fe37 	bl	80e91e4 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80e8576:	4b26      	ldr	r3, [pc, #152]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e8578:	4a26      	ldr	r2, [pc, #152]	@ (80e8614 <HAL_ADC_MspInit+0x2a4>)
 80e857a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80e857c:	4b24      	ldr	r3, [pc, #144]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e857e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80e8582:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80e8584:	4b22      	ldr	r3, [pc, #136]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e8586:	2200      	movs	r2, #0
 80e8588:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80e858a:	4b21      	ldr	r3, [pc, #132]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e858c:	2200      	movs	r2, #0
 80e858e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80e8590:	4b1f      	ldr	r3, [pc, #124]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e8592:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80e8596:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80e8598:	4b1d      	ldr	r3, [pc, #116]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e859a:	2281      	movs	r2, #129	@ 0x81
 80e859c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80e859e:	481c      	ldr	r0, [pc, #112]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e85a0:	f004 fbf2 	bl	80ecd88 <HAL_DMAEx_List_Init>
 80e85a4:	4603      	mov	r3, r0
 80e85a6:	2b00      	cmp	r3, #0
 80e85a8:	d001      	beq.n	80e85ae <HAL_ADC_MspInit+0x23e>
    {
      Error_Handler();
 80e85aa:	f000 fe1b 	bl	80e91e4 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80e85ae:	4917      	ldr	r1, [pc, #92]	@ (80e860c <HAL_ADC_MspInit+0x29c>)
 80e85b0:	4817      	ldr	r0, [pc, #92]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e85b2:	f004 fe55 	bl	80ed260 <HAL_DMAEx_List_LinkQ>
 80e85b6:	4603      	mov	r3, r0
 80e85b8:	2b00      	cmp	r3, #0
 80e85ba:	d001      	beq.n	80e85c0 <HAL_ADC_MspInit+0x250>
    {
      Error_Handler();
 80e85bc:	f000 fe12 	bl	80e91e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 80e85c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e85c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e85c8:	681b      	ldr	r3, [r3, #0]
 80e85ca:	4a11      	ldr	r2, [pc, #68]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e85cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80e85ce:	4a10      	ldr	r2, [pc, #64]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e85d0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e85d4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e85d8:	681b      	ldr	r3, [r3, #0]
 80e85da:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80e85dc:	2110      	movs	r1, #16
 80e85de:	480c      	ldr	r0, [pc, #48]	@ (80e8610 <HAL_ADC_MspInit+0x2a0>)
 80e85e0:	f004 f911 	bl	80ec806 <HAL_DMA_ConfigChannelAttributes>
 80e85e4:	4603      	mov	r3, r0
 80e85e6:	2b00      	cmp	r3, #0
 80e85e8:	f000 8119 	beq.w	80e881e <HAL_ADC_MspInit+0x4ae>
    {
      Error_Handler();
 80e85ec:	f000 fdfa 	bl	80e91e4 <Error_Handler>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80e85f0:	e115      	b.n	80e881e <HAL_ADC_MspInit+0x4ae>
 80e85f2:	bf00      	nop
 80e85f4:	42028000 	.word	0x42028000
 80e85f8:	200002a0 	.word	0x200002a0
 80e85fc:	44020c00 	.word	0x44020c00
 80e8600:	42020800 	.word	0x42020800
 80e8604:	42020000 	.word	0x42020000
 80e8608:	20000174 	.word	0x20000174
 80e860c:	20000198 	.word	0x20000198
 80e8610:	200001b0 	.word	0x200001b0
 80e8614:	40020050 	.word	0x40020050
  else if(adcHandle->Instance==ADC2)
 80e8618:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e861c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e8620:	681b      	ldr	r3, [r3, #0]
 80e8622:	681b      	ldr	r3, [r3, #0]
 80e8624:	4a80      	ldr	r2, [pc, #512]	@ (80e8828 <HAL_ADC_MspInit+0x4b8>)
 80e8626:	4293      	cmp	r3, r2
 80e8628:	f040 80f9 	bne.w	80e881e <HAL_ADC_MspInit+0x4ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80e862c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8630:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 80e8634:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80e8638:	f04f 0300 	mov.w	r3, #0
 80e863c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80e8640:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8644:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80e8648:	2200      	movs	r2, #0
 80e864a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e864e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80e8652:	4618      	mov	r0, r3
 80e8654:	f007 fd4c 	bl	80f00f0 <HAL_RCCEx_PeriphCLKConfig>
 80e8658:	4603      	mov	r3, r0
 80e865a:	2b00      	cmp	r3, #0
 80e865c:	d001      	beq.n	80e8662 <HAL_ADC_MspInit+0x2f2>
      Error_Handler();
 80e865e:	f000 fdc1 	bl	80e91e4 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80e8662:	4b72      	ldr	r3, [pc, #456]	@ (80e882c <HAL_ADC_MspInit+0x4bc>)
 80e8664:	681b      	ldr	r3, [r3, #0]
 80e8666:	3301      	adds	r3, #1
 80e8668:	4a70      	ldr	r2, [pc, #448]	@ (80e882c <HAL_ADC_MspInit+0x4bc>)
 80e866a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80e866c:	4b6f      	ldr	r3, [pc, #444]	@ (80e882c <HAL_ADC_MspInit+0x4bc>)
 80e866e:	681b      	ldr	r3, [r3, #0]
 80e8670:	2b01      	cmp	r3, #1
 80e8672:	d116      	bne.n	80e86a2 <HAL_ADC_MspInit+0x332>
      __HAL_RCC_ADC_CLK_ENABLE();
 80e8674:	4b6e      	ldr	r3, [pc, #440]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e8676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e867a:	4a6d      	ldr	r2, [pc, #436]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e867c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80e8680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8684:	4b6a      	ldr	r3, [pc, #424]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e8686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e868a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80e868e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8692:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80e8696:	601a      	str	r2, [r3, #0]
 80e8698:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e869c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80e86a0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80e86a2:	4b63      	ldr	r3, [pc, #396]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e86a8:	4a61      	ldr	r2, [pc, #388]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86aa:	f043 0304 	orr.w	r3, r3, #4
 80e86ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e86b2:	4b5f      	ldr	r3, [pc, #380]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e86b8:	f003 0204 	and.w	r2, r3, #4
 80e86bc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e86c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80e86c4:	601a      	str	r2, [r3, #0]
 80e86c6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e86ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80e86ce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80e86d0:	4b57      	ldr	r3, [pc, #348]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e86d6:	4a56      	ldr	r2, [pc, #344]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86d8:	f043 0301 	orr.w	r3, r3, #1
 80e86dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e86e0:	4b53      	ldr	r3, [pc, #332]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e86e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e86e6:	f003 0201 	and.w	r2, r3, #1
 80e86ea:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e86ee:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80e86f2:	601a      	str	r2, [r3, #0]
 80e86f4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e86f8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80e86fc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80e86fe:	4b4c      	ldr	r3, [pc, #304]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e8700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8704:	4a4a      	ldr	r2, [pc, #296]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e8706:	f043 0302 	orr.w	r3, r3, #2
 80e870a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e870e:	4b48      	ldr	r3, [pc, #288]	@ (80e8830 <HAL_ADC_MspInit+0x4c0>)
 80e8710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8714:	f003 0202 	and.w	r2, r3, #2
 80e8718:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e871c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80e8720:	601a      	str	r2, [r3, #0]
 80e8722:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8726:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80e872a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80e872c:	2321      	movs	r3, #33	@ 0x21
 80e872e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e8732:	2303      	movs	r3, #3
 80e8734:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8738:	2300      	movs	r3, #0
 80e873a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80e873e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e8742:	4619      	mov	r1, r3
 80e8744:	483b      	ldr	r0, [pc, #236]	@ (80e8834 <HAL_ADC_MspInit+0x4c4>)
 80e8746:	f006 fbcd 	bl	80eeee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80e874a:	23c1      	movs	r3, #193	@ 0xc1
 80e874c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e8750:	2303      	movs	r3, #3
 80e8752:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8756:	2300      	movs	r3, #0
 80e8758:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80e875c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e8760:	4619      	mov	r1, r3
 80e8762:	4835      	ldr	r0, [pc, #212]	@ (80e8838 <HAL_ADC_MspInit+0x4c8>)
 80e8764:	f006 fbbe 	bl	80eeee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80e8768:	2301      	movs	r3, #1
 80e876a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e876e:	2303      	movs	r3, #3
 80e8770:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8774:	2300      	movs	r3, #0
 80e8776:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80e877a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80e877e:	4619      	mov	r1, r3
 80e8780:	482e      	ldr	r0, [pc, #184]	@ (80e883c <HAL_ADC_MspInit+0x4cc>)
 80e8782:	f006 fbaf 	bl	80eeee4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80e8786:	4b2e      	ldr	r3, [pc, #184]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e8788:	4a2e      	ldr	r2, [pc, #184]	@ (80e8844 <HAL_ADC_MspInit+0x4d4>)
 80e878a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_ADC2;
 80e878c:	4b2c      	ldr	r3, [pc, #176]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e878e:	2201      	movs	r2, #1
 80e8790:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80e8792:	4b2b      	ldr	r3, [pc, #172]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e8794:	2200      	movs	r2, #0
 80e8796:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80e8798:	4b29      	ldr	r3, [pc, #164]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e879a:	2200      	movs	r2, #0
 80e879c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 80e879e:	4b28      	ldr	r3, [pc, #160]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87a0:	2200      	movs	r2, #0
 80e87a2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 80e87a4:	4b26      	ldr	r3, [pc, #152]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80e87aa:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80e87ac:	4b24      	ldr	r3, [pc, #144]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87ae:	2202      	movs	r2, #2
 80e87b0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80e87b2:	4b23      	ldr	r3, [pc, #140]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80e87b8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80e87ba:	4b21      	ldr	r3, [pc, #132]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87bc:	2200      	movs	r2, #0
 80e87be:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80e87c0:	4b1f      	ldr	r3, [pc, #124]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87c2:	2201      	movs	r2, #1
 80e87c4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80e87c6:	4b1e      	ldr	r3, [pc, #120]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87c8:	2201      	movs	r2, #1
 80e87ca:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 80e87cc:	4b1c      	ldr	r3, [pc, #112]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87ce:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80e87d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80e87d4:	4b1a      	ldr	r3, [pc, #104]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87d6:	2200      	movs	r2, #0
 80e87d8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80e87da:	4b19      	ldr	r3, [pc, #100]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87dc:	2200      	movs	r2, #0
 80e87de:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80e87e0:	4817      	ldr	r0, [pc, #92]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87e2:	f003 fd6d 	bl	80ec2c0 <HAL_DMA_Init>
 80e87e6:	4603      	mov	r3, r0
 80e87e8:	2b00      	cmp	r3, #0
 80e87ea:	d001      	beq.n	80e87f0 <HAL_ADC_MspInit+0x480>
      Error_Handler();
 80e87ec:	f000 fcfa 	bl	80e91e4 <Error_Handler>
    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel1);
 80e87f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e87f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e87f8:	681b      	ldr	r3, [r3, #0]
 80e87fa:	4a11      	ldr	r2, [pc, #68]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e87fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80e87fe:	4a10      	ldr	r2, [pc, #64]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e8800:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80e8804:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80e8808:	681b      	ldr	r3, [r3, #0]
 80e880a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80e880c:	2110      	movs	r1, #16
 80e880e:	480c      	ldr	r0, [pc, #48]	@ (80e8840 <HAL_ADC_MspInit+0x4d0>)
 80e8810:	f003 fff9 	bl	80ec806 <HAL_DMA_ConfigChannelAttributes>
 80e8814:	4603      	mov	r3, r0
 80e8816:	2b00      	cmp	r3, #0
 80e8818:	d001      	beq.n	80e881e <HAL_ADC_MspInit+0x4ae>
      Error_Handler();
 80e881a:	f000 fce3 	bl	80e91e4 <Error_Handler>
}
 80e881e:	bf00      	nop
 80e8820:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 80e8824:	46bd      	mov	sp, r7
 80e8826:	bd80      	pop	{r7, pc}
 80e8828:	42028100 	.word	0x42028100
 80e882c:	200002a0 	.word	0x200002a0
 80e8830:	44020c00 	.word	0x44020c00
 80e8834:	42020800 	.word	0x42020800
 80e8838:	42020000 	.word	0x42020000
 80e883c:	42020400 	.word	0x42020400
 80e8840:	20000228 	.word	0x20000228
 80e8844:	400200d0 	.word	0x400200d0

080e8848 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80e8848:	b580      	push	{r7, lr}
 80e884a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80e884c:	4b0d      	ldr	r3, [pc, #52]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e884e:	4a0e      	ldr	r2, [pc, #56]	@ (80e8888 <MX_CRC_Init+0x40>)
 80e8850:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80e8852:	4b0c      	ldr	r3, [pc, #48]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e8854:	2200      	movs	r2, #0
 80e8856:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80e8858:	4b0a      	ldr	r3, [pc, #40]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e885a:	2200      	movs	r2, #0
 80e885c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80e885e:	4b09      	ldr	r3, [pc, #36]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e8860:	2200      	movs	r2, #0
 80e8862:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80e8864:	4b07      	ldr	r3, [pc, #28]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e8866:	2200      	movs	r2, #0
 80e8868:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80e886a:	4b06      	ldr	r3, [pc, #24]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e886c:	2201      	movs	r2, #1
 80e886e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80e8870:	4804      	ldr	r0, [pc, #16]	@ (80e8884 <MX_CRC_Init+0x3c>)
 80e8872:	f003 f937 	bl	80ebae4 <HAL_CRC_Init>
 80e8876:	4603      	mov	r3, r0
 80e8878:	2b00      	cmp	r3, #0
 80e887a:	d001      	beq.n	80e8880 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80e887c:	f000 fcb2 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80e8880:	bf00      	nop
 80e8882:	bd80      	pop	{r7, pc}
 80e8884:	200002a4 	.word	0x200002a4
 80e8888:	40023000 	.word	0x40023000

080e888c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80e888c:	b480      	push	{r7}
 80e888e:	b085      	sub	sp, #20
 80e8890:	af00      	add	r7, sp, #0
 80e8892:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80e8894:	687b      	ldr	r3, [r7, #4]
 80e8896:	681b      	ldr	r3, [r3, #0]
 80e8898:	4a0b      	ldr	r2, [pc, #44]	@ (80e88c8 <HAL_CRC_MspInit+0x3c>)
 80e889a:	4293      	cmp	r3, r2
 80e889c:	d10e      	bne.n	80e88bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80e889e:	4b0b      	ldr	r3, [pc, #44]	@ (80e88cc <HAL_CRC_MspInit+0x40>)
 80e88a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e88a4:	4a09      	ldr	r2, [pc, #36]	@ (80e88cc <HAL_CRC_MspInit+0x40>)
 80e88a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80e88aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80e88ae:	4b07      	ldr	r3, [pc, #28]	@ (80e88cc <HAL_CRC_MspInit+0x40>)
 80e88b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e88b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80e88b8:	60fb      	str	r3, [r7, #12]
 80e88ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80e88bc:	bf00      	nop
 80e88be:	3714      	adds	r7, #20
 80e88c0:	46bd      	mov	sp, r7
 80e88c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e88c6:	4770      	bx	lr
 80e88c8:	40023000 	.word	0x40023000
 80e88cc:	44020c00 	.word	0x44020c00

080e88d0 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80e88d0:	b480      	push	{r7}
 80e88d2:	b083      	sub	sp, #12
 80e88d4:	af00      	add	r7, sp, #0
 80e88d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80e88d8:	687b      	ldr	r3, [r7, #4]
 80e88da:	681b      	ldr	r3, [r3, #0]
 80e88dc:	4a08      	ldr	r2, [pc, #32]	@ (80e8900 <HAL_CRC_MspDeInit+0x30>)
 80e88de:	4293      	cmp	r3, r2
 80e88e0:	d107      	bne.n	80e88f2 <HAL_CRC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80e88e2:	4b08      	ldr	r3, [pc, #32]	@ (80e8904 <HAL_CRC_MspDeInit+0x34>)
 80e88e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e88e8:	4a06      	ldr	r2, [pc, #24]	@ (80e8904 <HAL_CRC_MspDeInit+0x34>)
 80e88ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80e88ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80e88f2:	bf00      	nop
 80e88f4:	370c      	adds	r7, #12
 80e88f6:	46bd      	mov	sp, r7
 80e88f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e88fc:	4770      	bx	lr
 80e88fe:	bf00      	nop
 80e8900:	40023000 	.word	0x40023000
 80e8904:	44020c00 	.word	0x44020c00

080e8908 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80e8908:	b580      	push	{r7, lr}
 80e890a:	b08c      	sub	sp, #48	@ 0x30
 80e890c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80e890e:	1d3b      	adds	r3, r7, #4
 80e8910:	222c      	movs	r2, #44	@ 0x2c
 80e8912:	2100      	movs	r1, #0
 80e8914:	4618      	mov	r0, r3
 80e8916:	f011 fa80 	bl	80f9e1a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80e891a:	4b1a      	ldr	r3, [pc, #104]	@ (80e8984 <MX_DAC1_Init+0x7c>)
 80e891c:	4a1a      	ldr	r2, [pc, #104]	@ (80e8988 <MX_DAC1_Init+0x80>)
 80e891e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80e8920:	4818      	ldr	r0, [pc, #96]	@ (80e8984 <MX_DAC1_Init+0x7c>)
 80e8922:	f003 fb15 	bl	80ebf50 <HAL_DAC_Init>
 80e8926:	4603      	mov	r3, r0
 80e8928:	2b00      	cmp	r3, #0
 80e892a:	d001      	beq.n	80e8930 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80e892c:	f000 fc5a 	bl	80e91e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80e8930:	2300      	movs	r3, #0
 80e8932:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80e8934:	2300      	movs	r3, #0
 80e8936:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 80e8938:	2300      	movs	r3, #0
 80e893a:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80e893c:	2300      	movs	r3, #0
 80e893e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80e8940:	2300      	movs	r3, #0
 80e8942:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80e8944:	2300      	movs	r3, #0
 80e8946:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80e8948:	2301      	movs	r3, #1
 80e894a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80e894c:	2300      	movs	r3, #0
 80e894e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80e8950:	1d3b      	adds	r3, r7, #4
 80e8952:	2200      	movs	r2, #0
 80e8954:	4619      	mov	r1, r3
 80e8956:	480b      	ldr	r0, [pc, #44]	@ (80e8984 <MX_DAC1_Init+0x7c>)
 80e8958:	f003 fb1c 	bl	80ebf94 <HAL_DAC_ConfigChannel>
 80e895c:	4603      	mov	r3, r0
 80e895e:	2b00      	cmp	r3, #0
 80e8960:	d001      	beq.n	80e8966 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 80e8962:	f000 fc3f 	bl	80e91e4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80e8966:	1d3b      	adds	r3, r7, #4
 80e8968:	2210      	movs	r2, #16
 80e896a:	4619      	mov	r1, r3
 80e896c:	4805      	ldr	r0, [pc, #20]	@ (80e8984 <MX_DAC1_Init+0x7c>)
 80e896e:	f003 fb11 	bl	80ebf94 <HAL_DAC_ConfigChannel>
 80e8972:	4603      	mov	r3, r0
 80e8974:	2b00      	cmp	r3, #0
 80e8976:	d001      	beq.n	80e897c <MX_DAC1_Init+0x74>
  {
    Error_Handler();
 80e8978:	f000 fc34 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80e897c:	bf00      	nop
 80e897e:	3730      	adds	r7, #48	@ 0x30
 80e8980:	46bd      	mov	sp, r7
 80e8982:	bd80      	pop	{r7, pc}
 80e8984:	200002c8 	.word	0x200002c8
 80e8988:	42028400 	.word	0x42028400

080e898c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80e898c:	b580      	push	{r7, lr}
 80e898e:	b08a      	sub	sp, #40	@ 0x28
 80e8990:	af00      	add	r7, sp, #0
 80e8992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e8994:	f107 0314 	add.w	r3, r7, #20
 80e8998:	2200      	movs	r2, #0
 80e899a:	601a      	str	r2, [r3, #0]
 80e899c:	605a      	str	r2, [r3, #4]
 80e899e:	609a      	str	r2, [r3, #8]
 80e89a0:	60da      	str	r2, [r3, #12]
 80e89a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80e89a4:	687b      	ldr	r3, [r7, #4]
 80e89a6:	681b      	ldr	r3, [r3, #0]
 80e89a8:	4a18      	ldr	r2, [pc, #96]	@ (80e8a0c <HAL_DAC_MspInit+0x80>)
 80e89aa:	4293      	cmp	r3, r2
 80e89ac:	d129      	bne.n	80e8a02 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80e89ae:	4b18      	ldr	r3, [pc, #96]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e89b4:	4a16      	ldr	r2, [pc, #88]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80e89ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e89be:	4b14      	ldr	r3, [pc, #80]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e89c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80e89c8:	613b      	str	r3, [r7, #16]
 80e89ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80e89cc:	4b10      	ldr	r3, [pc, #64]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e89d2:	4a0f      	ldr	r2, [pc, #60]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89d4:	f043 0301 	orr.w	r3, r3, #1
 80e89d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e89dc:	4b0c      	ldr	r3, [pc, #48]	@ (80e8a10 <HAL_DAC_MspInit+0x84>)
 80e89de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e89e2:	f003 0301 	and.w	r3, r3, #1
 80e89e6:	60fb      	str	r3, [r7, #12]
 80e89e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80e89ea:	2330      	movs	r3, #48	@ 0x30
 80e89ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80e89ee:	2303      	movs	r3, #3
 80e89f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e89f2:	2300      	movs	r3, #0
 80e89f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80e89f6:	f107 0314 	add.w	r3, r7, #20
 80e89fa:	4619      	mov	r1, r3
 80e89fc:	4805      	ldr	r0, [pc, #20]	@ (80e8a14 <HAL_DAC_MspInit+0x88>)
 80e89fe:	f006 fa71 	bl	80eeee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80e8a02:	bf00      	nop
 80e8a04:	3728      	adds	r7, #40	@ 0x28
 80e8a06:	46bd      	mov	sp, r7
 80e8a08:	bd80      	pop	{r7, pc}
 80e8a0a:	bf00      	nop
 80e8a0c:	42028400 	.word	0x42028400
 80e8a10:	44020c00 	.word	0x44020c00
 80e8a14:	42020000 	.word	0x42020000

080e8a18 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80e8a18:	b580      	push	{r7, lr}
 80e8a1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80e8a1c:	4b1f      	ldr	r3, [pc, #124]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a1e:	4a20      	ldr	r2, [pc, #128]	@ (80e8aa0 <MX_FDCAN1_Init+0x88>)
 80e8a20:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80e8a22:	4b1e      	ldr	r3, [pc, #120]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a24:	2200      	movs	r2, #0
 80e8a26:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80e8a28:	4b1c      	ldr	r3, [pc, #112]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a2a:	2200      	movs	r2, #0
 80e8a2c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80e8a2e:	4b1b      	ldr	r3, [pc, #108]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a30:	2200      	movs	r2, #0
 80e8a32:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80e8a34:	4b19      	ldr	r3, [pc, #100]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a36:	2201      	movs	r2, #1
 80e8a38:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80e8a3a:	4b18      	ldr	r3, [pc, #96]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a3c:	2201      	movs	r2, #1
 80e8a3e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80e8a40:	4b16      	ldr	r3, [pc, #88]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a42:	2200      	movs	r2, #0
 80e8a44:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 24;
 80e8a46:	4b15      	ldr	r3, [pc, #84]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a48:	2218      	movs	r2, #24
 80e8a4a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80e8a4c:	4b13      	ldr	r3, [pc, #76]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a4e:	2201      	movs	r2, #1
 80e8a50:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 34;
 80e8a52:	4b12      	ldr	r3, [pc, #72]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a54:	2222      	movs	r2, #34	@ 0x22
 80e8a56:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80e8a58:	4b10      	ldr	r3, [pc, #64]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a5a:	2205      	movs	r2, #5
 80e8a5c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80e8a5e:	4b0f      	ldr	r3, [pc, #60]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a60:	2201      	movs	r2, #1
 80e8a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80e8a64:	4b0d      	ldr	r3, [pc, #52]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a66:	2201      	movs	r2, #1
 80e8a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80e8a6a:	4b0c      	ldr	r3, [pc, #48]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a6c:	2201      	movs	r2, #1
 80e8a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80e8a70:	4b0a      	ldr	r3, [pc, #40]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a72:	2201      	movs	r2, #1
 80e8a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80e8a76:	4b09      	ldr	r3, [pc, #36]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a78:	221c      	movs	r2, #28
 80e8a7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 80e8a7c:	4b07      	ldr	r3, [pc, #28]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a7e:	2208      	movs	r2, #8
 80e8a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80e8a82:	4b06      	ldr	r3, [pc, #24]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a84:	2200      	movs	r2, #0
 80e8a86:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80e8a88:	4804      	ldr	r0, [pc, #16]	@ (80e8a9c <MX_FDCAN1_Init+0x84>)
 80e8a8a:	f005 f879 	bl	80edb80 <HAL_FDCAN_Init>
 80e8a8e:	4603      	mov	r3, r0
 80e8a90:	2b00      	cmp	r3, #0
 80e8a92:	d001      	beq.n	80e8a98 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80e8a94:	f000 fba6 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80e8a98:	bf00      	nop
 80e8a9a:	bd80      	pop	{r7, pc}
 80e8a9c:	200002dc 	.word	0x200002dc
 80e8aa0:	4000a400 	.word	0x4000a400

080e8aa4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80e8aa4:	b580      	push	{r7, lr}
 80e8aa6:	b0ce      	sub	sp, #312	@ 0x138
 80e8aa8:	af00      	add	r7, sp, #0
 80e8aaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8aae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80e8ab2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e8ab4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e8ab8:	2200      	movs	r2, #0
 80e8aba:	601a      	str	r2, [r3, #0]
 80e8abc:	605a      	str	r2, [r3, #4]
 80e8abe:	609a      	str	r2, [r3, #8]
 80e8ac0:	60da      	str	r2, [r3, #12]
 80e8ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e8ac4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8ac8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80e8acc:	4618      	mov	r0, r3
 80e8ace:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80e8ad2:	461a      	mov	r2, r3
 80e8ad4:	2100      	movs	r1, #0
 80e8ad6:	f011 f9a0 	bl	80f9e1a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80e8ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8ade:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80e8ae2:	681b      	ldr	r3, [r3, #0]
 80e8ae4:	681b      	ldr	r3, [r3, #0]
 80e8ae6:	4a4e      	ldr	r2, [pc, #312]	@ (80e8c20 <HAL_FDCAN_MspInit+0x17c>)
 80e8ae8:	4293      	cmp	r3, r2
 80e8aea:	f040 8094 	bne.w	80e8c16 <HAL_FDCAN_MspInit+0x172>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80e8aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8af2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80e8af6:	f04f 0200 	mov.w	r2, #0
 80e8afa:	f04f 0304 	mov.w	r3, #4
 80e8afe:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80e8b02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8b06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80e8b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80e8b0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e8b12:	f107 0318 	add.w	r3, r7, #24
 80e8b16:	4618      	mov	r0, r3
 80e8b18:	f007 faea 	bl	80f00f0 <HAL_RCCEx_PeriphCLKConfig>
 80e8b1c:	4603      	mov	r3, r0
 80e8b1e:	2b00      	cmp	r3, #0
 80e8b20:	d001      	beq.n	80e8b26 <HAL_FDCAN_MspInit+0x82>
    {
      Error_Handler();
 80e8b22:	f000 fb5f 	bl	80e91e4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80e8b26:	4b3f      	ldr	r3, [pc, #252]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80e8b2c:	4a3d      	ldr	r2, [pc, #244]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80e8b32:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80e8b36:	4b3b      	ldr	r3, [pc, #236]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80e8b3c:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 80e8b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8b44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80e8b48:	601a      	str	r2, [r3, #0]
 80e8b4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8b4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80e8b52:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80e8b54:	4b33      	ldr	r3, [pc, #204]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8b5a:	4a32      	ldr	r2, [pc, #200]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b5c:	f043 0302 	orr.w	r3, r3, #2
 80e8b60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8b64:	4b2f      	ldr	r3, [pc, #188]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8b6a:	f003 0202 	and.w	r2, r3, #2
 80e8b6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8b72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80e8b76:	601a      	str	r2, [r3, #0]
 80e8b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8b7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80e8b80:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80e8b82:	4b28      	ldr	r3, [pc, #160]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8b88:	4a26      	ldr	r2, [pc, #152]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b8a:	f043 0310 	orr.w	r3, r3, #16
 80e8b8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8b92:	4b24      	ldr	r3, [pc, #144]	@ (80e8c24 <HAL_FDCAN_MspInit+0x180>)
 80e8b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8b98:	f003 0210 	and.w	r2, r3, #16
 80e8b9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80e8ba4:	601a      	str	r2, [r3, #0]
 80e8ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e8baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80e8bae:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PE0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80e8bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80e8bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e8bb8:	2302      	movs	r3, #2
 80e8bba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8bbe:	2300      	movs	r3, #0
 80e8bc0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8bc4:	2300      	movs	r3, #0
 80e8bc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e8bca:	2309      	movs	r3, #9
 80e8bcc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80e8bd0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e8bd4:	4619      	mov	r1, r3
 80e8bd6:	4814      	ldr	r0, [pc, #80]	@ (80e8c28 <HAL_FDCAN_MspInit+0x184>)
 80e8bd8:	f006 f984 	bl	80eeee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80e8bdc:	2301      	movs	r3, #1
 80e8bde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e8be2:	2302      	movs	r3, #2
 80e8be4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8be8:	2300      	movs	r3, #0
 80e8bea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8bee:	2300      	movs	r3, #0
 80e8bf0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80e8bf4:	2309      	movs	r3, #9
 80e8bf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80e8bfa:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e8bfe:	4619      	mov	r1, r3
 80e8c00:	480a      	ldr	r0, [pc, #40]	@ (80e8c2c <HAL_FDCAN_MspInit+0x188>)
 80e8c02:	f006 f96f 	bl	80eeee4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80e8c06:	2200      	movs	r2, #0
 80e8c08:	2100      	movs	r1, #0
 80e8c0a:	2027      	movs	r0, #39	@ 0x27
 80e8c0c:	f002 fdc6 	bl	80eb79c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80e8c10:	2027      	movs	r0, #39	@ 0x27
 80e8c12:	f002 fddd 	bl	80eb7d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80e8c16:	bf00      	nop
 80e8c18:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80e8c1c:	46bd      	mov	sp, r7
 80e8c1e:	bd80      	pop	{r7, pc}
 80e8c20:	4000a400 	.word	0x4000a400
 80e8c24:	44020c00 	.word	0x44020c00
 80e8c28:	42020400 	.word	0x42020400
 80e8c2c:	42021000 	.word	0x42021000

080e8c30 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80e8c30:	b580      	push	{r7, lr}
 80e8c32:	b082      	sub	sp, #8
 80e8c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80e8c36:	4b11      	ldr	r3, [pc, #68]	@ (80e8c7c <MX_GPDMA1_Init+0x4c>)
 80e8c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e8c3c:	4a0f      	ldr	r2, [pc, #60]	@ (80e8c7c <MX_GPDMA1_Init+0x4c>)
 80e8c3e:	f043 0301 	orr.w	r3, r3, #1
 80e8c42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80e8c46:	4b0d      	ldr	r3, [pc, #52]	@ (80e8c7c <MX_GPDMA1_Init+0x4c>)
 80e8c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e8c4c:	f003 0301 	and.w	r3, r3, #1
 80e8c50:	607b      	str	r3, [r7, #4]
 80e8c52:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80e8c54:	2200      	movs	r2, #0
 80e8c56:	2100      	movs	r1, #0
 80e8c58:	201b      	movs	r0, #27
 80e8c5a:	f002 fd9f 	bl	80eb79c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80e8c5e:	201b      	movs	r0, #27
 80e8c60:	f002 fdb6 	bl	80eb7d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 2, 0);
 80e8c64:	2200      	movs	r2, #0
 80e8c66:	2102      	movs	r1, #2
 80e8c68:	201c      	movs	r0, #28
 80e8c6a:	f002 fd97 	bl	80eb79c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80e8c6e:	201c      	movs	r0, #28
 80e8c70:	f002 fdae 	bl	80eb7d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80e8c74:	bf00      	nop
 80e8c76:	3708      	adds	r7, #8
 80e8c78:	46bd      	mov	sp, r7
 80e8c7a:	bd80      	pop	{r7, pc}
 80e8c7c:	44020c00 	.word	0x44020c00

080e8c80 <MX_GPIO_Init>:
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15(JTDI)   ------> DEBUG_JTDI
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80e8c80:	b580      	push	{r7, lr}
 80e8c82:	b08e      	sub	sp, #56	@ 0x38
 80e8c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e8c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8c8a:	2200      	movs	r2, #0
 80e8c8c:	601a      	str	r2, [r3, #0]
 80e8c8e:	605a      	str	r2, [r3, #4]
 80e8c90:	609a      	str	r2, [r3, #8]
 80e8c92:	60da      	str	r2, [r3, #12]
 80e8c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80e8c96:	4b93      	ldr	r3, [pc, #588]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8c9c:	4a91      	ldr	r2, [pc, #580]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8c9e:	f043 0310 	orr.w	r3, r3, #16
 80e8ca2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8ca6:	4b8f      	ldr	r3, [pc, #572]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8cac:	f003 0310 	and.w	r3, r3, #16
 80e8cb0:	623b      	str	r3, [r7, #32]
 80e8cb2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80e8cb4:	4b8b      	ldr	r3, [pc, #556]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8cba:	4a8a      	ldr	r2, [pc, #552]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cbc:	f043 0304 	orr.w	r3, r3, #4
 80e8cc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8cc4:	4b87      	ldr	r3, [pc, #540]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8cca:	f003 0304 	and.w	r3, r3, #4
 80e8cce:	61fb      	str	r3, [r7, #28]
 80e8cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80e8cd2:	4b84      	ldr	r3, [pc, #528]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8cd8:	4a82      	ldr	r2, [pc, #520]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cda:	f043 0320 	orr.w	r3, r3, #32
 80e8cde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8ce2:	4b80      	ldr	r3, [pc, #512]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8ce8:	f003 0320 	and.w	r3, r3, #32
 80e8cec:	61bb      	str	r3, [r7, #24]
 80e8cee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80e8cf0:	4b7c      	ldr	r3, [pc, #496]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8cf6:	4a7b      	ldr	r2, [pc, #492]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80e8cfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8d00:	4b78      	ldr	r3, [pc, #480]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80e8d0a:	617b      	str	r3, [r7, #20]
 80e8d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80e8d0e:	4b75      	ldr	r3, [pc, #468]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d14:	4a73      	ldr	r2, [pc, #460]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d16:	f043 0301 	orr.w	r3, r3, #1
 80e8d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8d1e:	4b71      	ldr	r3, [pc, #452]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d24:	f003 0301 	and.w	r3, r3, #1
 80e8d28:	613b      	str	r3, [r7, #16]
 80e8d2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80e8d2c:	4b6d      	ldr	r3, [pc, #436]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d32:	4a6c      	ldr	r2, [pc, #432]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d34:	f043 0302 	orr.w	r3, r3, #2
 80e8d38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8d3c:	4b69      	ldr	r3, [pc, #420]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d42:	f003 0302 	and.w	r3, r3, #2
 80e8d46:	60fb      	str	r3, [r7, #12]
 80e8d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80e8d4a:	4b66      	ldr	r3, [pc, #408]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d50:	4a64      	ldr	r2, [pc, #400]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d52:	f043 0308 	orr.w	r3, r3, #8
 80e8d56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8d5a:	4b62      	ldr	r3, [pc, #392]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d60:	f003 0308 	and.w	r3, r3, #8
 80e8d64:	60bb      	str	r3, [r7, #8]
 80e8d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80e8d68:	4b5e      	ldr	r3, [pc, #376]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d6e:	4a5d      	ldr	r2, [pc, #372]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80e8d74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e8d78:	4b5a      	ldr	r3, [pc, #360]	@ (80e8ee4 <MX_GPIO_Init+0x264>)
 80e8d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e8d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80e8d82:	607b      	str	r3, [r7, #4]
 80e8d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80e8d86:	2200      	movs	r2, #0
 80e8d88:	2110      	movs	r1, #16
 80e8d8a:	4857      	ldr	r0, [pc, #348]	@ (80e8ee8 <MX_GPIO_Init+0x268>)
 80e8d8c:	f006 fa20 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80e8d90:	2200      	movs	r2, #0
 80e8d92:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80e8d96:	4855      	ldr	r0, [pc, #340]	@ (80e8eec <MX_GPIO_Init+0x26c>)
 80e8d98:	f006 fa1a 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80e8d9c:	2200      	movs	r2, #0
 80e8d9e:	2102      	movs	r1, #2
 80e8da0:	4853      	ldr	r0, [pc, #332]	@ (80e8ef0 <MX_GPIO_Init+0x270>)
 80e8da2:	f006 fa15 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 80e8da6:	2200      	movs	r2, #0
 80e8da8:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80e8dac:	4851      	ldr	r0, [pc, #324]	@ (80e8ef4 <MX_GPIO_Init+0x274>)
 80e8dae:	f006 fa0f 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80e8db2:	2200      	movs	r2, #0
 80e8db4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80e8db8:	484f      	ldr	r0, [pc, #316]	@ (80e8ef8 <MX_GPIO_Init+0x278>)
 80e8dba:	f006 fa09 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80e8dbe:	2200      	movs	r2, #0
 80e8dc0:	2180      	movs	r1, #128	@ 0x80
 80e8dc2:	484e      	ldr	r0, [pc, #312]	@ (80e8efc <MX_GPIO_Init+0x27c>)
 80e8dc4:	f006 fa04 	bl	80ef1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80e8dc8:	2308      	movs	r3, #8
 80e8dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80e8dcc:	2300      	movs	r3, #0
 80e8dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8dd0:	2300      	movs	r3, #0
 80e8dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80e8dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8dd8:	4619      	mov	r1, r3
 80e8dda:	4843      	ldr	r0, [pc, #268]	@ (80e8ee8 <MX_GPIO_Init+0x268>)
 80e8ddc:	f006 f882 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80e8de0:	2310      	movs	r3, #16
 80e8de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8de4:	2301      	movs	r3, #1
 80e8de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8de8:	2300      	movs	r3, #0
 80e8dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8dec:	2300      	movs	r3, #0
 80e8dee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80e8df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8df4:	4619      	mov	r1, r3
 80e8df6:	483c      	ldr	r0, [pc, #240]	@ (80e8ee8 <MX_GPIO_Init+0x268>)
 80e8df8:	f006 f874 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80e8dfc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80e8e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8e02:	2301      	movs	r3, #1
 80e8e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e06:	2300      	movs	r3, #0
 80e8e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8e0a:	2300      	movs	r3, #0
 80e8e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80e8e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8e12:	4619      	mov	r1, r3
 80e8e14:	4835      	ldr	r0, [pc, #212]	@ (80e8eec <MX_GPIO_Init+0x26c>)
 80e8e16:	f006 f865 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80e8e1a:	2302      	movs	r3, #2
 80e8e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8e1e:	2301      	movs	r3, #1
 80e8e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e22:	2300      	movs	r3, #0
 80e8e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8e26:	2300      	movs	r3, #0
 80e8e28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80e8e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8e2e:	4619      	mov	r1, r3
 80e8e30:	482f      	ldr	r0, [pc, #188]	@ (80e8ef0 <MX_GPIO_Init+0x270>)
 80e8e32:	f006 f857 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80e8e36:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80e8e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8e3c:	2301      	movs	r3, #1
 80e8e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e40:	2300      	movs	r3, #0
 80e8e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8e44:	2300      	movs	r3, #0
 80e8e46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80e8e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8e4c:	4619      	mov	r1, r3
 80e8e4e:	4829      	ldr	r0, [pc, #164]	@ (80e8ef4 <MX_GPIO_Init+0x274>)
 80e8e50:	f006 f848 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80e8e54:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80e8e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8e5a:	2301      	movs	r3, #1
 80e8e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e5e:	2300      	movs	r3, #0
 80e8e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8e62:	2300      	movs	r3, #0
 80e8e64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80e8e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8e6a:	4619      	mov	r1, r3
 80e8e6c:	4822      	ldr	r0, [pc, #136]	@ (80e8ef8 <MX_GPIO_Init+0x278>)
 80e8e6e:	f006 f839 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80e8e72:	2380      	movs	r3, #128	@ 0x80
 80e8e74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80e8e76:	2301      	movs	r3, #1
 80e8e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e7a:	2300      	movs	r3, #0
 80e8e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e8e7e:	2300      	movs	r3, #0
 80e8e80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80e8e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8e86:	4619      	mov	r1, r3
 80e8e88:	481c      	ldr	r0, [pc, #112]	@ (80e8efc <MX_GPIO_Init+0x27c>)
 80e8e8a:	f006 f82b 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80e8e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80e8e92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80e8e94:	2300      	movs	r3, #0
 80e8e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8e98:	2300      	movs	r3, #0
 80e8e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80e8e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8ea0:	4619      	mov	r1, r3
 80e8ea2:	4817      	ldr	r0, [pc, #92]	@ (80e8f00 <MX_GPIO_Init+0x280>)
 80e8ea4:	f006 f81e 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80e8ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80e8eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80e8eae:	2300      	movs	r3, #0
 80e8eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8eb2:	2300      	movs	r3, #0
 80e8eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80e8eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8eba:	4619      	mov	r1, r3
 80e8ebc:	480c      	ldr	r0, [pc, #48]	@ (80e8ef0 <MX_GPIO_Init+0x270>)
 80e8ebe:	f006 f811 	bl	80eeee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80e8ec2:	2301      	movs	r3, #1
 80e8ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80e8ec6:	2300      	movs	r3, #0
 80e8ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e8eca:	2300      	movs	r3, #0
 80e8ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80e8ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80e8ed2:	4619      	mov	r1, r3
 80e8ed4:	4808      	ldr	r0, [pc, #32]	@ (80e8ef8 <MX_GPIO_Init+0x278>)
 80e8ed6:	f006 f805 	bl	80eeee4 <HAL_GPIO_Init>

}
 80e8eda:	bf00      	nop
 80e8edc:	3738      	adds	r7, #56	@ 0x38
 80e8ede:	46bd      	mov	sp, r7
 80e8ee0:	bd80      	pop	{r7, pc}
 80e8ee2:	bf00      	nop
 80e8ee4:	44020c00 	.word	0x44020c00
 80e8ee8:	42021000 	.word	0x42021000
 80e8eec:	42021400 	.word	0x42021400
 80e8ef0:	42020800 	.word	0x42020800
 80e8ef4:	42020400 	.word	0x42020400
 80e8ef8:	42020c00 	.word	0x42020c00
 80e8efc:	42021800 	.word	0x42021800
 80e8f00:	42020000 	.word	0x42020000

080e8f04 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80e8f04:	b580      	push	{r7, lr}
 80e8f06:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80e8f08:	2000      	movs	r0, #0
 80e8f0a:	f006 f979 	bl	80ef200 <HAL_ICACHE_ConfigAssociativityMode>
 80e8f0e:	4603      	mov	r3, r0
 80e8f10:	2b00      	cmp	r3, #0
 80e8f12:	d001      	beq.n	80e8f18 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80e8f14:	f000 f966 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80e8f18:	f006 f992 	bl	80ef240 <HAL_ICACHE_Enable>
 80e8f1c:	4603      	mov	r3, r0
 80e8f1e:	2b00      	cmp	r3, #0
 80e8f20:	d001      	beq.n	80e8f26 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80e8f22:	f000 f95f 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80e8f26:	bf00      	nop
 80e8f28:	bd80      	pop	{r7, pc}
	...

080e8f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80e8f2c:	b5b0      	push	{r4, r5, r7, lr}
 80e8f2e:	b08c      	sub	sp, #48	@ 0x30
 80e8f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80e8f32:	f000 f921 	bl	80e9178 <MPU_Config>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80e8f36:	f001 fb0f 	bl	80ea558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80e8f3a:	f000 f897 	bl	80e906c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80e8f3e:	f7ff fe9f 	bl	80e8c80 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80e8f42:	f7ff fe75 	bl	80e8c30 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 80e8f46:	f7ff f87b 	bl	80e8040 <MX_ADC1_Init>
  MX_ADC2_Init();
 80e8f4a:	f7ff f935 	bl	80e81b8 <MX_ADC2_Init>
  MX_DAC1_Init();
 80e8f4e:	f7ff fcdb 	bl	80e8908 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80e8f52:	f7ff fd61 	bl	80e8a18 <MX_FDCAN1_Init>
  MX_ICACHE_Init();
 80e8f56:	f7ff ffd5 	bl	80e8f04 <MX_ICACHE_Init>
  MX_TIM1_Init();
 80e8f5a:	f000 fcaf 	bl	80e98bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80e8f5e:	f000 fd7f 	bl	80e9a60 <MX_TIM3_Init>
  MX_TIM8_Init();
 80e8f62:	f000 feab 	bl	80e9cbc <MX_TIM8_Init>
  MX_TIM13_Init();
 80e8f66:	f000 ff91 	bl	80e9e8c <MX_TIM13_Init>
  MX_TIM16_Init();
 80e8f6a:	f001 f82f 	bl	80e9fcc <MX_TIM16_Init>
  MX_SPI2_Init();
 80e8f6e:	f000 f93f 	bl	80e91f0 <MX_SPI2_Init>
  MX_SPI4_Init();
 80e8f72:	f000 f995 	bl	80e92a0 <MX_SPI4_Init>
  MX_TIM15_Init();
 80e8f76:	f000 ffd1 	bl	80e9f1c <MX_TIM15_Init>
  MX_TIM4_Init();
 80e8f7a:	f000 fe09 	bl	80e9b90 <MX_TIM4_Init>
  MX_TIM14_Init();
 80e8f7e:	f000 ffa9 	bl	80e9ed4 <MX_TIM14_Init>
  MX_TIM17_Init();
 80e8f82:	f001 f89d 	bl	80ea0c0 <MX_TIM17_Init>
  MX_CRC_Init();
 80e8f86:	f7ff fc5f 	bl	80e8848 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  hardware_info.magic_number = 0xACABACAB;
 80e8f8a:	4b33      	ldr	r3, [pc, #204]	@ (80e9058 <main+0x12c>)
 80e8f8c:	4a33      	ldr	r2, [pc, #204]	@ (80e905c <main+0x130>)
 80e8f8e:	601a      	str	r2, [r3, #0]
  hardware_info.board_version = (BOARD | (HW_VERSION << 8));
 80e8f90:	4b31      	ldr	r3, [pc, #196]	@ (80e9058 <main+0x12c>)
 80e8f92:	2204      	movs	r2, #4
 80e8f94:	809a      	strh	r2, [r3, #4]

  // Calculate the CRC for the fields `magic_number` and `board_version`
  uint32_t temp_data[2];
  temp_data[0] = hardware_info.magic_number;
 80e8f96:	4b30      	ldr	r3, [pc, #192]	@ (80e9058 <main+0x12c>)
 80e8f98:	681b      	ldr	r3, [r3, #0]
 80e8f9a:	623b      	str	r3, [r7, #32]
  temp_data[1] = hardware_info.board_version;
 80e8f9c:	4b2e      	ldr	r3, [pc, #184]	@ (80e9058 <main+0x12c>)
 80e8f9e:	889b      	ldrh	r3, [r3, #4]
 80e8fa0:	b29b      	uxth	r3, r3
 80e8fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  hardware_info.crc = sf_crc_compute_crc16_deadbeef( temp_data, sizeof(temp_data));
 80e8fa4:	f107 0320 	add.w	r3, r7, #32
 80e8fa8:	2108      	movs	r1, #8
 80e8faa:	4618      	mov	r0, r3
 80e8fac:	f010 fbd1 	bl	80f9752 <sf_crc_compute_crc16_deadbeef>
 80e8fb0:	4603      	mov	r3, r0
 80e8fb2:	461a      	mov	r2, r3
 80e8fb4:	4b28      	ldr	r3, [pc, #160]	@ (80e9058 <main+0x12c>)
 80e8fb6:	80da      	strh	r2, [r3, #6]

  /* Write your local variable definition here */
  bool stay_in_bootloader = false;
 80e8fb8:	2300      	movs	r3, #0
 80e8fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  mem_init();
 80e8fbe:	f00f fdfd 	bl	80f8bbc <mem_init>

  can_message_handler_init();
 80e8fc2:	f00b fae1 	bl	80f4588 <can_message_handler_init>
  sf_bootloader_hal_init();
 80e8fc6:	f00f fe7d 	bl	80f8cc4 <sf_bootloader_hal_init>

  const bootloader_sections_t bootloader_sections = {
 80e8fca:	4b25      	ldr	r3, [pc, #148]	@ (80e9060 <main+0x134>)
 80e8fcc:	463c      	mov	r4, r7
 80e8fce:	461d      	mov	r5, r3
 80e8fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80e8fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80e8fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80e8fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  .app = {.address = MEM_APP_START_ADDRESS, .size = MEM_APP_END_ADDRESS - MEM_APP_START_ADDRESS },
		  .upgrade_info = {.address = MEM_UPGRADE_INFO_ADDRESS, .size = MEM_UPGRADE_INFO_END_ADDRESS - MEM_UPGRADE_INFO_ADDRESS },
		  .upgrade = {.address = MEM_UPGRADE_START_ADDRESS, .size = MEM_UPGRADE_END_ADDRESS - MEM_UPGRADE_START_ADDRESS },
  };

  bootloader_init(&bootloader_config, &bootloader_sections);
 80e8fdc:	463b      	mov	r3, r7
 80e8fde:	4619      	mov	r1, r3
 80e8fe0:	4820      	ldr	r0, [pc, #128]	@ (80e9064 <main+0x138>)
 80e8fe2:	f00b febb 	bl	80f4d5c <bootloader_init>

  if (stay_in_bootloader) {
 80e8fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80e8fea:	2b00      	cmp	r3, #0
 80e8fec:	d002      	beq.n	80e8ff4 <main+0xc8>
	  bootloader_stay(true);
 80e8fee:	2001      	movs	r0, #1
 80e8ff0:	f00c f9ea 	bl	80f53c8 <bootloader_stay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t app_status = bootloader_app_status();
 80e8ff4:	f00b fe84 	bl	80f4d00 <bootloader_app_status>
 80e8ff8:	4603      	mov	r3, r0
 80e8ffa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	  can_message_handler_task(BOOTLOADER_ECU_CODE_ID, app_status, BOOTLOADER_VERSION);
 80e8ffe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80e9002:	2203      	movs	r2, #3
 80e9004:	4619      	mov	r1, r3
 80e9006:	2004      	movs	r0, #4
 80e9008:	f00b fbee 	bl	80f47e8 <can_message_handler_task>
	  uint32_t time = get_1ms_counter();
 80e900c:	f010 fdb8 	bl	80f9b80 <get_1ms_counter>
 80e9010:	62b8      	str	r0, [r7, #40]	@ 0x28
	  bootloader_tick(time);
 80e9012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80e9014:	f00b ff9e 	bl	80f4f54 <bootloader_tick>


	  if( (time - led_timer) >= BOOTLOADER_LED_TIME_TOGGLE)
 80e9018:	4b13      	ldr	r3, [pc, #76]	@ (80e9068 <main+0x13c>)
 80e901a:	681b      	ldr	r3, [r3, #0]
 80e901c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80e901e:	1ad3      	subs	r3, r2, r3
 80e9020:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80e9024:	d3e6      	bcc.n	80e8ff4 <main+0xc8>
	  {
		  led_timer = get_1ms_counter();
 80e9026:	f010 fdab 	bl	80f9b80 <get_1ms_counter>
 80e902a:	4603      	mov	r3, r0
 80e902c:	4a0e      	ldr	r2, [pc, #56]	@ (80e9068 <main+0x13c>)
 80e902e:	6013      	str	r3, [r2, #0]

		  if( gpio_get( LED1 ) == 0 ) {
 80e9030:	2069      	movs	r0, #105	@ 0x69
 80e9032:	f010 fd63 	bl	80f9afc <gpio_get>
 80e9036:	4603      	mov	r3, r0
 80e9038:	2b00      	cmp	r3, #0
 80e903a:	d106      	bne.n	80e904a <main+0x11e>
			  gpio_set( LED1 );
 80e903c:	2069      	movs	r0, #105	@ 0x69
 80e903e:	f010 fce5 	bl	80f9a0c <gpio_set>
			  gpio_clear( LED2 );
 80e9042:	206a      	movs	r0, #106	@ 0x6a
 80e9044:	f010 fd1e 	bl	80f9a84 <gpio_clear>
 80e9048:	e7d4      	b.n	80e8ff4 <main+0xc8>
		  }
		  else
		  {
			  gpio_clear( LED1 );
 80e904a:	2069      	movs	r0, #105	@ 0x69
 80e904c:	f010 fd1a 	bl	80f9a84 <gpio_clear>
			  gpio_set( LED2 );
 80e9050:	206a      	movs	r0, #106	@ 0x6a
 80e9052:	f010 fcdb 	bl	80f9a0c <gpio_set>
  {
 80e9056:	e7cd      	b.n	80e8ff4 <main+0xc8>
 80e9058:	2009fe04 	.word	0x2009fe04
 80e905c:	acabacab 	.word	0xacabacab
 80e9060:	080fab34 	.word	0x080fab34
 80e9064:	080fadf8 	.word	0x080fadf8
 80e9068:	20002340 	.word	0x20002340

080e906c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80e906c:	b580      	push	{r7, lr}
 80e906e:	b09c      	sub	sp, #112	@ 0x70
 80e9070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80e9072:	f107 0320 	add.w	r3, r7, #32
 80e9076:	2250      	movs	r2, #80	@ 0x50
 80e9078:	2100      	movs	r1, #0
 80e907a:	4618      	mov	r0, r3
 80e907c:	f010 fecd 	bl	80f9e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80e9080:	f107 0308 	add.w	r3, r7, #8
 80e9084:	2200      	movs	r2, #0
 80e9086:	601a      	str	r2, [r3, #0]
 80e9088:	605a      	str	r2, [r3, #4]
 80e908a:	609a      	str	r2, [r3, #8]
 80e908c:	60da      	str	r2, [r3, #12]
 80e908e:	611a      	str	r2, [r3, #16]
 80e9090:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80e9092:	4b36      	ldr	r3, [pc, #216]	@ (80e916c <SystemClock_Config+0x100>)
 80e9094:	691b      	ldr	r3, [r3, #16]
 80e9096:	4a35      	ldr	r2, [pc, #212]	@ (80e916c <SystemClock_Config+0x100>)
 80e9098:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80e909c:	6113      	str	r3, [r2, #16]
 80e909e:	4b33      	ldr	r3, [pc, #204]	@ (80e916c <SystemClock_Config+0x100>)
 80e90a0:	691b      	ldr	r3, [r3, #16]
 80e90a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80e90a6:	607b      	str	r3, [r7, #4]
 80e90a8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80e90aa:	bf00      	nop
 80e90ac:	4b2f      	ldr	r3, [pc, #188]	@ (80e916c <SystemClock_Config+0x100>)
 80e90ae:	695b      	ldr	r3, [r3, #20]
 80e90b0:	f003 0308 	and.w	r3, r3, #8
 80e90b4:	2b08      	cmp	r3, #8
 80e90b6:	d1f9      	bne.n	80e90ac <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80e90b8:	231a      	movs	r3, #26
 80e90ba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80e90bc:	2301      	movs	r3, #1
 80e90be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80e90c0:	2300      	movs	r3, #0
 80e90c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80e90c4:	2340      	movs	r3, #64	@ 0x40
 80e90c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80e90c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80e90cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80e90ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80e90d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80e90d4:	2320      	movs	r3, #32
 80e90d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80e90d8:	2302      	movs	r3, #2
 80e90da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 80e90dc:	2301      	movs	r3, #1
 80e90de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80e90e0:	2304      	movs	r3, #4
 80e90e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 80e90e4:	231e      	movs	r3, #30
 80e90e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80e90e8:	2302      	movs	r3, #2
 80e90ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80e90ec:	2302      	movs	r3, #2
 80e90ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80e90f0:	2302      	movs	r3, #2
 80e90f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80e90f4:	230c      	movs	r3, #12
 80e90f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80e90f8:	2300      	movs	r3, #0
 80e90fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80e90fc:	2300      	movs	r3, #0
 80e90fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80e9100:	f107 0320 	add.w	r3, r7, #32
 80e9104:	4618      	mov	r0, r3
 80e9106:	f006 f8bb 	bl	80ef280 <HAL_RCC_OscConfig>
 80e910a:	4603      	mov	r3, r0
 80e910c:	2b00      	cmp	r3, #0
 80e910e:	d001      	beq.n	80e9114 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80e9110:	f000 f868 	bl	80e91e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80e9114:	231f      	movs	r3, #31
 80e9116:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80e9118:	2303      	movs	r3, #3
 80e911a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80e911c:	2300      	movs	r3, #0
 80e911e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80e9120:	2300      	movs	r3, #0
 80e9122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80e9124:	2300      	movs	r3, #0
 80e9126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80e9128:	2300      	movs	r3, #0
 80e912a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80e912c:	f107 0308 	add.w	r3, r7, #8
 80e9130:	2105      	movs	r1, #5
 80e9132:	4618      	mov	r0, r3
 80e9134:	f006 fcdc 	bl	80efaf0 <HAL_RCC_ClockConfig>
 80e9138:	4603      	mov	r3, r0
 80e913a:	2b00      	cmp	r3, #0
 80e913c:	d001      	beq.n	80e9142 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80e913e:	f000 f851 	bl	80e91e4 <Error_Handler>
  }

  /** Enables PLL2P clock output
  */
  __HAL_RCC_TIMIC_ENABLE();
 80e9142:	4b0b      	ldr	r3, [pc, #44]	@ (80e9170 <SystemClock_Config+0x104>)
 80e9144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80e9148:	4a09      	ldr	r2, [pc, #36]	@ (80e9170 <SystemClock_Config+0x104>)
 80e914a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80e914e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80e9152:	4b08      	ldr	r3, [pc, #32]	@ (80e9174 <SystemClock_Config+0x108>)
 80e9154:	681b      	ldr	r3, [r3, #0]
 80e9156:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80e915a:	4a06      	ldr	r2, [pc, #24]	@ (80e9174 <SystemClock_Config+0x108>)
 80e915c:	f043 0320 	orr.w	r3, r3, #32
 80e9160:	6013      	str	r3, [r2, #0]
}
 80e9162:	bf00      	nop
 80e9164:	3770      	adds	r7, #112	@ 0x70
 80e9166:	46bd      	mov	sp, r7
 80e9168:	bd80      	pop	{r7, pc}
 80e916a:	bf00      	nop
 80e916c:	44020800 	.word	0x44020800
 80e9170:	44020c00 	.word	0x44020c00
 80e9174:	40022000 	.word	0x40022000

080e9178 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80e9178:	b580      	push	{r7, lr}
 80e917a:	b086      	sub	sp, #24
 80e917c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80e917e:	f107 0308 	add.w	r3, r7, #8
 80e9182:	2200      	movs	r2, #0
 80e9184:	601a      	str	r2, [r3, #0]
 80e9186:	605a      	str	r2, [r3, #4]
 80e9188:	609a      	str	r2, [r3, #8]
 80e918a:	60da      	str	r2, [r3, #12]
  MPU_Attributes_InitTypeDef MPU_AttributesInit = {0};
 80e918c:	2300      	movs	r3, #0
 80e918e:	80bb      	strh	r3, [r7, #4]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80e9190:	f002 fbfe 	bl	80eb990 <HAL_MPU_Disable>

  /** Initializes and configures the Region 0 and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80e9194:	2301      	movs	r3, #1
 80e9196:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80e9198:	2300      	movs	r3, #0
 80e919a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.BaseAddress = 0x08FFF800;
 80e919c:	4b0f      	ldr	r3, [pc, #60]	@ (80e91dc <MPU_Config+0x64>)
 80e919e:	60fb      	str	r3, [r7, #12]
  MPU_InitStruct.LimitAddress = 0x08FFF8FF;
 80e91a0:	4b0f      	ldr	r3, [pc, #60]	@ (80e91e0 <MPU_Config+0x68>)
 80e91a2:	613b      	str	r3, [r7, #16]
  MPU_InitStruct.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
 80e91a4:	2300      	movs	r3, #0
 80e91a6:	753b      	strb	r3, [r7, #20]
  MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 80e91a8:	2303      	movs	r3, #3
 80e91aa:	757b      	strb	r3, [r7, #21]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80e91ac:	2301      	movs	r3, #1
 80e91ae:	75bb      	strb	r3, [r7, #22]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80e91b0:	2300      	movs	r3, #0
 80e91b2:	75fb      	strb	r3, [r7, #23]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80e91b4:	f107 0308 	add.w	r3, r7, #8
 80e91b8:	4618      	mov	r0, r3
 80e91ba:	f002 fc09 	bl	80eb9d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Attribute 0 and the memory to be protected
  */
  MPU_AttributesInit.Number = MPU_ATTRIBUTES_NUMBER0;
 80e91be:	2300      	movs	r3, #0
 80e91c0:	713b      	strb	r3, [r7, #4]
  MPU_AttributesInit.Attributes = INNER_OUTER(MPU_NOT_CACHEABLE);
 80e91c2:	2344      	movs	r3, #68	@ 0x44
 80e91c4:	717b      	strb	r3, [r7, #5]

  HAL_MPU_ConfigMemoryAttributes(&MPU_AttributesInit);
 80e91c6:	1d3b      	adds	r3, r7, #4
 80e91c8:	4618      	mov	r0, r3
 80e91ca:	f002 fc0f 	bl	80eb9ec <HAL_MPU_ConfigMemoryAttributes>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80e91ce:	2004      	movs	r0, #4
 80e91d0:	f002 fbbc 	bl	80eb94c <HAL_MPU_Enable>

}
 80e91d4:	bf00      	nop
 80e91d6:	3718      	adds	r7, #24
 80e91d8:	46bd      	mov	sp, r7
 80e91da:	bd80      	pop	{r7, pc}
 80e91dc:	08fff800 	.word	0x08fff800
 80e91e0:	08fff8ff 	.word	0x08fff8ff

080e91e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80e91e4:	b480      	push	{r7}
 80e91e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80e91e8:	b672      	cpsid	i
}
 80e91ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80e91ec:	bf00      	nop
 80e91ee:	e7fd      	b.n	80e91ec <Error_Handler+0x8>

080e91f0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80e91f0:	b580      	push	{r7, lr}
 80e91f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80e91f4:	4b28      	ldr	r3, [pc, #160]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e91f6:	4a29      	ldr	r2, [pc, #164]	@ (80e929c <MX_SPI2_Init+0xac>)
 80e91f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80e91fa:	4b27      	ldr	r3, [pc, #156]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e91fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80e9200:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80e9202:	4b25      	ldr	r3, [pc, #148]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9204:	2200      	movs	r2, #0
 80e9206:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80e9208:	4b23      	ldr	r3, [pc, #140]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e920a:	220f      	movs	r2, #15
 80e920c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80e920e:	4b22      	ldr	r3, [pc, #136]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9210:	2200      	movs	r2, #0
 80e9212:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80e9214:	4b20      	ldr	r3, [pc, #128]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9216:	2200      	movs	r2, #0
 80e9218:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80e921a:	4b1f      	ldr	r3, [pc, #124]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e921c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80e9220:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80e9222:	4b1d      	ldr	r3, [pc, #116]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80e9228:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80e922a:	4b1b      	ldr	r3, [pc, #108]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e922c:	2200      	movs	r2, #0
 80e922e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80e9230:	4b19      	ldr	r3, [pc, #100]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9232:	2200      	movs	r2, #0
 80e9234:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80e9236:	4b18      	ldr	r3, [pc, #96]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9238:	2200      	movs	r2, #0
 80e923a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80e923c:	4b16      	ldr	r3, [pc, #88]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e923e:	2207      	movs	r2, #7
 80e9240:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80e9242:	4b15      	ldr	r3, [pc, #84]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80e9248:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80e924a:	4b13      	ldr	r3, [pc, #76]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e924c:	2200      	movs	r2, #0
 80e924e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80e9250:	4b11      	ldr	r3, [pc, #68]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9252:	2200      	movs	r2, #0
 80e9254:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80e9256:	4b10      	ldr	r3, [pc, #64]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9258:	2200      	movs	r2, #0
 80e925a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80e925c:	4b0e      	ldr	r3, [pc, #56]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e925e:	2200      	movs	r2, #0
 80e9260:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80e9262:	4b0d      	ldr	r3, [pc, #52]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9264:	2200      	movs	r2, #0
 80e9266:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80e9268:	4b0b      	ldr	r3, [pc, #44]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e926a:	2200      	movs	r2, #0
 80e926c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_ENABLE;
 80e926e:	4b0a      	ldr	r3, [pc, #40]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9270:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80e9274:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80e9276:	4b08      	ldr	r3, [pc, #32]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9278:	2200      	movs	r2, #0
 80e927a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80e927c:	4b06      	ldr	r3, [pc, #24]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e927e:	2200      	movs	r2, #0
 80e9280:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80e9282:	4805      	ldr	r0, [pc, #20]	@ (80e9298 <MX_SPI2_Init+0xa8>)
 80e9284:	f008 ffee 	bl	80f2264 <HAL_SPI_Init>
 80e9288:	4603      	mov	r3, r0
 80e928a:	2b00      	cmp	r3, #0
 80e928c:	d001      	beq.n	80e9292 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80e928e:	f7ff ffa9 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80e9292:	bf00      	nop
 80e9294:	bd80      	pop	{r7, pc}
 80e9296:	bf00      	nop
 80e9298:	20002344 	.word	0x20002344
 80e929c:	40003800 	.word	0x40003800

080e92a0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80e92a0:	b580      	push	{r7, lr}
 80e92a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80e92a4:	4b27      	ldr	r3, [pc, #156]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92a6:	4a28      	ldr	r2, [pc, #160]	@ (80e9348 <MX_SPI4_Init+0xa8>)
 80e92a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80e92aa:	4b26      	ldr	r3, [pc, #152]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80e92b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80e92b2:	4b24      	ldr	r3, [pc, #144]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92b4:	2200      	movs	r2, #0
 80e92b6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80e92b8:	4b22      	ldr	r3, [pc, #136]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92ba:	2203      	movs	r2, #3
 80e92bc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80e92be:	4b21      	ldr	r3, [pc, #132]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92c0:	2200      	movs	r2, #0
 80e92c2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80e92c4:	4b1f      	ldr	r3, [pc, #124]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92c6:	2200      	movs	r2, #0
 80e92c8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80e92ca:	4b1e      	ldr	r3, [pc, #120]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80e92d0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80e92d2:	4b1c      	ldr	r3, [pc, #112]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92d4:	2200      	movs	r2, #0
 80e92d6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80e92d8:	4b1a      	ldr	r3, [pc, #104]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92da:	2200      	movs	r2, #0
 80e92dc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80e92de:	4b19      	ldr	r3, [pc, #100]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92e0:	2200      	movs	r2, #0
 80e92e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80e92e4:	4b17      	ldr	r3, [pc, #92]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92e6:	2200      	movs	r2, #0
 80e92e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x7;
 80e92ea:	4b16      	ldr	r3, [pc, #88]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92ec:	2207      	movs	r2, #7
 80e92ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80e92f0:	4b14      	ldr	r3, [pc, #80]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80e92f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80e92f8:	4b12      	ldr	r3, [pc, #72]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e92fa:	2200      	movs	r2, #0
 80e92fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80e92fe:	4b11      	ldr	r3, [pc, #68]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9300:	2200      	movs	r2, #0
 80e9302:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80e9304:	4b0f      	ldr	r3, [pc, #60]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9306:	2200      	movs	r2, #0
 80e9308:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80e930a:	4b0e      	ldr	r3, [pc, #56]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e930c:	2200      	movs	r2, #0
 80e930e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80e9310:	4b0c      	ldr	r3, [pc, #48]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9312:	2200      	movs	r2, #0
 80e9314:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80e9316:	4b0b      	ldr	r3, [pc, #44]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9318:	2200      	movs	r2, #0
 80e931a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80e931c:	4b09      	ldr	r3, [pc, #36]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e931e:	2200      	movs	r2, #0
 80e9320:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi4.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80e9322:	4b08      	ldr	r3, [pc, #32]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9324:	2200      	movs	r2, #0
 80e9326:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi4.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80e9328:	4b06      	ldr	r3, [pc, #24]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e932a:	2200      	movs	r2, #0
 80e932c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80e932e:	4805      	ldr	r0, [pc, #20]	@ (80e9344 <MX_SPI4_Init+0xa4>)
 80e9330:	f008 ff98 	bl	80f2264 <HAL_SPI_Init>
 80e9334:	4603      	mov	r3, r0
 80e9336:	2b00      	cmp	r3, #0
 80e9338:	d001      	beq.n	80e933e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80e933a:	f7ff ff53 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80e933e:	bf00      	nop
 80e9340:	bd80      	pop	{r7, pc}
 80e9342:	bf00      	nop
 80e9344:	200023d4 	.word	0x200023d4
 80e9348:	40014c00 	.word	0x40014c00

080e934c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80e934c:	b580      	push	{r7, lr}
 80e934e:	b0ce      	sub	sp, #312	@ 0x138
 80e9350:	af00      	add	r7, sp, #0
 80e9352:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9356:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80e935a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80e935c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e9360:	2200      	movs	r2, #0
 80e9362:	601a      	str	r2, [r3, #0]
 80e9364:	605a      	str	r2, [r3, #4]
 80e9366:	609a      	str	r2, [r3, #8]
 80e9368:	60da      	str	r2, [r3, #12]
 80e936a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80e936c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9370:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80e9374:	4618      	mov	r0, r3
 80e9376:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80e937a:	461a      	mov	r2, r3
 80e937c:	2100      	movs	r1, #0
 80e937e:	f010 fd4c 	bl	80f9e1a <memset>
  if(spiHandle->Instance==SPI2)
 80e9382:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9386:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80e938a:	681b      	ldr	r3, [r3, #0]
 80e938c:	681b      	ldr	r3, [r3, #0]
 80e938e:	4a68      	ldr	r2, [pc, #416]	@ (80e9530 <HAL_SPI_MspInit+0x1e4>)
 80e9390:	4293      	cmp	r3, r2
 80e9392:	d15f      	bne.n	80e9454 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80e9394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9398:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80e939c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80e93a0:	f04f 0300 	mov.w	r3, #0
 80e93a4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 80e93a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e93ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80e93b0:	2200      	movs	r2, #0
 80e93b2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e93b6:	f107 0318 	add.w	r3, r7, #24
 80e93ba:	4618      	mov	r0, r3
 80e93bc:	f006 fe98 	bl	80f00f0 <HAL_RCCEx_PeriphCLKConfig>
 80e93c0:	4603      	mov	r3, r0
 80e93c2:	2b00      	cmp	r3, #0
 80e93c4:	d001      	beq.n	80e93ca <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80e93c6:	f7ff ff0d 	bl	80e91e4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80e93ca:	4b5a      	ldr	r3, [pc, #360]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e93cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80e93d0:	4a58      	ldr	r2, [pc, #352]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e93d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80e93d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80e93da:	4b56      	ldr	r3, [pc, #344]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e93dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80e93e0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80e93e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e93e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80e93ec:	601a      	str	r2, [r3, #0]
 80e93ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e93f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80e93f6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80e93f8:	4b4e      	ldr	r3, [pc, #312]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e93fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e93fe:	4a4d      	ldr	r2, [pc, #308]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e9400:	f043 0302 	orr.w	r3, r3, #2
 80e9404:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e9408:	4b4a      	ldr	r3, [pc, #296]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e940a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e940e:	f003 0202 	and.w	r2, r3, #2
 80e9412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9416:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80e941a:	601a      	str	r2, [r3, #0]
 80e941c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9420:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80e9424:	681b      	ldr	r3, [r3, #0]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80e9426:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80e942a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e942e:	2302      	movs	r3, #2
 80e9430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e9434:	2300      	movs	r3, #0
 80e9436:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e943a:	2300      	movs	r3, #0
 80e943c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80e9440:	2305      	movs	r3, #5
 80e9442:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80e9446:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e944a:	4619      	mov	r1, r3
 80e944c:	483a      	ldr	r0, [pc, #232]	@ (80e9538 <HAL_SPI_MspInit+0x1ec>)
 80e944e:	f005 fd49 	bl	80eeee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80e9452:	e067      	b.n	80e9524 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI4)
 80e9454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e9458:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80e945c:	681b      	ldr	r3, [r3, #0]
 80e945e:	681b      	ldr	r3, [r3, #0]
 80e9460:	4a36      	ldr	r2, [pc, #216]	@ (80e953c <HAL_SPI_MspInit+0x1f0>)
 80e9462:	4293      	cmp	r3, r2
 80e9464:	d15e      	bne.n	80e9524 <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80e9466:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e946a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80e946e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80e9472:	f04f 0300 	mov.w	r3, #0
 80e9476:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi4ClockSelection = RCC_SPI4CLKSOURCE_PCLK2;
 80e947a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e947e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80e9482:	2200      	movs	r2, #0
 80e9484:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80e9488:	f107 0318 	add.w	r3, r7, #24
 80e948c:	4618      	mov	r0, r3
 80e948e:	f006 fe2f 	bl	80f00f0 <HAL_RCCEx_PeriphCLKConfig>
 80e9492:	4603      	mov	r3, r0
 80e9494:	2b00      	cmp	r3, #0
 80e9496:	d001      	beq.n	80e949c <HAL_SPI_MspInit+0x150>
      Error_Handler();
 80e9498:	f7ff fea4 	bl	80e91e4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80e949c:	4b25      	ldr	r3, [pc, #148]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e949e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80e94a2:	4a24      	ldr	r2, [pc, #144]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e94a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80e94a8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80e94ac:	4b21      	ldr	r3, [pc, #132]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e94ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80e94b2:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80e94b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e94ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80e94be:	601a      	str	r2, [r3, #0]
 80e94c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e94c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80e94c8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80e94ca:	4b1a      	ldr	r3, [pc, #104]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e94cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e94d0:	4a18      	ldr	r2, [pc, #96]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e94d2:	f043 0310 	orr.w	r3, r3, #16
 80e94d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80e94da:	4b16      	ldr	r3, [pc, #88]	@ (80e9534 <HAL_SPI_MspInit+0x1e8>)
 80e94dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80e94e0:	f003 0210 	and.w	r2, r3, #16
 80e94e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e94e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80e94ec:	601a      	str	r2, [r3, #0]
 80e94ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80e94f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80e94f6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_13;
 80e94f8:	f242 0344 	movw	r3, #8260	@ 0x2044
 80e94fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80e9500:	2302      	movs	r3, #2
 80e9502:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80e9506:	2300      	movs	r3, #0
 80e9508:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80e950c:	2300      	movs	r3, #0
 80e950e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80e9512:	2305      	movs	r3, #5
 80e9514:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80e9518:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80e951c:	4619      	mov	r1, r3
 80e951e:	4808      	ldr	r0, [pc, #32]	@ (80e9540 <HAL_SPI_MspInit+0x1f4>)
 80e9520:	f005 fce0 	bl	80eeee4 <HAL_GPIO_Init>
}
 80e9524:	bf00      	nop
 80e9526:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80e952a:	46bd      	mov	sp, r7
 80e952c:	bd80      	pop	{r7, pc}
 80e952e:	bf00      	nop
 80e9530:	40003800 	.word	0x40003800
 80e9534:	44020c00 	.word	0x44020c00
 80e9538:	42020400 	.word	0x42020400
 80e953c:	40014c00 	.word	0x40014c00
 80e9540:	42021000 	.word	0x42021000

080e9544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80e9544:	b580      	push	{r7, lr}
 80e9546:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80e9548:	2200      	movs	r2, #0
 80e954a:	2102      	movs	r1, #2
 80e954c:	f06f 0004 	mvn.w	r0, #4
 80e9550:	f002 f924 	bl	80eb79c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80e9554:	2200      	movs	r2, #0
 80e9556:	2102      	movs	r1, #2
 80e9558:	f06f 0003 	mvn.w	r0, #3
 80e955c:	f002 f91e 	bl	80eb79c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80e9560:	2200      	movs	r2, #0
 80e9562:	2102      	movs	r1, #2
 80e9564:	f06f 0001 	mvn.w	r0, #1
 80e9568:	f002 f918 	bl	80eb79c <HAL_NVIC_SetPriority>

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 80e956c:	f005 fe78 	bl	80ef260 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80e9570:	bf00      	nop
 80e9572:	bd80      	pop	{r7, pc}

080e9574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80e9574:	b480      	push	{r7}
 80e9576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80e9578:	bf00      	nop
 80e957a:	e7fd      	b.n	80e9578 <NMI_Handler+0x4>

080e957c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80e957c:	b480      	push	{r7}
 80e957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80e9580:	bf00      	nop
 80e9582:	e7fd      	b.n	80e9580 <HardFault_Handler+0x4>

080e9584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80e9584:	b480      	push	{r7}
 80e9586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80e9588:	bf00      	nop
 80e958a:	e7fd      	b.n	80e9588 <MemManage_Handler+0x4>

080e958c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80e958c:	b480      	push	{r7}
 80e958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80e9590:	bf00      	nop
 80e9592:	e7fd      	b.n	80e9590 <BusFault_Handler+0x4>

080e9594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80e9594:	b480      	push	{r7}
 80e9596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80e9598:	bf00      	nop
 80e959a:	e7fd      	b.n	80e9598 <UsageFault_Handler+0x4>

080e959c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80e959c:	b480      	push	{r7}
 80e959e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80e95a0:	bf00      	nop
 80e95a2:	46bd      	mov	sp, r7
 80e95a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e95a8:	4770      	bx	lr

080e95aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80e95aa:	b480      	push	{r7}
 80e95ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80e95ae:	bf00      	nop
 80e95b0:	46bd      	mov	sp, r7
 80e95b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e95b6:	4770      	bx	lr

080e95b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80e95b8:	b480      	push	{r7}
 80e95ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80e95bc:	bf00      	nop
 80e95be:	46bd      	mov	sp, r7
 80e95c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e95c4:	4770      	bx	lr

080e95c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80e95c6:	b580      	push	{r7, lr}
 80e95c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80e95ca:	f001 f8af 	bl	80ea72c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80e95ce:	bf00      	nop
 80e95d0:	bd80      	pop	{r7, pc}
	...

080e95d4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80e95d4:	b580      	push	{r7, lr}
 80e95d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80e95d8:	4802      	ldr	r0, [pc, #8]	@ (80e95e4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80e95da:	f002 ffb3 	bl	80ec544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80e95de:	bf00      	nop
 80e95e0:	bd80      	pop	{r7, pc}
 80e95e2:	bf00      	nop
 80e95e4:	200001b0 	.word	0x200001b0

080e95e8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80e95e8:	b580      	push	{r7, lr}
 80e95ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80e95ec:	4802      	ldr	r0, [pc, #8]	@ (80e95f8 <GPDMA1_Channel1_IRQHandler+0x10>)
 80e95ee:	f002 ffa9 	bl	80ec544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80e95f2:	bf00      	nop
 80e95f4:	bd80      	pop	{r7, pc}
 80e95f6:	bf00      	nop
 80e95f8:	20000228 	.word	0x20000228

080e95fc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80e95fc:	b580      	push	{r7, lr}
 80e95fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80e9600:	4802      	ldr	r0, [pc, #8]	@ (80e960c <FDCAN1_IT0_IRQHandler+0x10>)
 80e9602:	f004 ff2d 	bl	80ee460 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80e9606:	bf00      	nop
 80e9608:	bd80      	pop	{r7, pc}
 80e960a:	bf00      	nop
 80e960c:	200002dc 	.word	0x200002dc

080e9610 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80e9610:	b580      	push	{r7, lr}
 80e9612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80e9614:	4802      	ldr	r0, [pc, #8]	@ (80e9620 <TIM1_UP_IRQHandler+0x10>)
 80e9616:	f009 f920 	bl	80f285a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80e961a:	bf00      	nop
 80e961c:	bd80      	pop	{r7, pc}
 80e961e:	bf00      	nop
 80e9620:	20002468 	.word	0x20002468

080e9624 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80e9624:	b580      	push	{r7, lr}
 80e9626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80e9628:	4802      	ldr	r0, [pc, #8]	@ (80e9634 <TIM17_IRQHandler+0x10>)
 80e962a:	f009 f916 	bl	80f285a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80e962e:	bf00      	nop
 80e9630:	bd80      	pop	{r7, pc}
 80e9632:	bf00      	nop
 80e9634:	200026c8 	.word	0x200026c8

080e9638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80e9638:	b480      	push	{r7}
 80e963a:	af00      	add	r7, sp, #0
  return 1;
 80e963c:	2301      	movs	r3, #1
}
 80e963e:	4618      	mov	r0, r3
 80e9640:	46bd      	mov	sp, r7
 80e9642:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e9646:	4770      	bx	lr

080e9648 <_kill>:

int _kill(int pid, int sig)
{
 80e9648:	b580      	push	{r7, lr}
 80e964a:	b082      	sub	sp, #8
 80e964c:	af00      	add	r7, sp, #0
 80e964e:	6078      	str	r0, [r7, #4]
 80e9650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80e9652:	f010 fc31 	bl	80f9eb8 <__errno>
 80e9656:	4603      	mov	r3, r0
 80e9658:	2216      	movs	r2, #22
 80e965a:	601a      	str	r2, [r3, #0]
  return -1;
 80e965c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80e9660:	4618      	mov	r0, r3
 80e9662:	3708      	adds	r7, #8
 80e9664:	46bd      	mov	sp, r7
 80e9666:	bd80      	pop	{r7, pc}

080e9668 <_exit>:

void _exit (int status)
{
 80e9668:	b580      	push	{r7, lr}
 80e966a:	b082      	sub	sp, #8
 80e966c:	af00      	add	r7, sp, #0
 80e966e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80e9670:	f04f 31ff 	mov.w	r1, #4294967295
 80e9674:	6878      	ldr	r0, [r7, #4]
 80e9676:	f7ff ffe7 	bl	80e9648 <_kill>
  while (1) {}    /* Make sure we hang here */
 80e967a:	bf00      	nop
 80e967c:	e7fd      	b.n	80e967a <_exit+0x12>

080e967e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80e967e:	b580      	push	{r7, lr}
 80e9680:	b086      	sub	sp, #24
 80e9682:	af00      	add	r7, sp, #0
 80e9684:	60f8      	str	r0, [r7, #12]
 80e9686:	60b9      	str	r1, [r7, #8]
 80e9688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80e968a:	2300      	movs	r3, #0
 80e968c:	617b      	str	r3, [r7, #20]
 80e968e:	e00a      	b.n	80e96a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80e9690:	f3af 8000 	nop.w
 80e9694:	4601      	mov	r1, r0
 80e9696:	68bb      	ldr	r3, [r7, #8]
 80e9698:	1c5a      	adds	r2, r3, #1
 80e969a:	60ba      	str	r2, [r7, #8]
 80e969c:	b2ca      	uxtb	r2, r1
 80e969e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80e96a0:	697b      	ldr	r3, [r7, #20]
 80e96a2:	3301      	adds	r3, #1
 80e96a4:	617b      	str	r3, [r7, #20]
 80e96a6:	697a      	ldr	r2, [r7, #20]
 80e96a8:	687b      	ldr	r3, [r7, #4]
 80e96aa:	429a      	cmp	r2, r3
 80e96ac:	dbf0      	blt.n	80e9690 <_read+0x12>
  }

  return len;
 80e96ae:	687b      	ldr	r3, [r7, #4]
}
 80e96b0:	4618      	mov	r0, r3
 80e96b2:	3718      	adds	r7, #24
 80e96b4:	46bd      	mov	sp, r7
 80e96b6:	bd80      	pop	{r7, pc}

080e96b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80e96b8:	b580      	push	{r7, lr}
 80e96ba:	b086      	sub	sp, #24
 80e96bc:	af00      	add	r7, sp, #0
 80e96be:	60f8      	str	r0, [r7, #12]
 80e96c0:	60b9      	str	r1, [r7, #8]
 80e96c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80e96c4:	2300      	movs	r3, #0
 80e96c6:	617b      	str	r3, [r7, #20]
 80e96c8:	e009      	b.n	80e96de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80e96ca:	68bb      	ldr	r3, [r7, #8]
 80e96cc:	1c5a      	adds	r2, r3, #1
 80e96ce:	60ba      	str	r2, [r7, #8]
 80e96d0:	781b      	ldrb	r3, [r3, #0]
 80e96d2:	4618      	mov	r0, r3
 80e96d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80e96d8:	697b      	ldr	r3, [r7, #20]
 80e96da:	3301      	adds	r3, #1
 80e96dc:	617b      	str	r3, [r7, #20]
 80e96de:	697a      	ldr	r2, [r7, #20]
 80e96e0:	687b      	ldr	r3, [r7, #4]
 80e96e2:	429a      	cmp	r2, r3
 80e96e4:	dbf1      	blt.n	80e96ca <_write+0x12>
  }
  return len;
 80e96e6:	687b      	ldr	r3, [r7, #4]
}
 80e96e8:	4618      	mov	r0, r3
 80e96ea:	3718      	adds	r7, #24
 80e96ec:	46bd      	mov	sp, r7
 80e96ee:	bd80      	pop	{r7, pc}

080e96f0 <_close>:

int _close(int file)
{
 80e96f0:	b480      	push	{r7}
 80e96f2:	b083      	sub	sp, #12
 80e96f4:	af00      	add	r7, sp, #0
 80e96f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80e96f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80e96fc:	4618      	mov	r0, r3
 80e96fe:	370c      	adds	r7, #12
 80e9700:	46bd      	mov	sp, r7
 80e9702:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e9706:	4770      	bx	lr

080e9708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80e9708:	b480      	push	{r7}
 80e970a:	b083      	sub	sp, #12
 80e970c:	af00      	add	r7, sp, #0
 80e970e:	6078      	str	r0, [r7, #4]
 80e9710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80e9712:	683b      	ldr	r3, [r7, #0]
 80e9714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80e9718:	605a      	str	r2, [r3, #4]
  return 0;
 80e971a:	2300      	movs	r3, #0
}
 80e971c:	4618      	mov	r0, r3
 80e971e:	370c      	adds	r7, #12
 80e9720:	46bd      	mov	sp, r7
 80e9722:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e9726:	4770      	bx	lr

080e9728 <_isatty>:

int _isatty(int file)
{
 80e9728:	b480      	push	{r7}
 80e972a:	b083      	sub	sp, #12
 80e972c:	af00      	add	r7, sp, #0
 80e972e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80e9730:	2301      	movs	r3, #1
}
 80e9732:	4618      	mov	r0, r3
 80e9734:	370c      	adds	r7, #12
 80e9736:	46bd      	mov	sp, r7
 80e9738:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e973c:	4770      	bx	lr

080e973e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80e973e:	b480      	push	{r7}
 80e9740:	b085      	sub	sp, #20
 80e9742:	af00      	add	r7, sp, #0
 80e9744:	60f8      	str	r0, [r7, #12]
 80e9746:	60b9      	str	r1, [r7, #8]
 80e9748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80e974a:	2300      	movs	r3, #0
}
 80e974c:	4618      	mov	r0, r3
 80e974e:	3714      	adds	r7, #20
 80e9750:	46bd      	mov	sp, r7
 80e9752:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e9756:	4770      	bx	lr

080e9758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80e9758:	b580      	push	{r7, lr}
 80e975a:	b086      	sub	sp, #24
 80e975c:	af00      	add	r7, sp, #0
 80e975e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80e9760:	4a14      	ldr	r2, [pc, #80]	@ (80e97b4 <_sbrk+0x5c>)
 80e9762:	4b15      	ldr	r3, [pc, #84]	@ (80e97b8 <_sbrk+0x60>)
 80e9764:	1ad3      	subs	r3, r2, r3
 80e9766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80e9768:	697b      	ldr	r3, [r7, #20]
 80e976a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80e976c:	4b13      	ldr	r3, [pc, #76]	@ (80e97bc <_sbrk+0x64>)
 80e976e:	681b      	ldr	r3, [r3, #0]
 80e9770:	2b00      	cmp	r3, #0
 80e9772:	d102      	bne.n	80e977a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80e9774:	4b11      	ldr	r3, [pc, #68]	@ (80e97bc <_sbrk+0x64>)
 80e9776:	4a12      	ldr	r2, [pc, #72]	@ (80e97c0 <_sbrk+0x68>)
 80e9778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80e977a:	4b10      	ldr	r3, [pc, #64]	@ (80e97bc <_sbrk+0x64>)
 80e977c:	681a      	ldr	r2, [r3, #0]
 80e977e:	687b      	ldr	r3, [r7, #4]
 80e9780:	4413      	add	r3, r2
 80e9782:	693a      	ldr	r2, [r7, #16]
 80e9784:	429a      	cmp	r2, r3
 80e9786:	d207      	bcs.n	80e9798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80e9788:	f010 fb96 	bl	80f9eb8 <__errno>
 80e978c:	4603      	mov	r3, r0
 80e978e:	220c      	movs	r2, #12
 80e9790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80e9792:	f04f 33ff 	mov.w	r3, #4294967295
 80e9796:	e009      	b.n	80e97ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80e9798:	4b08      	ldr	r3, [pc, #32]	@ (80e97bc <_sbrk+0x64>)
 80e979a:	681b      	ldr	r3, [r3, #0]
 80e979c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80e979e:	4b07      	ldr	r3, [pc, #28]	@ (80e97bc <_sbrk+0x64>)
 80e97a0:	681a      	ldr	r2, [r3, #0]
 80e97a2:	687b      	ldr	r3, [r7, #4]
 80e97a4:	4413      	add	r3, r2
 80e97a6:	4a05      	ldr	r2, [pc, #20]	@ (80e97bc <_sbrk+0x64>)
 80e97a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80e97aa:	68fb      	ldr	r3, [r7, #12]
}
 80e97ac:	4618      	mov	r0, r3
 80e97ae:	3718      	adds	r7, #24
 80e97b0:	46bd      	mov	sp, r7
 80e97b2:	bd80      	pop	{r7, pc}
 80e97b4:	2009fe00 	.word	0x2009fe00
 80e97b8:	00000400 	.word	0x00000400
 80e97bc:	20002464 	.word	0x20002464
 80e97c0:	20005aa0 	.word	0x20005aa0

080e97c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80e97c4:	b480      	push	{r7}
 80e97c6:	b083      	sub	sp, #12
 80e97c8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80e97ca:	4b35      	ldr	r3, [pc, #212]	@ (80e98a0 <SystemInit+0xdc>)
 80e97cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80e97d0:	4a33      	ldr	r2, [pc, #204]	@ (80e98a0 <SystemInit+0xdc>)
 80e97d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80e97d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80e97da:	4b32      	ldr	r3, [pc, #200]	@ (80e98a4 <SystemInit+0xe0>)
 80e97dc:	2201      	movs	r2, #1
 80e97de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80e97e0:	4b30      	ldr	r3, [pc, #192]	@ (80e98a4 <SystemInit+0xe0>)
 80e97e2:	2200      	movs	r2, #0
 80e97e4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80e97e6:	4b2f      	ldr	r3, [pc, #188]	@ (80e98a4 <SystemInit+0xe0>)
 80e97e8:	2200      	movs	r2, #0
 80e97ea:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80e97ec:	4b2d      	ldr	r3, [pc, #180]	@ (80e98a4 <SystemInit+0xe0>)
 80e97ee:	681a      	ldr	r2, [r3, #0]
 80e97f0:	492c      	ldr	r1, [pc, #176]	@ (80e98a4 <SystemInit+0xe0>)
 80e97f2:	4b2d      	ldr	r3, [pc, #180]	@ (80e98a8 <SystemInit+0xe4>)
 80e97f4:	4013      	ands	r3, r2
 80e97f6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80e97f8:	4b2a      	ldr	r3, [pc, #168]	@ (80e98a4 <SystemInit+0xe0>)
 80e97fa:	2200      	movs	r2, #0
 80e97fc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80e97fe:	4b29      	ldr	r3, [pc, #164]	@ (80e98a4 <SystemInit+0xe0>)
 80e9800:	2200      	movs	r2, #0
 80e9802:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80e9804:	4b27      	ldr	r3, [pc, #156]	@ (80e98a4 <SystemInit+0xe0>)
 80e9806:	2200      	movs	r2, #0
 80e9808:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80e980a:	4b26      	ldr	r3, [pc, #152]	@ (80e98a4 <SystemInit+0xe0>)
 80e980c:	4a27      	ldr	r2, [pc, #156]	@ (80e98ac <SystemInit+0xe8>)
 80e980e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80e9810:	4b24      	ldr	r3, [pc, #144]	@ (80e98a4 <SystemInit+0xe0>)
 80e9812:	2200      	movs	r2, #0
 80e9814:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80e9816:	4b23      	ldr	r3, [pc, #140]	@ (80e98a4 <SystemInit+0xe0>)
 80e9818:	4a24      	ldr	r2, [pc, #144]	@ (80e98ac <SystemInit+0xe8>)
 80e981a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80e981c:	4b21      	ldr	r3, [pc, #132]	@ (80e98a4 <SystemInit+0xe0>)
 80e981e:	2200      	movs	r2, #0
 80e9820:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80e9822:	4b20      	ldr	r3, [pc, #128]	@ (80e98a4 <SystemInit+0xe0>)
 80e9824:	4a21      	ldr	r2, [pc, #132]	@ (80e98ac <SystemInit+0xe8>)
 80e9826:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80e9828:	4b1e      	ldr	r3, [pc, #120]	@ (80e98a4 <SystemInit+0xe0>)
 80e982a:	2200      	movs	r2, #0
 80e982c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80e982e:	4b1d      	ldr	r3, [pc, #116]	@ (80e98a4 <SystemInit+0xe0>)
 80e9830:	681b      	ldr	r3, [r3, #0]
 80e9832:	4a1c      	ldr	r2, [pc, #112]	@ (80e98a4 <SystemInit+0xe0>)
 80e9834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80e9838:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80e983a:	4b1a      	ldr	r3, [pc, #104]	@ (80e98a4 <SystemInit+0xe0>)
 80e983c:	2200      	movs	r2, #0
 80e983e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80e9840:	4b17      	ldr	r3, [pc, #92]	@ (80e98a0 <SystemInit+0xdc>)
 80e9842:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80e9846:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80e9848:	4b19      	ldr	r3, [pc, #100]	@ (80e98b0 <SystemInit+0xec>)
 80e984a:	699b      	ldr	r3, [r3, #24]
 80e984c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80e9850:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80e9852:	687b      	ldr	r3, [r7, #4]
 80e9854:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80e9858:	d003      	beq.n	80e9862 <SystemInit+0x9e>
 80e985a:	687b      	ldr	r3, [r7, #4]
 80e985c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80e9860:	d117      	bne.n	80e9892 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80e9862:	4b13      	ldr	r3, [pc, #76]	@ (80e98b0 <SystemInit+0xec>)
 80e9864:	69db      	ldr	r3, [r3, #28]
 80e9866:	f003 0301 	and.w	r3, r3, #1
 80e986a:	2b00      	cmp	r3, #0
 80e986c:	d005      	beq.n	80e987a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80e986e:	4b10      	ldr	r3, [pc, #64]	@ (80e98b0 <SystemInit+0xec>)
 80e9870:	4a10      	ldr	r2, [pc, #64]	@ (80e98b4 <SystemInit+0xf0>)
 80e9872:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80e9874:	4b0e      	ldr	r3, [pc, #56]	@ (80e98b0 <SystemInit+0xec>)
 80e9876:	4a10      	ldr	r2, [pc, #64]	@ (80e98b8 <SystemInit+0xf4>)
 80e9878:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80e987a:	4b0d      	ldr	r3, [pc, #52]	@ (80e98b0 <SystemInit+0xec>)
 80e987c:	69db      	ldr	r3, [r3, #28]
 80e987e:	4a0c      	ldr	r2, [pc, #48]	@ (80e98b0 <SystemInit+0xec>)
 80e9880:	f043 0302 	orr.w	r3, r3, #2
 80e9884:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80e9886:	4b0a      	ldr	r3, [pc, #40]	@ (80e98b0 <SystemInit+0xec>)
 80e9888:	69db      	ldr	r3, [r3, #28]
 80e988a:	4a09      	ldr	r2, [pc, #36]	@ (80e98b0 <SystemInit+0xec>)
 80e988c:	f043 0301 	orr.w	r3, r3, #1
 80e9890:	61d3      	str	r3, [r2, #28]
  }
}
 80e9892:	bf00      	nop
 80e9894:	370c      	adds	r7, #12
 80e9896:	46bd      	mov	sp, r7
 80e9898:	f85d 7b04 	ldr.w	r7, [sp], #4
 80e989c:	4770      	bx	lr
 80e989e:	bf00      	nop
 80e98a0:	e000ed00 	.word	0xe000ed00
 80e98a4:	44020c00 	.word	0x44020c00
 80e98a8:	eae2eae3 	.word	0xeae2eae3
 80e98ac:	01010280 	.word	0x01010280
 80e98b0:	40022000 	.word	0x40022000
 80e98b4:	08192a3b 	.word	0x08192a3b
 80e98b8:	4c5d6e7f 	.word	0x4c5d6e7f

080e98bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80e98bc:	b580      	push	{r7, lr}
 80e98be:	b09c      	sub	sp, #112	@ 0x70
 80e98c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80e98c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80e98c6:	2200      	movs	r2, #0
 80e98c8:	601a      	str	r2, [r3, #0]
 80e98ca:	605a      	str	r2, [r3, #4]
 80e98cc:	609a      	str	r2, [r3, #8]
 80e98ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e98d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80e98d4:	2200      	movs	r2, #0
 80e98d6:	601a      	str	r2, [r3, #0]
 80e98d8:	605a      	str	r2, [r3, #4]
 80e98da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80e98dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80e98e0:	2200      	movs	r2, #0
 80e98e2:	601a      	str	r2, [r3, #0]
 80e98e4:	605a      	str	r2, [r3, #4]
 80e98e6:	609a      	str	r2, [r3, #8]
 80e98e8:	60da      	str	r2, [r3, #12]
 80e98ea:	611a      	str	r2, [r3, #16]
 80e98ec:	615a      	str	r2, [r3, #20]
 80e98ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80e98f0:	1d3b      	adds	r3, r7, #4
 80e98f2:	2234      	movs	r2, #52	@ 0x34
 80e98f4:	2100      	movs	r1, #0
 80e98f6:	4618      	mov	r0, r3
 80e98f8:	f010 fa8f 	bl	80f9e1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80e98fc:	4b56      	ldr	r3, [pc, #344]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e98fe:	4a57      	ldr	r2, [pc, #348]	@ (80e9a5c <MX_TIM1_Init+0x1a0>)
 80e9900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80e9902:	4b55      	ldr	r3, [pc, #340]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9904:	2200      	movs	r2, #0
 80e9906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9908:	4b53      	ldr	r3, [pc, #332]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e990a:	2200      	movs	r2, #0
 80e990c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 80e990e:	4b52      	ldr	r3, [pc, #328]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9910:	f640 125f 	movw	r2, #2399	@ 0x95f
 80e9914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9916:	4b50      	ldr	r3, [pc, #320]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9918:	2200      	movs	r2, #0
 80e991a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 20;
 80e991c:	4b4e      	ldr	r3, [pc, #312]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e991e:	2214      	movs	r2, #20
 80e9920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9922:	4b4d      	ldr	r3, [pc, #308]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9924:	2200      	movs	r2, #0
 80e9926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80e9928:	484b      	ldr	r0, [pc, #300]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e992a:	f008 fe26 	bl	80f257a <HAL_TIM_Base_Init>
 80e992e:	4603      	mov	r3, r0
 80e9930:	2b00      	cmp	r3, #0
 80e9932:	d001      	beq.n	80e9938 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80e9934:	f7ff fc56 	bl	80e91e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80e9938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80e993c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80e993e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80e9942:	4619      	mov	r1, r3
 80e9944:	4844      	ldr	r0, [pc, #272]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9946:	f009 fb01 	bl	80f2f4c <HAL_TIM_ConfigClockSource>
 80e994a:	4603      	mov	r3, r0
 80e994c:	2b00      	cmp	r3, #0
 80e994e:	d001      	beq.n	80e9954 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80e9950:	f7ff fc48 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80e9954:	4840      	ldr	r0, [pc, #256]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9956:	f008 fe67 	bl	80f2628 <HAL_TIM_OC_Init>
 80e995a:	4603      	mov	r3, r0
 80e995c:	2b00      	cmp	r3, #0
 80e995e:	d001      	beq.n	80e9964 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80e9960:	f7ff fc40 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80e9964:	483c      	ldr	r0, [pc, #240]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9966:	f008 fec0 	bl	80f26ea <HAL_TIM_PWM_Init>
 80e996a:	4603      	mov	r3, r0
 80e996c:	2b00      	cmp	r3, #0
 80e996e:	d001      	beq.n	80e9974 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80e9970:	f7ff fc38 	bl	80e91e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80e9974:	2340      	movs	r3, #64	@ 0x40
 80e9976:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80e9978:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80e997c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e997e:	2300      	movs	r3, #0
 80e9980:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80e9982:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80e9986:	4619      	mov	r1, r3
 80e9988:	4833      	ldr	r0, [pc, #204]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e998a:	f00a fc4d 	bl	80f4228 <HAL_TIMEx_MasterConfigSynchronization>
 80e998e:	4603      	mov	r3, r0
 80e9990:	2b00      	cmp	r3, #0
 80e9992:	d001      	beq.n	80e9998 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80e9994:	f7ff fc26 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80e9998:	2330      	movs	r3, #48	@ 0x30
 80e999a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 791;
 80e999c:	f240 3317 	movw	r3, #791	@ 0x317
 80e99a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80e99a2:	2300      	movs	r3, #0
 80e99a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80e99a6:	2300      	movs	r3, #0
 80e99a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80e99aa:	2300      	movs	r3, #0
 80e99ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80e99ae:	2300      	movs	r3, #0
 80e99b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80e99b2:	2300      	movs	r3, #0
 80e99b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80e99b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80e99ba:	2200      	movs	r2, #0
 80e99bc:	4619      	mov	r1, r3
 80e99be:	4826      	ldr	r0, [pc, #152]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e99c0:	f009 f89a 	bl	80f2af8 <HAL_TIM_OC_ConfigChannel>
 80e99c4:	4603      	mov	r3, r0
 80e99c6:	2b00      	cmp	r3, #0
 80e99c8:	d001      	beq.n	80e99ce <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80e99ca:	f7ff fc0b 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80e99ce:	2360      	movs	r3, #96	@ 0x60
 80e99d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80e99d2:	2300      	movs	r3, #0
 80e99d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80e99d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80e99da:	220c      	movs	r2, #12
 80e99dc:	4619      	mov	r1, r3
 80e99de:	481e      	ldr	r0, [pc, #120]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e99e0:	f009 f9a0 	bl	80f2d24 <HAL_TIM_PWM_ConfigChannel>
 80e99e4:	4603      	mov	r3, r0
 80e99e6:	2b00      	cmp	r3, #0
 80e99e8:	d001      	beq.n	80e99ee <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80e99ea:	f7ff fbfb 	bl	80e91e4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80e99ee:	4b1a      	ldr	r3, [pc, #104]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e99f0:	681b      	ldr	r3, [r3, #0]
 80e99f2:	69da      	ldr	r2, [r3, #28]
 80e99f4:	4b18      	ldr	r3, [pc, #96]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e99f6:	681b      	ldr	r3, [r3, #0]
 80e99f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80e99fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80e99fe:	2300      	movs	r3, #0
 80e9a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80e9a02:	2300      	movs	r3, #0
 80e9a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80e9a06:	2300      	movs	r3, #0
 80e9a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80e9a0a:	2300      	movs	r3, #0
 80e9a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80e9a0e:	2300      	movs	r3, #0
 80e9a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80e9a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80e9a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80e9a18:	2300      	movs	r3, #0
 80e9a1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80e9a1c:	2300      	movs	r3, #0
 80e9a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80e9a20:	2300      	movs	r3, #0
 80e9a22:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80e9a24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80e9a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80e9a2a:	2300      	movs	r3, #0
 80e9a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80e9a2e:	2300      	movs	r3, #0
 80e9a30:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80e9a32:	2300      	movs	r3, #0
 80e9a34:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80e9a36:	1d3b      	adds	r3, r7, #4
 80e9a38:	4619      	mov	r1, r3
 80e9a3a:	4807      	ldr	r0, [pc, #28]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9a3c:	f00a fcc4 	bl	80f43c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80e9a40:	4603      	mov	r3, r0
 80e9a42:	2b00      	cmp	r3, #0
 80e9a44:	d001      	beq.n	80e9a4a <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 80e9a46:	f7ff fbcd 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80e9a4a:	4803      	ldr	r0, [pc, #12]	@ (80e9a58 <MX_TIM1_Init+0x19c>)
 80e9a4c:	f000 fc7a 	bl	80ea344 <HAL_TIM_MspPostInit>

}
 80e9a50:	bf00      	nop
 80e9a52:	3770      	adds	r7, #112	@ 0x70
 80e9a54:	46bd      	mov	sp, r7
 80e9a56:	bd80      	pop	{r7, pc}
 80e9a58:	20002468 	.word	0x20002468
 80e9a5c:	40012c00 	.word	0x40012c00

080e9a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80e9a60:	b580      	push	{r7, lr}
 80e9a62:	b094      	sub	sp, #80	@ 0x50
 80e9a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80e9a66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80e9a6a:	2200      	movs	r2, #0
 80e9a6c:	601a      	str	r2, [r3, #0]
 80e9a6e:	605a      	str	r2, [r3, #4]
 80e9a70:	609a      	str	r2, [r3, #8]
 80e9a72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80e9a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80e9a78:	2200      	movs	r2, #0
 80e9a7a:	601a      	str	r2, [r3, #0]
 80e9a7c:	605a      	str	r2, [r3, #4]
 80e9a7e:	609a      	str	r2, [r3, #8]
 80e9a80:	60da      	str	r2, [r3, #12]
 80e9a82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e9a84:	f107 0320 	add.w	r3, r7, #32
 80e9a88:	2200      	movs	r2, #0
 80e9a8a:	601a      	str	r2, [r3, #0]
 80e9a8c:	605a      	str	r2, [r3, #4]
 80e9a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80e9a90:	1d3b      	adds	r3, r7, #4
 80e9a92:	2200      	movs	r2, #0
 80e9a94:	601a      	str	r2, [r3, #0]
 80e9a96:	605a      	str	r2, [r3, #4]
 80e9a98:	609a      	str	r2, [r3, #8]
 80e9a9a:	60da      	str	r2, [r3, #12]
 80e9a9c:	611a      	str	r2, [r3, #16]
 80e9a9e:	615a      	str	r2, [r3, #20]
 80e9aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80e9aa2:	4b39      	ldr	r3, [pc, #228]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9aa4:	4a39      	ldr	r2, [pc, #228]	@ (80e9b8c <MX_TIM3_Init+0x12c>)
 80e9aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80e9aa8:	4b37      	ldr	r3, [pc, #220]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9aaa:	2200      	movs	r2, #0
 80e9aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9aae:	4b36      	ldr	r3, [pc, #216]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9ab0:	2200      	movs	r2, #0
 80e9ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2399;
 80e9ab4:	4b34      	ldr	r3, [pc, #208]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9ab6:	f640 125f 	movw	r2, #2399	@ 0x95f
 80e9aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9abc:	4b32      	ldr	r3, [pc, #200]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9abe:	2200      	movs	r2, #0
 80e9ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9ac2:	4b31      	ldr	r3, [pc, #196]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9ac4:	2200      	movs	r2, #0
 80e9ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80e9ac8:	482f      	ldr	r0, [pc, #188]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9aca:	f008 fd56 	bl	80f257a <HAL_TIM_Base_Init>
 80e9ace:	4603      	mov	r3, r0
 80e9ad0:	2b00      	cmp	r3, #0
 80e9ad2:	d001      	beq.n	80e9ad8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80e9ad4:	f7ff fb86 	bl	80e91e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80e9ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80e9adc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80e9ade:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80e9ae2:	4619      	mov	r1, r3
 80e9ae4:	4828      	ldr	r0, [pc, #160]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9ae6:	f009 fa31 	bl	80f2f4c <HAL_TIM_ConfigClockSource>
 80e9aea:	4603      	mov	r3, r0
 80e9aec:	2b00      	cmp	r3, #0
 80e9aee:	d001      	beq.n	80e9af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80e9af0:	f7ff fb78 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80e9af4:	4824      	ldr	r0, [pc, #144]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9af6:	f008 fdf8 	bl	80f26ea <HAL_TIM_PWM_Init>
 80e9afa:	4603      	mov	r3, r0
 80e9afc:	2b00      	cmp	r3, #0
 80e9afe:	d001      	beq.n	80e9b04 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80e9b00:	f7ff fb70 	bl	80e91e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80e9b04:	2304      	movs	r3, #4
 80e9b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR5;
 80e9b08:	f04f 1310 	mov.w	r3, #1048592	@ 0x100010
 80e9b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80e9b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80e9b12:	4619      	mov	r1, r3
 80e9b14:	481c      	ldr	r0, [pc, #112]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b16:	f009 fb37 	bl	80f3188 <HAL_TIM_SlaveConfigSynchro>
 80e9b1a:	4603      	mov	r3, r0
 80e9b1c:	2b00      	cmp	r3, #0
 80e9b1e:	d001      	beq.n	80e9b24 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80e9b20:	f7ff fb60 	bl	80e91e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80e9b24:	2300      	movs	r3, #0
 80e9b26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e9b28:	2300      	movs	r3, #0
 80e9b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80e9b2c:	f107 0320 	add.w	r3, r7, #32
 80e9b30:	4619      	mov	r1, r3
 80e9b32:	4815      	ldr	r0, [pc, #84]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b34:	f00a fb78 	bl	80f4228 <HAL_TIMEx_MasterConfigSynchronization>
 80e9b38:	4603      	mov	r3, r0
 80e9b3a:	2b00      	cmp	r3, #0
 80e9b3c:	d001      	beq.n	80e9b42 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80e9b3e:	f7ff fb51 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80e9b42:	2360      	movs	r3, #96	@ 0x60
 80e9b44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80e9b46:	2300      	movs	r3, #0
 80e9b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80e9b4a:	2300      	movs	r3, #0
 80e9b4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80e9b4e:	2300      	movs	r3, #0
 80e9b50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80e9b52:	1d3b      	adds	r3, r7, #4
 80e9b54:	2204      	movs	r2, #4
 80e9b56:	4619      	mov	r1, r3
 80e9b58:	480b      	ldr	r0, [pc, #44]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b5a:	f009 f8e3 	bl	80f2d24 <HAL_TIM_PWM_ConfigChannel>
 80e9b5e:	4603      	mov	r3, r0
 80e9b60:	2b00      	cmp	r3, #0
 80e9b62:	d001      	beq.n	80e9b68 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80e9b64:	f7ff fb3e 	bl	80e91e4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80e9b68:	4b07      	ldr	r3, [pc, #28]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b6a:	681b      	ldr	r3, [r3, #0]
 80e9b6c:	699a      	ldr	r2, [r3, #24]
 80e9b6e:	4b06      	ldr	r3, [pc, #24]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b70:	681b      	ldr	r3, [r3, #0]
 80e9b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80e9b76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80e9b78:	4803      	ldr	r0, [pc, #12]	@ (80e9b88 <MX_TIM3_Init+0x128>)
 80e9b7a:	f000 fbe3 	bl	80ea344 <HAL_TIM_MspPostInit>

}
 80e9b7e:	bf00      	nop
 80e9b80:	3750      	adds	r7, #80	@ 0x50
 80e9b82:	46bd      	mov	sp, r7
 80e9b84:	bd80      	pop	{r7, pc}
 80e9b86:	bf00      	nop
 80e9b88:	200024b4 	.word	0x200024b4
 80e9b8c:	40000400 	.word	0x40000400

080e9b90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80e9b90:	b580      	push	{r7, lr}
 80e9b92:	b094      	sub	sp, #80	@ 0x50
 80e9b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80e9b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80e9b9a:	2200      	movs	r2, #0
 80e9b9c:	601a      	str	r2, [r3, #0]
 80e9b9e:	605a      	str	r2, [r3, #4]
 80e9ba0:	609a      	str	r2, [r3, #8]
 80e9ba2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80e9ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80e9ba8:	2200      	movs	r2, #0
 80e9baa:	601a      	str	r2, [r3, #0]
 80e9bac:	605a      	str	r2, [r3, #4]
 80e9bae:	609a      	str	r2, [r3, #8]
 80e9bb0:	60da      	str	r2, [r3, #12]
 80e9bb2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e9bb4:	f107 0320 	add.w	r3, r7, #32
 80e9bb8:	2200      	movs	r2, #0
 80e9bba:	601a      	str	r2, [r3, #0]
 80e9bbc:	605a      	str	r2, [r3, #4]
 80e9bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80e9bc0:	1d3b      	adds	r3, r7, #4
 80e9bc2:	2200      	movs	r2, #0
 80e9bc4:	601a      	str	r2, [r3, #0]
 80e9bc6:	605a      	str	r2, [r3, #4]
 80e9bc8:	609a      	str	r2, [r3, #8]
 80e9bca:	60da      	str	r2, [r3, #12]
 80e9bcc:	611a      	str	r2, [r3, #16]
 80e9bce:	615a      	str	r2, [r3, #20]
 80e9bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80e9bd2:	4b38      	ldr	r3, [pc, #224]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9bd4:	4a38      	ldr	r2, [pc, #224]	@ (80e9cb8 <MX_TIM4_Init+0x128>)
 80e9bd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80e9bd8:	4b36      	ldr	r3, [pc, #216]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9bda:	2200      	movs	r2, #0
 80e9bdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9bde:	4b35      	ldr	r3, [pc, #212]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9be0:	2200      	movs	r2, #0
 80e9be2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2399;
 80e9be4:	4b33      	ldr	r3, [pc, #204]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9be6:	f640 125f 	movw	r2, #2399	@ 0x95f
 80e9bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9bec:	4b31      	ldr	r3, [pc, #196]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9bee:	2200      	movs	r2, #0
 80e9bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9bf2:	4b30      	ldr	r3, [pc, #192]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9bf4:	2200      	movs	r2, #0
 80e9bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80e9bf8:	482e      	ldr	r0, [pc, #184]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9bfa:	f008 fcbe 	bl	80f257a <HAL_TIM_Base_Init>
 80e9bfe:	4603      	mov	r3, r0
 80e9c00:	2b00      	cmp	r3, #0
 80e9c02:	d001      	beq.n	80e9c08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80e9c04:	f7ff faee 	bl	80e91e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80e9c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80e9c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80e9c0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80e9c12:	4619      	mov	r1, r3
 80e9c14:	4827      	ldr	r0, [pc, #156]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c16:	f009 f999 	bl	80f2f4c <HAL_TIM_ConfigClockSource>
 80e9c1a:	4603      	mov	r3, r0
 80e9c1c:	2b00      	cmp	r3, #0
 80e9c1e:	d001      	beq.n	80e9c24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80e9c20:	f7ff fae0 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80e9c24:	4823      	ldr	r0, [pc, #140]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c26:	f008 fd60 	bl	80f26ea <HAL_TIM_PWM_Init>
 80e9c2a:	4603      	mov	r3, r0
 80e9c2c:	2b00      	cmp	r3, #0
 80e9c2e:	d001      	beq.n	80e9c34 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 80e9c30:	f7ff fad8 	bl	80e91e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80e9c34:	2306      	movs	r3, #6
 80e9c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80e9c38:	2300      	movs	r3, #0
 80e9c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80e9c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80e9c40:	4619      	mov	r1, r3
 80e9c42:	481c      	ldr	r0, [pc, #112]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c44:	f009 faa0 	bl	80f3188 <HAL_TIM_SlaveConfigSynchro>
 80e9c48:	4603      	mov	r3, r0
 80e9c4a:	2b00      	cmp	r3, #0
 80e9c4c:	d001      	beq.n	80e9c52 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 80e9c4e:	f7ff fac9 	bl	80e91e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80e9c52:	2320      	movs	r3, #32
 80e9c54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e9c56:	2300      	movs	r3, #0
 80e9c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80e9c5a:	f107 0320 	add.w	r3, r7, #32
 80e9c5e:	4619      	mov	r1, r3
 80e9c60:	4814      	ldr	r0, [pc, #80]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c62:	f00a fae1 	bl	80f4228 <HAL_TIMEx_MasterConfigSynchronization>
 80e9c66:	4603      	mov	r3, r0
 80e9c68:	2b00      	cmp	r3, #0
 80e9c6a:	d001      	beq.n	80e9c70 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80e9c6c:	f7ff faba 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80e9c70:	2360      	movs	r3, #96	@ 0x60
 80e9c72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80e9c74:	2300      	movs	r3, #0
 80e9c76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80e9c78:	2300      	movs	r3, #0
 80e9c7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80e9c7c:	2300      	movs	r3, #0
 80e9c7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80e9c80:	1d3b      	adds	r3, r7, #4
 80e9c82:	220c      	movs	r2, #12
 80e9c84:	4619      	mov	r1, r3
 80e9c86:	480b      	ldr	r0, [pc, #44]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c88:	f009 f84c 	bl	80f2d24 <HAL_TIM_PWM_ConfigChannel>
 80e9c8c:	4603      	mov	r3, r0
 80e9c8e:	2b00      	cmp	r3, #0
 80e9c90:	d001      	beq.n	80e9c96 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80e9c92:	f7ff faa7 	bl	80e91e4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 80e9c96:	4b07      	ldr	r3, [pc, #28]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c98:	681b      	ldr	r3, [r3, #0]
 80e9c9a:	69da      	ldr	r2, [r3, #28]
 80e9c9c:	4b05      	ldr	r3, [pc, #20]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9c9e:	681b      	ldr	r3, [r3, #0]
 80e9ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80e9ca4:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80e9ca6:	4803      	ldr	r0, [pc, #12]	@ (80e9cb4 <MX_TIM4_Init+0x124>)
 80e9ca8:	f000 fb4c 	bl	80ea344 <HAL_TIM_MspPostInit>

}
 80e9cac:	bf00      	nop
 80e9cae:	3750      	adds	r7, #80	@ 0x50
 80e9cb0:	46bd      	mov	sp, r7
 80e9cb2:	bd80      	pop	{r7, pc}
 80e9cb4:	20002500 	.word	0x20002500
 80e9cb8:	40000800 	.word	0x40000800

080e9cbc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80e9cbc:	b580      	push	{r7, lr}
 80e9cbe:	b0a0      	sub	sp, #128	@ 0x80
 80e9cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80e9cc2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80e9cc6:	2200      	movs	r2, #0
 80e9cc8:	601a      	str	r2, [r3, #0]
 80e9cca:	605a      	str	r2, [r3, #4]
 80e9ccc:	609a      	str	r2, [r3, #8]
 80e9cce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80e9cd0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80e9cd4:	2200      	movs	r2, #0
 80e9cd6:	601a      	str	r2, [r3, #0]
 80e9cd8:	605a      	str	r2, [r3, #4]
 80e9cda:	609a      	str	r2, [r3, #8]
 80e9cdc:	60da      	str	r2, [r3, #12]
 80e9cde:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e9ce0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80e9ce4:	2200      	movs	r2, #0
 80e9ce6:	601a      	str	r2, [r3, #0]
 80e9ce8:	605a      	str	r2, [r3, #4]
 80e9cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80e9cec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80e9cf0:	2200      	movs	r2, #0
 80e9cf2:	601a      	str	r2, [r3, #0]
 80e9cf4:	605a      	str	r2, [r3, #4]
 80e9cf6:	609a      	str	r2, [r3, #8]
 80e9cf8:	60da      	str	r2, [r3, #12]
 80e9cfa:	611a      	str	r2, [r3, #16]
 80e9cfc:	615a      	str	r2, [r3, #20]
 80e9cfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80e9d00:	463b      	mov	r3, r7
 80e9d02:	2234      	movs	r2, #52	@ 0x34
 80e9d04:	2100      	movs	r1, #0
 80e9d06:	4618      	mov	r0, r3
 80e9d08:	f010 f887 	bl	80f9e1a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80e9d0c:	4b5d      	ldr	r3, [pc, #372]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d0e:	4a5e      	ldr	r2, [pc, #376]	@ (80e9e88 <MX_TIM8_Init+0x1cc>)
 80e9d10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80e9d12:	4b5c      	ldr	r3, [pc, #368]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d14:	2200      	movs	r2, #0
 80e9d16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9d18:	4b5a      	ldr	r3, [pc, #360]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d1a:	2200      	movs	r2, #0
 80e9d1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2399;
 80e9d1e:	4b59      	ldr	r3, [pc, #356]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d20:	f640 125f 	movw	r2, #2399	@ 0x95f
 80e9d24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9d26:	4b57      	ldr	r3, [pc, #348]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d28:	2200      	movs	r2, #0
 80e9d2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80e9d2c:	4b55      	ldr	r3, [pc, #340]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d2e:	2200      	movs	r2, #0
 80e9d30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9d32:	4b54      	ldr	r3, [pc, #336]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d34:	2200      	movs	r2, #0
 80e9d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80e9d38:	4852      	ldr	r0, [pc, #328]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d3a:	f008 fc1e 	bl	80f257a <HAL_TIM_Base_Init>
 80e9d3e:	4603      	mov	r3, r0
 80e9d40:	2b00      	cmp	r3, #0
 80e9d42:	d001      	beq.n	80e9d48 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 80e9d44:	f7ff fa4e 	bl	80e91e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80e9d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80e9d4c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80e9d4e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80e9d52:	4619      	mov	r1, r3
 80e9d54:	484b      	ldr	r0, [pc, #300]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d56:	f009 f8f9 	bl	80f2f4c <HAL_TIM_ConfigClockSource>
 80e9d5a:	4603      	mov	r3, r0
 80e9d5c:	2b00      	cmp	r3, #0
 80e9d5e:	d001      	beq.n	80e9d64 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80e9d60:	f7ff fa40 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80e9d64:	4847      	ldr	r0, [pc, #284]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d66:	f008 fc5f 	bl	80f2628 <HAL_TIM_OC_Init>
 80e9d6a:	4603      	mov	r3, r0
 80e9d6c:	2b00      	cmp	r3, #0
 80e9d6e:	d001      	beq.n	80e9d74 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80e9d70:	f7ff fa38 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80e9d74:	4843      	ldr	r0, [pc, #268]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d76:	f008 fcb8 	bl	80f26ea <HAL_TIM_PWM_Init>
 80e9d7a:	4603      	mov	r3, r0
 80e9d7c:	2b00      	cmp	r3, #0
 80e9d7e:	d001      	beq.n	80e9d84 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80e9d80:	f7ff fa30 	bl	80e91e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80e9d84:	2304      	movs	r3, #4
 80e9d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80e9d88:	2300      	movs	r3, #0
 80e9d8a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80e9d8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80e9d90:	4619      	mov	r1, r3
 80e9d92:	483c      	ldr	r0, [pc, #240]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9d94:	f009 f9f8 	bl	80f3188 <HAL_TIM_SlaveConfigSynchro>
 80e9d98:	4603      	mov	r3, r0
 80e9d9a:	2b00      	cmp	r3, #0
 80e9d9c:	d001      	beq.n	80e9da2 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 80e9d9e:	f7ff fa21 	bl	80e91e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80e9da2:	2340      	movs	r3, #64	@ 0x40
 80e9da4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80e9da6:	2300      	movs	r3, #0
 80e9da8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e9daa:	2300      	movs	r3, #0
 80e9dac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80e9dae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80e9db2:	4619      	mov	r1, r3
 80e9db4:	4833      	ldr	r0, [pc, #204]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9db6:	f00a fa37 	bl	80f4228 <HAL_TIMEx_MasterConfigSynchronization>
 80e9dba:	4603      	mov	r3, r0
 80e9dbc:	2b00      	cmp	r3, #0
 80e9dbe:	d001      	beq.n	80e9dc4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80e9dc0:	f7ff fa10 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80e9dc4:	2330      	movs	r3, #48	@ 0x30
 80e9dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 791;
 80e9dc8:	f240 3317 	movw	r3, #791	@ 0x317
 80e9dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80e9dce:	2300      	movs	r3, #0
 80e9dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80e9dd2:	2300      	movs	r3, #0
 80e9dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80e9dd6:	2300      	movs	r3, #0
 80e9dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80e9dda:	2300      	movs	r3, #0
 80e9ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80e9dde:	2300      	movs	r3, #0
 80e9de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80e9de2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80e9de6:	2200      	movs	r2, #0
 80e9de8:	4619      	mov	r1, r3
 80e9dea:	4826      	ldr	r0, [pc, #152]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9dec:	f008 fe84 	bl	80f2af8 <HAL_TIM_OC_ConfigChannel>
 80e9df0:	4603      	mov	r3, r0
 80e9df2:	2b00      	cmp	r3, #0
 80e9df4:	d001      	beq.n	80e9dfa <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80e9df6:	f7ff f9f5 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80e9dfa:	2360      	movs	r3, #96	@ 0x60
 80e9dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80e9dfe:	2300      	movs	r3, #0
 80e9e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80e9e02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80e9e06:	220c      	movs	r2, #12
 80e9e08:	4619      	mov	r1, r3
 80e9e0a:	481e      	ldr	r0, [pc, #120]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9e0c:	f008 ff8a 	bl	80f2d24 <HAL_TIM_PWM_ConfigChannel>
 80e9e10:	4603      	mov	r3, r0
 80e9e12:	2b00      	cmp	r3, #0
 80e9e14:	d001      	beq.n	80e9e1a <MX_TIM8_Init+0x15e>
  {
    Error_Handler();
 80e9e16:	f7ff f9e5 	bl	80e91e4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_4);
 80e9e1a:	4b1a      	ldr	r3, [pc, #104]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9e1c:	681b      	ldr	r3, [r3, #0]
 80e9e1e:	69da      	ldr	r2, [r3, #28]
 80e9e20:	4b18      	ldr	r3, [pc, #96]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9e22:	681b      	ldr	r3, [r3, #0]
 80e9e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80e9e28:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80e9e2a:	2300      	movs	r3, #0
 80e9e2c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80e9e2e:	2300      	movs	r3, #0
 80e9e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80e9e32:	2300      	movs	r3, #0
 80e9e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80e9e36:	2300      	movs	r3, #0
 80e9e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80e9e3a:	2300      	movs	r3, #0
 80e9e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80e9e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80e9e42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80e9e44:	2300      	movs	r3, #0
 80e9e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80e9e48:	2300      	movs	r3, #0
 80e9e4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80e9e4c:	2300      	movs	r3, #0
 80e9e4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80e9e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80e9e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80e9e56:	2300      	movs	r3, #0
 80e9e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80e9e5a:	2300      	movs	r3, #0
 80e9e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80e9e5e:	2300      	movs	r3, #0
 80e9e60:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80e9e62:	463b      	mov	r3, r7
 80e9e64:	4619      	mov	r1, r3
 80e9e66:	4807      	ldr	r0, [pc, #28]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9e68:	f00a faae 	bl	80f43c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80e9e6c:	4603      	mov	r3, r0
 80e9e6e:	2b00      	cmp	r3, #0
 80e9e70:	d001      	beq.n	80e9e76 <MX_TIM8_Init+0x1ba>
  {
    Error_Handler();
 80e9e72:	f7ff f9b7 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80e9e76:	4803      	ldr	r0, [pc, #12]	@ (80e9e84 <MX_TIM8_Init+0x1c8>)
 80e9e78:	f000 fa64 	bl	80ea344 <HAL_TIM_MspPostInit>

}
 80e9e7c:	bf00      	nop
 80e9e7e:	3780      	adds	r7, #128	@ 0x80
 80e9e80:	46bd      	mov	sp, r7
 80e9e82:	bd80      	pop	{r7, pc}
 80e9e84:	2000254c 	.word	0x2000254c
 80e9e88:	40013400 	.word	0x40013400

080e9e8c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80e9e8c:	b580      	push	{r7, lr}
 80e9e8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80e9e90:	4b0e      	ldr	r3, [pc, #56]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9e92:	4a0f      	ldr	r2, [pc, #60]	@ (80e9ed0 <MX_TIM13_Init+0x44>)
 80e9e94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80e9e96:	4b0d      	ldr	r3, [pc, #52]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9e98:	2200      	movs	r2, #0
 80e9e9a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9e9c:	4b0b      	ldr	r3, [pc, #44]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9e9e:	2200      	movs	r2, #0
 80e9ea0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80e9ea2:	4b0a      	ldr	r3, [pc, #40]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9ea4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80e9ea8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9eaa:	4b08      	ldr	r3, [pc, #32]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9eac:	2200      	movs	r2, #0
 80e9eae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9eb0:	4b06      	ldr	r3, [pc, #24]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9eb2:	2200      	movs	r2, #0
 80e9eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80e9eb6:	4805      	ldr	r0, [pc, #20]	@ (80e9ecc <MX_TIM13_Init+0x40>)
 80e9eb8:	f008 fb5f 	bl	80f257a <HAL_TIM_Base_Init>
 80e9ebc:	4603      	mov	r3, r0
 80e9ebe:	2b00      	cmp	r3, #0
 80e9ec0:	d001      	beq.n	80e9ec6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80e9ec2:	f7ff f98f 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80e9ec6:	bf00      	nop
 80e9ec8:	bd80      	pop	{r7, pc}
 80e9eca:	bf00      	nop
 80e9ecc:	20002598 	.word	0x20002598
 80e9ed0:	40001c00 	.word	0x40001c00

080e9ed4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80e9ed4:	b580      	push	{r7, lr}
 80e9ed6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80e9ed8:	4b0e      	ldr	r3, [pc, #56]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9eda:	4a0f      	ldr	r2, [pc, #60]	@ (80e9f18 <MX_TIM14_Init+0x44>)
 80e9edc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80e9ede:	4b0d      	ldr	r3, [pc, #52]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9ee0:	2200      	movs	r2, #0
 80e9ee2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9ee4:	4b0b      	ldr	r3, [pc, #44]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9ee6:	2200      	movs	r2, #0
 80e9ee8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80e9eea:	4b0a      	ldr	r3, [pc, #40]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80e9ef0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9ef2:	4b08      	ldr	r3, [pc, #32]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9ef4:	2200      	movs	r2, #0
 80e9ef6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9ef8:	4b06      	ldr	r3, [pc, #24]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9efa:	2200      	movs	r2, #0
 80e9efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80e9efe:	4805      	ldr	r0, [pc, #20]	@ (80e9f14 <MX_TIM14_Init+0x40>)
 80e9f00:	f008 fb3b 	bl	80f257a <HAL_TIM_Base_Init>
 80e9f04:	4603      	mov	r3, r0
 80e9f06:	2b00      	cmp	r3, #0
 80e9f08:	d001      	beq.n	80e9f0e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80e9f0a:	f7ff f96b 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80e9f0e:	bf00      	nop
 80e9f10:	bd80      	pop	{r7, pc}
 80e9f12:	bf00      	nop
 80e9f14:	200025e4 	.word	0x200025e4
 80e9f18:	40002000 	.word	0x40002000

080e9f1c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80e9f1c:	b580      	push	{r7, lr}
 80e9f1e:	b088      	sub	sp, #32
 80e9f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80e9f22:	f107 0314 	add.w	r3, r7, #20
 80e9f26:	2200      	movs	r2, #0
 80e9f28:	601a      	str	r2, [r3, #0]
 80e9f2a:	605a      	str	r2, [r3, #4]
 80e9f2c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80e9f2e:	1d3b      	adds	r3, r7, #4
 80e9f30:	2200      	movs	r2, #0
 80e9f32:	601a      	str	r2, [r3, #0]
 80e9f34:	605a      	str	r2, [r3, #4]
 80e9f36:	609a      	str	r2, [r3, #8]
 80e9f38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80e9f3a:	4b22      	ldr	r3, [pc, #136]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f3c:	4a22      	ldr	r2, [pc, #136]	@ (80e9fc8 <MX_TIM15_Init+0xac>)
 80e9f3e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80e9f40:	4b20      	ldr	r3, [pc, #128]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f42:	2200      	movs	r2, #0
 80e9f44:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9f46:	4b1f      	ldr	r3, [pc, #124]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f48:	2200      	movs	r2, #0
 80e9f4a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80e9f4c:	4b1d      	ldr	r3, [pc, #116]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80e9f52:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80e9f54:	4b1b      	ldr	r3, [pc, #108]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f56:	2200      	movs	r2, #0
 80e9f58:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80e9f5a:	4b1a      	ldr	r3, [pc, #104]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f5c:	2200      	movs	r2, #0
 80e9f5e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80e9f60:	4b18      	ldr	r3, [pc, #96]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f62:	2200      	movs	r2, #0
 80e9f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80e9f66:	4817      	ldr	r0, [pc, #92]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f68:	f008 fc20 	bl	80f27ac <HAL_TIM_IC_Init>
 80e9f6c:	4603      	mov	r3, r0
 80e9f6e:	2b00      	cmp	r3, #0
 80e9f70:	d001      	beq.n	80e9f76 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80e9f72:	f7ff f937 	bl	80e91e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80e9f76:	2300      	movs	r3, #0
 80e9f78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80e9f7a:	2300      	movs	r3, #0
 80e9f7c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80e9f7e:	f107 0314 	add.w	r3, r7, #20
 80e9f82:	4619      	mov	r1, r3
 80e9f84:	480f      	ldr	r0, [pc, #60]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9f86:	f00a f94f 	bl	80f4228 <HAL_TIMEx_MasterConfigSynchronization>
 80e9f8a:	4603      	mov	r3, r0
 80e9f8c:	2b00      	cmp	r3, #0
 80e9f8e:	d001      	beq.n	80e9f94 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80e9f90:	f7ff f928 	bl	80e91e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80e9f94:	2300      	movs	r3, #0
 80e9f96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80e9f98:	2301      	movs	r3, #1
 80e9f9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80e9f9c:	2300      	movs	r3, #0
 80e9f9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80e9fa0:	2300      	movs	r3, #0
 80e9fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80e9fa4:	1d3b      	adds	r3, r7, #4
 80e9fa6:	2200      	movs	r2, #0
 80e9fa8:	4619      	mov	r1, r3
 80e9faa:	4806      	ldr	r0, [pc, #24]	@ (80e9fc4 <MX_TIM15_Init+0xa8>)
 80e9fac:	f008 fe1e 	bl	80f2bec <HAL_TIM_IC_ConfigChannel>
 80e9fb0:	4603      	mov	r3, r0
 80e9fb2:	2b00      	cmp	r3, #0
 80e9fb4:	d001      	beq.n	80e9fba <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80e9fb6:	f7ff f915 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80e9fba:	bf00      	nop
 80e9fbc:	3720      	adds	r7, #32
 80e9fbe:	46bd      	mov	sp, r7
 80e9fc0:	bd80      	pop	{r7, pc}
 80e9fc2:	bf00      	nop
 80e9fc4:	20002630 	.word	0x20002630
 80e9fc8:	40014000 	.word	0x40014000

080e9fcc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80e9fcc:	b580      	push	{r7, lr}
 80e9fce:	b094      	sub	sp, #80	@ 0x50
 80e9fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80e9fd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80e9fd6:	2200      	movs	r2, #0
 80e9fd8:	601a      	str	r2, [r3, #0]
 80e9fda:	605a      	str	r2, [r3, #4]
 80e9fdc:	609a      	str	r2, [r3, #8]
 80e9fde:	60da      	str	r2, [r3, #12]
 80e9fe0:	611a      	str	r2, [r3, #16]
 80e9fe2:	615a      	str	r2, [r3, #20]
 80e9fe4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80e9fe6:	463b      	mov	r3, r7
 80e9fe8:	2234      	movs	r2, #52	@ 0x34
 80e9fea:	2100      	movs	r1, #0
 80e9fec:	4618      	mov	r0, r3
 80e9fee:	f00f ff14 	bl	80f9e1a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80e9ff2:	4b31      	ldr	r3, [pc, #196]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80e9ff4:	4a31      	ldr	r2, [pc, #196]	@ (80ea0bc <MX_TIM16_Init+0xf0>)
 80e9ff6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80e9ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80e9ffa:	2200      	movs	r2, #0
 80e9ffc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80e9ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea000:	2200      	movs	r2, #0
 80ea002:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80ea004:	4b2c      	ldr	r3, [pc, #176]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80ea00a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80ea00c:	4b2a      	ldr	r3, [pc, #168]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea00e:	2200      	movs	r2, #0
 80ea010:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80ea012:	4b29      	ldr	r3, [pc, #164]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea014:	2200      	movs	r2, #0
 80ea016:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80ea018:	4b27      	ldr	r3, [pc, #156]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea01a:	2200      	movs	r2, #0
 80ea01c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80ea01e:	4826      	ldr	r0, [pc, #152]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea020:	f008 faab 	bl	80f257a <HAL_TIM_Base_Init>
 80ea024:	4603      	mov	r3, r0
 80ea026:	2b00      	cmp	r3, #0
 80ea028:	d001      	beq.n	80ea02e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80ea02a:	f7ff f8db 	bl	80e91e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80ea02e:	4822      	ldr	r0, [pc, #136]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea030:	f008 fb5b 	bl	80f26ea <HAL_TIM_PWM_Init>
 80ea034:	4603      	mov	r3, r0
 80ea036:	2b00      	cmp	r3, #0
 80ea038:	d001      	beq.n	80ea03e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80ea03a:	f7ff f8d3 	bl	80e91e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80ea03e:	2360      	movs	r3, #96	@ 0x60
 80ea040:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80ea042:	2300      	movs	r3, #0
 80ea044:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80ea046:	2300      	movs	r3, #0
 80ea048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80ea04a:	2300      	movs	r3, #0
 80ea04c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80ea04e:	2300      	movs	r3, #0
 80ea050:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80ea052:	2300      	movs	r3, #0
 80ea054:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80ea056:	2300      	movs	r3, #0
 80ea058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80ea05a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80ea05e:	2200      	movs	r2, #0
 80ea060:	4619      	mov	r1, r3
 80ea062:	4815      	ldr	r0, [pc, #84]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea064:	f008 fe5e 	bl	80f2d24 <HAL_TIM_PWM_ConfigChannel>
 80ea068:	4603      	mov	r3, r0
 80ea06a:	2b00      	cmp	r3, #0
 80ea06c:	d001      	beq.n	80ea072 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80ea06e:	f7ff f8b9 	bl	80e91e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80ea072:	2300      	movs	r3, #0
 80ea074:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80ea076:	2300      	movs	r3, #0
 80ea078:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80ea07a:	2300      	movs	r3, #0
 80ea07c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80ea07e:	2300      	movs	r3, #0
 80ea080:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80ea082:	2300      	movs	r3, #0
 80ea084:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80ea086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80ea08a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80ea08c:	2300      	movs	r3, #0
 80ea08e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80ea090:	2300      	movs	r3, #0
 80ea092:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80ea094:	463b      	mov	r3, r7
 80ea096:	4619      	mov	r1, r3
 80ea098:	4807      	ldr	r0, [pc, #28]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea09a:	f00a f995 	bl	80f43c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80ea09e:	4603      	mov	r3, r0
 80ea0a0:	2b00      	cmp	r3, #0
 80ea0a2:	d001      	beq.n	80ea0a8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80ea0a4:	f7ff f89e 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80ea0a8:	4803      	ldr	r0, [pc, #12]	@ (80ea0b8 <MX_TIM16_Init+0xec>)
 80ea0aa:	f000 f94b 	bl	80ea344 <HAL_TIM_MspPostInit>

}
 80ea0ae:	bf00      	nop
 80ea0b0:	3750      	adds	r7, #80	@ 0x50
 80ea0b2:	46bd      	mov	sp, r7
 80ea0b4:	bd80      	pop	{r7, pc}
 80ea0b6:	bf00      	nop
 80ea0b8:	2000267c 	.word	0x2000267c
 80ea0bc:	40014400 	.word	0x40014400

080ea0c0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80ea0c0:	b580      	push	{r7, lr}
 80ea0c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80ea0c4:	4b0f      	ldr	r3, [pc, #60]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0c6:	4a10      	ldr	r2, [pc, #64]	@ (80ea108 <MX_TIM17_Init+0x48>)
 80ea0c8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80ea0ca:	4b0e      	ldr	r3, [pc, #56]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0cc:	2200      	movs	r2, #0
 80ea0ce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80ea0d0:	4b0c      	ldr	r3, [pc, #48]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0d2:	2200      	movs	r2, #0
 80ea0d4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 12500;
 80ea0d6:	4b0b      	ldr	r3, [pc, #44]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0d8:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80ea0dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80ea0de:	4b09      	ldr	r3, [pc, #36]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0e0:	2200      	movs	r2, #0
 80ea0e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80ea0e4:	4b07      	ldr	r3, [pc, #28]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0e6:	2200      	movs	r2, #0
 80ea0e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80ea0ea:	4b06      	ldr	r3, [pc, #24]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0ec:	2200      	movs	r2, #0
 80ea0ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80ea0f0:	4804      	ldr	r0, [pc, #16]	@ (80ea104 <MX_TIM17_Init+0x44>)
 80ea0f2:	f008 fa42 	bl	80f257a <HAL_TIM_Base_Init>
 80ea0f6:	4603      	mov	r3, r0
 80ea0f8:	2b00      	cmp	r3, #0
 80ea0fa:	d001      	beq.n	80ea100 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80ea0fc:	f7ff f872 	bl	80e91e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80ea100:	bf00      	nop
 80ea102:	bd80      	pop	{r7, pc}
 80ea104:	200026c8 	.word	0x200026c8
 80ea108:	40014800 	.word	0x40014800

080ea10c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80ea10c:	b580      	push	{r7, lr}
 80ea10e:	b08a      	sub	sp, #40	@ 0x28
 80ea110:	af00      	add	r7, sp, #0
 80ea112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80ea114:	687b      	ldr	r3, [r7, #4]
 80ea116:	681b      	ldr	r3, [r3, #0]
 80ea118:	4a5c      	ldr	r2, [pc, #368]	@ (80ea28c <HAL_TIM_Base_MspInit+0x180>)
 80ea11a:	4293      	cmp	r3, r2
 80ea11c:	d117      	bne.n	80ea14e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80ea11e:	4b5c      	ldr	r3, [pc, #368]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea124:	4a5a      	ldr	r2, [pc, #360]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea126:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80ea12a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80ea12e:	4b58      	ldr	r3, [pc, #352]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80ea138:	627b      	str	r3, [r7, #36]	@ 0x24
 80ea13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80ea13c:	2200      	movs	r2, #0
 80ea13e:	2102      	movs	r1, #2
 80ea140:	202a      	movs	r0, #42	@ 0x2a
 80ea142:	f001 fb2b 	bl	80eb79c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80ea146:	202a      	movs	r0, #42	@ 0x2a
 80ea148:	f001 fb42 	bl	80eb7d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80ea14c:	e099      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 80ea14e:	687b      	ldr	r3, [r7, #4]
 80ea150:	681b      	ldr	r3, [r3, #0]
 80ea152:	4a50      	ldr	r2, [pc, #320]	@ (80ea294 <HAL_TIM_Base_MspInit+0x188>)
 80ea154:	4293      	cmp	r3, r2
 80ea156:	d10f      	bne.n	80ea178 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80ea158:	4b4d      	ldr	r3, [pc, #308]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea15a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea15e:	4a4c      	ldr	r2, [pc, #304]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea160:	f043 0302 	orr.w	r3, r3, #2
 80ea164:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80ea168:	4b49      	ldr	r3, [pc, #292]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea16e:	f003 0302 	and.w	r3, r3, #2
 80ea172:	623b      	str	r3, [r7, #32]
 80ea174:	6a3b      	ldr	r3, [r7, #32]
}
 80ea176:	e084      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 80ea178:	687b      	ldr	r3, [r7, #4]
 80ea17a:	681b      	ldr	r3, [r3, #0]
 80ea17c:	4a46      	ldr	r2, [pc, #280]	@ (80ea298 <HAL_TIM_Base_MspInit+0x18c>)
 80ea17e:	4293      	cmp	r3, r2
 80ea180:	d10f      	bne.n	80ea1a2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80ea182:	4b43      	ldr	r3, [pc, #268]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea184:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea188:	4a41      	ldr	r2, [pc, #260]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea18a:	f043 0304 	orr.w	r3, r3, #4
 80ea18e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80ea192:	4b3f      	ldr	r3, [pc, #252]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea198:	f003 0304 	and.w	r3, r3, #4
 80ea19c:	61fb      	str	r3, [r7, #28]
 80ea19e:	69fb      	ldr	r3, [r7, #28]
}
 80ea1a0:	e06f      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 80ea1a2:	687b      	ldr	r3, [r7, #4]
 80ea1a4:	681b      	ldr	r3, [r3, #0]
 80ea1a6:	4a3d      	ldr	r2, [pc, #244]	@ (80ea29c <HAL_TIM_Base_MspInit+0x190>)
 80ea1a8:	4293      	cmp	r3, r2
 80ea1aa:	d10f      	bne.n	80ea1cc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80ea1ac:	4b38      	ldr	r3, [pc, #224]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea1b2:	4a37      	ldr	r2, [pc, #220]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80ea1b8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80ea1bc:	4b34      	ldr	r3, [pc, #208]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea1c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80ea1c6:	61bb      	str	r3, [r7, #24]
 80ea1c8:	69bb      	ldr	r3, [r7, #24]
}
 80ea1ca:	e05a      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM13)
 80ea1cc:	687b      	ldr	r3, [r7, #4]
 80ea1ce:	681b      	ldr	r3, [r3, #0]
 80ea1d0:	4a33      	ldr	r2, [pc, #204]	@ (80ea2a0 <HAL_TIM_Base_MspInit+0x194>)
 80ea1d2:	4293      	cmp	r3, r2
 80ea1d4:	d10f      	bne.n	80ea1f6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80ea1d6:	4b2e      	ldr	r3, [pc, #184]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea1dc:	4a2c      	ldr	r2, [pc, #176]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80ea1e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80ea1e6:	4b2a      	ldr	r3, [pc, #168]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea1e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea1ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80ea1f0:	617b      	str	r3, [r7, #20]
 80ea1f2:	697b      	ldr	r3, [r7, #20]
}
 80ea1f4:	e045      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM14)
 80ea1f6:	687b      	ldr	r3, [r7, #4]
 80ea1f8:	681b      	ldr	r3, [r3, #0]
 80ea1fa:	4a2a      	ldr	r2, [pc, #168]	@ (80ea2a4 <HAL_TIM_Base_MspInit+0x198>)
 80ea1fc:	4293      	cmp	r3, r2
 80ea1fe:	d10f      	bne.n	80ea220 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80ea200:	4b23      	ldr	r3, [pc, #140]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea206:	4a22      	ldr	r2, [pc, #136]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80ea20c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80ea210:	4b1f      	ldr	r3, [pc, #124]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80ea216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80ea21a:	613b      	str	r3, [r7, #16]
 80ea21c:	693b      	ldr	r3, [r7, #16]
}
 80ea21e:	e030      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 80ea220:	687b      	ldr	r3, [r7, #4]
 80ea222:	681b      	ldr	r3, [r3, #0]
 80ea224:	4a20      	ldr	r2, [pc, #128]	@ (80ea2a8 <HAL_TIM_Base_MspInit+0x19c>)
 80ea226:	4293      	cmp	r3, r2
 80ea228:	d10f      	bne.n	80ea24a <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80ea22a:	4b19      	ldr	r3, [pc, #100]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea22c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea230:	4a17      	ldr	r2, [pc, #92]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80ea236:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80ea23a:	4b15      	ldr	r3, [pc, #84]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea23c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80ea244:	60fb      	str	r3, [r7, #12]
 80ea246:	68fb      	ldr	r3, [r7, #12]
}
 80ea248:	e01b      	b.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 80ea24a:	687b      	ldr	r3, [r7, #4]
 80ea24c:	681b      	ldr	r3, [r3, #0]
 80ea24e:	4a17      	ldr	r2, [pc, #92]	@ (80ea2ac <HAL_TIM_Base_MspInit+0x1a0>)
 80ea250:	4293      	cmp	r3, r2
 80ea252:	d116      	bne.n	80ea282 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80ea254:	4b0e      	ldr	r3, [pc, #56]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea25a:	4a0d      	ldr	r2, [pc, #52]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea25c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80ea260:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80ea264:	4b0a      	ldr	r3, [pc, #40]	@ (80ea290 <HAL_TIM_Base_MspInit+0x184>)
 80ea266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea26a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80ea26e:	60bb      	str	r3, [r7, #8]
 80ea270:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 80ea272:	2200      	movs	r2, #0
 80ea274:	2101      	movs	r1, #1
 80ea276:	2049      	movs	r0, #73	@ 0x49
 80ea278:	f001 fa90 	bl	80eb79c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80ea27c:	2049      	movs	r0, #73	@ 0x49
 80ea27e:	f001 faa7 	bl	80eb7d0 <HAL_NVIC_EnableIRQ>
}
 80ea282:	bf00      	nop
 80ea284:	3728      	adds	r7, #40	@ 0x28
 80ea286:	46bd      	mov	sp, r7
 80ea288:	bd80      	pop	{r7, pc}
 80ea28a:	bf00      	nop
 80ea28c:	40012c00 	.word	0x40012c00
 80ea290:	44020c00 	.word	0x44020c00
 80ea294:	40000400 	.word	0x40000400
 80ea298:	40000800 	.word	0x40000800
 80ea29c:	40013400 	.word	0x40013400
 80ea2a0:	40001c00 	.word	0x40001c00
 80ea2a4:	40002000 	.word	0x40002000
 80ea2a8:	40014400 	.word	0x40014400
 80ea2ac:	40014800 	.word	0x40014800

080ea2b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80ea2b0:	b580      	push	{r7, lr}
 80ea2b2:	b08a      	sub	sp, #40	@ 0x28
 80ea2b4:	af00      	add	r7, sp, #0
 80ea2b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80ea2b8:	f107 0314 	add.w	r3, r7, #20
 80ea2bc:	2200      	movs	r2, #0
 80ea2be:	601a      	str	r2, [r3, #0]
 80ea2c0:	605a      	str	r2, [r3, #4]
 80ea2c2:	609a      	str	r2, [r3, #8]
 80ea2c4:	60da      	str	r2, [r3, #12]
 80ea2c6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 80ea2c8:	687b      	ldr	r3, [r7, #4]
 80ea2ca:	681b      	ldr	r3, [r3, #0]
 80ea2cc:	4a1a      	ldr	r2, [pc, #104]	@ (80ea338 <HAL_TIM_IC_MspInit+0x88>)
 80ea2ce:	4293      	cmp	r3, r2
 80ea2d0:	d12d      	bne.n	80ea32e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80ea2d2:	4b1a      	ldr	r3, [pc, #104]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea2d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea2d8:	4a18      	ldr	r2, [pc, #96]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea2da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80ea2de:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80ea2e2:	4b16      	ldr	r3, [pc, #88]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea2e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80ea2e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80ea2ec:	613b      	str	r3, [r7, #16]
 80ea2ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80ea2f0:	4b12      	ldr	r3, [pc, #72]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea2f6:	4a11      	ldr	r2, [pc, #68]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea2f8:	f043 0310 	orr.w	r3, r3, #16
 80ea2fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea300:	4b0e      	ldr	r3, [pc, #56]	@ (80ea33c <HAL_TIM_IC_MspInit+0x8c>)
 80ea302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea306:	f003 0310 	and.w	r3, r3, #16
 80ea30a:	60fb      	str	r3, [r7, #12]
 80ea30c:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80ea30e:	2320      	movs	r3, #32
 80ea310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea312:	2302      	movs	r3, #2
 80ea314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea316:	2300      	movs	r3, #0
 80ea318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea31a:	2300      	movs	r3, #0
 80ea31c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80ea31e:	2304      	movs	r3, #4
 80ea320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80ea322:	f107 0314 	add.w	r3, r7, #20
 80ea326:	4619      	mov	r1, r3
 80ea328:	4805      	ldr	r0, [pc, #20]	@ (80ea340 <HAL_TIM_IC_MspInit+0x90>)
 80ea32a:	f004 fddb 	bl	80eeee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80ea32e:	bf00      	nop
 80ea330:	3728      	adds	r7, #40	@ 0x28
 80ea332:	46bd      	mov	sp, r7
 80ea334:	bd80      	pop	{r7, pc}
 80ea336:	bf00      	nop
 80ea338:	40014000 	.word	0x40014000
 80ea33c:	44020c00 	.word	0x44020c00
 80ea340:	42021000 	.word	0x42021000

080ea344 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80ea344:	b580      	push	{r7, lr}
 80ea346:	b08c      	sub	sp, #48	@ 0x30
 80ea348:	af00      	add	r7, sp, #0
 80ea34a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80ea34c:	f107 031c 	add.w	r3, r7, #28
 80ea350:	2200      	movs	r2, #0
 80ea352:	601a      	str	r2, [r3, #0]
 80ea354:	605a      	str	r2, [r3, #4]
 80ea356:	609a      	str	r2, [r3, #8]
 80ea358:	60da      	str	r2, [r3, #12]
 80ea35a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80ea35c:	687b      	ldr	r3, [r7, #4]
 80ea35e:	681b      	ldr	r3, [r3, #0]
 80ea360:	4a5e      	ldr	r2, [pc, #376]	@ (80ea4dc <HAL_TIM_MspPostInit+0x198>)
 80ea362:	4293      	cmp	r3, r2
 80ea364:	d120      	bne.n	80ea3a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80ea366:	4b5e      	ldr	r3, [pc, #376]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea36c:	4a5c      	ldr	r2, [pc, #368]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea36e:	f043 0301 	orr.w	r3, r3, #1
 80ea372:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea376:	4b5a      	ldr	r3, [pc, #360]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea37c:	f003 0301 	and.w	r3, r3, #1
 80ea380:	61bb      	str	r3, [r7, #24]
 80ea382:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80ea384:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80ea388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea38a:	2302      	movs	r3, #2
 80ea38c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea38e:	2300      	movs	r3, #0
 80ea390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea392:	2300      	movs	r3, #0
 80ea394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80ea396:	2301      	movs	r3, #1
 80ea398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80ea39a:	f107 031c 	add.w	r3, r7, #28
 80ea39e:	4619      	mov	r1, r3
 80ea3a0:	4850      	ldr	r0, [pc, #320]	@ (80ea4e4 <HAL_TIM_MspPostInit+0x1a0>)
 80ea3a2:	f004 fd9f 	bl	80eeee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80ea3a6:	e094      	b.n	80ea4d2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80ea3a8:	687b      	ldr	r3, [r7, #4]
 80ea3aa:	681b      	ldr	r3, [r3, #0]
 80ea3ac:	4a4e      	ldr	r2, [pc, #312]	@ (80ea4e8 <HAL_TIM_MspPostInit+0x1a4>)
 80ea3ae:	4293      	cmp	r3, r2
 80ea3b0:	d11f      	bne.n	80ea3f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80ea3b2:	4b4b      	ldr	r3, [pc, #300]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea3b8:	4a49      	ldr	r2, [pc, #292]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea3ba:	f043 0304 	orr.w	r3, r3, #4
 80ea3be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea3c2:	4b47      	ldr	r3, [pc, #284]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea3c8:	f003 0304 	and.w	r3, r3, #4
 80ea3cc:	617b      	str	r3, [r7, #20]
 80ea3ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80ea3d0:	2380      	movs	r3, #128	@ 0x80
 80ea3d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea3d4:	2302      	movs	r3, #2
 80ea3d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea3d8:	2300      	movs	r3, #0
 80ea3da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea3dc:	2300      	movs	r3, #0
 80ea3de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80ea3e0:	2302      	movs	r3, #2
 80ea3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80ea3e4:	f107 031c 	add.w	r3, r7, #28
 80ea3e8:	4619      	mov	r1, r3
 80ea3ea:	4840      	ldr	r0, [pc, #256]	@ (80ea4ec <HAL_TIM_MspPostInit+0x1a8>)
 80ea3ec:	f004 fd7a 	bl	80eeee4 <HAL_GPIO_Init>
}
 80ea3f0:	e06f      	b.n	80ea4d2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80ea3f2:	687b      	ldr	r3, [r7, #4]
 80ea3f4:	681b      	ldr	r3, [r3, #0]
 80ea3f6:	4a3e      	ldr	r2, [pc, #248]	@ (80ea4f0 <HAL_TIM_MspPostInit+0x1ac>)
 80ea3f8:	4293      	cmp	r3, r2
 80ea3fa:	d120      	bne.n	80ea43e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80ea3fc:	4b38      	ldr	r3, [pc, #224]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea402:	4a37      	ldr	r2, [pc, #220]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea404:	f043 0308 	orr.w	r3, r3, #8
 80ea408:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea40c:	4b34      	ldr	r3, [pc, #208]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea412:	f003 0308 	and.w	r3, r3, #8
 80ea416:	613b      	str	r3, [r7, #16]
 80ea418:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80ea41a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80ea41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea420:	2302      	movs	r3, #2
 80ea422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea424:	2300      	movs	r3, #0
 80ea426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea428:	2300      	movs	r3, #0
 80ea42a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80ea42c:	2302      	movs	r3, #2
 80ea42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80ea430:	f107 031c 	add.w	r3, r7, #28
 80ea434:	4619      	mov	r1, r3
 80ea436:	482f      	ldr	r0, [pc, #188]	@ (80ea4f4 <HAL_TIM_MspPostInit+0x1b0>)
 80ea438:	f004 fd54 	bl	80eeee4 <HAL_GPIO_Init>
}
 80ea43c:	e049      	b.n	80ea4d2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM8)
 80ea43e:	687b      	ldr	r3, [r7, #4]
 80ea440:	681b      	ldr	r3, [r3, #0]
 80ea442:	4a2d      	ldr	r2, [pc, #180]	@ (80ea4f8 <HAL_TIM_MspPostInit+0x1b4>)
 80ea444:	4293      	cmp	r3, r2
 80ea446:	d120      	bne.n	80ea48a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80ea448:	4b25      	ldr	r3, [pc, #148]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea44e:	4a24      	ldr	r2, [pc, #144]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea450:	f043 0304 	orr.w	r3, r3, #4
 80ea454:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea458:	4b21      	ldr	r3, [pc, #132]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea45e:	f003 0304 	and.w	r3, r3, #4
 80ea462:	60fb      	str	r3, [r7, #12]
 80ea464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80ea466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80ea46a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea46c:	2302      	movs	r3, #2
 80ea46e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea470:	2300      	movs	r3, #0
 80ea472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea474:	2300      	movs	r3, #0
 80ea476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80ea478:	2303      	movs	r3, #3
 80ea47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80ea47c:	f107 031c 	add.w	r3, r7, #28
 80ea480:	4619      	mov	r1, r3
 80ea482:	481a      	ldr	r0, [pc, #104]	@ (80ea4ec <HAL_TIM_MspPostInit+0x1a8>)
 80ea484:	f004 fd2e 	bl	80eeee4 <HAL_GPIO_Init>
}
 80ea488:	e023      	b.n	80ea4d2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM16)
 80ea48a:	687b      	ldr	r3, [r7, #4]
 80ea48c:	681b      	ldr	r3, [r3, #0]
 80ea48e:	4a1b      	ldr	r2, [pc, #108]	@ (80ea4fc <HAL_TIM_MspPostInit+0x1b8>)
 80ea490:	4293      	cmp	r3, r2
 80ea492:	d11e      	bne.n	80ea4d2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80ea494:	4b12      	ldr	r3, [pc, #72]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea49a:	4a11      	ldr	r2, [pc, #68]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea49c:	f043 0320 	orr.w	r3, r3, #32
 80ea4a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80ea4a4:	4b0e      	ldr	r3, [pc, #56]	@ (80ea4e0 <HAL_TIM_MspPostInit+0x19c>)
 80ea4a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80ea4aa:	f003 0320 	and.w	r3, r3, #32
 80ea4ae:	60bb      	str	r3, [r7, #8]
 80ea4b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80ea4b2:	2340      	movs	r3, #64	@ 0x40
 80ea4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80ea4b6:	2302      	movs	r3, #2
 80ea4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80ea4ba:	2300      	movs	r3, #0
 80ea4bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80ea4be:	2300      	movs	r3, #0
 80ea4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80ea4c2:	2301      	movs	r3, #1
 80ea4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80ea4c6:	f107 031c 	add.w	r3, r7, #28
 80ea4ca:	4619      	mov	r1, r3
 80ea4cc:	480c      	ldr	r0, [pc, #48]	@ (80ea500 <HAL_TIM_MspPostInit+0x1bc>)
 80ea4ce:	f004 fd09 	bl	80eeee4 <HAL_GPIO_Init>
}
 80ea4d2:	bf00      	nop
 80ea4d4:	3730      	adds	r7, #48	@ 0x30
 80ea4d6:	46bd      	mov	sp, r7
 80ea4d8:	bd80      	pop	{r7, pc}
 80ea4da:	bf00      	nop
 80ea4dc:	40012c00 	.word	0x40012c00
 80ea4e0:	44020c00 	.word	0x44020c00
 80ea4e4:	42020000 	.word	0x42020000
 80ea4e8:	40000400 	.word	0x40000400
 80ea4ec:	42020800 	.word	0x42020800
 80ea4f0:	40000800 	.word	0x40000800
 80ea4f4:	42020c00 	.word	0x42020c00
 80ea4f8:	40013400 	.word	0x40013400
 80ea4fc:	40014400 	.word	0x40014400
 80ea500:	42021400 	.word	0x42021400

080ea504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80ea504:	480d      	ldr	r0, [pc, #52]	@ (80ea53c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80ea506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80ea508:	f7ff f95c 	bl	80e97c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80ea50c:	480c      	ldr	r0, [pc, #48]	@ (80ea540 <LoopForever+0x6>)
  ldr r1, =_edata
 80ea50e:	490d      	ldr	r1, [pc, #52]	@ (80ea544 <LoopForever+0xa>)
  ldr r2, =_sidata
 80ea510:	4a0d      	ldr	r2, [pc, #52]	@ (80ea548 <LoopForever+0xe>)
  movs r3, #0
 80ea512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80ea514:	e002      	b.n	80ea51c <LoopCopyDataInit>

080ea516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80ea516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80ea518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80ea51a:	3304      	adds	r3, #4

080ea51c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80ea51c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80ea51e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80ea520:	d3f9      	bcc.n	80ea516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80ea522:	4a0a      	ldr	r2, [pc, #40]	@ (80ea54c <LoopForever+0x12>)
  ldr r4, =_ebss
 80ea524:	4c0a      	ldr	r4, [pc, #40]	@ (80ea550 <LoopForever+0x16>)
  movs r3, #0
 80ea526:	2300      	movs	r3, #0
  b LoopFillZerobss
 80ea528:	e001      	b.n	80ea52e <LoopFillZerobss>

080ea52a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80ea52a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80ea52c:	3204      	adds	r2, #4

080ea52e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80ea52e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80ea530:	d3fb      	bcc.n	80ea52a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80ea532:	f00f fcc7 	bl	80f9ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80ea536:	f7fe fcf9 	bl	80e8f2c <main>

080ea53a <LoopForever>:

LoopForever:
    b LoopForever
 80ea53a:	e7fe      	b.n	80ea53a <LoopForever>
  ldr   r0, =_estack
 80ea53c:	2009fe00 	.word	0x2009fe00
  ldr r0, =_sdata
 80ea540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80ea544:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80ea548:	080fb154 	.word	0x080fb154
  ldr r2, =_sbss
 80ea54c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80ea550:	20005aa0 	.word	0x20005aa0

080ea554 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80ea554:	e7fe      	b.n	80ea554 <ADC1_IRQHandler>
	...

080ea558 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80ea558:	b580      	push	{r7, lr}
 80ea55a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80ea55c:	2003      	movs	r0, #3
 80ea55e:	f001 f912 	bl	80eb786 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80ea562:	f005 fc7d 	bl	80efe60 <HAL_RCC_GetSysClockFreq>
 80ea566:	4602      	mov	r2, r0
 80ea568:	4b0c      	ldr	r3, [pc, #48]	@ (80ea59c <HAL_Init+0x44>)
 80ea56a:	6a1b      	ldr	r3, [r3, #32]
 80ea56c:	f003 030f 	and.w	r3, r3, #15
 80ea570:	490b      	ldr	r1, [pc, #44]	@ (80ea5a0 <HAL_Init+0x48>)
 80ea572:	5ccb      	ldrb	r3, [r1, r3]
 80ea574:	fa22 f303 	lsr.w	r3, r2, r3
 80ea578:	4a0a      	ldr	r2, [pc, #40]	@ (80ea5a4 <HAL_Init+0x4c>)
 80ea57a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80ea57c:	2004      	movs	r0, #4
 80ea57e:	f001 f957 	bl	80eb830 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80ea582:	200f      	movs	r0, #15
 80ea584:	f000 f85c 	bl	80ea640 <HAL_InitTick>
 80ea588:	4603      	mov	r3, r0
 80ea58a:	2b00      	cmp	r3, #0
 80ea58c:	d001      	beq.n	80ea592 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80ea58e:	2301      	movs	r3, #1
 80ea590:	e002      	b.n	80ea598 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80ea592:	f7fe ffd7 	bl	80e9544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80ea596:	2300      	movs	r3, #0
}
 80ea598:	4618      	mov	r0, r3
 80ea59a:	bd80      	pop	{r7, pc}
 80ea59c:	44020c00 	.word	0x44020c00
 80ea5a0:	080fae3c 	.word	0x080fae3c
 80ea5a4:	20000000 	.word	0x20000000

080ea5a8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80ea5a8:	b580      	push	{r7, lr}
 80ea5aa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80ea5ac:	4b18      	ldr	r3, [pc, #96]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5ae:	4a19      	ldr	r2, [pc, #100]	@ (80ea614 <HAL_DeInit+0x6c>)
 80ea5b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80ea5b2:	4b17      	ldr	r3, [pc, #92]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5b4:	4a18      	ldr	r2, [pc, #96]	@ (80ea618 <HAL_DeInit+0x70>)
 80ea5b6:	679a      	str	r2, [r3, #120]	@ 0x78
  __HAL_RCC_APB1_RELEASE_RESET();
 80ea5b8:	4b15      	ldr	r3, [pc, #84]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5ba:	2200      	movs	r2, #0
 80ea5bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80ea5be:	4b14      	ldr	r3, [pc, #80]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5c0:	2200      	movs	r2, #0
 80ea5c2:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_RCC_APB2_FORCE_RESET();
 80ea5c4:	4b12      	ldr	r3, [pc, #72]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5c6:	4a15      	ldr	r2, [pc, #84]	@ (80ea61c <HAL_DeInit+0x74>)
 80ea5c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_APB2_RELEASE_RESET();
 80ea5ca:	4b11      	ldr	r3, [pc, #68]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5cc:	2200      	movs	r2, #0
 80ea5ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_APB3_FORCE_RESET();
 80ea5d0:	4b0f      	ldr	r3, [pc, #60]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5d2:	4a13      	ldr	r2, [pc, #76]	@ (80ea620 <HAL_DeInit+0x78>)
 80ea5d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_APB3_RELEASE_RESET();
 80ea5d8:	4b0d      	ldr	r3, [pc, #52]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5da:	2200      	movs	r2, #0
 80ea5dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB1_FORCE_RESET();
 80ea5e0:	4b0b      	ldr	r3, [pc, #44]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5e2:	4a10      	ldr	r2, [pc, #64]	@ (80ea624 <HAL_DeInit+0x7c>)
 80ea5e4:	661a      	str	r2, [r3, #96]	@ 0x60
  __HAL_RCC_AHB1_RELEASE_RESET();
 80ea5e6:	4b0a      	ldr	r3, [pc, #40]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5e8:	2200      	movs	r2, #0
 80ea5ea:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_RCC_AHB2_FORCE_RESET();
 80ea5ec:	4b08      	ldr	r3, [pc, #32]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5ee:	4a0e      	ldr	r2, [pc, #56]	@ (80ea628 <HAL_DeInit+0x80>)
 80ea5f0:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_RCC_AHB2_RELEASE_RESET();
 80ea5f2:	4b07      	ldr	r3, [pc, #28]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5f4:	2200      	movs	r2, #0
 80ea5f6:	665a      	str	r2, [r3, #100]	@ 0x64

#if defined(AHB4PERIPH_BASE)
  __HAL_RCC_AHB4_FORCE_RESET();
 80ea5f8:	4b05      	ldr	r3, [pc, #20]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea5fa:	4a0c      	ldr	r2, [pc, #48]	@ (80ea62c <HAL_DeInit+0x84>)
 80ea5fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __HAL_RCC_AHB4_RELEASE_RESET();
 80ea5fe:	4b04      	ldr	r3, [pc, #16]	@ (80ea610 <HAL_DeInit+0x68>)
 80ea600:	2200      	movs	r2, #0
 80ea602:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif /* AHB4PERIPH_BASE */

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80ea604:	f000 f814 	bl	80ea630 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80ea608:	2300      	movs	r3, #0
}
 80ea60a:	4618      	mov	r0, r3
 80ea60c:	bd80      	pop	{r7, pc}
 80ea60e:	bf00      	nop
 80ea610:	44020c00 	.word	0x44020c00
 80ea614:	dffec1ff 	.word	0xdffec1ff
 80ea618:	4080062b 	.word	0x4080062b
 80ea61c:	017f7800 	.word	0x017f7800
 80ea620:	001008e0 	.word	0x001008e0
 80ea624:	010ad003 	.word	0x010ad003
 80ea628:	001f1dff 	.word	0x001f1dff
 80ea62c:	00111880 	.word	0x00111880

080ea630 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80ea630:	b480      	push	{r7}
 80ea632:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80ea634:	bf00      	nop
 80ea636:	46bd      	mov	sp, r7
 80ea638:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea63c:	4770      	bx	lr
	...

080ea640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80ea640:	b580      	push	{r7, lr}
 80ea642:	b084      	sub	sp, #16
 80ea644:	af00      	add	r7, sp, #0
 80ea646:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80ea648:	2300      	movs	r3, #0
 80ea64a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80ea64c:	4b33      	ldr	r3, [pc, #204]	@ (80ea71c <HAL_InitTick+0xdc>)
 80ea64e:	781b      	ldrb	r3, [r3, #0]
 80ea650:	2b00      	cmp	r3, #0
 80ea652:	d101      	bne.n	80ea658 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80ea654:	2301      	movs	r3, #1
 80ea656:	e05c      	b.n	80ea712 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80ea658:	4b31      	ldr	r3, [pc, #196]	@ (80ea720 <HAL_InitTick+0xe0>)
 80ea65a:	681b      	ldr	r3, [r3, #0]
 80ea65c:	f003 0304 	and.w	r3, r3, #4
 80ea660:	2b04      	cmp	r3, #4
 80ea662:	d10c      	bne.n	80ea67e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80ea664:	4b2f      	ldr	r3, [pc, #188]	@ (80ea724 <HAL_InitTick+0xe4>)
 80ea666:	681a      	ldr	r2, [r3, #0]
 80ea668:	4b2c      	ldr	r3, [pc, #176]	@ (80ea71c <HAL_InitTick+0xdc>)
 80ea66a:	781b      	ldrb	r3, [r3, #0]
 80ea66c:	4619      	mov	r1, r3
 80ea66e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80ea672:	fbb3 f3f1 	udiv	r3, r3, r1
 80ea676:	fbb2 f3f3 	udiv	r3, r2, r3
 80ea67a:	60fb      	str	r3, [r7, #12]
 80ea67c:	e037      	b.n	80ea6ee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80ea67e:	f001 f92f 	bl	80eb8e0 <HAL_SYSTICK_GetCLKSourceConfig>
 80ea682:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80ea684:	68bb      	ldr	r3, [r7, #8]
 80ea686:	2b02      	cmp	r3, #2
 80ea688:	d023      	beq.n	80ea6d2 <HAL_InitTick+0x92>
 80ea68a:	68bb      	ldr	r3, [r7, #8]
 80ea68c:	2b02      	cmp	r3, #2
 80ea68e:	d82d      	bhi.n	80ea6ec <HAL_InitTick+0xac>
 80ea690:	68bb      	ldr	r3, [r7, #8]
 80ea692:	2b00      	cmp	r3, #0
 80ea694:	d003      	beq.n	80ea69e <HAL_InitTick+0x5e>
 80ea696:	68bb      	ldr	r3, [r7, #8]
 80ea698:	2b01      	cmp	r3, #1
 80ea69a:	d00d      	beq.n	80ea6b8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80ea69c:	e026      	b.n	80ea6ec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80ea69e:	4b21      	ldr	r3, [pc, #132]	@ (80ea724 <HAL_InitTick+0xe4>)
 80ea6a0:	681a      	ldr	r2, [r3, #0]
 80ea6a2:	4b1e      	ldr	r3, [pc, #120]	@ (80ea71c <HAL_InitTick+0xdc>)
 80ea6a4:	781b      	ldrb	r3, [r3, #0]
 80ea6a6:	4619      	mov	r1, r3
 80ea6a8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80ea6ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80ea6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80ea6b4:	60fb      	str	r3, [r7, #12]
        break;
 80ea6b6:	e01a      	b.n	80ea6ee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80ea6b8:	4b18      	ldr	r3, [pc, #96]	@ (80ea71c <HAL_InitTick+0xdc>)
 80ea6ba:	781b      	ldrb	r3, [r3, #0]
 80ea6bc:	461a      	mov	r2, r3
 80ea6be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80ea6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80ea6c6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80ea6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80ea6ce:	60fb      	str	r3, [r7, #12]
        break;
 80ea6d0:	e00d      	b.n	80ea6ee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80ea6d2:	4b12      	ldr	r3, [pc, #72]	@ (80ea71c <HAL_InitTick+0xdc>)
 80ea6d4:	781b      	ldrb	r3, [r3, #0]
 80ea6d6:	461a      	mov	r2, r3
 80ea6d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80ea6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80ea6e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80ea6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80ea6e8:	60fb      	str	r3, [r7, #12]
        break;
 80ea6ea:	e000      	b.n	80ea6ee <HAL_InitTick+0xae>
        break;
 80ea6ec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80ea6ee:	68f8      	ldr	r0, [r7, #12]
 80ea6f0:	f001 f87c 	bl	80eb7ec <HAL_SYSTICK_Config>
 80ea6f4:	4603      	mov	r3, r0
 80ea6f6:	2b00      	cmp	r3, #0
 80ea6f8:	d001      	beq.n	80ea6fe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80ea6fa:	2301      	movs	r3, #1
 80ea6fc:	e009      	b.n	80ea712 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80ea6fe:	2200      	movs	r2, #0
 80ea700:	6879      	ldr	r1, [r7, #4]
 80ea702:	f04f 30ff 	mov.w	r0, #4294967295
 80ea706:	f001 f849 	bl	80eb79c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80ea70a:	4a07      	ldr	r2, [pc, #28]	@ (80ea728 <HAL_InitTick+0xe8>)
 80ea70c:	687b      	ldr	r3, [r7, #4]
 80ea70e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80ea710:	2300      	movs	r3, #0
}
 80ea712:	4618      	mov	r0, r3
 80ea714:	3710      	adds	r7, #16
 80ea716:	46bd      	mov	sp, r7
 80ea718:	bd80      	pop	{r7, pc}
 80ea71a:	bf00      	nop
 80ea71c:	20000008 	.word	0x20000008
 80ea720:	e000e010 	.word	0xe000e010
 80ea724:	20000000 	.word	0x20000000
 80ea728:	20000004 	.word	0x20000004

080ea72c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80ea72c:	b480      	push	{r7}
 80ea72e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80ea730:	4b06      	ldr	r3, [pc, #24]	@ (80ea74c <HAL_IncTick+0x20>)
 80ea732:	781b      	ldrb	r3, [r3, #0]
 80ea734:	461a      	mov	r2, r3
 80ea736:	4b06      	ldr	r3, [pc, #24]	@ (80ea750 <HAL_IncTick+0x24>)
 80ea738:	681b      	ldr	r3, [r3, #0]
 80ea73a:	4413      	add	r3, r2
 80ea73c:	4a04      	ldr	r2, [pc, #16]	@ (80ea750 <HAL_IncTick+0x24>)
 80ea73e:	6013      	str	r3, [r2, #0]
}
 80ea740:	bf00      	nop
 80ea742:	46bd      	mov	sp, r7
 80ea744:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea748:	4770      	bx	lr
 80ea74a:	bf00      	nop
 80ea74c:	20000008 	.word	0x20000008
 80ea750:	20002714 	.word	0x20002714

080ea754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80ea754:	b480      	push	{r7}
 80ea756:	af00      	add	r7, sp, #0
  return uwTick;
 80ea758:	4b03      	ldr	r3, [pc, #12]	@ (80ea768 <HAL_GetTick+0x14>)
 80ea75a:	681b      	ldr	r3, [r3, #0]
}
 80ea75c:	4618      	mov	r0, r3
 80ea75e:	46bd      	mov	sp, r7
 80ea760:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea764:	4770      	bx	lr
 80ea766:	bf00      	nop
 80ea768:	20002714 	.word	0x20002714

080ea76c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80ea76c:	b480      	push	{r7}
 80ea76e:	b083      	sub	sp, #12
 80ea770:	af00      	add	r7, sp, #0
 80ea772:	6078      	str	r0, [r7, #4]
 80ea774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80ea776:	687b      	ldr	r3, [r7, #4]
 80ea778:	689b      	ldr	r3, [r3, #8]
 80ea77a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80ea77e:	683b      	ldr	r3, [r7, #0]
 80ea780:	431a      	orrs	r2, r3
 80ea782:	687b      	ldr	r3, [r7, #4]
 80ea784:	609a      	str	r2, [r3, #8]
}
 80ea786:	bf00      	nop
 80ea788:	370c      	adds	r7, #12
 80ea78a:	46bd      	mov	sp, r7
 80ea78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea790:	4770      	bx	lr

080ea792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80ea792:	b480      	push	{r7}
 80ea794:	b083      	sub	sp, #12
 80ea796:	af00      	add	r7, sp, #0
 80ea798:	6078      	str	r0, [r7, #4]
 80ea79a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80ea79c:	687b      	ldr	r3, [r7, #4]
 80ea79e:	689b      	ldr	r3, [r3, #8]
 80ea7a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80ea7a4:	683b      	ldr	r3, [r7, #0]
 80ea7a6:	431a      	orrs	r2, r3
 80ea7a8:	687b      	ldr	r3, [r7, #4]
 80ea7aa:	609a      	str	r2, [r3, #8]
}
 80ea7ac:	bf00      	nop
 80ea7ae:	370c      	adds	r7, #12
 80ea7b0:	46bd      	mov	sp, r7
 80ea7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea7b6:	4770      	bx	lr

080ea7b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80ea7b8:	b480      	push	{r7}
 80ea7ba:	b083      	sub	sp, #12
 80ea7bc:	af00      	add	r7, sp, #0
 80ea7be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80ea7c0:	687b      	ldr	r3, [r7, #4]
 80ea7c2:	689b      	ldr	r3, [r3, #8]
 80ea7c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80ea7c8:	4618      	mov	r0, r3
 80ea7ca:	370c      	adds	r7, #12
 80ea7cc:	46bd      	mov	sp, r7
 80ea7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea7d2:	4770      	bx	lr

080ea7d4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80ea7d4:	b480      	push	{r7}
 80ea7d6:	b083      	sub	sp, #12
 80ea7d8:	af00      	add	r7, sp, #0
 80ea7da:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80ea7dc:	687b      	ldr	r3, [r7, #4]
 80ea7de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80ea7e2:	f043 0201 	orr.w	r2, r3, #1
 80ea7e6:	687b      	ldr	r3, [r7, #4]
 80ea7e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80ea7ec:	bf00      	nop
 80ea7ee:	370c      	adds	r7, #12
 80ea7f0:	46bd      	mov	sp, r7
 80ea7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea7f6:	4770      	bx	lr

080ea7f8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80ea7f8:	b480      	push	{r7}
 80ea7fa:	b083      	sub	sp, #12
 80ea7fc:	af00      	add	r7, sp, #0
 80ea7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80ea800:	4b06      	ldr	r3, [pc, #24]	@ (80ea81c <LL_ADC_EnableChannel0_GPIO+0x24>)
 80ea802:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80ea806:	4a05      	ldr	r2, [pc, #20]	@ (80ea81c <LL_ADC_EnableChannel0_GPIO+0x24>)
 80ea808:	f043 0301 	orr.w	r3, r3, #1
 80ea80c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80ea810:	bf00      	nop
 80ea812:	370c      	adds	r7, #12
 80ea814:	46bd      	mov	sp, r7
 80ea816:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea81a:	4770      	bx	lr
 80ea81c:	42028000 	.word	0x42028000

080ea820 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80ea820:	b480      	push	{r7}
 80ea822:	b087      	sub	sp, #28
 80ea824:	af00      	add	r7, sp, #0
 80ea826:	60f8      	str	r0, [r7, #12]
 80ea828:	60b9      	str	r1, [r7, #8]
 80ea82a:	607a      	str	r2, [r7, #4]
 80ea82c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80ea82e:	68fb      	ldr	r3, [r7, #12]
 80ea830:	3360      	adds	r3, #96	@ 0x60
 80ea832:	461a      	mov	r2, r3
 80ea834:	68bb      	ldr	r3, [r7, #8]
 80ea836:	009b      	lsls	r3, r3, #2
 80ea838:	4413      	add	r3, r2
 80ea83a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80ea83c:	697b      	ldr	r3, [r7, #20]
 80ea83e:	681a      	ldr	r2, [r3, #0]
 80ea840:	4b08      	ldr	r3, [pc, #32]	@ (80ea864 <LL_ADC_SetOffset+0x44>)
 80ea842:	4013      	ands	r3, r2
 80ea844:	687a      	ldr	r2, [r7, #4]
 80ea846:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80ea84a:	683a      	ldr	r2, [r7, #0]
 80ea84c:	430a      	orrs	r2, r1
 80ea84e:	4313      	orrs	r3, r2
 80ea850:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80ea854:	697b      	ldr	r3, [r7, #20]
 80ea856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80ea858:	bf00      	nop
 80ea85a:	371c      	adds	r7, #28
 80ea85c:	46bd      	mov	sp, r7
 80ea85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea862:	4770      	bx	lr
 80ea864:	03fff000 	.word	0x03fff000

080ea868 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80ea868:	b480      	push	{r7}
 80ea86a:	b085      	sub	sp, #20
 80ea86c:	af00      	add	r7, sp, #0
 80ea86e:	6078      	str	r0, [r7, #4]
 80ea870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80ea872:	687b      	ldr	r3, [r7, #4]
 80ea874:	3360      	adds	r3, #96	@ 0x60
 80ea876:	461a      	mov	r2, r3
 80ea878:	683b      	ldr	r3, [r7, #0]
 80ea87a:	009b      	lsls	r3, r3, #2
 80ea87c:	4413      	add	r3, r2
 80ea87e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80ea880:	68fb      	ldr	r3, [r7, #12]
 80ea882:	681b      	ldr	r3, [r3, #0]
 80ea884:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80ea888:	4618      	mov	r0, r3
 80ea88a:	3714      	adds	r7, #20
 80ea88c:	46bd      	mov	sp, r7
 80ea88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea892:	4770      	bx	lr

080ea894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80ea894:	b480      	push	{r7}
 80ea896:	b087      	sub	sp, #28
 80ea898:	af00      	add	r7, sp, #0
 80ea89a:	60f8      	str	r0, [r7, #12]
 80ea89c:	60b9      	str	r1, [r7, #8]
 80ea89e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80ea8a0:	68fb      	ldr	r3, [r7, #12]
 80ea8a2:	3360      	adds	r3, #96	@ 0x60
 80ea8a4:	461a      	mov	r2, r3
 80ea8a6:	68bb      	ldr	r3, [r7, #8]
 80ea8a8:	009b      	lsls	r3, r3, #2
 80ea8aa:	4413      	add	r3, r2
 80ea8ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80ea8ae:	697b      	ldr	r3, [r7, #20]
 80ea8b0:	681b      	ldr	r3, [r3, #0]
 80ea8b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80ea8b6:	687b      	ldr	r3, [r7, #4]
 80ea8b8:	431a      	orrs	r2, r3
 80ea8ba:	697b      	ldr	r3, [r7, #20]
 80ea8bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80ea8be:	bf00      	nop
 80ea8c0:	371c      	adds	r7, #28
 80ea8c2:	46bd      	mov	sp, r7
 80ea8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea8c8:	4770      	bx	lr

080ea8ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80ea8ca:	b480      	push	{r7}
 80ea8cc:	b087      	sub	sp, #28
 80ea8ce:	af00      	add	r7, sp, #0
 80ea8d0:	60f8      	str	r0, [r7, #12]
 80ea8d2:	60b9      	str	r1, [r7, #8]
 80ea8d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80ea8d6:	68fb      	ldr	r3, [r7, #12]
 80ea8d8:	3360      	adds	r3, #96	@ 0x60
 80ea8da:	461a      	mov	r2, r3
 80ea8dc:	68bb      	ldr	r3, [r7, #8]
 80ea8de:	009b      	lsls	r3, r3, #2
 80ea8e0:	4413      	add	r3, r2
 80ea8e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80ea8e4:	697b      	ldr	r3, [r7, #20]
 80ea8e6:	681b      	ldr	r3, [r3, #0]
 80ea8e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80ea8ec:	687b      	ldr	r3, [r7, #4]
 80ea8ee:	431a      	orrs	r2, r3
 80ea8f0:	697b      	ldr	r3, [r7, #20]
 80ea8f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80ea8f4:	bf00      	nop
 80ea8f6:	371c      	adds	r7, #28
 80ea8f8:	46bd      	mov	sp, r7
 80ea8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea8fe:	4770      	bx	lr

080ea900 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80ea900:	b480      	push	{r7}
 80ea902:	b087      	sub	sp, #28
 80ea904:	af00      	add	r7, sp, #0
 80ea906:	60f8      	str	r0, [r7, #12]
 80ea908:	60b9      	str	r1, [r7, #8]
 80ea90a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80ea90c:	68fb      	ldr	r3, [r7, #12]
 80ea90e:	3360      	adds	r3, #96	@ 0x60
 80ea910:	461a      	mov	r2, r3
 80ea912:	68bb      	ldr	r3, [r7, #8]
 80ea914:	009b      	lsls	r3, r3, #2
 80ea916:	4413      	add	r3, r2
 80ea918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80ea91a:	697b      	ldr	r3, [r7, #20]
 80ea91c:	681b      	ldr	r3, [r3, #0]
 80ea91e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80ea922:	687b      	ldr	r3, [r7, #4]
 80ea924:	431a      	orrs	r2, r3
 80ea926:	697b      	ldr	r3, [r7, #20]
 80ea928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80ea92a:	bf00      	nop
 80ea92c:	371c      	adds	r7, #28
 80ea92e:	46bd      	mov	sp, r7
 80ea930:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea934:	4770      	bx	lr

080ea936 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80ea936:	b480      	push	{r7}
 80ea938:	b083      	sub	sp, #12
 80ea93a:	af00      	add	r7, sp, #0
 80ea93c:	6078      	str	r0, [r7, #4]
 80ea93e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80ea940:	687b      	ldr	r3, [r7, #4]
 80ea942:	695b      	ldr	r3, [r3, #20]
 80ea944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80ea948:	683b      	ldr	r3, [r7, #0]
 80ea94a:	431a      	orrs	r2, r3
 80ea94c:	687b      	ldr	r3, [r7, #4]
 80ea94e:	615a      	str	r2, [r3, #20]
}
 80ea950:	bf00      	nop
 80ea952:	370c      	adds	r7, #12
 80ea954:	46bd      	mov	sp, r7
 80ea956:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea95a:	4770      	bx	lr

080ea95c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80ea95c:	b480      	push	{r7}
 80ea95e:	b087      	sub	sp, #28
 80ea960:	af00      	add	r7, sp, #0
 80ea962:	60f8      	str	r0, [r7, #12]
 80ea964:	60b9      	str	r1, [r7, #8]
 80ea966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80ea968:	68fb      	ldr	r3, [r7, #12]
 80ea96a:	3330      	adds	r3, #48	@ 0x30
 80ea96c:	461a      	mov	r2, r3
 80ea96e:	68bb      	ldr	r3, [r7, #8]
 80ea970:	0a1b      	lsrs	r3, r3, #8
 80ea972:	009b      	lsls	r3, r3, #2
 80ea974:	f003 030c 	and.w	r3, r3, #12
 80ea978:	4413      	add	r3, r2
 80ea97a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80ea97c:	697b      	ldr	r3, [r7, #20]
 80ea97e:	681a      	ldr	r2, [r3, #0]
 80ea980:	68bb      	ldr	r3, [r7, #8]
 80ea982:	f003 031f 	and.w	r3, r3, #31
 80ea986:	211f      	movs	r1, #31
 80ea988:	fa01 f303 	lsl.w	r3, r1, r3
 80ea98c:	43db      	mvns	r3, r3
 80ea98e:	401a      	ands	r2, r3
 80ea990:	687b      	ldr	r3, [r7, #4]
 80ea992:	0e9b      	lsrs	r3, r3, #26
 80ea994:	f003 011f 	and.w	r1, r3, #31
 80ea998:	68bb      	ldr	r3, [r7, #8]
 80ea99a:	f003 031f 	and.w	r3, r3, #31
 80ea99e:	fa01 f303 	lsl.w	r3, r1, r3
 80ea9a2:	431a      	orrs	r2, r3
 80ea9a4:	697b      	ldr	r3, [r7, #20]
 80ea9a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80ea9a8:	bf00      	nop
 80ea9aa:	371c      	adds	r7, #28
 80ea9ac:	46bd      	mov	sp, r7
 80ea9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ea9b2:	4770      	bx	lr

080ea9b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80ea9b4:	b480      	push	{r7}
 80ea9b6:	b087      	sub	sp, #28
 80ea9b8:	af00      	add	r7, sp, #0
 80ea9ba:	60f8      	str	r0, [r7, #12]
 80ea9bc:	60b9      	str	r1, [r7, #8]
 80ea9be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80ea9c0:	68fb      	ldr	r3, [r7, #12]
 80ea9c2:	3314      	adds	r3, #20
 80ea9c4:	461a      	mov	r2, r3
 80ea9c6:	68bb      	ldr	r3, [r7, #8]
 80ea9c8:	0e5b      	lsrs	r3, r3, #25
 80ea9ca:	009b      	lsls	r3, r3, #2
 80ea9cc:	f003 0304 	and.w	r3, r3, #4
 80ea9d0:	4413      	add	r3, r2
 80ea9d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80ea9d4:	697b      	ldr	r3, [r7, #20]
 80ea9d6:	681a      	ldr	r2, [r3, #0]
 80ea9d8:	68bb      	ldr	r3, [r7, #8]
 80ea9da:	0d1b      	lsrs	r3, r3, #20
 80ea9dc:	f003 031f 	and.w	r3, r3, #31
 80ea9e0:	2107      	movs	r1, #7
 80ea9e2:	fa01 f303 	lsl.w	r3, r1, r3
 80ea9e6:	43db      	mvns	r3, r3
 80ea9e8:	401a      	ands	r2, r3
 80ea9ea:	68bb      	ldr	r3, [r7, #8]
 80ea9ec:	0d1b      	lsrs	r3, r3, #20
 80ea9ee:	f003 031f 	and.w	r3, r3, #31
 80ea9f2:	6879      	ldr	r1, [r7, #4]
 80ea9f4:	fa01 f303 	lsl.w	r3, r1, r3
 80ea9f8:	431a      	orrs	r2, r3
 80ea9fa:	697b      	ldr	r3, [r7, #20]
 80ea9fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80ea9fe:	bf00      	nop
 80eaa00:	371c      	adds	r7, #28
 80eaa02:	46bd      	mov	sp, r7
 80eaa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaa08:	4770      	bx	lr
	...

080eaa0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80eaa0c:	b480      	push	{r7}
 80eaa0e:	b085      	sub	sp, #20
 80eaa10:	af00      	add	r7, sp, #0
 80eaa12:	60f8      	str	r0, [r7, #12]
 80eaa14:	60b9      	str	r1, [r7, #8]
 80eaa16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80eaa18:	68fb      	ldr	r3, [r7, #12]
 80eaa1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80eaa1e:	68bb      	ldr	r3, [r7, #8]
 80eaa20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eaa24:	43db      	mvns	r3, r3
 80eaa26:	401a      	ands	r2, r3
 80eaa28:	687b      	ldr	r3, [r7, #4]
 80eaa2a:	f003 0318 	and.w	r3, r3, #24
 80eaa2e:	4908      	ldr	r1, [pc, #32]	@ (80eaa50 <LL_ADC_SetChannelSingleDiff+0x44>)
 80eaa30:	40d9      	lsrs	r1, r3
 80eaa32:	68bb      	ldr	r3, [r7, #8]
 80eaa34:	400b      	ands	r3, r1
 80eaa36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eaa3a:	431a      	orrs	r2, r3
 80eaa3c:	68fb      	ldr	r3, [r7, #12]
 80eaa3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80eaa42:	bf00      	nop
 80eaa44:	3714      	adds	r7, #20
 80eaa46:	46bd      	mov	sp, r7
 80eaa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaa4c:	4770      	bx	lr
 80eaa4e:	bf00      	nop
 80eaa50:	000fffff 	.word	0x000fffff

080eaa54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80eaa54:	b480      	push	{r7}
 80eaa56:	b083      	sub	sp, #12
 80eaa58:	af00      	add	r7, sp, #0
 80eaa5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80eaa5c:	687b      	ldr	r3, [r7, #4]
 80eaa5e:	689b      	ldr	r3, [r3, #8]
 80eaa60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80eaa64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80eaa68:	687a      	ldr	r2, [r7, #4]
 80eaa6a:	6093      	str	r3, [r2, #8]
}
 80eaa6c:	bf00      	nop
 80eaa6e:	370c      	adds	r7, #12
 80eaa70:	46bd      	mov	sp, r7
 80eaa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaa76:	4770      	bx	lr

080eaa78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80eaa78:	b480      	push	{r7}
 80eaa7a:	b083      	sub	sp, #12
 80eaa7c:	af00      	add	r7, sp, #0
 80eaa7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80eaa80:	687b      	ldr	r3, [r7, #4]
 80eaa82:	689b      	ldr	r3, [r3, #8]
 80eaa84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80eaa88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80eaa8c:	d101      	bne.n	80eaa92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80eaa8e:	2301      	movs	r3, #1
 80eaa90:	e000      	b.n	80eaa94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80eaa92:	2300      	movs	r3, #0
}
 80eaa94:	4618      	mov	r0, r3
 80eaa96:	370c      	adds	r7, #12
 80eaa98:	46bd      	mov	sp, r7
 80eaa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaa9e:	4770      	bx	lr

080eaaa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80eaaa0:	b480      	push	{r7}
 80eaaa2:	b083      	sub	sp, #12
 80eaaa4:	af00      	add	r7, sp, #0
 80eaaa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80eaaa8:	687b      	ldr	r3, [r7, #4]
 80eaaaa:	689b      	ldr	r3, [r3, #8]
 80eaaac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80eaab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80eaab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80eaab8:	687b      	ldr	r3, [r7, #4]
 80eaaba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80eaabc:	bf00      	nop
 80eaabe:	370c      	adds	r7, #12
 80eaac0:	46bd      	mov	sp, r7
 80eaac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaac6:	4770      	bx	lr

080eaac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80eaac8:	b480      	push	{r7}
 80eaaca:	b083      	sub	sp, #12
 80eaacc:	af00      	add	r7, sp, #0
 80eaace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80eaad0:	687b      	ldr	r3, [r7, #4]
 80eaad2:	689b      	ldr	r3, [r3, #8]
 80eaad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80eaad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80eaadc:	d101      	bne.n	80eaae2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80eaade:	2301      	movs	r3, #1
 80eaae0:	e000      	b.n	80eaae4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80eaae2:	2300      	movs	r3, #0
}
 80eaae4:	4618      	mov	r0, r3
 80eaae6:	370c      	adds	r7, #12
 80eaae8:	46bd      	mov	sp, r7
 80eaaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eaaee:	4770      	bx	lr

080eaaf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80eaaf0:	b480      	push	{r7}
 80eaaf2:	b083      	sub	sp, #12
 80eaaf4:	af00      	add	r7, sp, #0
 80eaaf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80eaaf8:	687b      	ldr	r3, [r7, #4]
 80eaafa:	689b      	ldr	r3, [r3, #8]
 80eaafc:	f003 0301 	and.w	r3, r3, #1
 80eab00:	2b01      	cmp	r3, #1
 80eab02:	d101      	bne.n	80eab08 <LL_ADC_IsEnabled+0x18>
 80eab04:	2301      	movs	r3, #1
 80eab06:	e000      	b.n	80eab0a <LL_ADC_IsEnabled+0x1a>
 80eab08:	2300      	movs	r3, #0
}
 80eab0a:	4618      	mov	r0, r3
 80eab0c:	370c      	adds	r7, #12
 80eab0e:	46bd      	mov	sp, r7
 80eab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eab14:	4770      	bx	lr

080eab16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80eab16:	b480      	push	{r7}
 80eab18:	b083      	sub	sp, #12
 80eab1a:	af00      	add	r7, sp, #0
 80eab1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80eab1e:	687b      	ldr	r3, [r7, #4]
 80eab20:	689b      	ldr	r3, [r3, #8]
 80eab22:	f003 0304 	and.w	r3, r3, #4
 80eab26:	2b04      	cmp	r3, #4
 80eab28:	d101      	bne.n	80eab2e <LL_ADC_REG_IsConversionOngoing+0x18>
 80eab2a:	2301      	movs	r3, #1
 80eab2c:	e000      	b.n	80eab30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80eab2e:	2300      	movs	r3, #0
}
 80eab30:	4618      	mov	r0, r3
 80eab32:	370c      	adds	r7, #12
 80eab34:	46bd      	mov	sp, r7
 80eab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eab3a:	4770      	bx	lr

080eab3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80eab3c:	b480      	push	{r7}
 80eab3e:	b083      	sub	sp, #12
 80eab40:	af00      	add	r7, sp, #0
 80eab42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80eab44:	687b      	ldr	r3, [r7, #4]
 80eab46:	689b      	ldr	r3, [r3, #8]
 80eab48:	f003 0308 	and.w	r3, r3, #8
 80eab4c:	2b08      	cmp	r3, #8
 80eab4e:	d101      	bne.n	80eab54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80eab50:	2301      	movs	r3, #1
 80eab52:	e000      	b.n	80eab56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80eab54:	2300      	movs	r3, #0
}
 80eab56:	4618      	mov	r0, r3
 80eab58:	370c      	adds	r7, #12
 80eab5a:	46bd      	mov	sp, r7
 80eab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eab60:	4770      	bx	lr
	...

080eab64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80eab64:	b590      	push	{r4, r7, lr}
 80eab66:	b089      	sub	sp, #36	@ 0x24
 80eab68:	af00      	add	r7, sp, #0
 80eab6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80eab6c:	2300      	movs	r3, #0
 80eab6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80eab70:	2300      	movs	r3, #0
 80eab72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80eab74:	687b      	ldr	r3, [r7, #4]
 80eab76:	2b00      	cmp	r3, #0
 80eab78:	d101      	bne.n	80eab7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80eab7a:	2301      	movs	r3, #1
 80eab7c:	e136      	b.n	80eadec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80eab7e:	687b      	ldr	r3, [r7, #4]
 80eab80:	691b      	ldr	r3, [r3, #16]
 80eab82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80eab84:	687b      	ldr	r3, [r7, #4]
 80eab86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eab88:	2b00      	cmp	r3, #0
 80eab8a:	d109      	bne.n	80eaba0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80eab8c:	6878      	ldr	r0, [r7, #4]
 80eab8e:	f7fd fbef 	bl	80e8370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80eab92:	687b      	ldr	r3, [r7, #4]
 80eab94:	2200      	movs	r2, #0
 80eab96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80eab98:	687b      	ldr	r3, [r7, #4]
 80eab9a:	2200      	movs	r2, #0
 80eab9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80eaba0:	687b      	ldr	r3, [r7, #4]
 80eaba2:	681b      	ldr	r3, [r3, #0]
 80eaba4:	4618      	mov	r0, r3
 80eaba6:	f7ff ff67 	bl	80eaa78 <LL_ADC_IsDeepPowerDownEnabled>
 80eabaa:	4603      	mov	r3, r0
 80eabac:	2b00      	cmp	r3, #0
 80eabae:	d004      	beq.n	80eabba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80eabb0:	687b      	ldr	r3, [r7, #4]
 80eabb2:	681b      	ldr	r3, [r3, #0]
 80eabb4:	4618      	mov	r0, r3
 80eabb6:	f7ff ff4d 	bl	80eaa54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80eabba:	687b      	ldr	r3, [r7, #4]
 80eabbc:	681b      	ldr	r3, [r3, #0]
 80eabbe:	4618      	mov	r0, r3
 80eabc0:	f7ff ff82 	bl	80eaac8 <LL_ADC_IsInternalRegulatorEnabled>
 80eabc4:	4603      	mov	r3, r0
 80eabc6:	2b00      	cmp	r3, #0
 80eabc8:	d115      	bne.n	80eabf6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80eabca:	687b      	ldr	r3, [r7, #4]
 80eabcc:	681b      	ldr	r3, [r3, #0]
 80eabce:	4618      	mov	r0, r3
 80eabd0:	f7ff ff66 	bl	80eaaa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80eabd4:	4b87      	ldr	r3, [pc, #540]	@ (80eadf4 <HAL_ADC_Init+0x290>)
 80eabd6:	681b      	ldr	r3, [r3, #0]
 80eabd8:	099b      	lsrs	r3, r3, #6
 80eabda:	4a87      	ldr	r2, [pc, #540]	@ (80eadf8 <HAL_ADC_Init+0x294>)
 80eabdc:	fba2 2303 	umull	r2, r3, r2, r3
 80eabe0:	099b      	lsrs	r3, r3, #6
 80eabe2:	3301      	adds	r3, #1
 80eabe4:	005b      	lsls	r3, r3, #1
 80eabe6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80eabe8:	e002      	b.n	80eabf0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80eabea:	68fb      	ldr	r3, [r7, #12]
 80eabec:	3b01      	subs	r3, #1
 80eabee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80eabf0:	68fb      	ldr	r3, [r7, #12]
 80eabf2:	2b00      	cmp	r3, #0
 80eabf4:	d1f9      	bne.n	80eabea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80eabf6:	687b      	ldr	r3, [r7, #4]
 80eabf8:	681b      	ldr	r3, [r3, #0]
 80eabfa:	4618      	mov	r0, r3
 80eabfc:	f7ff ff64 	bl	80eaac8 <LL_ADC_IsInternalRegulatorEnabled>
 80eac00:	4603      	mov	r3, r0
 80eac02:	2b00      	cmp	r3, #0
 80eac04:	d10d      	bne.n	80eac22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80eac06:	687b      	ldr	r3, [r7, #4]
 80eac08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eac0a:	f043 0210 	orr.w	r2, r3, #16
 80eac0e:	687b      	ldr	r3, [r7, #4]
 80eac10:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80eac12:	687b      	ldr	r3, [r7, #4]
 80eac14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80eac16:	f043 0201 	orr.w	r2, r3, #1
 80eac1a:	687b      	ldr	r3, [r7, #4]
 80eac1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80eac1e:	2301      	movs	r3, #1
 80eac20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80eac22:	687b      	ldr	r3, [r7, #4]
 80eac24:	681b      	ldr	r3, [r3, #0]
 80eac26:	4618      	mov	r0, r3
 80eac28:	f7ff ff75 	bl	80eab16 <LL_ADC_REG_IsConversionOngoing>
 80eac2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80eac2e:	687b      	ldr	r3, [r7, #4]
 80eac30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eac32:	f003 0310 	and.w	r3, r3, #16
 80eac36:	2b00      	cmp	r3, #0
 80eac38:	f040 80cf 	bne.w	80eadda <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80eac3c:	697b      	ldr	r3, [r7, #20]
 80eac3e:	2b00      	cmp	r3, #0
 80eac40:	f040 80cb 	bne.w	80eadda <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80eac44:	687b      	ldr	r3, [r7, #4]
 80eac46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eac48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80eac4c:	f043 0202 	orr.w	r2, r3, #2
 80eac50:	687b      	ldr	r3, [r7, #4]
 80eac52:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80eac54:	687b      	ldr	r3, [r7, #4]
 80eac56:	681b      	ldr	r3, [r3, #0]
 80eac58:	4618      	mov	r0, r3
 80eac5a:	f7ff ff49 	bl	80eaaf0 <LL_ADC_IsEnabled>
 80eac5e:	4603      	mov	r3, r0
 80eac60:	2b00      	cmp	r3, #0
 80eac62:	d110      	bne.n	80eac86 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80eac64:	4865      	ldr	r0, [pc, #404]	@ (80eadfc <HAL_ADC_Init+0x298>)
 80eac66:	f7ff ff43 	bl	80eaaf0 <LL_ADC_IsEnabled>
 80eac6a:	4604      	mov	r4, r0
 80eac6c:	4864      	ldr	r0, [pc, #400]	@ (80eae00 <HAL_ADC_Init+0x29c>)
 80eac6e:	f7ff ff3f 	bl	80eaaf0 <LL_ADC_IsEnabled>
 80eac72:	4603      	mov	r3, r0
 80eac74:	4323      	orrs	r3, r4
 80eac76:	2b00      	cmp	r3, #0
 80eac78:	d105      	bne.n	80eac86 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80eac7a:	687b      	ldr	r3, [r7, #4]
 80eac7c:	685b      	ldr	r3, [r3, #4]
 80eac7e:	4619      	mov	r1, r3
 80eac80:	4860      	ldr	r0, [pc, #384]	@ (80eae04 <HAL_ADC_Init+0x2a0>)
 80eac82:	f7ff fd73 	bl	80ea76c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80eac86:	687b      	ldr	r3, [r7, #4]
 80eac88:	7e5b      	ldrb	r3, [r3, #25]
 80eac8a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80eac8c:	687b      	ldr	r3, [r7, #4]
 80eac8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80eac90:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80eac92:	687b      	ldr	r3, [r7, #4]
 80eac94:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80eac96:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80eac98:	687b      	ldr	r3, [r7, #4]
 80eac9a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80eac9c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80eac9e:	687b      	ldr	r3, [r7, #4]
 80eaca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80eaca4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80eaca6:	4313      	orrs	r3, r2
 80eaca8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80eacaa:	687b      	ldr	r3, [r7, #4]
 80eacac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80eacb0:	2b01      	cmp	r3, #1
 80eacb2:	d106      	bne.n	80eacc2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80eacb4:	687b      	ldr	r3, [r7, #4]
 80eacb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80eacb8:	3b01      	subs	r3, #1
 80eacba:	045b      	lsls	r3, r3, #17
 80eacbc:	69ba      	ldr	r2, [r7, #24]
 80eacbe:	4313      	orrs	r3, r2
 80eacc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80eacc2:	687b      	ldr	r3, [r7, #4]
 80eacc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eacc6:	2b00      	cmp	r3, #0
 80eacc8:	d009      	beq.n	80eacde <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80eacca:	687b      	ldr	r3, [r7, #4]
 80eaccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eacce:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80eacd2:	687b      	ldr	r3, [r7, #4]
 80eacd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80eacd6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80eacd8:	69ba      	ldr	r2, [r7, #24]
 80eacda:	4313      	orrs	r3, r2
 80eacdc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80eacde:	687b      	ldr	r3, [r7, #4]
 80eace0:	681b      	ldr	r3, [r3, #0]
 80eace2:	68da      	ldr	r2, [r3, #12]
 80eace4:	4b48      	ldr	r3, [pc, #288]	@ (80eae08 <HAL_ADC_Init+0x2a4>)
 80eace6:	4013      	ands	r3, r2
 80eace8:	687a      	ldr	r2, [r7, #4]
 80eacea:	6812      	ldr	r2, [r2, #0]
 80eacec:	69b9      	ldr	r1, [r7, #24]
 80eacee:	430b      	orrs	r3, r1
 80eacf0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80eacf2:	687b      	ldr	r3, [r7, #4]
 80eacf4:	681b      	ldr	r3, [r3, #0]
 80eacf6:	691b      	ldr	r3, [r3, #16]
 80eacf8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80eacfc:	687b      	ldr	r3, [r7, #4]
 80eacfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80ead00:	687b      	ldr	r3, [r7, #4]
 80ead02:	681b      	ldr	r3, [r3, #0]
 80ead04:	430a      	orrs	r2, r1
 80ead06:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80ead08:	687b      	ldr	r3, [r7, #4]
 80ead0a:	681b      	ldr	r3, [r3, #0]
 80ead0c:	4618      	mov	r0, r3
 80ead0e:	f7ff ff15 	bl	80eab3c <LL_ADC_INJ_IsConversionOngoing>
 80ead12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80ead14:	697b      	ldr	r3, [r7, #20]
 80ead16:	2b00      	cmp	r3, #0
 80ead18:	d13d      	bne.n	80ead96 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80ead1a:	693b      	ldr	r3, [r7, #16]
 80ead1c:	2b00      	cmp	r3, #0
 80ead1e:	d13a      	bne.n	80ead96 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80ead20:	687b      	ldr	r3, [r7, #4]
 80ead22:	7e1b      	ldrb	r3, [r3, #24]
 80ead24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80ead26:	687b      	ldr	r3, [r7, #4]
 80ead28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80ead2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 80ead2e:	4313      	orrs	r3, r2
 80ead30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80ead32:	687b      	ldr	r3, [r7, #4]
 80ead34:	681b      	ldr	r3, [r3, #0]
 80ead36:	68db      	ldr	r3, [r3, #12]
 80ead38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80ead3c:	f023 0302 	bic.w	r3, r3, #2
 80ead40:	687a      	ldr	r2, [r7, #4]
 80ead42:	6812      	ldr	r2, [r2, #0]
 80ead44:	69b9      	ldr	r1, [r7, #24]
 80ead46:	430b      	orrs	r3, r1
 80ead48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80ead4a:	687b      	ldr	r3, [r7, #4]
 80ead4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80ead50:	2b01      	cmp	r3, #1
 80ead52:	d118      	bne.n	80ead86 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80ead54:	687b      	ldr	r3, [r7, #4]
 80ead56:	681b      	ldr	r3, [r3, #0]
 80ead58:	691b      	ldr	r3, [r3, #16]
 80ead5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80ead5e:	f023 0304 	bic.w	r3, r3, #4
 80ead62:	687a      	ldr	r2, [r7, #4]
 80ead64:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80ead66:	687a      	ldr	r2, [r7, #4]
 80ead68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80ead6a:	4311      	orrs	r1, r2
 80ead6c:	687a      	ldr	r2, [r7, #4]
 80ead6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80ead70:	4311      	orrs	r1, r2
 80ead72:	687a      	ldr	r2, [r7, #4]
 80ead74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80ead76:	430a      	orrs	r2, r1
 80ead78:	431a      	orrs	r2, r3
 80ead7a:	687b      	ldr	r3, [r7, #4]
 80ead7c:	681b      	ldr	r3, [r3, #0]
 80ead7e:	f042 0201 	orr.w	r2, r2, #1
 80ead82:	611a      	str	r2, [r3, #16]
 80ead84:	e007      	b.n	80ead96 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80ead86:	687b      	ldr	r3, [r7, #4]
 80ead88:	681b      	ldr	r3, [r3, #0]
 80ead8a:	691a      	ldr	r2, [r3, #16]
 80ead8c:	687b      	ldr	r3, [r7, #4]
 80ead8e:	681b      	ldr	r3, [r3, #0]
 80ead90:	f022 0201 	bic.w	r2, r2, #1
 80ead94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80ead96:	687b      	ldr	r3, [r7, #4]
 80ead98:	691b      	ldr	r3, [r3, #16]
 80ead9a:	2b01      	cmp	r3, #1
 80ead9c:	d10c      	bne.n	80eadb8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80ead9e:	687b      	ldr	r3, [r7, #4]
 80eada0:	681b      	ldr	r3, [r3, #0]
 80eada2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80eada4:	f023 010f 	bic.w	r1, r3, #15
 80eada8:	687b      	ldr	r3, [r7, #4]
 80eadaa:	69db      	ldr	r3, [r3, #28]
 80eadac:	1e5a      	subs	r2, r3, #1
 80eadae:	687b      	ldr	r3, [r7, #4]
 80eadb0:	681b      	ldr	r3, [r3, #0]
 80eadb2:	430a      	orrs	r2, r1
 80eadb4:	631a      	str	r2, [r3, #48]	@ 0x30
 80eadb6:	e007      	b.n	80eadc8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80eadb8:	687b      	ldr	r3, [r7, #4]
 80eadba:	681b      	ldr	r3, [r3, #0]
 80eadbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80eadbe:	687b      	ldr	r3, [r7, #4]
 80eadc0:	681b      	ldr	r3, [r3, #0]
 80eadc2:	f022 020f 	bic.w	r2, r2, #15
 80eadc6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80eadc8:	687b      	ldr	r3, [r7, #4]
 80eadca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eadcc:	f023 0303 	bic.w	r3, r3, #3
 80eadd0:	f043 0201 	orr.w	r2, r3, #1
 80eadd4:	687b      	ldr	r3, [r7, #4]
 80eadd6:	659a      	str	r2, [r3, #88]	@ 0x58
 80eadd8:	e007      	b.n	80eadea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80eadda:	687b      	ldr	r3, [r7, #4]
 80eaddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eadde:	f043 0210 	orr.w	r2, r3, #16
 80eade2:	687b      	ldr	r3, [r7, #4]
 80eade4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80eade6:	2301      	movs	r3, #1
 80eade8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80eadea:	7ffb      	ldrb	r3, [r7, #31]
}
 80eadec:	4618      	mov	r0, r3
 80eadee:	3724      	adds	r7, #36	@ 0x24
 80eadf0:	46bd      	mov	sp, r7
 80eadf2:	bd90      	pop	{r4, r7, pc}
 80eadf4:	20000000 	.word	0x20000000
 80eadf8:	053e2d63 	.word	0x053e2d63
 80eadfc:	42028000 	.word	0x42028000
 80eae00:	42028100 	.word	0x42028100
 80eae04:	42028300 	.word	0x42028300
 80eae08:	fff04007 	.word	0xfff04007

080eae0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80eae0c:	b580      	push	{r7, lr}
 80eae0e:	b0b6      	sub	sp, #216	@ 0xd8
 80eae10:	af00      	add	r7, sp, #0
 80eae12:	6078      	str	r0, [r7, #4]
 80eae14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80eae16:	2300      	movs	r3, #0
 80eae18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80eae1c:	2300      	movs	r3, #0
 80eae1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80eae20:	687b      	ldr	r3, [r7, #4]
 80eae22:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80eae26:	2b01      	cmp	r3, #1
 80eae28:	d101      	bne.n	80eae2e <HAL_ADC_ConfigChannel+0x22>
 80eae2a:	2302      	movs	r3, #2
 80eae2c:	e3e6      	b.n	80eb5fc <HAL_ADC_ConfigChannel+0x7f0>
 80eae2e:	687b      	ldr	r3, [r7, #4]
 80eae30:	2201      	movs	r2, #1
 80eae32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80eae36:	687b      	ldr	r3, [r7, #4]
 80eae38:	681b      	ldr	r3, [r3, #0]
 80eae3a:	4618      	mov	r0, r3
 80eae3c:	f7ff fe6b 	bl	80eab16 <LL_ADC_REG_IsConversionOngoing>
 80eae40:	4603      	mov	r3, r0
 80eae42:	2b00      	cmp	r3, #0
 80eae44:	f040 83cb 	bne.w	80eb5de <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80eae48:	683b      	ldr	r3, [r7, #0]
 80eae4a:	681b      	ldr	r3, [r3, #0]
 80eae4c:	2b01      	cmp	r3, #1
 80eae4e:	d009      	beq.n	80eae64 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80eae50:	683b      	ldr	r3, [r7, #0]
 80eae52:	681b      	ldr	r3, [r3, #0]
 80eae54:	4ab0      	ldr	r2, [pc, #704]	@ (80eb118 <HAL_ADC_ConfigChannel+0x30c>)
 80eae56:	4293      	cmp	r3, r2
 80eae58:	d109      	bne.n	80eae6e <HAL_ADC_ConfigChannel+0x62>
 80eae5a:	683b      	ldr	r3, [r7, #0]
 80eae5c:	68db      	ldr	r3, [r3, #12]
 80eae5e:	4aaf      	ldr	r2, [pc, #700]	@ (80eb11c <HAL_ADC_ConfigChannel+0x310>)
 80eae60:	4293      	cmp	r3, r2
 80eae62:	d104      	bne.n	80eae6e <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80eae64:	687b      	ldr	r3, [r7, #4]
 80eae66:	681b      	ldr	r3, [r3, #0]
 80eae68:	4618      	mov	r0, r3
 80eae6a:	f7ff fcc5 	bl	80ea7f8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80eae6e:	687b      	ldr	r3, [r7, #4]
 80eae70:	6818      	ldr	r0, [r3, #0]
 80eae72:	683b      	ldr	r3, [r7, #0]
 80eae74:	6859      	ldr	r1, [r3, #4]
 80eae76:	683b      	ldr	r3, [r7, #0]
 80eae78:	681b      	ldr	r3, [r3, #0]
 80eae7a:	461a      	mov	r2, r3
 80eae7c:	f7ff fd6e 	bl	80ea95c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80eae80:	687b      	ldr	r3, [r7, #4]
 80eae82:	681b      	ldr	r3, [r3, #0]
 80eae84:	4618      	mov	r0, r3
 80eae86:	f7ff fe46 	bl	80eab16 <LL_ADC_REG_IsConversionOngoing>
 80eae8a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80eae8e:	687b      	ldr	r3, [r7, #4]
 80eae90:	681b      	ldr	r3, [r3, #0]
 80eae92:	4618      	mov	r0, r3
 80eae94:	f7ff fe52 	bl	80eab3c <LL_ADC_INJ_IsConversionOngoing>
 80eae98:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80eae9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80eaea0:	2b00      	cmp	r3, #0
 80eaea2:	f040 81dd 	bne.w	80eb260 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80eaea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80eaeaa:	2b00      	cmp	r3, #0
 80eaeac:	f040 81d8 	bne.w	80eb260 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80eaeb0:	683b      	ldr	r3, [r7, #0]
 80eaeb2:	689b      	ldr	r3, [r3, #8]
 80eaeb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80eaeb8:	d10f      	bne.n	80eaeda <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80eaeba:	687b      	ldr	r3, [r7, #4]
 80eaebc:	6818      	ldr	r0, [r3, #0]
 80eaebe:	683b      	ldr	r3, [r7, #0]
 80eaec0:	681b      	ldr	r3, [r3, #0]
 80eaec2:	2200      	movs	r2, #0
 80eaec4:	4619      	mov	r1, r3
 80eaec6:	f7ff fd75 	bl	80ea9b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80eaeca:	687b      	ldr	r3, [r7, #4]
 80eaecc:	681b      	ldr	r3, [r3, #0]
 80eaece:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80eaed2:	4618      	mov	r0, r3
 80eaed4:	f7ff fd2f 	bl	80ea936 <LL_ADC_SetSamplingTimeCommonConfig>
 80eaed8:	e00e      	b.n	80eaef8 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80eaeda:	687b      	ldr	r3, [r7, #4]
 80eaedc:	6818      	ldr	r0, [r3, #0]
 80eaede:	683b      	ldr	r3, [r7, #0]
 80eaee0:	6819      	ldr	r1, [r3, #0]
 80eaee2:	683b      	ldr	r3, [r7, #0]
 80eaee4:	689b      	ldr	r3, [r3, #8]
 80eaee6:	461a      	mov	r2, r3
 80eaee8:	f7ff fd64 	bl	80ea9b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80eaeec:	687b      	ldr	r3, [r7, #4]
 80eaeee:	681b      	ldr	r3, [r3, #0]
 80eaef0:	2100      	movs	r1, #0
 80eaef2:	4618      	mov	r0, r3
 80eaef4:	f7ff fd1f 	bl	80ea936 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80eaef8:	683b      	ldr	r3, [r7, #0]
 80eaefa:	695a      	ldr	r2, [r3, #20]
 80eaefc:	687b      	ldr	r3, [r7, #4]
 80eaefe:	681b      	ldr	r3, [r3, #0]
 80eaf00:	68db      	ldr	r3, [r3, #12]
 80eaf02:	08db      	lsrs	r3, r3, #3
 80eaf04:	f003 0303 	and.w	r3, r3, #3
 80eaf08:	005b      	lsls	r3, r3, #1
 80eaf0a:	fa02 f303 	lsl.w	r3, r2, r3
 80eaf0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80eaf12:	683b      	ldr	r3, [r7, #0]
 80eaf14:	691b      	ldr	r3, [r3, #16]
 80eaf16:	2b04      	cmp	r3, #4
 80eaf18:	d022      	beq.n	80eaf60 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80eaf1a:	687b      	ldr	r3, [r7, #4]
 80eaf1c:	6818      	ldr	r0, [r3, #0]
 80eaf1e:	683b      	ldr	r3, [r7, #0]
 80eaf20:	6919      	ldr	r1, [r3, #16]
 80eaf22:	683b      	ldr	r3, [r7, #0]
 80eaf24:	681a      	ldr	r2, [r3, #0]
 80eaf26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80eaf2a:	f7ff fc79 	bl	80ea820 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80eaf2e:	687b      	ldr	r3, [r7, #4]
 80eaf30:	6818      	ldr	r0, [r3, #0]
 80eaf32:	683b      	ldr	r3, [r7, #0]
 80eaf34:	6919      	ldr	r1, [r3, #16]
 80eaf36:	683b      	ldr	r3, [r7, #0]
 80eaf38:	699b      	ldr	r3, [r3, #24]
 80eaf3a:	461a      	mov	r2, r3
 80eaf3c:	f7ff fcc5 	bl	80ea8ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80eaf40:	687b      	ldr	r3, [r7, #4]
 80eaf42:	6818      	ldr	r0, [r3, #0]
 80eaf44:	683b      	ldr	r3, [r7, #0]
 80eaf46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80eaf48:	683b      	ldr	r3, [r7, #0]
 80eaf4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80eaf4c:	2b01      	cmp	r3, #1
 80eaf4e:	d102      	bne.n	80eaf56 <HAL_ADC_ConfigChannel+0x14a>
 80eaf50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80eaf54:	e000      	b.n	80eaf58 <HAL_ADC_ConfigChannel+0x14c>
 80eaf56:	2300      	movs	r3, #0
 80eaf58:	461a      	mov	r2, r3
 80eaf5a:	f7ff fcd1 	bl	80ea900 <LL_ADC_SetOffsetSaturation>
 80eaf5e:	e17f      	b.n	80eb260 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80eaf60:	687b      	ldr	r3, [r7, #4]
 80eaf62:	681b      	ldr	r3, [r3, #0]
 80eaf64:	2100      	movs	r1, #0
 80eaf66:	4618      	mov	r0, r3
 80eaf68:	f7ff fc7e 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eaf6c:	4603      	mov	r3, r0
 80eaf6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eaf72:	2b00      	cmp	r3, #0
 80eaf74:	d10a      	bne.n	80eaf8c <HAL_ADC_ConfigChannel+0x180>
 80eaf76:	687b      	ldr	r3, [r7, #4]
 80eaf78:	681b      	ldr	r3, [r3, #0]
 80eaf7a:	2100      	movs	r1, #0
 80eaf7c:	4618      	mov	r0, r3
 80eaf7e:	f7ff fc73 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eaf82:	4603      	mov	r3, r0
 80eaf84:	0e9b      	lsrs	r3, r3, #26
 80eaf86:	f003 021f 	and.w	r2, r3, #31
 80eaf8a:	e01e      	b.n	80eafca <HAL_ADC_ConfigChannel+0x1be>
 80eaf8c:	687b      	ldr	r3, [r7, #4]
 80eaf8e:	681b      	ldr	r3, [r3, #0]
 80eaf90:	2100      	movs	r1, #0
 80eaf92:	4618      	mov	r0, r3
 80eaf94:	f7ff fc68 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eaf98:	4603      	mov	r3, r0
 80eaf9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eaf9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80eafa2:	fa93 f3a3 	rbit	r3, r3
 80eafa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 80eafaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80eafae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 80eafb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80eafb6:	2b00      	cmp	r3, #0
 80eafb8:	d101      	bne.n	80eafbe <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 80eafba:	2320      	movs	r3, #32
 80eafbc:	e004      	b.n	80eafc8 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 80eafbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80eafc2:	fab3 f383 	clz	r3, r3
 80eafc6:	b2db      	uxtb	r3, r3
 80eafc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80eafca:	683b      	ldr	r3, [r7, #0]
 80eafcc:	681b      	ldr	r3, [r3, #0]
 80eafce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eafd2:	2b00      	cmp	r3, #0
 80eafd4:	d105      	bne.n	80eafe2 <HAL_ADC_ConfigChannel+0x1d6>
 80eafd6:	683b      	ldr	r3, [r7, #0]
 80eafd8:	681b      	ldr	r3, [r3, #0]
 80eafda:	0e9b      	lsrs	r3, r3, #26
 80eafdc:	f003 031f 	and.w	r3, r3, #31
 80eafe0:	e018      	b.n	80eb014 <HAL_ADC_ConfigChannel+0x208>
 80eafe2:	683b      	ldr	r3, [r7, #0]
 80eafe4:	681b      	ldr	r3, [r3, #0]
 80eafe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eafea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80eafee:	fa93 f3a3 	rbit	r3, r3
 80eaff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80eaff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80eaffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80eaffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80eb002:	2b00      	cmp	r3, #0
 80eb004:	d101      	bne.n	80eb00a <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80eb006:	2320      	movs	r3, #32
 80eb008:	e004      	b.n	80eb014 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 80eb00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80eb00e:	fab3 f383 	clz	r3, r3
 80eb012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80eb014:	429a      	cmp	r2, r3
 80eb016:	d106      	bne.n	80eb026 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80eb018:	687b      	ldr	r3, [r7, #4]
 80eb01a:	681b      	ldr	r3, [r3, #0]
 80eb01c:	2200      	movs	r2, #0
 80eb01e:	2100      	movs	r1, #0
 80eb020:	4618      	mov	r0, r3
 80eb022:	f7ff fc37 	bl	80ea894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80eb026:	687b      	ldr	r3, [r7, #4]
 80eb028:	681b      	ldr	r3, [r3, #0]
 80eb02a:	2101      	movs	r1, #1
 80eb02c:	4618      	mov	r0, r3
 80eb02e:	f7ff fc1b 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb032:	4603      	mov	r3, r0
 80eb034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb038:	2b00      	cmp	r3, #0
 80eb03a:	d10a      	bne.n	80eb052 <HAL_ADC_ConfigChannel+0x246>
 80eb03c:	687b      	ldr	r3, [r7, #4]
 80eb03e:	681b      	ldr	r3, [r3, #0]
 80eb040:	2101      	movs	r1, #1
 80eb042:	4618      	mov	r0, r3
 80eb044:	f7ff fc10 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb048:	4603      	mov	r3, r0
 80eb04a:	0e9b      	lsrs	r3, r3, #26
 80eb04c:	f003 021f 	and.w	r2, r3, #31
 80eb050:	e01e      	b.n	80eb090 <HAL_ADC_ConfigChannel+0x284>
 80eb052:	687b      	ldr	r3, [r7, #4]
 80eb054:	681b      	ldr	r3, [r3, #0]
 80eb056:	2101      	movs	r1, #1
 80eb058:	4618      	mov	r0, r3
 80eb05a:	f7ff fc05 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb05e:	4603      	mov	r3, r0
 80eb060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80eb068:	fa93 f3a3 	rbit	r3, r3
 80eb06c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80eb070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80eb074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80eb078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80eb07c:	2b00      	cmp	r3, #0
 80eb07e:	d101      	bne.n	80eb084 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 80eb080:	2320      	movs	r3, #32
 80eb082:	e004      	b.n	80eb08e <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 80eb084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80eb088:	fab3 f383 	clz	r3, r3
 80eb08c:	b2db      	uxtb	r3, r3
 80eb08e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80eb090:	683b      	ldr	r3, [r7, #0]
 80eb092:	681b      	ldr	r3, [r3, #0]
 80eb094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb098:	2b00      	cmp	r3, #0
 80eb09a:	d105      	bne.n	80eb0a8 <HAL_ADC_ConfigChannel+0x29c>
 80eb09c:	683b      	ldr	r3, [r7, #0]
 80eb09e:	681b      	ldr	r3, [r3, #0]
 80eb0a0:	0e9b      	lsrs	r3, r3, #26
 80eb0a2:	f003 031f 	and.w	r3, r3, #31
 80eb0a6:	e018      	b.n	80eb0da <HAL_ADC_ConfigChannel+0x2ce>
 80eb0a8:	683b      	ldr	r3, [r7, #0]
 80eb0aa:	681b      	ldr	r3, [r3, #0]
 80eb0ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb0b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80eb0b4:	fa93 f3a3 	rbit	r3, r3
 80eb0b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80eb0bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80eb0c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80eb0c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80eb0c8:	2b00      	cmp	r3, #0
 80eb0ca:	d101      	bne.n	80eb0d0 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80eb0cc:	2320      	movs	r3, #32
 80eb0ce:	e004      	b.n	80eb0da <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 80eb0d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80eb0d4:	fab3 f383 	clz	r3, r3
 80eb0d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80eb0da:	429a      	cmp	r2, r3
 80eb0dc:	d106      	bne.n	80eb0ec <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80eb0de:	687b      	ldr	r3, [r7, #4]
 80eb0e0:	681b      	ldr	r3, [r3, #0]
 80eb0e2:	2200      	movs	r2, #0
 80eb0e4:	2101      	movs	r1, #1
 80eb0e6:	4618      	mov	r0, r3
 80eb0e8:	f7ff fbd4 	bl	80ea894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80eb0ec:	687b      	ldr	r3, [r7, #4]
 80eb0ee:	681b      	ldr	r3, [r3, #0]
 80eb0f0:	2102      	movs	r1, #2
 80eb0f2:	4618      	mov	r0, r3
 80eb0f4:	f7ff fbb8 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb0f8:	4603      	mov	r3, r0
 80eb0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb0fe:	2b00      	cmp	r3, #0
 80eb100:	d10e      	bne.n	80eb120 <HAL_ADC_ConfigChannel+0x314>
 80eb102:	687b      	ldr	r3, [r7, #4]
 80eb104:	681b      	ldr	r3, [r3, #0]
 80eb106:	2102      	movs	r1, #2
 80eb108:	4618      	mov	r0, r3
 80eb10a:	f7ff fbad 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb10e:	4603      	mov	r3, r0
 80eb110:	0e9b      	lsrs	r3, r3, #26
 80eb112:	f003 021f 	and.w	r2, r3, #31
 80eb116:	e022      	b.n	80eb15e <HAL_ADC_ConfigChannel+0x352>
 80eb118:	04300002 	.word	0x04300002
 80eb11c:	407f0000 	.word	0x407f0000
 80eb120:	687b      	ldr	r3, [r7, #4]
 80eb122:	681b      	ldr	r3, [r3, #0]
 80eb124:	2102      	movs	r1, #2
 80eb126:	4618      	mov	r0, r3
 80eb128:	f7ff fb9e 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb12c:	4603      	mov	r3, r0
 80eb12e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80eb136:	fa93 f3a3 	rbit	r3, r3
 80eb13a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80eb13e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80eb142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80eb146:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80eb14a:	2b00      	cmp	r3, #0
 80eb14c:	d101      	bne.n	80eb152 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 80eb14e:	2320      	movs	r3, #32
 80eb150:	e004      	b.n	80eb15c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80eb152:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80eb156:	fab3 f383 	clz	r3, r3
 80eb15a:	b2db      	uxtb	r3, r3
 80eb15c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80eb15e:	683b      	ldr	r3, [r7, #0]
 80eb160:	681b      	ldr	r3, [r3, #0]
 80eb162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb166:	2b00      	cmp	r3, #0
 80eb168:	d105      	bne.n	80eb176 <HAL_ADC_ConfigChannel+0x36a>
 80eb16a:	683b      	ldr	r3, [r7, #0]
 80eb16c:	681b      	ldr	r3, [r3, #0]
 80eb16e:	0e9b      	lsrs	r3, r3, #26
 80eb170:	f003 031f 	and.w	r3, r3, #31
 80eb174:	e016      	b.n	80eb1a4 <HAL_ADC_ConfigChannel+0x398>
 80eb176:	683b      	ldr	r3, [r7, #0]
 80eb178:	681b      	ldr	r3, [r3, #0]
 80eb17a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb17e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80eb182:	fa93 f3a3 	rbit	r3, r3
 80eb186:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80eb188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80eb18a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80eb18e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80eb192:	2b00      	cmp	r3, #0
 80eb194:	d101      	bne.n	80eb19a <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 80eb196:	2320      	movs	r3, #32
 80eb198:	e004      	b.n	80eb1a4 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 80eb19a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80eb19e:	fab3 f383 	clz	r3, r3
 80eb1a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80eb1a4:	429a      	cmp	r2, r3
 80eb1a6:	d106      	bne.n	80eb1b6 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80eb1a8:	687b      	ldr	r3, [r7, #4]
 80eb1aa:	681b      	ldr	r3, [r3, #0]
 80eb1ac:	2200      	movs	r2, #0
 80eb1ae:	2102      	movs	r1, #2
 80eb1b0:	4618      	mov	r0, r3
 80eb1b2:	f7ff fb6f 	bl	80ea894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80eb1b6:	687b      	ldr	r3, [r7, #4]
 80eb1b8:	681b      	ldr	r3, [r3, #0]
 80eb1ba:	2103      	movs	r1, #3
 80eb1bc:	4618      	mov	r0, r3
 80eb1be:	f7ff fb53 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb1c2:	4603      	mov	r3, r0
 80eb1c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb1c8:	2b00      	cmp	r3, #0
 80eb1ca:	d10a      	bne.n	80eb1e2 <HAL_ADC_ConfigChannel+0x3d6>
 80eb1cc:	687b      	ldr	r3, [r7, #4]
 80eb1ce:	681b      	ldr	r3, [r3, #0]
 80eb1d0:	2103      	movs	r1, #3
 80eb1d2:	4618      	mov	r0, r3
 80eb1d4:	f7ff fb48 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb1d8:	4603      	mov	r3, r0
 80eb1da:	0e9b      	lsrs	r3, r3, #26
 80eb1dc:	f003 021f 	and.w	r2, r3, #31
 80eb1e0:	e017      	b.n	80eb212 <HAL_ADC_ConfigChannel+0x406>
 80eb1e2:	687b      	ldr	r3, [r7, #4]
 80eb1e4:	681b      	ldr	r3, [r3, #0]
 80eb1e6:	2103      	movs	r1, #3
 80eb1e8:	4618      	mov	r0, r3
 80eb1ea:	f7ff fb3d 	bl	80ea868 <LL_ADC_GetOffsetChannel>
 80eb1ee:	4603      	mov	r3, r0
 80eb1f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb1f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80eb1f4:	fa93 f3a3 	rbit	r3, r3
 80eb1f8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80eb1fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80eb1fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80eb1fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80eb200:	2b00      	cmp	r3, #0
 80eb202:	d101      	bne.n	80eb208 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80eb204:	2320      	movs	r3, #32
 80eb206:	e003      	b.n	80eb210 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80eb208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80eb20a:	fab3 f383 	clz	r3, r3
 80eb20e:	b2db      	uxtb	r3, r3
 80eb210:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80eb212:	683b      	ldr	r3, [r7, #0]
 80eb214:	681b      	ldr	r3, [r3, #0]
 80eb216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb21a:	2b00      	cmp	r3, #0
 80eb21c:	d105      	bne.n	80eb22a <HAL_ADC_ConfigChannel+0x41e>
 80eb21e:	683b      	ldr	r3, [r7, #0]
 80eb220:	681b      	ldr	r3, [r3, #0]
 80eb222:	0e9b      	lsrs	r3, r3, #26
 80eb224:	f003 031f 	and.w	r3, r3, #31
 80eb228:	e011      	b.n	80eb24e <HAL_ADC_ConfigChannel+0x442>
 80eb22a:	683b      	ldr	r3, [r7, #0]
 80eb22c:	681b      	ldr	r3, [r3, #0]
 80eb22e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80eb232:	fa93 f3a3 	rbit	r3, r3
 80eb236:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80eb238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80eb23a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80eb23c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80eb23e:	2b00      	cmp	r3, #0
 80eb240:	d101      	bne.n	80eb246 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 80eb242:	2320      	movs	r3, #32
 80eb244:	e003      	b.n	80eb24e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 80eb246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80eb248:	fab3 f383 	clz	r3, r3
 80eb24c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80eb24e:	429a      	cmp	r2, r3
 80eb250:	d106      	bne.n	80eb260 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80eb252:	687b      	ldr	r3, [r7, #4]
 80eb254:	681b      	ldr	r3, [r3, #0]
 80eb256:	2200      	movs	r2, #0
 80eb258:	2103      	movs	r1, #3
 80eb25a:	4618      	mov	r0, r3
 80eb25c:	f7ff fb1a 	bl	80ea894 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80eb260:	687b      	ldr	r3, [r7, #4]
 80eb262:	681b      	ldr	r3, [r3, #0]
 80eb264:	4618      	mov	r0, r3
 80eb266:	f7ff fc43 	bl	80eaaf0 <LL_ADC_IsEnabled>
 80eb26a:	4603      	mov	r3, r0
 80eb26c:	2b00      	cmp	r3, #0
 80eb26e:	f040 813f 	bne.w	80eb4f0 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80eb272:	687b      	ldr	r3, [r7, #4]
 80eb274:	6818      	ldr	r0, [r3, #0]
 80eb276:	683b      	ldr	r3, [r7, #0]
 80eb278:	6819      	ldr	r1, [r3, #0]
 80eb27a:	683b      	ldr	r3, [r7, #0]
 80eb27c:	68db      	ldr	r3, [r3, #12]
 80eb27e:	461a      	mov	r2, r3
 80eb280:	f7ff fbc4 	bl	80eaa0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80eb284:	683b      	ldr	r3, [r7, #0]
 80eb286:	68db      	ldr	r3, [r3, #12]
 80eb288:	4a8e      	ldr	r2, [pc, #568]	@ (80eb4c4 <HAL_ADC_ConfigChannel+0x6b8>)
 80eb28a:	4293      	cmp	r3, r2
 80eb28c:	f040 8130 	bne.w	80eb4f0 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80eb290:	687b      	ldr	r3, [r7, #4]
 80eb292:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80eb294:	683b      	ldr	r3, [r7, #0]
 80eb296:	681b      	ldr	r3, [r3, #0]
 80eb298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb29c:	2b00      	cmp	r3, #0
 80eb29e:	d10b      	bne.n	80eb2b8 <HAL_ADC_ConfigChannel+0x4ac>
 80eb2a0:	683b      	ldr	r3, [r7, #0]
 80eb2a2:	681b      	ldr	r3, [r3, #0]
 80eb2a4:	0e9b      	lsrs	r3, r3, #26
 80eb2a6:	3301      	adds	r3, #1
 80eb2a8:	f003 031f 	and.w	r3, r3, #31
 80eb2ac:	2b09      	cmp	r3, #9
 80eb2ae:	bf94      	ite	ls
 80eb2b0:	2301      	movls	r3, #1
 80eb2b2:	2300      	movhi	r3, #0
 80eb2b4:	b2db      	uxtb	r3, r3
 80eb2b6:	e019      	b.n	80eb2ec <HAL_ADC_ConfigChannel+0x4e0>
 80eb2b8:	683b      	ldr	r3, [r7, #0]
 80eb2ba:	681b      	ldr	r3, [r3, #0]
 80eb2bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb2be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80eb2c0:	fa93 f3a3 	rbit	r3, r3
 80eb2c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80eb2c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80eb2c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80eb2ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80eb2cc:	2b00      	cmp	r3, #0
 80eb2ce:	d101      	bne.n	80eb2d4 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 80eb2d0:	2320      	movs	r3, #32
 80eb2d2:	e003      	b.n	80eb2dc <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 80eb2d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80eb2d6:	fab3 f383 	clz	r3, r3
 80eb2da:	b2db      	uxtb	r3, r3
 80eb2dc:	3301      	adds	r3, #1
 80eb2de:	f003 031f 	and.w	r3, r3, #31
 80eb2e2:	2b09      	cmp	r3, #9
 80eb2e4:	bf94      	ite	ls
 80eb2e6:	2301      	movls	r3, #1
 80eb2e8:	2300      	movhi	r3, #0
 80eb2ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80eb2ec:	2b00      	cmp	r3, #0
 80eb2ee:	d079      	beq.n	80eb3e4 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80eb2f0:	683b      	ldr	r3, [r7, #0]
 80eb2f2:	681b      	ldr	r3, [r3, #0]
 80eb2f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb2f8:	2b00      	cmp	r3, #0
 80eb2fa:	d107      	bne.n	80eb30c <HAL_ADC_ConfigChannel+0x500>
 80eb2fc:	683b      	ldr	r3, [r7, #0]
 80eb2fe:	681b      	ldr	r3, [r3, #0]
 80eb300:	0e9b      	lsrs	r3, r3, #26
 80eb302:	3301      	adds	r3, #1
 80eb304:	069b      	lsls	r3, r3, #26
 80eb306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80eb30a:	e015      	b.n	80eb338 <HAL_ADC_ConfigChannel+0x52c>
 80eb30c:	683b      	ldr	r3, [r7, #0]
 80eb30e:	681b      	ldr	r3, [r3, #0]
 80eb310:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80eb314:	fa93 f3a3 	rbit	r3, r3
 80eb318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80eb31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80eb31c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80eb31e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80eb320:	2b00      	cmp	r3, #0
 80eb322:	d101      	bne.n	80eb328 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 80eb324:	2320      	movs	r3, #32
 80eb326:	e003      	b.n	80eb330 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 80eb328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80eb32a:	fab3 f383 	clz	r3, r3
 80eb32e:	b2db      	uxtb	r3, r3
 80eb330:	3301      	adds	r3, #1
 80eb332:	069b      	lsls	r3, r3, #26
 80eb334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80eb338:	683b      	ldr	r3, [r7, #0]
 80eb33a:	681b      	ldr	r3, [r3, #0]
 80eb33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb340:	2b00      	cmp	r3, #0
 80eb342:	d109      	bne.n	80eb358 <HAL_ADC_ConfigChannel+0x54c>
 80eb344:	683b      	ldr	r3, [r7, #0]
 80eb346:	681b      	ldr	r3, [r3, #0]
 80eb348:	0e9b      	lsrs	r3, r3, #26
 80eb34a:	3301      	adds	r3, #1
 80eb34c:	f003 031f 	and.w	r3, r3, #31
 80eb350:	2101      	movs	r1, #1
 80eb352:	fa01 f303 	lsl.w	r3, r1, r3
 80eb356:	e017      	b.n	80eb388 <HAL_ADC_ConfigChannel+0x57c>
 80eb358:	683b      	ldr	r3, [r7, #0]
 80eb35a:	681b      	ldr	r3, [r3, #0]
 80eb35c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80eb360:	fa93 f3a3 	rbit	r3, r3
 80eb364:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80eb366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80eb368:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80eb36a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80eb36c:	2b00      	cmp	r3, #0
 80eb36e:	d101      	bne.n	80eb374 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 80eb370:	2320      	movs	r3, #32
 80eb372:	e003      	b.n	80eb37c <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 80eb374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80eb376:	fab3 f383 	clz	r3, r3
 80eb37a:	b2db      	uxtb	r3, r3
 80eb37c:	3301      	adds	r3, #1
 80eb37e:	f003 031f 	and.w	r3, r3, #31
 80eb382:	2101      	movs	r1, #1
 80eb384:	fa01 f303 	lsl.w	r3, r1, r3
 80eb388:	ea42 0103 	orr.w	r1, r2, r3
 80eb38c:	683b      	ldr	r3, [r7, #0]
 80eb38e:	681b      	ldr	r3, [r3, #0]
 80eb390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb394:	2b00      	cmp	r3, #0
 80eb396:	d10a      	bne.n	80eb3ae <HAL_ADC_ConfigChannel+0x5a2>
 80eb398:	683b      	ldr	r3, [r7, #0]
 80eb39a:	681b      	ldr	r3, [r3, #0]
 80eb39c:	0e9b      	lsrs	r3, r3, #26
 80eb39e:	3301      	adds	r3, #1
 80eb3a0:	f003 021f 	and.w	r2, r3, #31
 80eb3a4:	4613      	mov	r3, r2
 80eb3a6:	005b      	lsls	r3, r3, #1
 80eb3a8:	4413      	add	r3, r2
 80eb3aa:	051b      	lsls	r3, r3, #20
 80eb3ac:	e018      	b.n	80eb3e0 <HAL_ADC_ConfigChannel+0x5d4>
 80eb3ae:	683b      	ldr	r3, [r7, #0]
 80eb3b0:	681b      	ldr	r3, [r3, #0]
 80eb3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80eb3b6:	fa93 f3a3 	rbit	r3, r3
 80eb3ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80eb3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80eb3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80eb3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80eb3c2:	2b00      	cmp	r3, #0
 80eb3c4:	d101      	bne.n	80eb3ca <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 80eb3c6:	2320      	movs	r3, #32
 80eb3c8:	e003      	b.n	80eb3d2 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 80eb3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80eb3cc:	fab3 f383 	clz	r3, r3
 80eb3d0:	b2db      	uxtb	r3, r3
 80eb3d2:	3301      	adds	r3, #1
 80eb3d4:	f003 021f 	and.w	r2, r3, #31
 80eb3d8:	4613      	mov	r3, r2
 80eb3da:	005b      	lsls	r3, r3, #1
 80eb3dc:	4413      	add	r3, r2
 80eb3de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80eb3e0:	430b      	orrs	r3, r1
 80eb3e2:	e080      	b.n	80eb4e6 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80eb3e4:	683b      	ldr	r3, [r7, #0]
 80eb3e6:	681b      	ldr	r3, [r3, #0]
 80eb3e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb3ec:	2b00      	cmp	r3, #0
 80eb3ee:	d107      	bne.n	80eb400 <HAL_ADC_ConfigChannel+0x5f4>
 80eb3f0:	683b      	ldr	r3, [r7, #0]
 80eb3f2:	681b      	ldr	r3, [r3, #0]
 80eb3f4:	0e9b      	lsrs	r3, r3, #26
 80eb3f6:	3301      	adds	r3, #1
 80eb3f8:	069b      	lsls	r3, r3, #26
 80eb3fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80eb3fe:	e015      	b.n	80eb42c <HAL_ADC_ConfigChannel+0x620>
 80eb400:	683b      	ldr	r3, [r7, #0]
 80eb402:	681b      	ldr	r3, [r3, #0]
 80eb404:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80eb408:	fa93 f3a3 	rbit	r3, r3
 80eb40c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80eb40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80eb410:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80eb412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80eb414:	2b00      	cmp	r3, #0
 80eb416:	d101      	bne.n	80eb41c <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 80eb418:	2320      	movs	r3, #32
 80eb41a:	e003      	b.n	80eb424 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 80eb41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80eb41e:	fab3 f383 	clz	r3, r3
 80eb422:	b2db      	uxtb	r3, r3
 80eb424:	3301      	adds	r3, #1
 80eb426:	069b      	lsls	r3, r3, #26
 80eb428:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80eb42c:	683b      	ldr	r3, [r7, #0]
 80eb42e:	681b      	ldr	r3, [r3, #0]
 80eb430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb434:	2b00      	cmp	r3, #0
 80eb436:	d109      	bne.n	80eb44c <HAL_ADC_ConfigChannel+0x640>
 80eb438:	683b      	ldr	r3, [r7, #0]
 80eb43a:	681b      	ldr	r3, [r3, #0]
 80eb43c:	0e9b      	lsrs	r3, r3, #26
 80eb43e:	3301      	adds	r3, #1
 80eb440:	f003 031f 	and.w	r3, r3, #31
 80eb444:	2101      	movs	r1, #1
 80eb446:	fa01 f303 	lsl.w	r3, r1, r3
 80eb44a:	e017      	b.n	80eb47c <HAL_ADC_ConfigChannel+0x670>
 80eb44c:	683b      	ldr	r3, [r7, #0]
 80eb44e:	681b      	ldr	r3, [r3, #0]
 80eb450:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb452:	6a3b      	ldr	r3, [r7, #32]
 80eb454:	fa93 f3a3 	rbit	r3, r3
 80eb458:	61fb      	str	r3, [r7, #28]
  return result;
 80eb45a:	69fb      	ldr	r3, [r7, #28]
 80eb45c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80eb45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80eb460:	2b00      	cmp	r3, #0
 80eb462:	d101      	bne.n	80eb468 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 80eb464:	2320      	movs	r3, #32
 80eb466:	e003      	b.n	80eb470 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 80eb468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80eb46a:	fab3 f383 	clz	r3, r3
 80eb46e:	b2db      	uxtb	r3, r3
 80eb470:	3301      	adds	r3, #1
 80eb472:	f003 031f 	and.w	r3, r3, #31
 80eb476:	2101      	movs	r1, #1
 80eb478:	fa01 f303 	lsl.w	r3, r1, r3
 80eb47c:	ea42 0103 	orr.w	r1, r2, r3
 80eb480:	683b      	ldr	r3, [r7, #0]
 80eb482:	681b      	ldr	r3, [r3, #0]
 80eb484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80eb488:	2b00      	cmp	r3, #0
 80eb48a:	d10d      	bne.n	80eb4a8 <HAL_ADC_ConfigChannel+0x69c>
 80eb48c:	683b      	ldr	r3, [r7, #0]
 80eb48e:	681b      	ldr	r3, [r3, #0]
 80eb490:	0e9b      	lsrs	r3, r3, #26
 80eb492:	3301      	adds	r3, #1
 80eb494:	f003 021f 	and.w	r2, r3, #31
 80eb498:	4613      	mov	r3, r2
 80eb49a:	005b      	lsls	r3, r3, #1
 80eb49c:	4413      	add	r3, r2
 80eb49e:	3b1e      	subs	r3, #30
 80eb4a0:	051b      	lsls	r3, r3, #20
 80eb4a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80eb4a6:	e01d      	b.n	80eb4e4 <HAL_ADC_ConfigChannel+0x6d8>
 80eb4a8:	683b      	ldr	r3, [r7, #0]
 80eb4aa:	681b      	ldr	r3, [r3, #0]
 80eb4ac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80eb4ae:	697b      	ldr	r3, [r7, #20]
 80eb4b0:	fa93 f3a3 	rbit	r3, r3
 80eb4b4:	613b      	str	r3, [r7, #16]
  return result;
 80eb4b6:	693b      	ldr	r3, [r7, #16]
 80eb4b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80eb4ba:	69bb      	ldr	r3, [r7, #24]
 80eb4bc:	2b00      	cmp	r3, #0
 80eb4be:	d103      	bne.n	80eb4c8 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 80eb4c0:	2320      	movs	r3, #32
 80eb4c2:	e005      	b.n	80eb4d0 <HAL_ADC_ConfigChannel+0x6c4>
 80eb4c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80eb4c8:	69bb      	ldr	r3, [r7, #24]
 80eb4ca:	fab3 f383 	clz	r3, r3
 80eb4ce:	b2db      	uxtb	r3, r3
 80eb4d0:	3301      	adds	r3, #1
 80eb4d2:	f003 021f 	and.w	r2, r3, #31
 80eb4d6:	4613      	mov	r3, r2
 80eb4d8:	005b      	lsls	r3, r3, #1
 80eb4da:	4413      	add	r3, r2
 80eb4dc:	3b1e      	subs	r3, #30
 80eb4de:	051b      	lsls	r3, r3, #20
 80eb4e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80eb4e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80eb4e6:	683a      	ldr	r2, [r7, #0]
 80eb4e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80eb4ea:	4619      	mov	r1, r3
 80eb4ec:	f7ff fa62 	bl	80ea9b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80eb4f0:	683b      	ldr	r3, [r7, #0]
 80eb4f2:	681a      	ldr	r2, [r3, #0]
 80eb4f4:	4b43      	ldr	r3, [pc, #268]	@ (80eb604 <HAL_ADC_ConfigChannel+0x7f8>)
 80eb4f6:	4013      	ands	r3, r2
 80eb4f8:	2b00      	cmp	r3, #0
 80eb4fa:	d079      	beq.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80eb4fc:	4842      	ldr	r0, [pc, #264]	@ (80eb608 <HAL_ADC_ConfigChannel+0x7fc>)
 80eb4fe:	f7ff f95b 	bl	80ea7b8 <LL_ADC_GetCommonPathInternalCh>
 80eb502:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80eb506:	683b      	ldr	r3, [r7, #0]
 80eb508:	681b      	ldr	r3, [r3, #0]
 80eb50a:	4a40      	ldr	r2, [pc, #256]	@ (80eb60c <HAL_ADC_ConfigChannel+0x800>)
 80eb50c:	4293      	cmp	r3, r2
 80eb50e:	d124      	bne.n	80eb55a <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80eb510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80eb518:	2b00      	cmp	r3, #0
 80eb51a:	d11e      	bne.n	80eb55a <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80eb51c:	687b      	ldr	r3, [r7, #4]
 80eb51e:	681b      	ldr	r3, [r3, #0]
 80eb520:	4a3b      	ldr	r2, [pc, #236]	@ (80eb610 <HAL_ADC_ConfigChannel+0x804>)
 80eb522:	4293      	cmp	r3, r2
 80eb524:	d164      	bne.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80eb526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb52a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80eb52e:	4619      	mov	r1, r3
 80eb530:	4835      	ldr	r0, [pc, #212]	@ (80eb608 <HAL_ADC_ConfigChannel+0x7fc>)
 80eb532:	f7ff f92e 	bl	80ea792 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80eb536:	4b37      	ldr	r3, [pc, #220]	@ (80eb614 <HAL_ADC_ConfigChannel+0x808>)
 80eb538:	681b      	ldr	r3, [r3, #0]
 80eb53a:	099b      	lsrs	r3, r3, #6
 80eb53c:	4a36      	ldr	r2, [pc, #216]	@ (80eb618 <HAL_ADC_ConfigChannel+0x80c>)
 80eb53e:	fba2 2303 	umull	r2, r3, r2, r3
 80eb542:	099b      	lsrs	r3, r3, #6
 80eb544:	3301      	adds	r3, #1
 80eb546:	005b      	lsls	r3, r3, #1
 80eb548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80eb54a:	e002      	b.n	80eb552 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 80eb54c:	68fb      	ldr	r3, [r7, #12]
 80eb54e:	3b01      	subs	r3, #1
 80eb550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80eb552:	68fb      	ldr	r3, [r7, #12]
 80eb554:	2b00      	cmp	r3, #0
 80eb556:	d1f9      	bne.n	80eb54c <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80eb558:	e04a      	b.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80eb55a:	683b      	ldr	r3, [r7, #0]
 80eb55c:	681b      	ldr	r3, [r3, #0]
 80eb55e:	4a2f      	ldr	r2, [pc, #188]	@ (80eb61c <HAL_ADC_ConfigChannel+0x810>)
 80eb560:	4293      	cmp	r3, r2
 80eb562:	d113      	bne.n	80eb58c <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80eb564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80eb56c:	2b00      	cmp	r3, #0
 80eb56e:	d10d      	bne.n	80eb58c <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80eb570:	687b      	ldr	r3, [r7, #4]
 80eb572:	681b      	ldr	r3, [r3, #0]
 80eb574:	4a2a      	ldr	r2, [pc, #168]	@ (80eb620 <HAL_ADC_ConfigChannel+0x814>)
 80eb576:	4293      	cmp	r3, r2
 80eb578:	d13a      	bne.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80eb57a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb57e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80eb582:	4619      	mov	r1, r3
 80eb584:	4820      	ldr	r0, [pc, #128]	@ (80eb608 <HAL_ADC_ConfigChannel+0x7fc>)
 80eb586:	f7ff f904 	bl	80ea792 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80eb58a:	e031      	b.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80eb58c:	683b      	ldr	r3, [r7, #0]
 80eb58e:	681b      	ldr	r3, [r3, #0]
 80eb590:	4a24      	ldr	r2, [pc, #144]	@ (80eb624 <HAL_ADC_ConfigChannel+0x818>)
 80eb592:	4293      	cmp	r3, r2
 80eb594:	d113      	bne.n	80eb5be <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80eb596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb59a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80eb59e:	2b00      	cmp	r3, #0
 80eb5a0:	d10d      	bne.n	80eb5be <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80eb5a2:	687b      	ldr	r3, [r7, #4]
 80eb5a4:	681b      	ldr	r3, [r3, #0]
 80eb5a6:	4a1a      	ldr	r2, [pc, #104]	@ (80eb610 <HAL_ADC_ConfigChannel+0x804>)
 80eb5a8:	4293      	cmp	r3, r2
 80eb5aa:	d121      	bne.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80eb5ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80eb5b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80eb5b4:	4619      	mov	r1, r3
 80eb5b6:	4814      	ldr	r0, [pc, #80]	@ (80eb608 <HAL_ADC_ConfigChannel+0x7fc>)
 80eb5b8:	f7ff f8eb 	bl	80ea792 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80eb5bc:	e018      	b.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80eb5be:	683b      	ldr	r3, [r7, #0]
 80eb5c0:	681b      	ldr	r3, [r3, #0]
 80eb5c2:	4a19      	ldr	r2, [pc, #100]	@ (80eb628 <HAL_ADC_ConfigChannel+0x81c>)
 80eb5c4:	4293      	cmp	r3, r2
 80eb5c6:	d113      	bne.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80eb5c8:	687b      	ldr	r3, [r7, #4]
 80eb5ca:	681b      	ldr	r3, [r3, #0]
 80eb5cc:	4a10      	ldr	r2, [pc, #64]	@ (80eb610 <HAL_ADC_ConfigChannel+0x804>)
 80eb5ce:	4293      	cmp	r3, r2
 80eb5d0:	d00e      	beq.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80eb5d2:	687b      	ldr	r3, [r7, #4]
 80eb5d4:	681b      	ldr	r3, [r3, #0]
 80eb5d6:	4618      	mov	r0, r3
 80eb5d8:	f7ff f8fc 	bl	80ea7d4 <LL_ADC_EnableChannelVDDcore>
 80eb5dc:	e008      	b.n	80eb5f0 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80eb5de:	687b      	ldr	r3, [r7, #4]
 80eb5e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80eb5e2:	f043 0220 	orr.w	r2, r3, #32
 80eb5e6:	687b      	ldr	r3, [r7, #4]
 80eb5e8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80eb5ea:	2301      	movs	r3, #1
 80eb5ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80eb5f0:	687b      	ldr	r3, [r7, #4]
 80eb5f2:	2200      	movs	r2, #0
 80eb5f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80eb5f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80eb5fc:	4618      	mov	r0, r3
 80eb5fe:	37d8      	adds	r7, #216	@ 0xd8
 80eb600:	46bd      	mov	sp, r7
 80eb602:	bd80      	pop	{r7, pc}
 80eb604:	80080000 	.word	0x80080000
 80eb608:	42028300 	.word	0x42028300
 80eb60c:	c3210000 	.word	0xc3210000
 80eb610:	42028000 	.word	0x42028000
 80eb614:	20000000 	.word	0x20000000
 80eb618:	053e2d63 	.word	0x053e2d63
 80eb61c:	43290000 	.word	0x43290000
 80eb620:	42028100 	.word	0x42028100
 80eb624:	c7520000 	.word	0xc7520000
 80eb628:	475a0000 	.word	0x475a0000

080eb62c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80eb62c:	b480      	push	{r7}
 80eb62e:	b085      	sub	sp, #20
 80eb630:	af00      	add	r7, sp, #0
 80eb632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80eb634:	687b      	ldr	r3, [r7, #4]
 80eb636:	f003 0307 	and.w	r3, r3, #7
 80eb63a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80eb63c:	4b0c      	ldr	r3, [pc, #48]	@ (80eb670 <__NVIC_SetPriorityGrouping+0x44>)
 80eb63e:	68db      	ldr	r3, [r3, #12]
 80eb640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80eb642:	68ba      	ldr	r2, [r7, #8]
 80eb644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80eb648:	4013      	ands	r3, r2
 80eb64a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80eb64c:	68fb      	ldr	r3, [r7, #12]
 80eb64e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80eb650:	68bb      	ldr	r3, [r7, #8]
 80eb652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80eb654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80eb658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80eb65c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80eb65e:	4a04      	ldr	r2, [pc, #16]	@ (80eb670 <__NVIC_SetPriorityGrouping+0x44>)
 80eb660:	68bb      	ldr	r3, [r7, #8]
 80eb662:	60d3      	str	r3, [r2, #12]
}
 80eb664:	bf00      	nop
 80eb666:	3714      	adds	r7, #20
 80eb668:	46bd      	mov	sp, r7
 80eb66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb66e:	4770      	bx	lr
 80eb670:	e000ed00 	.word	0xe000ed00

080eb674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80eb674:	b480      	push	{r7}
 80eb676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80eb678:	4b04      	ldr	r3, [pc, #16]	@ (80eb68c <__NVIC_GetPriorityGrouping+0x18>)
 80eb67a:	68db      	ldr	r3, [r3, #12]
 80eb67c:	0a1b      	lsrs	r3, r3, #8
 80eb67e:	f003 0307 	and.w	r3, r3, #7
}
 80eb682:	4618      	mov	r0, r3
 80eb684:	46bd      	mov	sp, r7
 80eb686:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb68a:	4770      	bx	lr
 80eb68c:	e000ed00 	.word	0xe000ed00

080eb690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80eb690:	b480      	push	{r7}
 80eb692:	b083      	sub	sp, #12
 80eb694:	af00      	add	r7, sp, #0
 80eb696:	4603      	mov	r3, r0
 80eb698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80eb69a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80eb69e:	2b00      	cmp	r3, #0
 80eb6a0:	db0b      	blt.n	80eb6ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80eb6a2:	88fb      	ldrh	r3, [r7, #6]
 80eb6a4:	f003 021f 	and.w	r2, r3, #31
 80eb6a8:	4907      	ldr	r1, [pc, #28]	@ (80eb6c8 <__NVIC_EnableIRQ+0x38>)
 80eb6aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80eb6ae:	095b      	lsrs	r3, r3, #5
 80eb6b0:	2001      	movs	r0, #1
 80eb6b2:	fa00 f202 	lsl.w	r2, r0, r2
 80eb6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80eb6ba:	bf00      	nop
 80eb6bc:	370c      	adds	r7, #12
 80eb6be:	46bd      	mov	sp, r7
 80eb6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb6c4:	4770      	bx	lr
 80eb6c6:	bf00      	nop
 80eb6c8:	e000e100 	.word	0xe000e100

080eb6cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80eb6cc:	b480      	push	{r7}
 80eb6ce:	b083      	sub	sp, #12
 80eb6d0:	af00      	add	r7, sp, #0
 80eb6d2:	4603      	mov	r3, r0
 80eb6d4:	6039      	str	r1, [r7, #0]
 80eb6d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80eb6d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80eb6dc:	2b00      	cmp	r3, #0
 80eb6de:	db0a      	blt.n	80eb6f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80eb6e0:	683b      	ldr	r3, [r7, #0]
 80eb6e2:	b2da      	uxtb	r2, r3
 80eb6e4:	490c      	ldr	r1, [pc, #48]	@ (80eb718 <__NVIC_SetPriority+0x4c>)
 80eb6e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80eb6ea:	0112      	lsls	r2, r2, #4
 80eb6ec:	b2d2      	uxtb	r2, r2
 80eb6ee:	440b      	add	r3, r1
 80eb6f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80eb6f4:	e00a      	b.n	80eb70c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80eb6f6:	683b      	ldr	r3, [r7, #0]
 80eb6f8:	b2da      	uxtb	r2, r3
 80eb6fa:	4908      	ldr	r1, [pc, #32]	@ (80eb71c <__NVIC_SetPriority+0x50>)
 80eb6fc:	88fb      	ldrh	r3, [r7, #6]
 80eb6fe:	f003 030f 	and.w	r3, r3, #15
 80eb702:	3b04      	subs	r3, #4
 80eb704:	0112      	lsls	r2, r2, #4
 80eb706:	b2d2      	uxtb	r2, r2
 80eb708:	440b      	add	r3, r1
 80eb70a:	761a      	strb	r2, [r3, #24]
}
 80eb70c:	bf00      	nop
 80eb70e:	370c      	adds	r7, #12
 80eb710:	46bd      	mov	sp, r7
 80eb712:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb716:	4770      	bx	lr
 80eb718:	e000e100 	.word	0xe000e100
 80eb71c:	e000ed00 	.word	0xe000ed00

080eb720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80eb720:	b480      	push	{r7}
 80eb722:	b089      	sub	sp, #36	@ 0x24
 80eb724:	af00      	add	r7, sp, #0
 80eb726:	60f8      	str	r0, [r7, #12]
 80eb728:	60b9      	str	r1, [r7, #8]
 80eb72a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80eb72c:	68fb      	ldr	r3, [r7, #12]
 80eb72e:	f003 0307 	and.w	r3, r3, #7
 80eb732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80eb734:	69fb      	ldr	r3, [r7, #28]
 80eb736:	f1c3 0307 	rsb	r3, r3, #7
 80eb73a:	2b04      	cmp	r3, #4
 80eb73c:	bf28      	it	cs
 80eb73e:	2304      	movcs	r3, #4
 80eb740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80eb742:	69fb      	ldr	r3, [r7, #28]
 80eb744:	3304      	adds	r3, #4
 80eb746:	2b06      	cmp	r3, #6
 80eb748:	d902      	bls.n	80eb750 <NVIC_EncodePriority+0x30>
 80eb74a:	69fb      	ldr	r3, [r7, #28]
 80eb74c:	3b03      	subs	r3, #3
 80eb74e:	e000      	b.n	80eb752 <NVIC_EncodePriority+0x32>
 80eb750:	2300      	movs	r3, #0
 80eb752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80eb754:	f04f 32ff 	mov.w	r2, #4294967295
 80eb758:	69bb      	ldr	r3, [r7, #24]
 80eb75a:	fa02 f303 	lsl.w	r3, r2, r3
 80eb75e:	43da      	mvns	r2, r3
 80eb760:	68bb      	ldr	r3, [r7, #8]
 80eb762:	401a      	ands	r2, r3
 80eb764:	697b      	ldr	r3, [r7, #20]
 80eb766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80eb768:	f04f 31ff 	mov.w	r1, #4294967295
 80eb76c:	697b      	ldr	r3, [r7, #20]
 80eb76e:	fa01 f303 	lsl.w	r3, r1, r3
 80eb772:	43d9      	mvns	r1, r3
 80eb774:	687b      	ldr	r3, [r7, #4]
 80eb776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80eb778:	4313      	orrs	r3, r2
         );
}
 80eb77a:	4618      	mov	r0, r3
 80eb77c:	3724      	adds	r7, #36	@ 0x24
 80eb77e:	46bd      	mov	sp, r7
 80eb780:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb784:	4770      	bx	lr

080eb786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80eb786:	b580      	push	{r7, lr}
 80eb788:	b082      	sub	sp, #8
 80eb78a:	af00      	add	r7, sp, #0
 80eb78c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80eb78e:	6878      	ldr	r0, [r7, #4]
 80eb790:	f7ff ff4c 	bl	80eb62c <__NVIC_SetPriorityGrouping>
}
 80eb794:	bf00      	nop
 80eb796:	3708      	adds	r7, #8
 80eb798:	46bd      	mov	sp, r7
 80eb79a:	bd80      	pop	{r7, pc}

080eb79c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80eb79c:	b580      	push	{r7, lr}
 80eb79e:	b086      	sub	sp, #24
 80eb7a0:	af00      	add	r7, sp, #0
 80eb7a2:	4603      	mov	r3, r0
 80eb7a4:	60b9      	str	r1, [r7, #8]
 80eb7a6:	607a      	str	r2, [r7, #4]
 80eb7a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80eb7aa:	f7ff ff63 	bl	80eb674 <__NVIC_GetPriorityGrouping>
 80eb7ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80eb7b0:	687a      	ldr	r2, [r7, #4]
 80eb7b2:	68b9      	ldr	r1, [r7, #8]
 80eb7b4:	6978      	ldr	r0, [r7, #20]
 80eb7b6:	f7ff ffb3 	bl	80eb720 <NVIC_EncodePriority>
 80eb7ba:	4602      	mov	r2, r0
 80eb7bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80eb7c0:	4611      	mov	r1, r2
 80eb7c2:	4618      	mov	r0, r3
 80eb7c4:	f7ff ff82 	bl	80eb6cc <__NVIC_SetPriority>
}
 80eb7c8:	bf00      	nop
 80eb7ca:	3718      	adds	r7, #24
 80eb7cc:	46bd      	mov	sp, r7
 80eb7ce:	bd80      	pop	{r7, pc}

080eb7d0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80eb7d0:	b580      	push	{r7, lr}
 80eb7d2:	b082      	sub	sp, #8
 80eb7d4:	af00      	add	r7, sp, #0
 80eb7d6:	4603      	mov	r3, r0
 80eb7d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80eb7da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80eb7de:	4618      	mov	r0, r3
 80eb7e0:	f7ff ff56 	bl	80eb690 <__NVIC_EnableIRQ>
}
 80eb7e4:	bf00      	nop
 80eb7e6:	3708      	adds	r7, #8
 80eb7e8:	46bd      	mov	sp, r7
 80eb7ea:	bd80      	pop	{r7, pc}

080eb7ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80eb7ec:	b480      	push	{r7}
 80eb7ee:	b083      	sub	sp, #12
 80eb7f0:	af00      	add	r7, sp, #0
 80eb7f2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80eb7f4:	687b      	ldr	r3, [r7, #4]
 80eb7f6:	3b01      	subs	r3, #1
 80eb7f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80eb7fc:	d301      	bcc.n	80eb802 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80eb7fe:	2301      	movs	r3, #1
 80eb800:	e00d      	b.n	80eb81e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80eb802:	4a0a      	ldr	r2, [pc, #40]	@ (80eb82c <HAL_SYSTICK_Config+0x40>)
 80eb804:	687b      	ldr	r3, [r7, #4]
 80eb806:	3b01      	subs	r3, #1
 80eb808:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80eb80a:	4b08      	ldr	r3, [pc, #32]	@ (80eb82c <HAL_SYSTICK_Config+0x40>)
 80eb80c:	2200      	movs	r2, #0
 80eb80e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80eb810:	4b06      	ldr	r3, [pc, #24]	@ (80eb82c <HAL_SYSTICK_Config+0x40>)
 80eb812:	681b      	ldr	r3, [r3, #0]
 80eb814:	4a05      	ldr	r2, [pc, #20]	@ (80eb82c <HAL_SYSTICK_Config+0x40>)
 80eb816:	f043 0303 	orr.w	r3, r3, #3
 80eb81a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80eb81c:	2300      	movs	r3, #0
}
 80eb81e:	4618      	mov	r0, r3
 80eb820:	370c      	adds	r7, #12
 80eb822:	46bd      	mov	sp, r7
 80eb824:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb828:	4770      	bx	lr
 80eb82a:	bf00      	nop
 80eb82c:	e000e010 	.word	0xe000e010

080eb830 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80eb830:	b480      	push	{r7}
 80eb832:	b083      	sub	sp, #12
 80eb834:	af00      	add	r7, sp, #0
 80eb836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80eb838:	687b      	ldr	r3, [r7, #4]
 80eb83a:	2b04      	cmp	r3, #4
 80eb83c:	d844      	bhi.n	80eb8c8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80eb83e:	a201      	add	r2, pc, #4	@ (adr r2, 80eb844 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80eb840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80eb844:	080eb867 	.word	0x080eb867
 80eb848:	080eb885 	.word	0x080eb885
 80eb84c:	080eb8a7 	.word	0x080eb8a7
 80eb850:	080eb8c9 	.word	0x080eb8c9
 80eb854:	080eb859 	.word	0x080eb859
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80eb858:	4b1f      	ldr	r3, [pc, #124]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb85a:	681b      	ldr	r3, [r3, #0]
 80eb85c:	4a1e      	ldr	r2, [pc, #120]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb85e:	f043 0304 	orr.w	r3, r3, #4
 80eb862:	6013      	str	r3, [r2, #0]
      break;
 80eb864:	e031      	b.n	80eb8ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80eb866:	4b1c      	ldr	r3, [pc, #112]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb868:	681b      	ldr	r3, [r3, #0]
 80eb86a:	4a1b      	ldr	r2, [pc, #108]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb86c:	f023 0304 	bic.w	r3, r3, #4
 80eb870:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80eb872:	4b1a      	ldr	r3, [pc, #104]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80eb878:	4a18      	ldr	r2, [pc, #96]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb87a:	f023 030c 	bic.w	r3, r3, #12
 80eb87e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80eb882:	e022      	b.n	80eb8ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80eb884:	4b14      	ldr	r3, [pc, #80]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb886:	681b      	ldr	r3, [r3, #0]
 80eb888:	4a13      	ldr	r2, [pc, #76]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb88a:	f023 0304 	bic.w	r3, r3, #4
 80eb88e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80eb890:	4b12      	ldr	r3, [pc, #72]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb892:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80eb896:	f023 030c 	bic.w	r3, r3, #12
 80eb89a:	4a10      	ldr	r2, [pc, #64]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb89c:	f043 0304 	orr.w	r3, r3, #4
 80eb8a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80eb8a4:	e011      	b.n	80eb8ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80eb8a6:	4b0c      	ldr	r3, [pc, #48]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb8a8:	681b      	ldr	r3, [r3, #0]
 80eb8aa:	4a0b      	ldr	r2, [pc, #44]	@ (80eb8d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80eb8ac:	f023 0304 	bic.w	r3, r3, #4
 80eb8b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80eb8b2:	4b0a      	ldr	r3, [pc, #40]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb8b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80eb8b8:	f023 030c 	bic.w	r3, r3, #12
 80eb8bc:	4a07      	ldr	r2, [pc, #28]	@ (80eb8dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80eb8be:	f043 0308 	orr.w	r3, r3, #8
 80eb8c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80eb8c6:	e000      	b.n	80eb8ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80eb8c8:	bf00      	nop
  }
}
 80eb8ca:	bf00      	nop
 80eb8cc:	370c      	adds	r7, #12
 80eb8ce:	46bd      	mov	sp, r7
 80eb8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb8d4:	4770      	bx	lr
 80eb8d6:	bf00      	nop
 80eb8d8:	e000e010 	.word	0xe000e010
 80eb8dc:	44020c00 	.word	0x44020c00

080eb8e0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80eb8e0:	b480      	push	{r7}
 80eb8e2:	b083      	sub	sp, #12
 80eb8e4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80eb8e6:	4b17      	ldr	r3, [pc, #92]	@ (80eb944 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80eb8e8:	681b      	ldr	r3, [r3, #0]
 80eb8ea:	f003 0304 	and.w	r3, r3, #4
 80eb8ee:	2b00      	cmp	r3, #0
 80eb8f0:	d002      	beq.n	80eb8f8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80eb8f2:	2304      	movs	r3, #4
 80eb8f4:	607b      	str	r3, [r7, #4]
 80eb8f6:	e01e      	b.n	80eb936 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80eb8f8:	4b13      	ldr	r3, [pc, #76]	@ (80eb948 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80eb8fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80eb8fe:	f003 030c 	and.w	r3, r3, #12
 80eb902:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80eb904:	683b      	ldr	r3, [r7, #0]
 80eb906:	2b08      	cmp	r3, #8
 80eb908:	d00f      	beq.n	80eb92a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80eb90a:	683b      	ldr	r3, [r7, #0]
 80eb90c:	2b08      	cmp	r3, #8
 80eb90e:	d80f      	bhi.n	80eb930 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80eb910:	683b      	ldr	r3, [r7, #0]
 80eb912:	2b00      	cmp	r3, #0
 80eb914:	d003      	beq.n	80eb91e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80eb916:	683b      	ldr	r3, [r7, #0]
 80eb918:	2b04      	cmp	r3, #4
 80eb91a:	d003      	beq.n	80eb924 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80eb91c:	e008      	b.n	80eb930 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80eb91e:	2300      	movs	r3, #0
 80eb920:	607b      	str	r3, [r7, #4]
        break;
 80eb922:	e008      	b.n	80eb936 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80eb924:	2301      	movs	r3, #1
 80eb926:	607b      	str	r3, [r7, #4]
        break;
 80eb928:	e005      	b.n	80eb936 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80eb92a:	2302      	movs	r3, #2
 80eb92c:	607b      	str	r3, [r7, #4]
        break;
 80eb92e:	e002      	b.n	80eb936 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80eb930:	2300      	movs	r3, #0
 80eb932:	607b      	str	r3, [r7, #4]
        break;
 80eb934:	bf00      	nop
    }
  }
  return systick_source;
 80eb936:	687b      	ldr	r3, [r7, #4]
}
 80eb938:	4618      	mov	r0, r3
 80eb93a:	370c      	adds	r7, #12
 80eb93c:	46bd      	mov	sp, r7
 80eb93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb942:	4770      	bx	lr
 80eb944:	e000e010 	.word	0xe000e010
 80eb948:	44020c00 	.word	0x44020c00

080eb94c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80eb94c:	b480      	push	{r7}
 80eb94e:	b083      	sub	sp, #12
 80eb950:	af00      	add	r7, sp, #0
 80eb952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80eb954:	f3bf 8f5f 	dmb	sy
}
 80eb958:	bf00      	nop
  __DMB(); /* Data Memory Barrier operation to force any outstanding writes to memory before enabling the MPU */

  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80eb95a:	4a0b      	ldr	r2, [pc, #44]	@ (80eb988 <HAL_MPU_Enable+0x3c>)
 80eb95c:	687b      	ldr	r3, [r7, #4]
 80eb95e:	f043 0301 	orr.w	r3, r3, #1
 80eb962:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80eb964:	4b09      	ldr	r3, [pc, #36]	@ (80eb98c <HAL_MPU_Enable+0x40>)
 80eb966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80eb968:	4a08      	ldr	r2, [pc, #32]	@ (80eb98c <HAL_MPU_Enable+0x40>)
 80eb96a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80eb96e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80eb970:	f3bf 8f4f 	dsb	sy
}
 80eb974:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80eb976:	f3bf 8f6f 	isb	sy
}
 80eb97a:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 80eb97c:	bf00      	nop
 80eb97e:	370c      	adds	r7, #12
 80eb980:	46bd      	mov	sp, r7
 80eb982:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb986:	4770      	bx	lr
 80eb988:	e000ed90 	.word	0xe000ed90
 80eb98c:	e000ed00 	.word	0xe000ed00

080eb990 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80eb990:	b480      	push	{r7}
 80eb992:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80eb994:	f3bf 8f5f 	dmb	sy
}
 80eb998:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80eb99a:	4b0b      	ldr	r3, [pc, #44]	@ (80eb9c8 <HAL_MPU_Disable+0x38>)
 80eb99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80eb99e:	4a0a      	ldr	r2, [pc, #40]	@ (80eb9c8 <HAL_MPU_Disable+0x38>)
 80eb9a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80eb9a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 80eb9a6:	4b09      	ldr	r3, [pc, #36]	@ (80eb9cc <HAL_MPU_Disable+0x3c>)
 80eb9a8:	685b      	ldr	r3, [r3, #4]
 80eb9aa:	4a08      	ldr	r2, [pc, #32]	@ (80eb9cc <HAL_MPU_Disable+0x3c>)
 80eb9ac:	f023 0301 	bic.w	r3, r3, #1
 80eb9b0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80eb9b2:	f3bf 8f4f 	dsb	sy
}
 80eb9b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80eb9b8:	f3bf 8f6f 	isb	sy
}
 80eb9bc:	bf00      	nop

  /* Follow ARM recommendation with */
  /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
  __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
  __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
}
 80eb9be:	bf00      	nop
 80eb9c0:	46bd      	mov	sp, r7
 80eb9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eb9c6:	4770      	bx	lr
 80eb9c8:	e000ed00 	.word	0xe000ed00
 80eb9cc:	e000ed90 	.word	0xe000ed90

080eb9d0 <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 80eb9d0:	b580      	push	{r7, lr}
 80eb9d2:	b082      	sub	sp, #8
 80eb9d4:	af00      	add	r7, sp, #0
 80eb9d6:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
 80eb9d8:	6879      	ldr	r1, [r7, #4]
 80eb9da:	4803      	ldr	r0, [pc, #12]	@ (80eb9e8 <HAL_MPU_ConfigRegion+0x18>)
 80eb9dc:	f000 f814 	bl	80eba08 <MPU_ConfigRegion>
}
 80eb9e0:	bf00      	nop
 80eb9e2:	3708      	adds	r7, #8
 80eb9e4:	46bd      	mov	sp, r7
 80eb9e6:	bd80      	pop	{r7, pc}
 80eb9e8:	e000ed90 	.word	0xe000ed90

080eb9ec <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 80eb9ec:	b580      	push	{r7, lr}
 80eb9ee:	b082      	sub	sp, #8
 80eb9f0:	af00      	add	r7, sp, #0
 80eb9f2:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
 80eb9f4:	6879      	ldr	r1, [r7, #4]
 80eb9f6:	4803      	ldr	r0, [pc, #12]	@ (80eba04 <HAL_MPU_ConfigMemoryAttributes+0x18>)
 80eb9f8:	f000 f83d 	bl	80eba76 <MPU_ConfigMemoryAttributes>
}
 80eb9fc:	bf00      	nop
 80eb9fe:	3708      	adds	r7, #8
 80eba00:	46bd      	mov	sp, r7
 80eba02:	bd80      	pop	{r7, pc}
 80eba04:	e000ed90 	.word	0xe000ed90

080eba08 <MPU_ConfigRegion>:
  * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit)
{
 80eba08:	b480      	push	{r7}
 80eba0a:	b083      	sub	sp, #12
 80eba0c:	af00      	add	r7, sp, #0
 80eba0e:	6078      	str	r0, [r7, #4]
 80eba10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80eba12:	f3bf 8f5f 	dmb	sy
}
 80eba16:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
 80eba18:	683b      	ldr	r3, [r7, #0]
 80eba1a:	785b      	ldrb	r3, [r3, #1]
 80eba1c:	461a      	mov	r2, r3
 80eba1e:	687b      	ldr	r3, [r7, #4]
 80eba20:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPUx->RLAR, MPU_RLAR_EN_Msk);
 80eba22:	687b      	ldr	r3, [r7, #4]
 80eba24:	691b      	ldr	r3, [r3, #16]
 80eba26:	f023 0201 	bic.w	r2, r3, #1
 80eba2a:	687b      	ldr	r3, [r7, #4]
 80eba2c:	611a      	str	r2, [r3, #16]

  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80eba2e:	683b      	ldr	r3, [r7, #0]
 80eba30:	685b      	ldr	r3, [r3, #4]
 80eba32:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80eba36:	683b      	ldr	r3, [r7, #0]
 80eba38:	7bdb      	ldrb	r3, [r3, #15]
 80eba3a:	00db      	lsls	r3, r3, #3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80eba3c:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80eba3e:	683b      	ldr	r3, [r7, #0]
 80eba40:	7b5b      	ldrb	r3, [r3, #13]
 80eba42:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
 80eba44:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->DisableExec           << MPU_RBAR_XN_Pos));
 80eba46:	683a      	ldr	r2, [r7, #0]
 80eba48:	7b92      	ldrb	r2, [r2, #14]
                ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
 80eba4a:	431a      	orrs	r2, r3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
 80eba4c:	687b      	ldr	r3, [r7, #4]
 80eba4e:	60da      	str	r2, [r3, #12]

  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80eba50:	683b      	ldr	r3, [r7, #0]
 80eba52:	689b      	ldr	r3, [r3, #8]
 80eba54:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80eba58:	683b      	ldr	r3, [r7, #0]
 80eba5a:	7b1b      	ldrb	r3, [r3, #12]
 80eba5c:	005b      	lsls	r3, r3, #1
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80eba5e:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->Enable                << MPU_RLAR_EN_Pos));
 80eba60:	683a      	ldr	r2, [r7, #0]
 80eba62:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
 80eba64:	431a      	orrs	r2, r3
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
 80eba66:	687b      	ldr	r3, [r7, #4]
 80eba68:	611a      	str	r2, [r3, #16]
}
 80eba6a:	bf00      	nop
 80eba6c:	370c      	adds	r7, #12
 80eba6e:	46bd      	mov	sp, r7
 80eba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eba74:	4770      	bx	lr

080eba76 <MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
{
 80eba76:	b480      	push	{r7}
 80eba78:	b087      	sub	sp, #28
 80eba7a:	af00      	add	r7, sp, #0
 80eba7c:	6078      	str	r0, [r7, #4]
 80eba7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80eba80:	f3bf 8f5f 	dmb	sy
}
 80eba84:	bf00      	nop
  /* No need to check Attributes value as all 0x0..0xFF possible */

  /* Follow ARM recommendation with Data Memory Barrier prior to MPUx configuration */
  __DMB();

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
 80eba86:	683b      	ldr	r3, [r7, #0]
 80eba88:	781b      	ldrb	r3, [r3, #0]
 80eba8a:	2b03      	cmp	r3, #3
 80eba8c:	d806      	bhi.n	80eba9c <MPU_ConfigMemoryAttributes+0x26>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
 80eba8e:	687b      	ldr	r3, [r7, #4]
 80eba90:	3330      	adds	r3, #48	@ 0x30
 80eba92:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
 80eba94:	683b      	ldr	r3, [r7, #0]
 80eba96:	781b      	ldrb	r3, [r3, #0]
 80eba98:	613b      	str	r3, [r7, #16]
 80eba9a:	e006      	b.n	80ebaaa <MPU_ConfigMemoryAttributes+0x34>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
 80eba9c:	687b      	ldr	r3, [r7, #4]
 80eba9e:	3334      	adds	r3, #52	@ 0x34
 80ebaa0:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
 80ebaa2:	683b      	ldr	r3, [r7, #0]
 80ebaa4:	781b      	ldrb	r3, [r3, #0]
 80ebaa6:	3b04      	subs	r3, #4
 80ebaa8:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
 80ebaaa:	697b      	ldr	r3, [r7, #20]
 80ebaac:	681b      	ldr	r3, [r3, #0]
 80ebaae:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFUL << (attr_number * 8U));
 80ebab0:	693b      	ldr	r3, [r7, #16]
 80ebab2:	00db      	lsls	r3, r3, #3
 80ebab4:	22ff      	movs	r2, #255	@ 0xff
 80ebab6:	fa02 f303 	lsl.w	r3, r2, r3
 80ebaba:	43db      	mvns	r3, r3
 80ebabc:	68fa      	ldr	r2, [r7, #12]
 80ebabe:	4013      	ands	r3, r2
 80ebac0:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
 80ebac2:	683b      	ldr	r3, [r7, #0]
 80ebac4:	785b      	ldrb	r3, [r3, #1]
 80ebac6:	461a      	mov	r2, r3
 80ebac8:	693b      	ldr	r3, [r7, #16]
 80ebaca:	00db      	lsls	r3, r3, #3
 80ebacc:	409a      	lsls	r2, r3
 80ebace:	68fb      	ldr	r3, [r7, #12]
 80ebad0:	431a      	orrs	r2, r3
 80ebad2:	697b      	ldr	r3, [r7, #20]
 80ebad4:	601a      	str	r2, [r3, #0]
}
 80ebad6:	bf00      	nop
 80ebad8:	371c      	adds	r7, #28
 80ebada:	46bd      	mov	sp, r7
 80ebadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ebae0:	4770      	bx	lr
	...

080ebae4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80ebae4:	b580      	push	{r7, lr}
 80ebae6:	b082      	sub	sp, #8
 80ebae8:	af00      	add	r7, sp, #0
 80ebaea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80ebaec:	687b      	ldr	r3, [r7, #4]
 80ebaee:	2b00      	cmp	r3, #0
 80ebaf0:	d101      	bne.n	80ebaf6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80ebaf2:	2301      	movs	r3, #1
 80ebaf4:	e054      	b.n	80ebba0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80ebaf6:	687b      	ldr	r3, [r7, #4]
 80ebaf8:	7f5b      	ldrb	r3, [r3, #29]
 80ebafa:	b2db      	uxtb	r3, r3
 80ebafc:	2b00      	cmp	r3, #0
 80ebafe:	d105      	bne.n	80ebb0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80ebb00:	687b      	ldr	r3, [r7, #4]
 80ebb02:	2200      	movs	r2, #0
 80ebb04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80ebb06:	6878      	ldr	r0, [r7, #4]
 80ebb08:	f7fc fec0 	bl	80e888c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80ebb0c:	687b      	ldr	r3, [r7, #4]
 80ebb0e:	2202      	movs	r2, #2
 80ebb10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80ebb12:	687b      	ldr	r3, [r7, #4]
 80ebb14:	791b      	ldrb	r3, [r3, #4]
 80ebb16:	2b00      	cmp	r3, #0
 80ebb18:	d10c      	bne.n	80ebb34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80ebb1a:	687b      	ldr	r3, [r7, #4]
 80ebb1c:	681b      	ldr	r3, [r3, #0]
 80ebb1e:	4a22      	ldr	r2, [pc, #136]	@ (80ebba8 <HAL_CRC_Init+0xc4>)
 80ebb20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80ebb22:	687b      	ldr	r3, [r7, #4]
 80ebb24:	681b      	ldr	r3, [r3, #0]
 80ebb26:	689a      	ldr	r2, [r3, #8]
 80ebb28:	687b      	ldr	r3, [r7, #4]
 80ebb2a:	681b      	ldr	r3, [r3, #0]
 80ebb2c:	f022 0218 	bic.w	r2, r2, #24
 80ebb30:	609a      	str	r2, [r3, #8]
 80ebb32:	e00c      	b.n	80ebb4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80ebb34:	687b      	ldr	r3, [r7, #4]
 80ebb36:	6899      	ldr	r1, [r3, #8]
 80ebb38:	687b      	ldr	r3, [r7, #4]
 80ebb3a:	68db      	ldr	r3, [r3, #12]
 80ebb3c:	461a      	mov	r2, r3
 80ebb3e:	6878      	ldr	r0, [r7, #4]
 80ebb40:	f000 f978 	bl	80ebe34 <HAL_CRCEx_Polynomial_Set>
 80ebb44:	4603      	mov	r3, r0
 80ebb46:	2b00      	cmp	r3, #0
 80ebb48:	d001      	beq.n	80ebb4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80ebb4a:	2301      	movs	r3, #1
 80ebb4c:	e028      	b.n	80ebba0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80ebb4e:	687b      	ldr	r3, [r7, #4]
 80ebb50:	795b      	ldrb	r3, [r3, #5]
 80ebb52:	2b00      	cmp	r3, #0
 80ebb54:	d105      	bne.n	80ebb62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80ebb56:	687b      	ldr	r3, [r7, #4]
 80ebb58:	681b      	ldr	r3, [r3, #0]
 80ebb5a:	f04f 32ff 	mov.w	r2, #4294967295
 80ebb5e:	611a      	str	r2, [r3, #16]
 80ebb60:	e004      	b.n	80ebb6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80ebb62:	687b      	ldr	r3, [r7, #4]
 80ebb64:	681b      	ldr	r3, [r3, #0]
 80ebb66:	687a      	ldr	r2, [r7, #4]
 80ebb68:	6912      	ldr	r2, [r2, #16]
 80ebb6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80ebb6c:	687b      	ldr	r3, [r7, #4]
 80ebb6e:	681b      	ldr	r3, [r3, #0]
 80ebb70:	689b      	ldr	r3, [r3, #8]
 80ebb72:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80ebb76:	687b      	ldr	r3, [r7, #4]
 80ebb78:	695a      	ldr	r2, [r3, #20]
 80ebb7a:	687b      	ldr	r3, [r7, #4]
 80ebb7c:	681b      	ldr	r3, [r3, #0]
 80ebb7e:	430a      	orrs	r2, r1
 80ebb80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80ebb82:	687b      	ldr	r3, [r7, #4]
 80ebb84:	681b      	ldr	r3, [r3, #0]
 80ebb86:	689b      	ldr	r3, [r3, #8]
 80ebb88:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80ebb8c:	687b      	ldr	r3, [r7, #4]
 80ebb8e:	699a      	ldr	r2, [r3, #24]
 80ebb90:	687b      	ldr	r3, [r7, #4]
 80ebb92:	681b      	ldr	r3, [r3, #0]
 80ebb94:	430a      	orrs	r2, r1
 80ebb96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80ebb98:	687b      	ldr	r3, [r7, #4]
 80ebb9a:	2201      	movs	r2, #1
 80ebb9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80ebb9e:	2300      	movs	r3, #0
}
 80ebba0:	4618      	mov	r0, r3
 80ebba2:	3708      	adds	r7, #8
 80ebba4:	46bd      	mov	sp, r7
 80ebba6:	bd80      	pop	{r7, pc}
 80ebba8:	04c11db7 	.word	0x04c11db7

080ebbac <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80ebbac:	b580      	push	{r7, lr}
 80ebbae:	b082      	sub	sp, #8
 80ebbb0:	af00      	add	r7, sp, #0
 80ebbb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80ebbb4:	687b      	ldr	r3, [r7, #4]
 80ebbb6:	2b00      	cmp	r3, #0
 80ebbb8:	d101      	bne.n	80ebbbe <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80ebbba:	2301      	movs	r3, #1
 80ebbbc:	e01f      	b.n	80ebbfe <HAL_CRC_DeInit+0x52>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80ebbbe:	687b      	ldr	r3, [r7, #4]
 80ebbc0:	7f5b      	ldrb	r3, [r3, #29]
 80ebbc2:	b2db      	uxtb	r3, r3
 80ebbc4:	2b02      	cmp	r3, #2
 80ebbc6:	d101      	bne.n	80ebbcc <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80ebbc8:	2302      	movs	r3, #2
 80ebbca:	e018      	b.n	80ebbfe <HAL_CRC_DeInit+0x52>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80ebbcc:	687b      	ldr	r3, [r7, #4]
 80ebbce:	2202      	movs	r2, #2
 80ebbd0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80ebbd2:	687b      	ldr	r3, [r7, #4]
 80ebbd4:	681b      	ldr	r3, [r3, #0]
 80ebbd6:	689a      	ldr	r2, [r3, #8]
 80ebbd8:	687b      	ldr	r3, [r7, #4]
 80ebbda:	681b      	ldr	r3, [r3, #0]
 80ebbdc:	f042 0201 	orr.w	r2, r2, #1
 80ebbe0:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_REG(hcrc->Instance->IDR);
 80ebbe2:	687b      	ldr	r3, [r7, #4]
 80ebbe4:	681b      	ldr	r3, [r3, #0]
 80ebbe6:	2200      	movs	r2, #0
 80ebbe8:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80ebbea:	6878      	ldr	r0, [r7, #4]
 80ebbec:	f7fc fe70 	bl	80e88d0 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80ebbf0:	687b      	ldr	r3, [r7, #4]
 80ebbf2:	2200      	movs	r2, #0
 80ebbf4:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80ebbf6:	687b      	ldr	r3, [r7, #4]
 80ebbf8:	2200      	movs	r2, #0
 80ebbfa:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80ebbfc:	2300      	movs	r3, #0
}
 80ebbfe:	4618      	mov	r0, r3
 80ebc00:	3708      	adds	r7, #8
 80ebc02:	46bd      	mov	sp, r7
 80ebc04:	bd80      	pop	{r7, pc}

080ebc06 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80ebc06:	b580      	push	{r7, lr}
 80ebc08:	b086      	sub	sp, #24
 80ebc0a:	af00      	add	r7, sp, #0
 80ebc0c:	60f8      	str	r0, [r7, #12]
 80ebc0e:	60b9      	str	r1, [r7, #8]
 80ebc10:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80ebc12:	2300      	movs	r3, #0
 80ebc14:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80ebc16:	68fb      	ldr	r3, [r7, #12]
 80ebc18:	2202      	movs	r2, #2
 80ebc1a:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80ebc1c:	68fb      	ldr	r3, [r7, #12]
 80ebc1e:	681b      	ldr	r3, [r3, #0]
 80ebc20:	689a      	ldr	r2, [r3, #8]
 80ebc22:	68fb      	ldr	r3, [r7, #12]
 80ebc24:	681b      	ldr	r3, [r3, #0]
 80ebc26:	f042 0201 	orr.w	r2, r2, #1
 80ebc2a:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80ebc2c:	68fb      	ldr	r3, [r7, #12]
 80ebc2e:	6a1b      	ldr	r3, [r3, #32]
 80ebc30:	2b03      	cmp	r3, #3
 80ebc32:	d006      	beq.n	80ebc42 <HAL_CRC_Calculate+0x3c>
 80ebc34:	2b03      	cmp	r3, #3
 80ebc36:	d829      	bhi.n	80ebc8c <HAL_CRC_Calculate+0x86>
 80ebc38:	2b01      	cmp	r3, #1
 80ebc3a:	d019      	beq.n	80ebc70 <HAL_CRC_Calculate+0x6a>
 80ebc3c:	2b02      	cmp	r3, #2
 80ebc3e:	d01e      	beq.n	80ebc7e <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80ebc40:	e024      	b.n	80ebc8c <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80ebc42:	2300      	movs	r3, #0
 80ebc44:	617b      	str	r3, [r7, #20]
 80ebc46:	e00a      	b.n	80ebc5e <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80ebc48:	697b      	ldr	r3, [r7, #20]
 80ebc4a:	009b      	lsls	r3, r3, #2
 80ebc4c:	68ba      	ldr	r2, [r7, #8]
 80ebc4e:	441a      	add	r2, r3
 80ebc50:	68fb      	ldr	r3, [r7, #12]
 80ebc52:	681b      	ldr	r3, [r3, #0]
 80ebc54:	6812      	ldr	r2, [r2, #0]
 80ebc56:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80ebc58:	697b      	ldr	r3, [r7, #20]
 80ebc5a:	3301      	adds	r3, #1
 80ebc5c:	617b      	str	r3, [r7, #20]
 80ebc5e:	697a      	ldr	r2, [r7, #20]
 80ebc60:	687b      	ldr	r3, [r7, #4]
 80ebc62:	429a      	cmp	r2, r3
 80ebc64:	d3f0      	bcc.n	80ebc48 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80ebc66:	68fb      	ldr	r3, [r7, #12]
 80ebc68:	681b      	ldr	r3, [r3, #0]
 80ebc6a:	681b      	ldr	r3, [r3, #0]
 80ebc6c:	613b      	str	r3, [r7, #16]
      break;
 80ebc6e:	e00e      	b.n	80ebc8e <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80ebc70:	687a      	ldr	r2, [r7, #4]
 80ebc72:	68b9      	ldr	r1, [r7, #8]
 80ebc74:	68f8      	ldr	r0, [r7, #12]
 80ebc76:	f000 f812 	bl	80ebc9e <CRC_Handle_8>
 80ebc7a:	6138      	str	r0, [r7, #16]
      break;
 80ebc7c:	e007      	b.n	80ebc8e <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80ebc7e:	687a      	ldr	r2, [r7, #4]
 80ebc80:	68b9      	ldr	r1, [r7, #8]
 80ebc82:	68f8      	ldr	r0, [r7, #12]
 80ebc84:	f000 f89b 	bl	80ebdbe <CRC_Handle_16>
 80ebc88:	6138      	str	r0, [r7, #16]
      break;
 80ebc8a:	e000      	b.n	80ebc8e <HAL_CRC_Calculate+0x88>
      break;
 80ebc8c:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80ebc8e:	68fb      	ldr	r3, [r7, #12]
 80ebc90:	2201      	movs	r2, #1
 80ebc92:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80ebc94:	693b      	ldr	r3, [r7, #16]
}
 80ebc96:	4618      	mov	r0, r3
 80ebc98:	3718      	adds	r7, #24
 80ebc9a:	46bd      	mov	sp, r7
 80ebc9c:	bd80      	pop	{r7, pc}

080ebc9e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80ebc9e:	b480      	push	{r7}
 80ebca0:	b089      	sub	sp, #36	@ 0x24
 80ebca2:	af00      	add	r7, sp, #0
 80ebca4:	60f8      	str	r0, [r7, #12]
 80ebca6:	60b9      	str	r1, [r7, #8]
 80ebca8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80ebcaa:	2300      	movs	r3, #0
 80ebcac:	61fb      	str	r3, [r7, #28]
 80ebcae:	e023      	b.n	80ebcf8 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80ebcb0:	69fb      	ldr	r3, [r7, #28]
 80ebcb2:	009b      	lsls	r3, r3, #2
 80ebcb4:	68ba      	ldr	r2, [r7, #8]
 80ebcb6:	4413      	add	r3, r2
 80ebcb8:	781b      	ldrb	r3, [r3, #0]
 80ebcba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80ebcbc:	69fb      	ldr	r3, [r7, #28]
 80ebcbe:	009b      	lsls	r3, r3, #2
 80ebcc0:	3301      	adds	r3, #1
 80ebcc2:	68b9      	ldr	r1, [r7, #8]
 80ebcc4:	440b      	add	r3, r1
 80ebcc6:	781b      	ldrb	r3, [r3, #0]
 80ebcc8:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80ebcca:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80ebccc:	69fb      	ldr	r3, [r7, #28]
 80ebcce:	009b      	lsls	r3, r3, #2
 80ebcd0:	3302      	adds	r3, #2
 80ebcd2:	68b9      	ldr	r1, [r7, #8]
 80ebcd4:	440b      	add	r3, r1
 80ebcd6:	781b      	ldrb	r3, [r3, #0]
 80ebcd8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80ebcda:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80ebcdc:	69fb      	ldr	r3, [r7, #28]
 80ebcde:	009b      	lsls	r3, r3, #2
 80ebce0:	3303      	adds	r3, #3
 80ebce2:	68b9      	ldr	r1, [r7, #8]
 80ebce4:	440b      	add	r3, r1
 80ebce6:	781b      	ldrb	r3, [r3, #0]
 80ebce8:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80ebcea:	68fb      	ldr	r3, [r7, #12]
 80ebcec:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80ebcee:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80ebcf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80ebcf2:	69fb      	ldr	r3, [r7, #28]
 80ebcf4:	3301      	adds	r3, #1
 80ebcf6:	61fb      	str	r3, [r7, #28]
 80ebcf8:	687b      	ldr	r3, [r7, #4]
 80ebcfa:	089b      	lsrs	r3, r3, #2
 80ebcfc:	69fa      	ldr	r2, [r7, #28]
 80ebcfe:	429a      	cmp	r2, r3
 80ebd00:	d3d6      	bcc.n	80ebcb0 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80ebd02:	687b      	ldr	r3, [r7, #4]
 80ebd04:	f003 0303 	and.w	r3, r3, #3
 80ebd08:	2b00      	cmp	r3, #0
 80ebd0a:	d04f      	beq.n	80ebdac <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80ebd0c:	687b      	ldr	r3, [r7, #4]
 80ebd0e:	f003 0303 	and.w	r3, r3, #3
 80ebd12:	2b01      	cmp	r3, #1
 80ebd14:	d107      	bne.n	80ebd26 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80ebd16:	69fb      	ldr	r3, [r7, #28]
 80ebd18:	009b      	lsls	r3, r3, #2
 80ebd1a:	68ba      	ldr	r2, [r7, #8]
 80ebd1c:	4413      	add	r3, r2
 80ebd1e:	68fa      	ldr	r2, [r7, #12]
 80ebd20:	6812      	ldr	r2, [r2, #0]
 80ebd22:	781b      	ldrb	r3, [r3, #0]
 80ebd24:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80ebd26:	687b      	ldr	r3, [r7, #4]
 80ebd28:	f003 0303 	and.w	r3, r3, #3
 80ebd2c:	2b02      	cmp	r3, #2
 80ebd2e:	d117      	bne.n	80ebd60 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80ebd30:	69fb      	ldr	r3, [r7, #28]
 80ebd32:	009b      	lsls	r3, r3, #2
 80ebd34:	68ba      	ldr	r2, [r7, #8]
 80ebd36:	4413      	add	r3, r2
 80ebd38:	781b      	ldrb	r3, [r3, #0]
 80ebd3a:	b21b      	sxth	r3, r3
 80ebd3c:	021b      	lsls	r3, r3, #8
 80ebd3e:	b21a      	sxth	r2, r3
 80ebd40:	69fb      	ldr	r3, [r7, #28]
 80ebd42:	009b      	lsls	r3, r3, #2
 80ebd44:	3301      	adds	r3, #1
 80ebd46:	68b9      	ldr	r1, [r7, #8]
 80ebd48:	440b      	add	r3, r1
 80ebd4a:	781b      	ldrb	r3, [r3, #0]
 80ebd4c:	b21b      	sxth	r3, r3
 80ebd4e:	4313      	orrs	r3, r2
 80ebd50:	b21b      	sxth	r3, r3
 80ebd52:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80ebd54:	68fb      	ldr	r3, [r7, #12]
 80ebd56:	681b      	ldr	r3, [r3, #0]
 80ebd58:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80ebd5a:	697b      	ldr	r3, [r7, #20]
 80ebd5c:	8b7a      	ldrh	r2, [r7, #26]
 80ebd5e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80ebd60:	687b      	ldr	r3, [r7, #4]
 80ebd62:	f003 0303 	and.w	r3, r3, #3
 80ebd66:	2b03      	cmp	r3, #3
 80ebd68:	d120      	bne.n	80ebdac <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80ebd6a:	69fb      	ldr	r3, [r7, #28]
 80ebd6c:	009b      	lsls	r3, r3, #2
 80ebd6e:	68ba      	ldr	r2, [r7, #8]
 80ebd70:	4413      	add	r3, r2
 80ebd72:	781b      	ldrb	r3, [r3, #0]
 80ebd74:	b21b      	sxth	r3, r3
 80ebd76:	021b      	lsls	r3, r3, #8
 80ebd78:	b21a      	sxth	r2, r3
 80ebd7a:	69fb      	ldr	r3, [r7, #28]
 80ebd7c:	009b      	lsls	r3, r3, #2
 80ebd7e:	3301      	adds	r3, #1
 80ebd80:	68b9      	ldr	r1, [r7, #8]
 80ebd82:	440b      	add	r3, r1
 80ebd84:	781b      	ldrb	r3, [r3, #0]
 80ebd86:	b21b      	sxth	r3, r3
 80ebd88:	4313      	orrs	r3, r2
 80ebd8a:	b21b      	sxth	r3, r3
 80ebd8c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80ebd8e:	68fb      	ldr	r3, [r7, #12]
 80ebd90:	681b      	ldr	r3, [r3, #0]
 80ebd92:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80ebd94:	697b      	ldr	r3, [r7, #20]
 80ebd96:	8b7a      	ldrh	r2, [r7, #26]
 80ebd98:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80ebd9a:	69fb      	ldr	r3, [r7, #28]
 80ebd9c:	009b      	lsls	r3, r3, #2
 80ebd9e:	3302      	adds	r3, #2
 80ebda0:	68ba      	ldr	r2, [r7, #8]
 80ebda2:	4413      	add	r3, r2
 80ebda4:	68fa      	ldr	r2, [r7, #12]
 80ebda6:	6812      	ldr	r2, [r2, #0]
 80ebda8:	781b      	ldrb	r3, [r3, #0]
 80ebdaa:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80ebdac:	68fb      	ldr	r3, [r7, #12]
 80ebdae:	681b      	ldr	r3, [r3, #0]
 80ebdb0:	681b      	ldr	r3, [r3, #0]
}
 80ebdb2:	4618      	mov	r0, r3
 80ebdb4:	3724      	adds	r7, #36	@ 0x24
 80ebdb6:	46bd      	mov	sp, r7
 80ebdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ebdbc:	4770      	bx	lr

080ebdbe <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80ebdbe:	b480      	push	{r7}
 80ebdc0:	b087      	sub	sp, #28
 80ebdc2:	af00      	add	r7, sp, #0
 80ebdc4:	60f8      	str	r0, [r7, #12]
 80ebdc6:	60b9      	str	r1, [r7, #8]
 80ebdc8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80ebdca:	2300      	movs	r3, #0
 80ebdcc:	617b      	str	r3, [r7, #20]
 80ebdce:	e013      	b.n	80ebdf8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80ebdd0:	697b      	ldr	r3, [r7, #20]
 80ebdd2:	009b      	lsls	r3, r3, #2
 80ebdd4:	68ba      	ldr	r2, [r7, #8]
 80ebdd6:	4413      	add	r3, r2
 80ebdd8:	881b      	ldrh	r3, [r3, #0]
 80ebdda:	041a      	lsls	r2, r3, #16
 80ebddc:	697b      	ldr	r3, [r7, #20]
 80ebdde:	009b      	lsls	r3, r3, #2
 80ebde0:	3302      	adds	r3, #2
 80ebde2:	68b9      	ldr	r1, [r7, #8]
 80ebde4:	440b      	add	r3, r1
 80ebde6:	881b      	ldrh	r3, [r3, #0]
 80ebde8:	4619      	mov	r1, r3
 80ebdea:	68fb      	ldr	r3, [r7, #12]
 80ebdec:	681b      	ldr	r3, [r3, #0]
 80ebdee:	430a      	orrs	r2, r1
 80ebdf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80ebdf2:	697b      	ldr	r3, [r7, #20]
 80ebdf4:	3301      	adds	r3, #1
 80ebdf6:	617b      	str	r3, [r7, #20]
 80ebdf8:	687b      	ldr	r3, [r7, #4]
 80ebdfa:	085b      	lsrs	r3, r3, #1
 80ebdfc:	697a      	ldr	r2, [r7, #20]
 80ebdfe:	429a      	cmp	r2, r3
 80ebe00:	d3e6      	bcc.n	80ebdd0 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80ebe02:	687b      	ldr	r3, [r7, #4]
 80ebe04:	f003 0301 	and.w	r3, r3, #1
 80ebe08:	2b00      	cmp	r3, #0
 80ebe0a:	d009      	beq.n	80ebe20 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80ebe0c:	68fb      	ldr	r3, [r7, #12]
 80ebe0e:	681b      	ldr	r3, [r3, #0]
 80ebe10:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80ebe12:	697b      	ldr	r3, [r7, #20]
 80ebe14:	009b      	lsls	r3, r3, #2
 80ebe16:	68ba      	ldr	r2, [r7, #8]
 80ebe18:	4413      	add	r3, r2
 80ebe1a:	881a      	ldrh	r2, [r3, #0]
 80ebe1c:	693b      	ldr	r3, [r7, #16]
 80ebe1e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80ebe20:	68fb      	ldr	r3, [r7, #12]
 80ebe22:	681b      	ldr	r3, [r3, #0]
 80ebe24:	681b      	ldr	r3, [r3, #0]
}
 80ebe26:	4618      	mov	r0, r3
 80ebe28:	371c      	adds	r7, #28
 80ebe2a:	46bd      	mov	sp, r7
 80ebe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ebe30:	4770      	bx	lr
	...

080ebe34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80ebe34:	b480      	push	{r7}
 80ebe36:	b087      	sub	sp, #28
 80ebe38:	af00      	add	r7, sp, #0
 80ebe3a:	60f8      	str	r0, [r7, #12]
 80ebe3c:	60b9      	str	r1, [r7, #8]
 80ebe3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80ebe40:	2300      	movs	r3, #0
 80ebe42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80ebe44:	231f      	movs	r3, #31
 80ebe46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80ebe48:	68bb      	ldr	r3, [r7, #8]
 80ebe4a:	f003 0301 	and.w	r3, r3, #1
 80ebe4e:	2b00      	cmp	r3, #0
 80ebe50:	d102      	bne.n	80ebe58 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80ebe52:	2301      	movs	r3, #1
 80ebe54:	75fb      	strb	r3, [r7, #23]
 80ebe56:	e063      	b.n	80ebf20 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80ebe58:	bf00      	nop
 80ebe5a:	693b      	ldr	r3, [r7, #16]
 80ebe5c:	1e5a      	subs	r2, r3, #1
 80ebe5e:	613a      	str	r2, [r7, #16]
 80ebe60:	2b00      	cmp	r3, #0
 80ebe62:	d009      	beq.n	80ebe78 <HAL_CRCEx_Polynomial_Set+0x44>
 80ebe64:	693b      	ldr	r3, [r7, #16]
 80ebe66:	f003 031f 	and.w	r3, r3, #31
 80ebe6a:	68ba      	ldr	r2, [r7, #8]
 80ebe6c:	fa22 f303 	lsr.w	r3, r2, r3
 80ebe70:	f003 0301 	and.w	r3, r3, #1
 80ebe74:	2b00      	cmp	r3, #0
 80ebe76:	d0f0      	beq.n	80ebe5a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80ebe78:	687b      	ldr	r3, [r7, #4]
 80ebe7a:	2b18      	cmp	r3, #24
 80ebe7c:	d846      	bhi.n	80ebf0c <HAL_CRCEx_Polynomial_Set+0xd8>
 80ebe7e:	a201      	add	r2, pc, #4	@ (adr r2, 80ebe84 <HAL_CRCEx_Polynomial_Set+0x50>)
 80ebe80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80ebe84:	080ebf13 	.word	0x080ebf13
 80ebe88:	080ebf0d 	.word	0x080ebf0d
 80ebe8c:	080ebf0d 	.word	0x080ebf0d
 80ebe90:	080ebf0d 	.word	0x080ebf0d
 80ebe94:	080ebf0d 	.word	0x080ebf0d
 80ebe98:	080ebf0d 	.word	0x080ebf0d
 80ebe9c:	080ebf0d 	.word	0x080ebf0d
 80ebea0:	080ebf0d 	.word	0x080ebf0d
 80ebea4:	080ebf01 	.word	0x080ebf01
 80ebea8:	080ebf0d 	.word	0x080ebf0d
 80ebeac:	080ebf0d 	.word	0x080ebf0d
 80ebeb0:	080ebf0d 	.word	0x080ebf0d
 80ebeb4:	080ebf0d 	.word	0x080ebf0d
 80ebeb8:	080ebf0d 	.word	0x080ebf0d
 80ebebc:	080ebf0d 	.word	0x080ebf0d
 80ebec0:	080ebf0d 	.word	0x080ebf0d
 80ebec4:	080ebef5 	.word	0x080ebef5
 80ebec8:	080ebf0d 	.word	0x080ebf0d
 80ebecc:	080ebf0d 	.word	0x080ebf0d
 80ebed0:	080ebf0d 	.word	0x080ebf0d
 80ebed4:	080ebf0d 	.word	0x080ebf0d
 80ebed8:	080ebf0d 	.word	0x080ebf0d
 80ebedc:	080ebf0d 	.word	0x080ebf0d
 80ebee0:	080ebf0d 	.word	0x080ebf0d
 80ebee4:	080ebee9 	.word	0x080ebee9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80ebee8:	693b      	ldr	r3, [r7, #16]
 80ebeea:	2b06      	cmp	r3, #6
 80ebeec:	d913      	bls.n	80ebf16 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80ebeee:	2301      	movs	r3, #1
 80ebef0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80ebef2:	e010      	b.n	80ebf16 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80ebef4:	693b      	ldr	r3, [r7, #16]
 80ebef6:	2b07      	cmp	r3, #7
 80ebef8:	d90f      	bls.n	80ebf1a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80ebefa:	2301      	movs	r3, #1
 80ebefc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80ebefe:	e00c      	b.n	80ebf1a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80ebf00:	693b      	ldr	r3, [r7, #16]
 80ebf02:	2b0f      	cmp	r3, #15
 80ebf04:	d90b      	bls.n	80ebf1e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80ebf06:	2301      	movs	r3, #1
 80ebf08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80ebf0a:	e008      	b.n	80ebf1e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80ebf0c:	2301      	movs	r3, #1
 80ebf0e:	75fb      	strb	r3, [r7, #23]
        break;
 80ebf10:	e006      	b.n	80ebf20 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80ebf12:	bf00      	nop
 80ebf14:	e004      	b.n	80ebf20 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80ebf16:	bf00      	nop
 80ebf18:	e002      	b.n	80ebf20 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80ebf1a:	bf00      	nop
 80ebf1c:	e000      	b.n	80ebf20 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80ebf1e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80ebf20:	7dfb      	ldrb	r3, [r7, #23]
 80ebf22:	2b00      	cmp	r3, #0
 80ebf24:	d10d      	bne.n	80ebf42 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80ebf26:	68fb      	ldr	r3, [r7, #12]
 80ebf28:	681b      	ldr	r3, [r3, #0]
 80ebf2a:	68ba      	ldr	r2, [r7, #8]
 80ebf2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80ebf2e:	68fb      	ldr	r3, [r7, #12]
 80ebf30:	681b      	ldr	r3, [r3, #0]
 80ebf32:	689b      	ldr	r3, [r3, #8]
 80ebf34:	f023 0118 	bic.w	r1, r3, #24
 80ebf38:	68fb      	ldr	r3, [r7, #12]
 80ebf3a:	681b      	ldr	r3, [r3, #0]
 80ebf3c:	687a      	ldr	r2, [r7, #4]
 80ebf3e:	430a      	orrs	r2, r1
 80ebf40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80ebf42:	7dfb      	ldrb	r3, [r7, #23]
}
 80ebf44:	4618      	mov	r0, r3
 80ebf46:	371c      	adds	r7, #28
 80ebf48:	46bd      	mov	sp, r7
 80ebf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ebf4e:	4770      	bx	lr

080ebf50 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80ebf50:	b580      	push	{r7, lr}
 80ebf52:	b082      	sub	sp, #8
 80ebf54:	af00      	add	r7, sp, #0
 80ebf56:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80ebf58:	687b      	ldr	r3, [r7, #4]
 80ebf5a:	2b00      	cmp	r3, #0
 80ebf5c:	d101      	bne.n	80ebf62 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80ebf5e:	2301      	movs	r3, #1
 80ebf60:	e014      	b.n	80ebf8c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80ebf62:	687b      	ldr	r3, [r7, #4]
 80ebf64:	791b      	ldrb	r3, [r3, #4]
 80ebf66:	b2db      	uxtb	r3, r3
 80ebf68:	2b00      	cmp	r3, #0
 80ebf6a:	d105      	bne.n	80ebf78 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80ebf6c:	687b      	ldr	r3, [r7, #4]
 80ebf6e:	2200      	movs	r2, #0
 80ebf70:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80ebf72:	6878      	ldr	r0, [r7, #4]
 80ebf74:	f7fc fd0a 	bl	80e898c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80ebf78:	687b      	ldr	r3, [r7, #4]
 80ebf7a:	2202      	movs	r2, #2
 80ebf7c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80ebf7e:	687b      	ldr	r3, [r7, #4]
 80ebf80:	2200      	movs	r2, #0
 80ebf82:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80ebf84:	687b      	ldr	r3, [r7, #4]
 80ebf86:	2201      	movs	r2, #1
 80ebf88:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80ebf8a:	2300      	movs	r3, #0
}
 80ebf8c:	4618      	mov	r0, r3
 80ebf8e:	3708      	adds	r7, #8
 80ebf90:	46bd      	mov	sp, r7
 80ebf92:	bd80      	pop	{r7, pc}

080ebf94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80ebf94:	b580      	push	{r7, lr}
 80ebf96:	b08a      	sub	sp, #40	@ 0x28
 80ebf98:	af00      	add	r7, sp, #0
 80ebf9a:	60f8      	str	r0, [r7, #12]
 80ebf9c:	60b9      	str	r1, [r7, #8]
 80ebf9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80ebfa0:	2300      	movs	r3, #0
 80ebfa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80ebfa4:	68fb      	ldr	r3, [r7, #12]
 80ebfa6:	2b00      	cmp	r3, #0
 80ebfa8:	d002      	beq.n	80ebfb0 <HAL_DAC_ConfigChannel+0x1c>
 80ebfaa:	68bb      	ldr	r3, [r7, #8]
 80ebfac:	2b00      	cmp	r3, #0
 80ebfae:	d101      	bne.n	80ebfb4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80ebfb0:	2301      	movs	r3, #1
 80ebfb2:	e17c      	b.n	80ec2ae <HAL_DAC_ConfigChannel+0x31a>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80ebfb4:	68bb      	ldr	r3, [r7, #8]
 80ebfb6:	689b      	ldr	r3, [r3, #8]
 80ebfb8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80ebfba:	68fb      	ldr	r3, [r7, #12]
 80ebfbc:	795b      	ldrb	r3, [r3, #5]
 80ebfbe:	2b01      	cmp	r3, #1
 80ebfc0:	d101      	bne.n	80ebfc6 <HAL_DAC_ConfigChannel+0x32>
 80ebfc2:	2302      	movs	r3, #2
 80ebfc4:	e173      	b.n	80ec2ae <HAL_DAC_ConfigChannel+0x31a>
 80ebfc6:	68fb      	ldr	r3, [r7, #12]
 80ebfc8:	2201      	movs	r2, #1
 80ebfca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80ebfcc:	68fb      	ldr	r3, [r7, #12]
 80ebfce:	2202      	movs	r2, #2
 80ebfd0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80ebfd2:	68bb      	ldr	r3, [r7, #8]
 80ebfd4:	689b      	ldr	r3, [r3, #8]
 80ebfd6:	2b04      	cmp	r3, #4
 80ebfd8:	d17a      	bne.n	80ec0d0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80ebfda:	f7fe fbbb 	bl	80ea754 <HAL_GetTick>
 80ebfde:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80ebfe0:	687b      	ldr	r3, [r7, #4]
 80ebfe2:	2b00      	cmp	r3, #0
 80ebfe4:	d13d      	bne.n	80ec062 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80ebfe6:	e018      	b.n	80ec01a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80ebfe8:	f7fe fbb4 	bl	80ea754 <HAL_GetTick>
 80ebfec:	4602      	mov	r2, r0
 80ebfee:	69bb      	ldr	r3, [r7, #24]
 80ebff0:	1ad3      	subs	r3, r2, r3
 80ebff2:	2b01      	cmp	r3, #1
 80ebff4:	d911      	bls.n	80ec01a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80ebff6:	68fb      	ldr	r3, [r7, #12]
 80ebff8:	681b      	ldr	r3, [r3, #0]
 80ebffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ebffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80ec000:	2b00      	cmp	r3, #0
 80ec002:	d00a      	beq.n	80ec01a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80ec004:	68fb      	ldr	r3, [r7, #12]
 80ec006:	691b      	ldr	r3, [r3, #16]
 80ec008:	f043 0208 	orr.w	r2, r3, #8
 80ec00c:	68fb      	ldr	r3, [r7, #12]
 80ec00e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80ec010:	68fb      	ldr	r3, [r7, #12]
 80ec012:	2203      	movs	r2, #3
 80ec014:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80ec016:	2303      	movs	r3, #3
 80ec018:	e149      	b.n	80ec2ae <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80ec01a:	68fb      	ldr	r3, [r7, #12]
 80ec01c:	681b      	ldr	r3, [r3, #0]
 80ec01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ec020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80ec024:	2b00      	cmp	r3, #0
 80ec026:	d1df      	bne.n	80ebfe8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80ec028:	68fb      	ldr	r3, [r7, #12]
 80ec02a:	681b      	ldr	r3, [r3, #0]
 80ec02c:	68ba      	ldr	r2, [r7, #8]
 80ec02e:	6a12      	ldr	r2, [r2, #32]
 80ec030:	641a      	str	r2, [r3, #64]	@ 0x40
 80ec032:	e020      	b.n	80ec076 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80ec034:	f7fe fb8e 	bl	80ea754 <HAL_GetTick>
 80ec038:	4602      	mov	r2, r0
 80ec03a:	69bb      	ldr	r3, [r7, #24]
 80ec03c:	1ad3      	subs	r3, r2, r3
 80ec03e:	2b01      	cmp	r3, #1
 80ec040:	d90f      	bls.n	80ec062 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80ec042:	68fb      	ldr	r3, [r7, #12]
 80ec044:	681b      	ldr	r3, [r3, #0]
 80ec046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ec048:	2b00      	cmp	r3, #0
 80ec04a:	da0a      	bge.n	80ec062 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80ec04c:	68fb      	ldr	r3, [r7, #12]
 80ec04e:	691b      	ldr	r3, [r3, #16]
 80ec050:	f043 0208 	orr.w	r2, r3, #8
 80ec054:	68fb      	ldr	r3, [r7, #12]
 80ec056:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80ec058:	68fb      	ldr	r3, [r7, #12]
 80ec05a:	2203      	movs	r2, #3
 80ec05c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80ec05e:	2303      	movs	r3, #3
 80ec060:	e125      	b.n	80ec2ae <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80ec062:	68fb      	ldr	r3, [r7, #12]
 80ec064:	681b      	ldr	r3, [r3, #0]
 80ec066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ec068:	2b00      	cmp	r3, #0
 80ec06a:	dbe3      	blt.n	80ec034 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80ec06c:	68fb      	ldr	r3, [r7, #12]
 80ec06e:	681b      	ldr	r3, [r3, #0]
 80ec070:	68ba      	ldr	r2, [r7, #8]
 80ec072:	6a12      	ldr	r2, [r2, #32]
 80ec074:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80ec076:	68fb      	ldr	r3, [r7, #12]
 80ec078:	681b      	ldr	r3, [r3, #0]
 80ec07a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80ec07c:	687b      	ldr	r3, [r7, #4]
 80ec07e:	f003 0310 	and.w	r3, r3, #16
 80ec082:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80ec086:	fa01 f303 	lsl.w	r3, r1, r3
 80ec08a:	43db      	mvns	r3, r3
 80ec08c:	ea02 0103 	and.w	r1, r2, r3
 80ec090:	68bb      	ldr	r3, [r7, #8]
 80ec092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80ec094:	687b      	ldr	r3, [r7, #4]
 80ec096:	f003 0310 	and.w	r3, r3, #16
 80ec09a:	409a      	lsls	r2, r3
 80ec09c:	68fb      	ldr	r3, [r7, #12]
 80ec09e:	681b      	ldr	r3, [r3, #0]
 80ec0a0:	430a      	orrs	r2, r1
 80ec0a2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80ec0a4:	68fb      	ldr	r3, [r7, #12]
 80ec0a6:	681b      	ldr	r3, [r3, #0]
 80ec0a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80ec0aa:	687b      	ldr	r3, [r7, #4]
 80ec0ac:	f003 0310 	and.w	r3, r3, #16
 80ec0b0:	21ff      	movs	r1, #255	@ 0xff
 80ec0b2:	fa01 f303 	lsl.w	r3, r1, r3
 80ec0b6:	43db      	mvns	r3, r3
 80ec0b8:	ea02 0103 	and.w	r1, r2, r3
 80ec0bc:	68bb      	ldr	r3, [r7, #8]
 80ec0be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80ec0c0:	687b      	ldr	r3, [r7, #4]
 80ec0c2:	f003 0310 	and.w	r3, r3, #16
 80ec0c6:	409a      	lsls	r2, r3
 80ec0c8:	68fb      	ldr	r3, [r7, #12]
 80ec0ca:	681b      	ldr	r3, [r3, #0]
 80ec0cc:	430a      	orrs	r2, r1
 80ec0ce:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80ec0d0:	68bb      	ldr	r3, [r7, #8]
 80ec0d2:	699b      	ldr	r3, [r3, #24]
 80ec0d4:	2b01      	cmp	r3, #1
 80ec0d6:	d11d      	bne.n	80ec114 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80ec0d8:	68fb      	ldr	r3, [r7, #12]
 80ec0da:	681b      	ldr	r3, [r3, #0]
 80ec0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80ec0de:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80ec0e0:	687b      	ldr	r3, [r7, #4]
 80ec0e2:	f003 0310 	and.w	r3, r3, #16
 80ec0e6:	221f      	movs	r2, #31
 80ec0e8:	fa02 f303 	lsl.w	r3, r2, r3
 80ec0ec:	43db      	mvns	r3, r3
 80ec0ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec0f0:	4013      	ands	r3, r2
 80ec0f2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80ec0f4:	68bb      	ldr	r3, [r7, #8]
 80ec0f6:	69db      	ldr	r3, [r3, #28]
 80ec0f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80ec0fa:	687b      	ldr	r3, [r7, #4]
 80ec0fc:	f003 0310 	and.w	r3, r3, #16
 80ec100:	697a      	ldr	r2, [r7, #20]
 80ec102:	fa02 f303 	lsl.w	r3, r2, r3
 80ec106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec108:	4313      	orrs	r3, r2
 80ec10a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80ec10c:	68fb      	ldr	r3, [r7, #12]
 80ec10e:	681b      	ldr	r3, [r3, #0]
 80ec110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec112:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80ec114:	68fb      	ldr	r3, [r7, #12]
 80ec116:	681b      	ldr	r3, [r3, #0]
 80ec118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80ec11a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80ec11c:	687b      	ldr	r3, [r7, #4]
 80ec11e:	f003 0310 	and.w	r3, r3, #16
 80ec122:	2207      	movs	r2, #7
 80ec124:	fa02 f303 	lsl.w	r3, r2, r3
 80ec128:	43db      	mvns	r3, r3
 80ec12a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec12c:	4013      	ands	r3, r2
 80ec12e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80ec130:	68bb      	ldr	r3, [r7, #8]
 80ec132:	695b      	ldr	r3, [r3, #20]
 80ec134:	2b01      	cmp	r3, #1
 80ec136:	d102      	bne.n	80ec13e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80ec138:	2300      	movs	r3, #0
 80ec13a:	623b      	str	r3, [r7, #32]
 80ec13c:	e00f      	b.n	80ec15e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80ec13e:	68bb      	ldr	r3, [r7, #8]
 80ec140:	695b      	ldr	r3, [r3, #20]
 80ec142:	2b02      	cmp	r3, #2
 80ec144:	d102      	bne.n	80ec14c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80ec146:	2301      	movs	r3, #1
 80ec148:	623b      	str	r3, [r7, #32]
 80ec14a:	e008      	b.n	80ec15e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80ec14c:	68bb      	ldr	r3, [r7, #8]
 80ec14e:	691b      	ldr	r3, [r3, #16]
 80ec150:	2b00      	cmp	r3, #0
 80ec152:	d102      	bne.n	80ec15a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80ec154:	2301      	movs	r3, #1
 80ec156:	623b      	str	r3, [r7, #32]
 80ec158:	e001      	b.n	80ec15e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80ec15a:	2300      	movs	r3, #0
 80ec15c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80ec15e:	68bb      	ldr	r3, [r7, #8]
 80ec160:	689a      	ldr	r2, [r3, #8]
 80ec162:	68bb      	ldr	r3, [r7, #8]
 80ec164:	691b      	ldr	r3, [r3, #16]
 80ec166:	4313      	orrs	r3, r2
 80ec168:	6a3a      	ldr	r2, [r7, #32]
 80ec16a:	4313      	orrs	r3, r2
 80ec16c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80ec16e:	687b      	ldr	r3, [r7, #4]
 80ec170:	f003 0310 	and.w	r3, r3, #16
 80ec174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80ec178:	fa02 f303 	lsl.w	r3, r2, r3
 80ec17c:	43db      	mvns	r3, r3
 80ec17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec180:	4013      	ands	r3, r2
 80ec182:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80ec184:	68bb      	ldr	r3, [r7, #8]
 80ec186:	791b      	ldrb	r3, [r3, #4]
 80ec188:	2b01      	cmp	r3, #1
 80ec18a:	d102      	bne.n	80ec192 <HAL_DAC_ConfigChannel+0x1fe>
 80ec18c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80ec190:	e000      	b.n	80ec194 <HAL_DAC_ConfigChannel+0x200>
 80ec192:	2300      	movs	r3, #0
 80ec194:	697a      	ldr	r2, [r7, #20]
 80ec196:	4313      	orrs	r3, r2
 80ec198:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80ec19a:	687b      	ldr	r3, [r7, #4]
 80ec19c:	f003 0310 	and.w	r3, r3, #16
 80ec1a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80ec1a4:	fa02 f303 	lsl.w	r3, r2, r3
 80ec1a8:	43db      	mvns	r3, r3
 80ec1aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec1ac:	4013      	ands	r3, r2
 80ec1ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80ec1b0:	68bb      	ldr	r3, [r7, #8]
 80ec1b2:	795b      	ldrb	r3, [r3, #5]
 80ec1b4:	2b01      	cmp	r3, #1
 80ec1b6:	d102      	bne.n	80ec1be <HAL_DAC_ConfigChannel+0x22a>
 80ec1b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80ec1bc:	e000      	b.n	80ec1c0 <HAL_DAC_ConfigChannel+0x22c>
 80ec1be:	2300      	movs	r3, #0
 80ec1c0:	697a      	ldr	r2, [r7, #20]
 80ec1c2:	4313      	orrs	r3, r2
 80ec1c4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80ec1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ec1c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80ec1cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80ec1ce:	68bb      	ldr	r3, [r7, #8]
 80ec1d0:	681b      	ldr	r3, [r3, #0]
 80ec1d2:	2b02      	cmp	r3, #2
 80ec1d4:	d114      	bne.n	80ec200 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80ec1d6:	f003 ff6f 	bl	80f00b8 <HAL_RCC_GetHCLKFreq>
 80ec1da:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80ec1dc:	693b      	ldr	r3, [r7, #16]
 80ec1de:	4a36      	ldr	r2, [pc, #216]	@ (80ec2b8 <HAL_DAC_ConfigChannel+0x324>)
 80ec1e0:	4293      	cmp	r3, r2
 80ec1e2:	d904      	bls.n	80ec1ee <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80ec1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ec1e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80ec1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80ec1ec:	e00f      	b.n	80ec20e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80ec1ee:	693b      	ldr	r3, [r7, #16]
 80ec1f0:	4a32      	ldr	r2, [pc, #200]	@ (80ec2bc <HAL_DAC_ConfigChannel+0x328>)
 80ec1f2:	4293      	cmp	r3, r2
 80ec1f4:	d90a      	bls.n	80ec20c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80ec1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ec1f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80ec1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80ec1fe:	e006      	b.n	80ec20e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80ec200:	68bb      	ldr	r3, [r7, #8]
 80ec202:	681b      	ldr	r3, [r3, #0]
 80ec204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec206:	4313      	orrs	r3, r2
 80ec208:	627b      	str	r3, [r7, #36]	@ 0x24
 80ec20a:	e000      	b.n	80ec20e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80ec20c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80ec20e:	687b      	ldr	r3, [r7, #4]
 80ec210:	f003 0310 	and.w	r3, r3, #16
 80ec214:	697a      	ldr	r2, [r7, #20]
 80ec216:	fa02 f303 	lsl.w	r3, r2, r3
 80ec21a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec21c:	4313      	orrs	r3, r2
 80ec21e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80ec220:	68fb      	ldr	r3, [r7, #12]
 80ec222:	681b      	ldr	r3, [r3, #0]
 80ec224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec226:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80ec228:	68fb      	ldr	r3, [r7, #12]
 80ec22a:	681b      	ldr	r3, [r3, #0]
 80ec22c:	6819      	ldr	r1, [r3, #0]
 80ec22e:	687b      	ldr	r3, [r7, #4]
 80ec230:	f003 0310 	and.w	r3, r3, #16
 80ec234:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80ec238:	fa02 f303 	lsl.w	r3, r2, r3
 80ec23c:	43da      	mvns	r2, r3
 80ec23e:	68fb      	ldr	r3, [r7, #12]
 80ec240:	681b      	ldr	r3, [r3, #0]
 80ec242:	400a      	ands	r2, r1
 80ec244:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80ec246:	68fb      	ldr	r3, [r7, #12]
 80ec248:	681b      	ldr	r3, [r3, #0]
 80ec24a:	681b      	ldr	r3, [r3, #0]
 80ec24c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80ec24e:	687b      	ldr	r3, [r7, #4]
 80ec250:	f003 0310 	and.w	r3, r3, #16
 80ec254:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80ec258:	fa02 f303 	lsl.w	r3, r2, r3
 80ec25c:	43db      	mvns	r3, r3
 80ec25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec260:	4013      	ands	r3, r2
 80ec262:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80ec264:	68bb      	ldr	r3, [r7, #8]
 80ec266:	68db      	ldr	r3, [r3, #12]
 80ec268:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80ec26a:	687b      	ldr	r3, [r7, #4]
 80ec26c:	f003 0310 	and.w	r3, r3, #16
 80ec270:	697a      	ldr	r2, [r7, #20]
 80ec272:	fa02 f303 	lsl.w	r3, r2, r3
 80ec276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec278:	4313      	orrs	r3, r2
 80ec27a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80ec27c:	68fb      	ldr	r3, [r7, #12]
 80ec27e:	681b      	ldr	r3, [r3, #0]
 80ec280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ec282:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80ec284:	68fb      	ldr	r3, [r7, #12]
 80ec286:	681b      	ldr	r3, [r3, #0]
 80ec288:	6819      	ldr	r1, [r3, #0]
 80ec28a:	687b      	ldr	r3, [r7, #4]
 80ec28c:	f003 0310 	and.w	r3, r3, #16
 80ec290:	22c0      	movs	r2, #192	@ 0xc0
 80ec292:	fa02 f303 	lsl.w	r3, r2, r3
 80ec296:	43da      	mvns	r2, r3
 80ec298:	68fb      	ldr	r3, [r7, #12]
 80ec29a:	681b      	ldr	r3, [r3, #0]
 80ec29c:	400a      	ands	r2, r1
 80ec29e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80ec2a0:	68fb      	ldr	r3, [r7, #12]
 80ec2a2:	2201      	movs	r2, #1
 80ec2a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80ec2a6:	68fb      	ldr	r3, [r7, #12]
 80ec2a8:	2200      	movs	r2, #0
 80ec2aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80ec2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80ec2ae:	4618      	mov	r0, r3
 80ec2b0:	3728      	adds	r7, #40	@ 0x28
 80ec2b2:	46bd      	mov	sp, r7
 80ec2b4:	bd80      	pop	{r7, pc}
 80ec2b6:	bf00      	nop
 80ec2b8:	09896800 	.word	0x09896800
 80ec2bc:	04c4b400 	.word	0x04c4b400

080ec2c0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80ec2c0:	b580      	push	{r7, lr}
 80ec2c2:	b084      	sub	sp, #16
 80ec2c4:	af00      	add	r7, sp, #0
 80ec2c6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80ec2c8:	f7fe fa44 	bl	80ea754 <HAL_GetTick>
 80ec2cc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80ec2ce:	687b      	ldr	r3, [r7, #4]
 80ec2d0:	2b00      	cmp	r3, #0
 80ec2d2:	d101      	bne.n	80ec2d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80ec2d4:	2301      	movs	r3, #1
 80ec2d6:	e0f0      	b.n	80ec4ba <HAL_DMA_Init+0x1fa>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80ec2d8:	687b      	ldr	r3, [r7, #4]
 80ec2da:	681b      	ldr	r3, [r3, #0]
 80ec2dc:	4a79      	ldr	r2, [pc, #484]	@ (80ec4c4 <HAL_DMA_Init+0x204>)
 80ec2de:	4293      	cmp	r3, r2
 80ec2e0:	f000 809f 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec2e4:	687b      	ldr	r3, [r7, #4]
 80ec2e6:	681b      	ldr	r3, [r3, #0]
 80ec2e8:	4a77      	ldr	r2, [pc, #476]	@ (80ec4c8 <HAL_DMA_Init+0x208>)
 80ec2ea:	4293      	cmp	r3, r2
 80ec2ec:	f000 8099 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec2f0:	687b      	ldr	r3, [r7, #4]
 80ec2f2:	681b      	ldr	r3, [r3, #0]
 80ec2f4:	4a75      	ldr	r2, [pc, #468]	@ (80ec4cc <HAL_DMA_Init+0x20c>)
 80ec2f6:	4293      	cmp	r3, r2
 80ec2f8:	f000 8093 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec2fc:	687b      	ldr	r3, [r7, #4]
 80ec2fe:	681b      	ldr	r3, [r3, #0]
 80ec300:	4a73      	ldr	r2, [pc, #460]	@ (80ec4d0 <HAL_DMA_Init+0x210>)
 80ec302:	4293      	cmp	r3, r2
 80ec304:	f000 808d 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec308:	687b      	ldr	r3, [r7, #4]
 80ec30a:	681b      	ldr	r3, [r3, #0]
 80ec30c:	4a71      	ldr	r2, [pc, #452]	@ (80ec4d4 <HAL_DMA_Init+0x214>)
 80ec30e:	4293      	cmp	r3, r2
 80ec310:	f000 8087 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec314:	687b      	ldr	r3, [r7, #4]
 80ec316:	681b      	ldr	r3, [r3, #0]
 80ec318:	4a6f      	ldr	r2, [pc, #444]	@ (80ec4d8 <HAL_DMA_Init+0x218>)
 80ec31a:	4293      	cmp	r3, r2
 80ec31c:	f000 8081 	beq.w	80ec422 <HAL_DMA_Init+0x162>
 80ec320:	687b      	ldr	r3, [r7, #4]
 80ec322:	681b      	ldr	r3, [r3, #0]
 80ec324:	4a6d      	ldr	r2, [pc, #436]	@ (80ec4dc <HAL_DMA_Init+0x21c>)
 80ec326:	4293      	cmp	r3, r2
 80ec328:	d07b      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec32a:	687b      	ldr	r3, [r7, #4]
 80ec32c:	681b      	ldr	r3, [r3, #0]
 80ec32e:	4a6c      	ldr	r2, [pc, #432]	@ (80ec4e0 <HAL_DMA_Init+0x220>)
 80ec330:	4293      	cmp	r3, r2
 80ec332:	d076      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec334:	687b      	ldr	r3, [r7, #4]
 80ec336:	681b      	ldr	r3, [r3, #0]
 80ec338:	4a6a      	ldr	r2, [pc, #424]	@ (80ec4e4 <HAL_DMA_Init+0x224>)
 80ec33a:	4293      	cmp	r3, r2
 80ec33c:	d071      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec33e:	687b      	ldr	r3, [r7, #4]
 80ec340:	681b      	ldr	r3, [r3, #0]
 80ec342:	4a69      	ldr	r2, [pc, #420]	@ (80ec4e8 <HAL_DMA_Init+0x228>)
 80ec344:	4293      	cmp	r3, r2
 80ec346:	d06c      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec348:	687b      	ldr	r3, [r7, #4]
 80ec34a:	681b      	ldr	r3, [r3, #0]
 80ec34c:	4a67      	ldr	r2, [pc, #412]	@ (80ec4ec <HAL_DMA_Init+0x22c>)
 80ec34e:	4293      	cmp	r3, r2
 80ec350:	d067      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec352:	687b      	ldr	r3, [r7, #4]
 80ec354:	681b      	ldr	r3, [r3, #0]
 80ec356:	4a66      	ldr	r2, [pc, #408]	@ (80ec4f0 <HAL_DMA_Init+0x230>)
 80ec358:	4293      	cmp	r3, r2
 80ec35a:	d062      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec35c:	687b      	ldr	r3, [r7, #4]
 80ec35e:	681b      	ldr	r3, [r3, #0]
 80ec360:	4a64      	ldr	r2, [pc, #400]	@ (80ec4f4 <HAL_DMA_Init+0x234>)
 80ec362:	4293      	cmp	r3, r2
 80ec364:	d05d      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec366:	687b      	ldr	r3, [r7, #4]
 80ec368:	681b      	ldr	r3, [r3, #0]
 80ec36a:	4a63      	ldr	r2, [pc, #396]	@ (80ec4f8 <HAL_DMA_Init+0x238>)
 80ec36c:	4293      	cmp	r3, r2
 80ec36e:	d058      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec370:	687b      	ldr	r3, [r7, #4]
 80ec372:	681b      	ldr	r3, [r3, #0]
 80ec374:	4a61      	ldr	r2, [pc, #388]	@ (80ec4fc <HAL_DMA_Init+0x23c>)
 80ec376:	4293      	cmp	r3, r2
 80ec378:	d053      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec37a:	687b      	ldr	r3, [r7, #4]
 80ec37c:	681b      	ldr	r3, [r3, #0]
 80ec37e:	4a60      	ldr	r2, [pc, #384]	@ (80ec500 <HAL_DMA_Init+0x240>)
 80ec380:	4293      	cmp	r3, r2
 80ec382:	d04e      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec384:	687b      	ldr	r3, [r7, #4]
 80ec386:	681b      	ldr	r3, [r3, #0]
 80ec388:	4a5e      	ldr	r2, [pc, #376]	@ (80ec504 <HAL_DMA_Init+0x244>)
 80ec38a:	4293      	cmp	r3, r2
 80ec38c:	d049      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec38e:	687b      	ldr	r3, [r7, #4]
 80ec390:	681b      	ldr	r3, [r3, #0]
 80ec392:	4a5d      	ldr	r2, [pc, #372]	@ (80ec508 <HAL_DMA_Init+0x248>)
 80ec394:	4293      	cmp	r3, r2
 80ec396:	d044      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec398:	687b      	ldr	r3, [r7, #4]
 80ec39a:	681b      	ldr	r3, [r3, #0]
 80ec39c:	4a5b      	ldr	r2, [pc, #364]	@ (80ec50c <HAL_DMA_Init+0x24c>)
 80ec39e:	4293      	cmp	r3, r2
 80ec3a0:	d03f      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3a2:	687b      	ldr	r3, [r7, #4]
 80ec3a4:	681b      	ldr	r3, [r3, #0]
 80ec3a6:	4a5a      	ldr	r2, [pc, #360]	@ (80ec510 <HAL_DMA_Init+0x250>)
 80ec3a8:	4293      	cmp	r3, r2
 80ec3aa:	d03a      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3ac:	687b      	ldr	r3, [r7, #4]
 80ec3ae:	681b      	ldr	r3, [r3, #0]
 80ec3b0:	4a58      	ldr	r2, [pc, #352]	@ (80ec514 <HAL_DMA_Init+0x254>)
 80ec3b2:	4293      	cmp	r3, r2
 80ec3b4:	d035      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3b6:	687b      	ldr	r3, [r7, #4]
 80ec3b8:	681b      	ldr	r3, [r3, #0]
 80ec3ba:	4a57      	ldr	r2, [pc, #348]	@ (80ec518 <HAL_DMA_Init+0x258>)
 80ec3bc:	4293      	cmp	r3, r2
 80ec3be:	d030      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3c0:	687b      	ldr	r3, [r7, #4]
 80ec3c2:	681b      	ldr	r3, [r3, #0]
 80ec3c4:	4a55      	ldr	r2, [pc, #340]	@ (80ec51c <HAL_DMA_Init+0x25c>)
 80ec3c6:	4293      	cmp	r3, r2
 80ec3c8:	d02b      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3ca:	687b      	ldr	r3, [r7, #4]
 80ec3cc:	681b      	ldr	r3, [r3, #0]
 80ec3ce:	4a54      	ldr	r2, [pc, #336]	@ (80ec520 <HAL_DMA_Init+0x260>)
 80ec3d0:	4293      	cmp	r3, r2
 80ec3d2:	d026      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3d4:	687b      	ldr	r3, [r7, #4]
 80ec3d6:	681b      	ldr	r3, [r3, #0]
 80ec3d8:	4a52      	ldr	r2, [pc, #328]	@ (80ec524 <HAL_DMA_Init+0x264>)
 80ec3da:	4293      	cmp	r3, r2
 80ec3dc:	d021      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3de:	687b      	ldr	r3, [r7, #4]
 80ec3e0:	681b      	ldr	r3, [r3, #0]
 80ec3e2:	4a51      	ldr	r2, [pc, #324]	@ (80ec528 <HAL_DMA_Init+0x268>)
 80ec3e4:	4293      	cmp	r3, r2
 80ec3e6:	d01c      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3e8:	687b      	ldr	r3, [r7, #4]
 80ec3ea:	681b      	ldr	r3, [r3, #0]
 80ec3ec:	4a4f      	ldr	r2, [pc, #316]	@ (80ec52c <HAL_DMA_Init+0x26c>)
 80ec3ee:	4293      	cmp	r3, r2
 80ec3f0:	d017      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3f2:	687b      	ldr	r3, [r7, #4]
 80ec3f4:	681b      	ldr	r3, [r3, #0]
 80ec3f6:	4a4e      	ldr	r2, [pc, #312]	@ (80ec530 <HAL_DMA_Init+0x270>)
 80ec3f8:	4293      	cmp	r3, r2
 80ec3fa:	d012      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec3fc:	687b      	ldr	r3, [r7, #4]
 80ec3fe:	681b      	ldr	r3, [r3, #0]
 80ec400:	4a4c      	ldr	r2, [pc, #304]	@ (80ec534 <HAL_DMA_Init+0x274>)
 80ec402:	4293      	cmp	r3, r2
 80ec404:	d00d      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec406:	687b      	ldr	r3, [r7, #4]
 80ec408:	681b      	ldr	r3, [r3, #0]
 80ec40a:	4a4b      	ldr	r2, [pc, #300]	@ (80ec538 <HAL_DMA_Init+0x278>)
 80ec40c:	4293      	cmp	r3, r2
 80ec40e:	d008      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec410:	687b      	ldr	r3, [r7, #4]
 80ec412:	681b      	ldr	r3, [r3, #0]
 80ec414:	4a49      	ldr	r2, [pc, #292]	@ (80ec53c <HAL_DMA_Init+0x27c>)
 80ec416:	4293      	cmp	r3, r2
 80ec418:	d003      	beq.n	80ec422 <HAL_DMA_Init+0x162>
 80ec41a:	687b      	ldr	r3, [r7, #4]
 80ec41c:	681b      	ldr	r3, [r3, #0]
 80ec41e:	4a48      	ldr	r2, [pc, #288]	@ (80ec540 <HAL_DMA_Init+0x280>)
 80ec420:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80ec422:	687b      	ldr	r3, [r7, #4]
 80ec424:	2200      	movs	r2, #0
 80ec426:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 80ec42a:	687b      	ldr	r3, [r7, #4]
 80ec42c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80ec430:	b2db      	uxtb	r3, r3
 80ec432:	2b00      	cmp	r3, #0
 80ec434:	d10e      	bne.n	80ec454 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 80ec436:	687b      	ldr	r3, [r7, #4]
 80ec438:	2200      	movs	r2, #0
 80ec43a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 80ec43c:	687b      	ldr	r3, [r7, #4]
 80ec43e:	2200      	movs	r2, #0
 80ec440:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80ec442:	687b      	ldr	r3, [r7, #4]
 80ec444:	2200      	movs	r2, #0
 80ec446:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80ec448:	687b      	ldr	r3, [r7, #4]
 80ec44a:	2200      	movs	r2, #0
 80ec44c:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80ec44e:	687b      	ldr	r3, [r7, #4]
 80ec450:	2200      	movs	r2, #0
 80ec452:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80ec454:	687b      	ldr	r3, [r7, #4]
 80ec456:	2202      	movs	r2, #2
 80ec458:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80ec45c:	687b      	ldr	r3, [r7, #4]
 80ec45e:	681b      	ldr	r3, [r3, #0]
 80ec460:	695a      	ldr	r2, [r3, #20]
 80ec462:	687b      	ldr	r3, [r7, #4]
 80ec464:	681b      	ldr	r3, [r3, #0]
 80ec466:	f042 0206 	orr.w	r2, r2, #6
 80ec46a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80ec46c:	e00f      	b.n	80ec48e <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80ec46e:	f7fe f971 	bl	80ea754 <HAL_GetTick>
 80ec472:	4602      	mov	r2, r0
 80ec474:	68fb      	ldr	r3, [r7, #12]
 80ec476:	1ad3      	subs	r3, r2, r3
 80ec478:	2b05      	cmp	r3, #5
 80ec47a:	d908      	bls.n	80ec48e <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80ec47c:	687b      	ldr	r3, [r7, #4]
 80ec47e:	2210      	movs	r2, #16
 80ec480:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80ec482:	687b      	ldr	r3, [r7, #4]
 80ec484:	2203      	movs	r2, #3
 80ec486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80ec48a:	2301      	movs	r3, #1
 80ec48c:	e015      	b.n	80ec4ba <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80ec48e:	687b      	ldr	r3, [r7, #4]
 80ec490:	681b      	ldr	r3, [r3, #0]
 80ec492:	695b      	ldr	r3, [r3, #20]
 80ec494:	f003 0301 	and.w	r3, r3, #1
 80ec498:	2b00      	cmp	r3, #0
 80ec49a:	d1e8      	bne.n	80ec46e <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80ec49c:	6878      	ldr	r0, [r7, #4]
 80ec49e:	f000 f9ef 	bl	80ec880 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80ec4a2:	687b      	ldr	r3, [r7, #4]
 80ec4a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80ec4a6:	687b      	ldr	r3, [r7, #4]
 80ec4a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80ec4aa:	687b      	ldr	r3, [r7, #4]
 80ec4ac:	2200      	movs	r2, #0
 80ec4ae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80ec4b0:	687b      	ldr	r3, [r7, #4]
 80ec4b2:	2201      	movs	r2, #1
 80ec4b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80ec4b8:	2300      	movs	r3, #0
}
 80ec4ba:	4618      	mov	r0, r3
 80ec4bc:	3710      	adds	r7, #16
 80ec4be:	46bd      	mov	sp, r7
 80ec4c0:	bd80      	pop	{r7, pc}
 80ec4c2:	bf00      	nop
 80ec4c4:	40020050 	.word	0x40020050
 80ec4c8:	50020050 	.word	0x50020050
 80ec4cc:	400200d0 	.word	0x400200d0
 80ec4d0:	500200d0 	.word	0x500200d0
 80ec4d4:	40020150 	.word	0x40020150
 80ec4d8:	50020150 	.word	0x50020150
 80ec4dc:	400201d0 	.word	0x400201d0
 80ec4e0:	500201d0 	.word	0x500201d0
 80ec4e4:	40020250 	.word	0x40020250
 80ec4e8:	50020250 	.word	0x50020250
 80ec4ec:	400202d0 	.word	0x400202d0
 80ec4f0:	500202d0 	.word	0x500202d0
 80ec4f4:	40020350 	.word	0x40020350
 80ec4f8:	50020350 	.word	0x50020350
 80ec4fc:	400203d0 	.word	0x400203d0
 80ec500:	500203d0 	.word	0x500203d0
 80ec504:	40021050 	.word	0x40021050
 80ec508:	50021050 	.word	0x50021050
 80ec50c:	400210d0 	.word	0x400210d0
 80ec510:	500210d0 	.word	0x500210d0
 80ec514:	40021150 	.word	0x40021150
 80ec518:	50021150 	.word	0x50021150
 80ec51c:	400211d0 	.word	0x400211d0
 80ec520:	500211d0 	.word	0x500211d0
 80ec524:	40021250 	.word	0x40021250
 80ec528:	50021250 	.word	0x50021250
 80ec52c:	400212d0 	.word	0x400212d0
 80ec530:	500212d0 	.word	0x500212d0
 80ec534:	40021350 	.word	0x40021350
 80ec538:	50021350 	.word	0x50021350
 80ec53c:	400213d0 	.word	0x400213d0
 80ec540:	500213d0 	.word	0x500213d0

080ec544 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80ec544:	b580      	push	{r7, lr}
 80ec546:	b086      	sub	sp, #24
 80ec548:	af00      	add	r7, sp, #0
 80ec54a:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80ec54c:	687b      	ldr	r3, [r7, #4]
 80ec54e:	681b      	ldr	r3, [r3, #0]
 80ec550:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80ec554:	f023 030f 	bic.w	r3, r3, #15
 80ec558:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80ec55a:	687b      	ldr	r3, [r7, #4]
 80ec55c:	681b      	ldr	r3, [r3, #0]
 80ec55e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80ec562:	3b50      	subs	r3, #80	@ 0x50
 80ec564:	09db      	lsrs	r3, r3, #7
 80ec566:	f003 031f 	and.w	r3, r3, #31
 80ec56a:	2201      	movs	r2, #1
 80ec56c:	fa02 f303 	lsl.w	r3, r2, r3
 80ec570:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80ec572:	697b      	ldr	r3, [r7, #20]
 80ec574:	68db      	ldr	r3, [r3, #12]
 80ec576:	693a      	ldr	r2, [r7, #16]
 80ec578:	4013      	ands	r3, r2
 80ec57a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80ec57c:	68fb      	ldr	r3, [r7, #12]
 80ec57e:	2b00      	cmp	r3, #0
 80ec580:	f000 813b 	beq.w	80ec7fa <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80ec584:	687b      	ldr	r3, [r7, #4]
 80ec586:	681b      	ldr	r3, [r3, #0]
 80ec588:	691b      	ldr	r3, [r3, #16]
 80ec58a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80ec58e:	2b00      	cmp	r3, #0
 80ec590:	d011      	beq.n	80ec5b6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80ec592:	687b      	ldr	r3, [r7, #4]
 80ec594:	681b      	ldr	r3, [r3, #0]
 80ec596:	695b      	ldr	r3, [r3, #20]
 80ec598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80ec59c:	2b00      	cmp	r3, #0
 80ec59e:	d00a      	beq.n	80ec5b6 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80ec5a0:	687b      	ldr	r3, [r7, #4]
 80ec5a2:	681b      	ldr	r3, [r3, #0]
 80ec5a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80ec5a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80ec5aa:	687b      	ldr	r3, [r7, #4]
 80ec5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ec5ae:	f043 0201 	orr.w	r2, r3, #1
 80ec5b2:	687b      	ldr	r3, [r7, #4]
 80ec5b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80ec5b6:	687b      	ldr	r3, [r7, #4]
 80ec5b8:	681b      	ldr	r3, [r3, #0]
 80ec5ba:	691b      	ldr	r3, [r3, #16]
 80ec5bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80ec5c0:	2b00      	cmp	r3, #0
 80ec5c2:	d011      	beq.n	80ec5e8 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80ec5c4:	687b      	ldr	r3, [r7, #4]
 80ec5c6:	681b      	ldr	r3, [r3, #0]
 80ec5c8:	695b      	ldr	r3, [r3, #20]
 80ec5ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80ec5ce:	2b00      	cmp	r3, #0
 80ec5d0:	d00a      	beq.n	80ec5e8 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80ec5d2:	687b      	ldr	r3, [r7, #4]
 80ec5d4:	681b      	ldr	r3, [r3, #0]
 80ec5d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80ec5da:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80ec5dc:	687b      	ldr	r3, [r7, #4]
 80ec5de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ec5e0:	f043 0202 	orr.w	r2, r3, #2
 80ec5e4:	687b      	ldr	r3, [r7, #4]
 80ec5e6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80ec5e8:	687b      	ldr	r3, [r7, #4]
 80ec5ea:	681b      	ldr	r3, [r3, #0]
 80ec5ec:	691b      	ldr	r3, [r3, #16]
 80ec5ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80ec5f2:	2b00      	cmp	r3, #0
 80ec5f4:	d011      	beq.n	80ec61a <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80ec5f6:	687b      	ldr	r3, [r7, #4]
 80ec5f8:	681b      	ldr	r3, [r3, #0]
 80ec5fa:	695b      	ldr	r3, [r3, #20]
 80ec5fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80ec600:	2b00      	cmp	r3, #0
 80ec602:	d00a      	beq.n	80ec61a <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80ec604:	687b      	ldr	r3, [r7, #4]
 80ec606:	681b      	ldr	r3, [r3, #0]
 80ec608:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80ec60c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80ec60e:	687b      	ldr	r3, [r7, #4]
 80ec610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ec612:	f043 0204 	orr.w	r2, r3, #4
 80ec616:	687b      	ldr	r3, [r7, #4]
 80ec618:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80ec61a:	687b      	ldr	r3, [r7, #4]
 80ec61c:	681b      	ldr	r3, [r3, #0]
 80ec61e:	691b      	ldr	r3, [r3, #16]
 80ec620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80ec624:	2b00      	cmp	r3, #0
 80ec626:	d011      	beq.n	80ec64c <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80ec628:	687b      	ldr	r3, [r7, #4]
 80ec62a:	681b      	ldr	r3, [r3, #0]
 80ec62c:	695b      	ldr	r3, [r3, #20]
 80ec62e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80ec632:	2b00      	cmp	r3, #0
 80ec634:	d00a      	beq.n	80ec64c <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80ec636:	687b      	ldr	r3, [r7, #4]
 80ec638:	681b      	ldr	r3, [r3, #0]
 80ec63a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80ec63e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80ec640:	687b      	ldr	r3, [r7, #4]
 80ec642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ec644:	f043 0208 	orr.w	r2, r3, #8
 80ec648:	687b      	ldr	r3, [r7, #4]
 80ec64a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80ec64c:	687b      	ldr	r3, [r7, #4]
 80ec64e:	681b      	ldr	r3, [r3, #0]
 80ec650:	691b      	ldr	r3, [r3, #16]
 80ec652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80ec656:	2b00      	cmp	r3, #0
 80ec658:	d013      	beq.n	80ec682 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80ec65a:	687b      	ldr	r3, [r7, #4]
 80ec65c:	681b      	ldr	r3, [r3, #0]
 80ec65e:	695b      	ldr	r3, [r3, #20]
 80ec660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80ec664:	2b00      	cmp	r3, #0
 80ec666:	d00c      	beq.n	80ec682 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80ec668:	687b      	ldr	r3, [r7, #4]
 80ec66a:	681b      	ldr	r3, [r3, #0]
 80ec66c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80ec670:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80ec672:	687b      	ldr	r3, [r7, #4]
 80ec674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80ec676:	2b00      	cmp	r3, #0
 80ec678:	d003      	beq.n	80ec682 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80ec67a:	687b      	ldr	r3, [r7, #4]
 80ec67c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80ec67e:	6878      	ldr	r0, [r7, #4]
 80ec680:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80ec682:	687b      	ldr	r3, [r7, #4]
 80ec684:	681b      	ldr	r3, [r3, #0]
 80ec686:	691b      	ldr	r3, [r3, #16]
 80ec688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80ec68c:	2b00      	cmp	r3, #0
 80ec68e:	d04c      	beq.n	80ec72a <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80ec690:	687b      	ldr	r3, [r7, #4]
 80ec692:	681b      	ldr	r3, [r3, #0]
 80ec694:	695b      	ldr	r3, [r3, #20]
 80ec696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80ec69a:	2b00      	cmp	r3, #0
 80ec69c:	d045      	beq.n	80ec72a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80ec69e:	687b      	ldr	r3, [r7, #4]
 80ec6a0:	681b      	ldr	r3, [r3, #0]
 80ec6a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80ec6a6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80ec6a8:	687b      	ldr	r3, [r7, #4]
 80ec6aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80ec6ae:	b2db      	uxtb	r3, r3
 80ec6b0:	2b04      	cmp	r3, #4
 80ec6b2:	d12e      	bne.n	80ec712 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80ec6b4:	687b      	ldr	r3, [r7, #4]
 80ec6b6:	681b      	ldr	r3, [r3, #0]
 80ec6b8:	695a      	ldr	r2, [r3, #20]
 80ec6ba:	687b      	ldr	r3, [r7, #4]
 80ec6bc:	681b      	ldr	r3, [r3, #0]
 80ec6be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80ec6c2:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80ec6c4:	687b      	ldr	r3, [r7, #4]
 80ec6c6:	681b      	ldr	r3, [r3, #0]
 80ec6c8:	695a      	ldr	r2, [r3, #20]
 80ec6ca:	687b      	ldr	r3, [r7, #4]
 80ec6cc:	681b      	ldr	r3, [r3, #0]
 80ec6ce:	f042 0202 	orr.w	r2, r2, #2
 80ec6d2:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80ec6d4:	687b      	ldr	r3, [r7, #4]
 80ec6d6:	2201      	movs	r2, #1
 80ec6d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80ec6dc:	687b      	ldr	r3, [r7, #4]
 80ec6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ec6e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80ec6e4:	2b00      	cmp	r3, #0
 80ec6e6:	d007      	beq.n	80ec6f8 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80ec6e8:	687b      	ldr	r3, [r7, #4]
 80ec6ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80ec6ec:	2201      	movs	r2, #1
 80ec6ee:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80ec6f0:	687b      	ldr	r3, [r7, #4]
 80ec6f2:	681b      	ldr	r3, [r3, #0]
 80ec6f4:	2200      	movs	r2, #0
 80ec6f6:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80ec6f8:	687b      	ldr	r3, [r7, #4]
 80ec6fa:	2200      	movs	r2, #0
 80ec6fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80ec700:	687b      	ldr	r3, [r7, #4]
 80ec702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80ec704:	2b00      	cmp	r3, #0
 80ec706:	d07a      	beq.n	80ec7fe <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80ec708:	687b      	ldr	r3, [r7, #4]
 80ec70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80ec70c:	6878      	ldr	r0, [r7, #4]
 80ec70e:	4798      	blx	r3
        }

        return;
 80ec710:	e075      	b.n	80ec7fe <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80ec712:	687b      	ldr	r3, [r7, #4]
 80ec714:	2205      	movs	r2, #5
 80ec716:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80ec71a:	687b      	ldr	r3, [r7, #4]
 80ec71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80ec71e:	2b00      	cmp	r3, #0
 80ec720:	d003      	beq.n	80ec72a <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80ec722:	687b      	ldr	r3, [r7, #4]
 80ec724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80ec726:	6878      	ldr	r0, [r7, #4]
 80ec728:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80ec72a:	687b      	ldr	r3, [r7, #4]
 80ec72c:	681b      	ldr	r3, [r3, #0]
 80ec72e:	691b      	ldr	r3, [r3, #16]
 80ec730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80ec734:	2b00      	cmp	r3, #0
 80ec736:	d039      	beq.n	80ec7ac <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80ec738:	687b      	ldr	r3, [r7, #4]
 80ec73a:	681b      	ldr	r3, [r3, #0]
 80ec73c:	695b      	ldr	r3, [r3, #20]
 80ec73e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80ec742:	2b00      	cmp	r3, #0
 80ec744:	d032      	beq.n	80ec7ac <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80ec746:	687b      	ldr	r3, [r7, #4]
 80ec748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ec74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80ec74e:	2b00      	cmp	r3, #0
 80ec750:	d012      	beq.n	80ec778 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80ec752:	687b      	ldr	r3, [r7, #4]
 80ec754:	681b      	ldr	r3, [r3, #0]
 80ec756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80ec758:	2b00      	cmp	r3, #0
 80ec75a:	d116      	bne.n	80ec78a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80ec75c:	687b      	ldr	r3, [r7, #4]
 80ec75e:	681b      	ldr	r3, [r3, #0]
 80ec760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80ec762:	2b00      	cmp	r3, #0
 80ec764:	d111      	bne.n	80ec78a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80ec766:	687b      	ldr	r3, [r7, #4]
 80ec768:	2201      	movs	r2, #1
 80ec76a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80ec76e:	687b      	ldr	r3, [r7, #4]
 80ec770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80ec772:	2201      	movs	r2, #1
 80ec774:	731a      	strb	r2, [r3, #12]
 80ec776:	e008      	b.n	80ec78a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80ec778:	687b      	ldr	r3, [r7, #4]
 80ec77a:	681b      	ldr	r3, [r3, #0]
 80ec77c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80ec77e:	2b00      	cmp	r3, #0
 80ec780:	d103      	bne.n	80ec78a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80ec782:	687b      	ldr	r3, [r7, #4]
 80ec784:	2201      	movs	r2, #1
 80ec786:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80ec78a:	687b      	ldr	r3, [r7, #4]
 80ec78c:	681b      	ldr	r3, [r3, #0]
 80ec78e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80ec792:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80ec794:	687b      	ldr	r3, [r7, #4]
 80ec796:	2200      	movs	r2, #0
 80ec798:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80ec79c:	687b      	ldr	r3, [r7, #4]
 80ec79e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ec7a0:	2b00      	cmp	r3, #0
 80ec7a2:	d003      	beq.n	80ec7ac <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80ec7a4:	687b      	ldr	r3, [r7, #4]
 80ec7a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ec7a8:	6878      	ldr	r0, [r7, #4]
 80ec7aa:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80ec7ac:	687b      	ldr	r3, [r7, #4]
 80ec7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ec7b0:	2b00      	cmp	r3, #0
 80ec7b2:	d025      	beq.n	80ec800 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80ec7b4:	687b      	ldr	r3, [r7, #4]
 80ec7b6:	681b      	ldr	r3, [r3, #0]
 80ec7b8:	695a      	ldr	r2, [r3, #20]
 80ec7ba:	687b      	ldr	r3, [r7, #4]
 80ec7bc:	681b      	ldr	r3, [r3, #0]
 80ec7be:	f042 0202 	orr.w	r2, r2, #2
 80ec7c2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80ec7c4:	687b      	ldr	r3, [r7, #4]
 80ec7c6:	2201      	movs	r2, #1
 80ec7c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80ec7cc:	687b      	ldr	r3, [r7, #4]
 80ec7ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ec7d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80ec7d4:	2b00      	cmp	r3, #0
 80ec7d6:	d003      	beq.n	80ec7e0 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80ec7d8:	687b      	ldr	r3, [r7, #4]
 80ec7da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80ec7dc:	2201      	movs	r2, #1
 80ec7de:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80ec7e0:	687b      	ldr	r3, [r7, #4]
 80ec7e2:	2200      	movs	r2, #0
 80ec7e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80ec7e8:	687b      	ldr	r3, [r7, #4]
 80ec7ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80ec7ec:	2b00      	cmp	r3, #0
 80ec7ee:	d007      	beq.n	80ec800 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80ec7f0:	687b      	ldr	r3, [r7, #4]
 80ec7f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80ec7f4:	6878      	ldr	r0, [r7, #4]
 80ec7f6:	4798      	blx	r3
 80ec7f8:	e002      	b.n	80ec800 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80ec7fa:	bf00      	nop
 80ec7fc:	e000      	b.n	80ec800 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80ec7fe:	bf00      	nop
    }
  }
}
 80ec800:	3718      	adds	r7, #24
 80ec802:	46bd      	mov	sp, r7
 80ec804:	bd80      	pop	{r7, pc}

080ec806 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80ec806:	b480      	push	{r7}
 80ec808:	b085      	sub	sp, #20
 80ec80a:	af00      	add	r7, sp, #0
 80ec80c:	6078      	str	r0, [r7, #4]
 80ec80e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80ec810:	687b      	ldr	r3, [r7, #4]
 80ec812:	2b00      	cmp	r3, #0
 80ec814:	d101      	bne.n	80ec81a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80ec816:	2301      	movs	r3, #1
 80ec818:	e02b      	b.n	80ec872 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80ec81a:	687b      	ldr	r3, [r7, #4]
 80ec81c:	681b      	ldr	r3, [r3, #0]
 80ec81e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80ec822:	f023 030f 	bic.w	r3, r3, #15
 80ec826:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80ec828:	687b      	ldr	r3, [r7, #4]
 80ec82a:	681b      	ldr	r3, [r3, #0]
 80ec82c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80ec830:	3b50      	subs	r3, #80	@ 0x50
 80ec832:	09db      	lsrs	r3, r3, #7
 80ec834:	f003 031f 	and.w	r3, r3, #31
 80ec838:	2201      	movs	r2, #1
 80ec83a:	fa02 f303 	lsl.w	r3, r2, r3
 80ec83e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80ec840:	683b      	ldr	r3, [r7, #0]
 80ec842:	f003 0310 	and.w	r3, r3, #16
 80ec846:	2b00      	cmp	r3, #0
 80ec848:	d012      	beq.n	80ec870 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80ec84a:	683b      	ldr	r3, [r7, #0]
 80ec84c:	f003 0311 	and.w	r3, r3, #17
 80ec850:	2b11      	cmp	r3, #17
 80ec852:	d106      	bne.n	80ec862 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80ec854:	68fb      	ldr	r3, [r7, #12]
 80ec856:	685a      	ldr	r2, [r3, #4]
 80ec858:	68bb      	ldr	r3, [r7, #8]
 80ec85a:	431a      	orrs	r2, r3
 80ec85c:	68fb      	ldr	r3, [r7, #12]
 80ec85e:	605a      	str	r2, [r3, #4]
 80ec860:	e006      	b.n	80ec870 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80ec862:	68fb      	ldr	r3, [r7, #12]
 80ec864:	685a      	ldr	r2, [r3, #4]
 80ec866:	68bb      	ldr	r3, [r7, #8]
 80ec868:	43db      	mvns	r3, r3
 80ec86a:	401a      	ands	r2, r3
 80ec86c:	68fb      	ldr	r3, [r7, #12]
 80ec86e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80ec870:	2300      	movs	r3, #0
}
 80ec872:	4618      	mov	r0, r3
 80ec874:	3714      	adds	r7, #20
 80ec876:	46bd      	mov	sp, r7
 80ec878:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ec87c:	4770      	bx	lr
	...

080ec880 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80ec880:	b480      	push	{r7}
 80ec882:	b085      	sub	sp, #20
 80ec884:	af00      	add	r7, sp, #0
 80ec886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80ec888:	687b      	ldr	r3, [r7, #4]
 80ec88a:	6a1b      	ldr	r3, [r3, #32]
 80ec88c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80ec88e:	687b      	ldr	r3, [r7, #4]
 80ec890:	681b      	ldr	r3, [r3, #0]
 80ec892:	695b      	ldr	r3, [r3, #20]
 80ec894:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80ec898:	687b      	ldr	r3, [r7, #4]
 80ec89a:	681b      	ldr	r3, [r3, #0]
 80ec89c:	68fa      	ldr	r2, [r7, #12]
 80ec89e:	430a      	orrs	r2, r1
 80ec8a0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80ec8a2:	687b      	ldr	r3, [r7, #4]
 80ec8a4:	695a      	ldr	r2, [r3, #20]
 80ec8a6:	687b      	ldr	r3, [r7, #4]
 80ec8a8:	69db      	ldr	r3, [r3, #28]
 80ec8aa:	431a      	orrs	r2, r3
 80ec8ac:	687b      	ldr	r3, [r7, #4]
 80ec8ae:	691b      	ldr	r3, [r3, #16]
 80ec8b0:	431a      	orrs	r2, r3
 80ec8b2:	687b      	ldr	r3, [r7, #4]
 80ec8b4:	699b      	ldr	r3, [r3, #24]
 80ec8b6:	4313      	orrs	r3, r2
 80ec8b8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80ec8ba:	687b      	ldr	r3, [r7, #4]
 80ec8bc:	681b      	ldr	r3, [r3, #0]
 80ec8be:	4a53      	ldr	r2, [pc, #332]	@ (80eca0c <DMA_Init+0x18c>)
 80ec8c0:	4293      	cmp	r3, r2
 80ec8c2:	f000 80a0 	beq.w	80eca06 <DMA_Init+0x186>
 80ec8c6:	687b      	ldr	r3, [r7, #4]
 80ec8c8:	681b      	ldr	r3, [r3, #0]
 80ec8ca:	4a51      	ldr	r2, [pc, #324]	@ (80eca10 <DMA_Init+0x190>)
 80ec8cc:	4293      	cmp	r3, r2
 80ec8ce:	f000 809a 	beq.w	80eca06 <DMA_Init+0x186>
 80ec8d2:	687b      	ldr	r3, [r7, #4]
 80ec8d4:	681b      	ldr	r3, [r3, #0]
 80ec8d6:	4a4f      	ldr	r2, [pc, #316]	@ (80eca14 <DMA_Init+0x194>)
 80ec8d8:	4293      	cmp	r3, r2
 80ec8da:	f000 8094 	beq.w	80eca06 <DMA_Init+0x186>
 80ec8de:	687b      	ldr	r3, [r7, #4]
 80ec8e0:	681b      	ldr	r3, [r3, #0]
 80ec8e2:	4a4d      	ldr	r2, [pc, #308]	@ (80eca18 <DMA_Init+0x198>)
 80ec8e4:	4293      	cmp	r3, r2
 80ec8e6:	f000 808e 	beq.w	80eca06 <DMA_Init+0x186>
 80ec8ea:	687b      	ldr	r3, [r7, #4]
 80ec8ec:	681b      	ldr	r3, [r3, #0]
 80ec8ee:	4a4b      	ldr	r2, [pc, #300]	@ (80eca1c <DMA_Init+0x19c>)
 80ec8f0:	4293      	cmp	r3, r2
 80ec8f2:	f000 8088 	beq.w	80eca06 <DMA_Init+0x186>
 80ec8f6:	687b      	ldr	r3, [r7, #4]
 80ec8f8:	681b      	ldr	r3, [r3, #0]
 80ec8fa:	4a49      	ldr	r2, [pc, #292]	@ (80eca20 <DMA_Init+0x1a0>)
 80ec8fc:	4293      	cmp	r3, r2
 80ec8fe:	f000 8082 	beq.w	80eca06 <DMA_Init+0x186>
 80ec902:	687b      	ldr	r3, [r7, #4]
 80ec904:	681b      	ldr	r3, [r3, #0]
 80ec906:	4a47      	ldr	r2, [pc, #284]	@ (80eca24 <DMA_Init+0x1a4>)
 80ec908:	4293      	cmp	r3, r2
 80ec90a:	d07c      	beq.n	80eca06 <DMA_Init+0x186>
 80ec90c:	687b      	ldr	r3, [r7, #4]
 80ec90e:	681b      	ldr	r3, [r3, #0]
 80ec910:	4a45      	ldr	r2, [pc, #276]	@ (80eca28 <DMA_Init+0x1a8>)
 80ec912:	4293      	cmp	r3, r2
 80ec914:	d077      	beq.n	80eca06 <DMA_Init+0x186>
 80ec916:	687b      	ldr	r3, [r7, #4]
 80ec918:	681b      	ldr	r3, [r3, #0]
 80ec91a:	4a44      	ldr	r2, [pc, #272]	@ (80eca2c <DMA_Init+0x1ac>)
 80ec91c:	4293      	cmp	r3, r2
 80ec91e:	d072      	beq.n	80eca06 <DMA_Init+0x186>
 80ec920:	687b      	ldr	r3, [r7, #4]
 80ec922:	681b      	ldr	r3, [r3, #0]
 80ec924:	4a42      	ldr	r2, [pc, #264]	@ (80eca30 <DMA_Init+0x1b0>)
 80ec926:	4293      	cmp	r3, r2
 80ec928:	d06d      	beq.n	80eca06 <DMA_Init+0x186>
 80ec92a:	687b      	ldr	r3, [r7, #4]
 80ec92c:	681b      	ldr	r3, [r3, #0]
 80ec92e:	4a41      	ldr	r2, [pc, #260]	@ (80eca34 <DMA_Init+0x1b4>)
 80ec930:	4293      	cmp	r3, r2
 80ec932:	d068      	beq.n	80eca06 <DMA_Init+0x186>
 80ec934:	687b      	ldr	r3, [r7, #4]
 80ec936:	681b      	ldr	r3, [r3, #0]
 80ec938:	4a3f      	ldr	r2, [pc, #252]	@ (80eca38 <DMA_Init+0x1b8>)
 80ec93a:	4293      	cmp	r3, r2
 80ec93c:	d063      	beq.n	80eca06 <DMA_Init+0x186>
 80ec93e:	687b      	ldr	r3, [r7, #4]
 80ec940:	681b      	ldr	r3, [r3, #0]
 80ec942:	4a3e      	ldr	r2, [pc, #248]	@ (80eca3c <DMA_Init+0x1bc>)
 80ec944:	4293      	cmp	r3, r2
 80ec946:	d05e      	beq.n	80eca06 <DMA_Init+0x186>
 80ec948:	687b      	ldr	r3, [r7, #4]
 80ec94a:	681b      	ldr	r3, [r3, #0]
 80ec94c:	4a3c      	ldr	r2, [pc, #240]	@ (80eca40 <DMA_Init+0x1c0>)
 80ec94e:	4293      	cmp	r3, r2
 80ec950:	d059      	beq.n	80eca06 <DMA_Init+0x186>
 80ec952:	687b      	ldr	r3, [r7, #4]
 80ec954:	681b      	ldr	r3, [r3, #0]
 80ec956:	4a3b      	ldr	r2, [pc, #236]	@ (80eca44 <DMA_Init+0x1c4>)
 80ec958:	4293      	cmp	r3, r2
 80ec95a:	d054      	beq.n	80eca06 <DMA_Init+0x186>
 80ec95c:	687b      	ldr	r3, [r7, #4]
 80ec95e:	681b      	ldr	r3, [r3, #0]
 80ec960:	4a39      	ldr	r2, [pc, #228]	@ (80eca48 <DMA_Init+0x1c8>)
 80ec962:	4293      	cmp	r3, r2
 80ec964:	d04f      	beq.n	80eca06 <DMA_Init+0x186>
 80ec966:	687b      	ldr	r3, [r7, #4]
 80ec968:	681b      	ldr	r3, [r3, #0]
 80ec96a:	4a38      	ldr	r2, [pc, #224]	@ (80eca4c <DMA_Init+0x1cc>)
 80ec96c:	4293      	cmp	r3, r2
 80ec96e:	d04a      	beq.n	80eca06 <DMA_Init+0x186>
 80ec970:	687b      	ldr	r3, [r7, #4]
 80ec972:	681b      	ldr	r3, [r3, #0]
 80ec974:	4a36      	ldr	r2, [pc, #216]	@ (80eca50 <DMA_Init+0x1d0>)
 80ec976:	4293      	cmp	r3, r2
 80ec978:	d045      	beq.n	80eca06 <DMA_Init+0x186>
 80ec97a:	687b      	ldr	r3, [r7, #4]
 80ec97c:	681b      	ldr	r3, [r3, #0]
 80ec97e:	4a35      	ldr	r2, [pc, #212]	@ (80eca54 <DMA_Init+0x1d4>)
 80ec980:	4293      	cmp	r3, r2
 80ec982:	d040      	beq.n	80eca06 <DMA_Init+0x186>
 80ec984:	687b      	ldr	r3, [r7, #4]
 80ec986:	681b      	ldr	r3, [r3, #0]
 80ec988:	4a33      	ldr	r2, [pc, #204]	@ (80eca58 <DMA_Init+0x1d8>)
 80ec98a:	4293      	cmp	r3, r2
 80ec98c:	d03b      	beq.n	80eca06 <DMA_Init+0x186>
 80ec98e:	687b      	ldr	r3, [r7, #4]
 80ec990:	681b      	ldr	r3, [r3, #0]
 80ec992:	4a32      	ldr	r2, [pc, #200]	@ (80eca5c <DMA_Init+0x1dc>)
 80ec994:	4293      	cmp	r3, r2
 80ec996:	d036      	beq.n	80eca06 <DMA_Init+0x186>
 80ec998:	687b      	ldr	r3, [r7, #4]
 80ec99a:	681b      	ldr	r3, [r3, #0]
 80ec99c:	4a30      	ldr	r2, [pc, #192]	@ (80eca60 <DMA_Init+0x1e0>)
 80ec99e:	4293      	cmp	r3, r2
 80ec9a0:	d031      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9a2:	687b      	ldr	r3, [r7, #4]
 80ec9a4:	681b      	ldr	r3, [r3, #0]
 80ec9a6:	4a2f      	ldr	r2, [pc, #188]	@ (80eca64 <DMA_Init+0x1e4>)
 80ec9a8:	4293      	cmp	r3, r2
 80ec9aa:	d02c      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9ac:	687b      	ldr	r3, [r7, #4]
 80ec9ae:	681b      	ldr	r3, [r3, #0]
 80ec9b0:	4a2d      	ldr	r2, [pc, #180]	@ (80eca68 <DMA_Init+0x1e8>)
 80ec9b2:	4293      	cmp	r3, r2
 80ec9b4:	d027      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9b6:	687b      	ldr	r3, [r7, #4]
 80ec9b8:	681b      	ldr	r3, [r3, #0]
 80ec9ba:	4a2c      	ldr	r2, [pc, #176]	@ (80eca6c <DMA_Init+0x1ec>)
 80ec9bc:	4293      	cmp	r3, r2
 80ec9be:	d022      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9c0:	687b      	ldr	r3, [r7, #4]
 80ec9c2:	681b      	ldr	r3, [r3, #0]
 80ec9c4:	4a2a      	ldr	r2, [pc, #168]	@ (80eca70 <DMA_Init+0x1f0>)
 80ec9c6:	4293      	cmp	r3, r2
 80ec9c8:	d01d      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9ca:	687b      	ldr	r3, [r7, #4]
 80ec9cc:	681b      	ldr	r3, [r3, #0]
 80ec9ce:	4a29      	ldr	r2, [pc, #164]	@ (80eca74 <DMA_Init+0x1f4>)
 80ec9d0:	4293      	cmp	r3, r2
 80ec9d2:	d018      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9d4:	687b      	ldr	r3, [r7, #4]
 80ec9d6:	681b      	ldr	r3, [r3, #0]
 80ec9d8:	4a27      	ldr	r2, [pc, #156]	@ (80eca78 <DMA_Init+0x1f8>)
 80ec9da:	4293      	cmp	r3, r2
 80ec9dc:	d013      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9de:	687b      	ldr	r3, [r7, #4]
 80ec9e0:	681b      	ldr	r3, [r3, #0]
 80ec9e2:	4a26      	ldr	r2, [pc, #152]	@ (80eca7c <DMA_Init+0x1fc>)
 80ec9e4:	4293      	cmp	r3, r2
 80ec9e6:	d00e      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9e8:	687b      	ldr	r3, [r7, #4]
 80ec9ea:	681b      	ldr	r3, [r3, #0]
 80ec9ec:	4a24      	ldr	r2, [pc, #144]	@ (80eca80 <DMA_Init+0x200>)
 80ec9ee:	4293      	cmp	r3, r2
 80ec9f0:	d009      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9f2:	687b      	ldr	r3, [r7, #4]
 80ec9f4:	681b      	ldr	r3, [r3, #0]
 80ec9f6:	4a23      	ldr	r2, [pc, #140]	@ (80eca84 <DMA_Init+0x204>)
 80ec9f8:	4293      	cmp	r3, r2
 80ec9fa:	d004      	beq.n	80eca06 <DMA_Init+0x186>
 80ec9fc:	687b      	ldr	r3, [r7, #4]
 80ec9fe:	681b      	ldr	r3, [r3, #0]
 80eca00:	4a21      	ldr	r2, [pc, #132]	@ (80eca88 <DMA_Init+0x208>)
 80eca02:	4293      	cmp	r3, r2
 80eca04:	d142      	bne.n	80eca8c <DMA_Init+0x20c>
 80eca06:	2301      	movs	r3, #1
 80eca08:	e041      	b.n	80eca8e <DMA_Init+0x20e>
 80eca0a:	bf00      	nop
 80eca0c:	40020050 	.word	0x40020050
 80eca10:	50020050 	.word	0x50020050
 80eca14:	400200d0 	.word	0x400200d0
 80eca18:	500200d0 	.word	0x500200d0
 80eca1c:	40020150 	.word	0x40020150
 80eca20:	50020150 	.word	0x50020150
 80eca24:	400201d0 	.word	0x400201d0
 80eca28:	500201d0 	.word	0x500201d0
 80eca2c:	40020250 	.word	0x40020250
 80eca30:	50020250 	.word	0x50020250
 80eca34:	400202d0 	.word	0x400202d0
 80eca38:	500202d0 	.word	0x500202d0
 80eca3c:	40020350 	.word	0x40020350
 80eca40:	50020350 	.word	0x50020350
 80eca44:	400203d0 	.word	0x400203d0
 80eca48:	500203d0 	.word	0x500203d0
 80eca4c:	40021050 	.word	0x40021050
 80eca50:	50021050 	.word	0x50021050
 80eca54:	400210d0 	.word	0x400210d0
 80eca58:	500210d0 	.word	0x500210d0
 80eca5c:	40021150 	.word	0x40021150
 80eca60:	50021150 	.word	0x50021150
 80eca64:	400211d0 	.word	0x400211d0
 80eca68:	500211d0 	.word	0x500211d0
 80eca6c:	40021250 	.word	0x40021250
 80eca70:	50021250 	.word	0x50021250
 80eca74:	400212d0 	.word	0x400212d0
 80eca78:	500212d0 	.word	0x500212d0
 80eca7c:	40021350 	.word	0x40021350
 80eca80:	50021350 	.word	0x50021350
 80eca84:	400213d0 	.word	0x400213d0
 80eca88:	500213d0 	.word	0x500213d0
 80eca8c:	2300      	movs	r3, #0
 80eca8e:	2b00      	cmp	r3, #0
 80eca90:	d012      	beq.n	80ecab8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80eca92:	687b      	ldr	r3, [r7, #4]
 80eca94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80eca96:	687b      	ldr	r3, [r7, #4]
 80eca98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eca9a:	3b01      	subs	r3, #1
 80eca9c:	051b      	lsls	r3, r3, #20
 80eca9e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80ecaa2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80ecaa4:	687b      	ldr	r3, [r7, #4]
 80ecaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ecaa8:	3b01      	subs	r3, #1
 80ecaaa:	011b      	lsls	r3, r3, #4
 80ecaac:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80ecab0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80ecab2:	68fa      	ldr	r2, [r7, #12]
 80ecab4:	4313      	orrs	r3, r2
 80ecab6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80ecab8:	687b      	ldr	r3, [r7, #4]
 80ecaba:	681b      	ldr	r3, [r3, #0]
 80ecabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80ecabe:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80ecac2:	687b      	ldr	r3, [r7, #4]
 80ecac4:	681b      	ldr	r3, [r3, #0]
 80ecac6:	68fa      	ldr	r2, [r7, #12]
 80ecac8:	430a      	orrs	r2, r1
 80ecaca:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80ecacc:	687b      	ldr	r3, [r7, #4]
 80ecace:	689a      	ldr	r2, [r3, #8]
 80ecad0:	687b      	ldr	r3, [r7, #4]
 80ecad2:	685b      	ldr	r3, [r3, #4]
 80ecad4:	b2db      	uxtb	r3, r3
 80ecad6:	431a      	orrs	r2, r3
 80ecad8:	687b      	ldr	r3, [r7, #4]
 80ecada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80ecadc:	4313      	orrs	r3, r2
 80ecade:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80ecae0:	687b      	ldr	r3, [r7, #4]
 80ecae2:	68db      	ldr	r3, [r3, #12]
 80ecae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80ecae8:	f040 80b0 	bne.w	80ecc4c <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80ecaec:	687b      	ldr	r3, [r7, #4]
 80ecaee:	681b      	ldr	r3, [r3, #0]
 80ecaf0:	4a84      	ldr	r2, [pc, #528]	@ (80ecd04 <DMA_Init+0x484>)
 80ecaf2:	4293      	cmp	r3, r2
 80ecaf4:	f000 80a0 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecaf8:	687b      	ldr	r3, [r7, #4]
 80ecafa:	681b      	ldr	r3, [r3, #0]
 80ecafc:	4a82      	ldr	r2, [pc, #520]	@ (80ecd08 <DMA_Init+0x488>)
 80ecafe:	4293      	cmp	r3, r2
 80ecb00:	f000 809a 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecb04:	687b      	ldr	r3, [r7, #4]
 80ecb06:	681b      	ldr	r3, [r3, #0]
 80ecb08:	4a80      	ldr	r2, [pc, #512]	@ (80ecd0c <DMA_Init+0x48c>)
 80ecb0a:	4293      	cmp	r3, r2
 80ecb0c:	f000 8094 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecb10:	687b      	ldr	r3, [r7, #4]
 80ecb12:	681b      	ldr	r3, [r3, #0]
 80ecb14:	4a7e      	ldr	r2, [pc, #504]	@ (80ecd10 <DMA_Init+0x490>)
 80ecb16:	4293      	cmp	r3, r2
 80ecb18:	f000 808e 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecb1c:	687b      	ldr	r3, [r7, #4]
 80ecb1e:	681b      	ldr	r3, [r3, #0]
 80ecb20:	4a7c      	ldr	r2, [pc, #496]	@ (80ecd14 <DMA_Init+0x494>)
 80ecb22:	4293      	cmp	r3, r2
 80ecb24:	f000 8088 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecb28:	687b      	ldr	r3, [r7, #4]
 80ecb2a:	681b      	ldr	r3, [r3, #0]
 80ecb2c:	4a7a      	ldr	r2, [pc, #488]	@ (80ecd18 <DMA_Init+0x498>)
 80ecb2e:	4293      	cmp	r3, r2
 80ecb30:	f000 8082 	beq.w	80ecc38 <DMA_Init+0x3b8>
 80ecb34:	687b      	ldr	r3, [r7, #4]
 80ecb36:	681b      	ldr	r3, [r3, #0]
 80ecb38:	4a78      	ldr	r2, [pc, #480]	@ (80ecd1c <DMA_Init+0x49c>)
 80ecb3a:	4293      	cmp	r3, r2
 80ecb3c:	d07c      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb3e:	687b      	ldr	r3, [r7, #4]
 80ecb40:	681b      	ldr	r3, [r3, #0]
 80ecb42:	4a77      	ldr	r2, [pc, #476]	@ (80ecd20 <DMA_Init+0x4a0>)
 80ecb44:	4293      	cmp	r3, r2
 80ecb46:	d077      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb48:	687b      	ldr	r3, [r7, #4]
 80ecb4a:	681b      	ldr	r3, [r3, #0]
 80ecb4c:	4a75      	ldr	r2, [pc, #468]	@ (80ecd24 <DMA_Init+0x4a4>)
 80ecb4e:	4293      	cmp	r3, r2
 80ecb50:	d072      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb52:	687b      	ldr	r3, [r7, #4]
 80ecb54:	681b      	ldr	r3, [r3, #0]
 80ecb56:	4a74      	ldr	r2, [pc, #464]	@ (80ecd28 <DMA_Init+0x4a8>)
 80ecb58:	4293      	cmp	r3, r2
 80ecb5a:	d06d      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb5c:	687b      	ldr	r3, [r7, #4]
 80ecb5e:	681b      	ldr	r3, [r3, #0]
 80ecb60:	4a72      	ldr	r2, [pc, #456]	@ (80ecd2c <DMA_Init+0x4ac>)
 80ecb62:	4293      	cmp	r3, r2
 80ecb64:	d068      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb66:	687b      	ldr	r3, [r7, #4]
 80ecb68:	681b      	ldr	r3, [r3, #0]
 80ecb6a:	4a71      	ldr	r2, [pc, #452]	@ (80ecd30 <DMA_Init+0x4b0>)
 80ecb6c:	4293      	cmp	r3, r2
 80ecb6e:	d063      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb70:	687b      	ldr	r3, [r7, #4]
 80ecb72:	681b      	ldr	r3, [r3, #0]
 80ecb74:	4a6f      	ldr	r2, [pc, #444]	@ (80ecd34 <DMA_Init+0x4b4>)
 80ecb76:	4293      	cmp	r3, r2
 80ecb78:	d05e      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb7a:	687b      	ldr	r3, [r7, #4]
 80ecb7c:	681b      	ldr	r3, [r3, #0]
 80ecb7e:	4a6e      	ldr	r2, [pc, #440]	@ (80ecd38 <DMA_Init+0x4b8>)
 80ecb80:	4293      	cmp	r3, r2
 80ecb82:	d059      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb84:	687b      	ldr	r3, [r7, #4]
 80ecb86:	681b      	ldr	r3, [r3, #0]
 80ecb88:	4a6c      	ldr	r2, [pc, #432]	@ (80ecd3c <DMA_Init+0x4bc>)
 80ecb8a:	4293      	cmp	r3, r2
 80ecb8c:	d054      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb8e:	687b      	ldr	r3, [r7, #4]
 80ecb90:	681b      	ldr	r3, [r3, #0]
 80ecb92:	4a6b      	ldr	r2, [pc, #428]	@ (80ecd40 <DMA_Init+0x4c0>)
 80ecb94:	4293      	cmp	r3, r2
 80ecb96:	d04f      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecb98:	687b      	ldr	r3, [r7, #4]
 80ecb9a:	681b      	ldr	r3, [r3, #0]
 80ecb9c:	4a69      	ldr	r2, [pc, #420]	@ (80ecd44 <DMA_Init+0x4c4>)
 80ecb9e:	4293      	cmp	r3, r2
 80ecba0:	d04a      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecba2:	687b      	ldr	r3, [r7, #4]
 80ecba4:	681b      	ldr	r3, [r3, #0]
 80ecba6:	4a68      	ldr	r2, [pc, #416]	@ (80ecd48 <DMA_Init+0x4c8>)
 80ecba8:	4293      	cmp	r3, r2
 80ecbaa:	d045      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbac:	687b      	ldr	r3, [r7, #4]
 80ecbae:	681b      	ldr	r3, [r3, #0]
 80ecbb0:	4a66      	ldr	r2, [pc, #408]	@ (80ecd4c <DMA_Init+0x4cc>)
 80ecbb2:	4293      	cmp	r3, r2
 80ecbb4:	d040      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbb6:	687b      	ldr	r3, [r7, #4]
 80ecbb8:	681b      	ldr	r3, [r3, #0]
 80ecbba:	4a65      	ldr	r2, [pc, #404]	@ (80ecd50 <DMA_Init+0x4d0>)
 80ecbbc:	4293      	cmp	r3, r2
 80ecbbe:	d03b      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbc0:	687b      	ldr	r3, [r7, #4]
 80ecbc2:	681b      	ldr	r3, [r3, #0]
 80ecbc4:	4a63      	ldr	r2, [pc, #396]	@ (80ecd54 <DMA_Init+0x4d4>)
 80ecbc6:	4293      	cmp	r3, r2
 80ecbc8:	d036      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbca:	687b      	ldr	r3, [r7, #4]
 80ecbcc:	681b      	ldr	r3, [r3, #0]
 80ecbce:	4a62      	ldr	r2, [pc, #392]	@ (80ecd58 <DMA_Init+0x4d8>)
 80ecbd0:	4293      	cmp	r3, r2
 80ecbd2:	d031      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbd4:	687b      	ldr	r3, [r7, #4]
 80ecbd6:	681b      	ldr	r3, [r3, #0]
 80ecbd8:	4a60      	ldr	r2, [pc, #384]	@ (80ecd5c <DMA_Init+0x4dc>)
 80ecbda:	4293      	cmp	r3, r2
 80ecbdc:	d02c      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbde:	687b      	ldr	r3, [r7, #4]
 80ecbe0:	681b      	ldr	r3, [r3, #0]
 80ecbe2:	4a5f      	ldr	r2, [pc, #380]	@ (80ecd60 <DMA_Init+0x4e0>)
 80ecbe4:	4293      	cmp	r3, r2
 80ecbe6:	d027      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbe8:	687b      	ldr	r3, [r7, #4]
 80ecbea:	681b      	ldr	r3, [r3, #0]
 80ecbec:	4a5d      	ldr	r2, [pc, #372]	@ (80ecd64 <DMA_Init+0x4e4>)
 80ecbee:	4293      	cmp	r3, r2
 80ecbf0:	d022      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbf2:	687b      	ldr	r3, [r7, #4]
 80ecbf4:	681b      	ldr	r3, [r3, #0]
 80ecbf6:	4a5c      	ldr	r2, [pc, #368]	@ (80ecd68 <DMA_Init+0x4e8>)
 80ecbf8:	4293      	cmp	r3, r2
 80ecbfa:	d01d      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecbfc:	687b      	ldr	r3, [r7, #4]
 80ecbfe:	681b      	ldr	r3, [r3, #0]
 80ecc00:	4a5a      	ldr	r2, [pc, #360]	@ (80ecd6c <DMA_Init+0x4ec>)
 80ecc02:	4293      	cmp	r3, r2
 80ecc04:	d018      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecc06:	687b      	ldr	r3, [r7, #4]
 80ecc08:	681b      	ldr	r3, [r3, #0]
 80ecc0a:	4a59      	ldr	r2, [pc, #356]	@ (80ecd70 <DMA_Init+0x4f0>)
 80ecc0c:	4293      	cmp	r3, r2
 80ecc0e:	d013      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecc10:	687b      	ldr	r3, [r7, #4]
 80ecc12:	681b      	ldr	r3, [r3, #0]
 80ecc14:	4a57      	ldr	r2, [pc, #348]	@ (80ecd74 <DMA_Init+0x4f4>)
 80ecc16:	4293      	cmp	r3, r2
 80ecc18:	d00e      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecc1a:	687b      	ldr	r3, [r7, #4]
 80ecc1c:	681b      	ldr	r3, [r3, #0]
 80ecc1e:	4a56      	ldr	r2, [pc, #344]	@ (80ecd78 <DMA_Init+0x4f8>)
 80ecc20:	4293      	cmp	r3, r2
 80ecc22:	d009      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecc24:	687b      	ldr	r3, [r7, #4]
 80ecc26:	681b      	ldr	r3, [r3, #0]
 80ecc28:	4a54      	ldr	r2, [pc, #336]	@ (80ecd7c <DMA_Init+0x4fc>)
 80ecc2a:	4293      	cmp	r3, r2
 80ecc2c:	d004      	beq.n	80ecc38 <DMA_Init+0x3b8>
 80ecc2e:	687b      	ldr	r3, [r7, #4]
 80ecc30:	681b      	ldr	r3, [r3, #0]
 80ecc32:	4a53      	ldr	r2, [pc, #332]	@ (80ecd80 <DMA_Init+0x500>)
 80ecc34:	4293      	cmp	r3, r2
 80ecc36:	d101      	bne.n	80ecc3c <DMA_Init+0x3bc>
 80ecc38:	2301      	movs	r3, #1
 80ecc3a:	e000      	b.n	80ecc3e <DMA_Init+0x3be>
 80ecc3c:	2300      	movs	r3, #0
 80ecc3e:	2b00      	cmp	r3, #0
 80ecc40:	d00d      	beq.n	80ecc5e <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80ecc42:	68fb      	ldr	r3, [r7, #12]
 80ecc44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80ecc48:	60fb      	str	r3, [r7, #12]
 80ecc4a:	e008      	b.n	80ecc5e <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80ecc4c:	687b      	ldr	r3, [r7, #4]
 80ecc4e:	68db      	ldr	r3, [r3, #12]
 80ecc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80ecc54:	d103      	bne.n	80ecc5e <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80ecc56:	68fb      	ldr	r3, [r7, #12]
 80ecc58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80ecc5c:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80ecc5e:	687b      	ldr	r3, [r7, #4]
 80ecc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ecc62:	68fa      	ldr	r2, [r7, #12]
 80ecc64:	4313      	orrs	r3, r2
 80ecc66:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80ecc68:	687b      	ldr	r3, [r7, #4]
 80ecc6a:	681b      	ldr	r3, [r3, #0]
 80ecc6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80ecc6e:	4b45      	ldr	r3, [pc, #276]	@ (80ecd84 <DMA_Init+0x504>)
 80ecc70:	4013      	ands	r3, r2
 80ecc72:	687a      	ldr	r2, [r7, #4]
 80ecc74:	6812      	ldr	r2, [r2, #0]
 80ecc76:	68f9      	ldr	r1, [r7, #12]
 80ecc78:	430b      	orrs	r3, r1
 80ecc7a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80ecc7c:	687b      	ldr	r3, [r7, #4]
 80ecc7e:	681b      	ldr	r3, [r3, #0]
 80ecc80:	2200      	movs	r2, #0
 80ecc82:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80ecc84:	687b      	ldr	r3, [r7, #4]
 80ecc86:	681b      	ldr	r3, [r3, #0]
 80ecc88:	4a2a      	ldr	r2, [pc, #168]	@ (80ecd34 <DMA_Init+0x4b4>)
 80ecc8a:	4293      	cmp	r3, r2
 80ecc8c:	d022      	beq.n	80eccd4 <DMA_Init+0x454>
 80ecc8e:	687b      	ldr	r3, [r7, #4]
 80ecc90:	681b      	ldr	r3, [r3, #0]
 80ecc92:	4a29      	ldr	r2, [pc, #164]	@ (80ecd38 <DMA_Init+0x4b8>)
 80ecc94:	4293      	cmp	r3, r2
 80ecc96:	d01d      	beq.n	80eccd4 <DMA_Init+0x454>
 80ecc98:	687b      	ldr	r3, [r7, #4]
 80ecc9a:	681b      	ldr	r3, [r3, #0]
 80ecc9c:	4a27      	ldr	r2, [pc, #156]	@ (80ecd3c <DMA_Init+0x4bc>)
 80ecc9e:	4293      	cmp	r3, r2
 80ecca0:	d018      	beq.n	80eccd4 <DMA_Init+0x454>
 80ecca2:	687b      	ldr	r3, [r7, #4]
 80ecca4:	681b      	ldr	r3, [r3, #0]
 80ecca6:	4a26      	ldr	r2, [pc, #152]	@ (80ecd40 <DMA_Init+0x4c0>)
 80ecca8:	4293      	cmp	r3, r2
 80eccaa:	d013      	beq.n	80eccd4 <DMA_Init+0x454>
 80eccac:	687b      	ldr	r3, [r7, #4]
 80eccae:	681b      	ldr	r3, [r3, #0]
 80eccb0:	4a30      	ldr	r2, [pc, #192]	@ (80ecd74 <DMA_Init+0x4f4>)
 80eccb2:	4293      	cmp	r3, r2
 80eccb4:	d00e      	beq.n	80eccd4 <DMA_Init+0x454>
 80eccb6:	687b      	ldr	r3, [r7, #4]
 80eccb8:	681b      	ldr	r3, [r3, #0]
 80eccba:	4a2f      	ldr	r2, [pc, #188]	@ (80ecd78 <DMA_Init+0x4f8>)
 80eccbc:	4293      	cmp	r3, r2
 80eccbe:	d009      	beq.n	80eccd4 <DMA_Init+0x454>
 80eccc0:	687b      	ldr	r3, [r7, #4]
 80eccc2:	681b      	ldr	r3, [r3, #0]
 80eccc4:	4a2d      	ldr	r2, [pc, #180]	@ (80ecd7c <DMA_Init+0x4fc>)
 80eccc6:	4293      	cmp	r3, r2
 80eccc8:	d004      	beq.n	80eccd4 <DMA_Init+0x454>
 80eccca:	687b      	ldr	r3, [r7, #4]
 80ecccc:	681b      	ldr	r3, [r3, #0]
 80eccce:	4a2c      	ldr	r2, [pc, #176]	@ (80ecd80 <DMA_Init+0x500>)
 80eccd0:	4293      	cmp	r3, r2
 80eccd2:	d101      	bne.n	80eccd8 <DMA_Init+0x458>
 80eccd4:	2301      	movs	r3, #1
 80eccd6:	e000      	b.n	80eccda <DMA_Init+0x45a>
 80eccd8:	2300      	movs	r3, #0
 80eccda:	2b00      	cmp	r3, #0
 80eccdc:	d007      	beq.n	80eccee <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80eccde:	687b      	ldr	r3, [r7, #4]
 80ecce0:	681b      	ldr	r3, [r3, #0]
 80ecce2:	2200      	movs	r2, #0
 80ecce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80ecce6:	687b      	ldr	r3, [r7, #4]
 80ecce8:	681b      	ldr	r3, [r3, #0]
 80eccea:	2200      	movs	r2, #0
 80eccec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80eccee:	687b      	ldr	r3, [r7, #4]
 80eccf0:	681b      	ldr	r3, [r3, #0]
 80eccf2:	2200      	movs	r2, #0
 80eccf4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80eccf6:	bf00      	nop
 80eccf8:	3714      	adds	r7, #20
 80eccfa:	46bd      	mov	sp, r7
 80eccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ecd00:	4770      	bx	lr
 80ecd02:	bf00      	nop
 80ecd04:	40020050 	.word	0x40020050
 80ecd08:	50020050 	.word	0x50020050
 80ecd0c:	400200d0 	.word	0x400200d0
 80ecd10:	500200d0 	.word	0x500200d0
 80ecd14:	40020150 	.word	0x40020150
 80ecd18:	50020150 	.word	0x50020150
 80ecd1c:	400201d0 	.word	0x400201d0
 80ecd20:	500201d0 	.word	0x500201d0
 80ecd24:	40020250 	.word	0x40020250
 80ecd28:	50020250 	.word	0x50020250
 80ecd2c:	400202d0 	.word	0x400202d0
 80ecd30:	500202d0 	.word	0x500202d0
 80ecd34:	40020350 	.word	0x40020350
 80ecd38:	50020350 	.word	0x50020350
 80ecd3c:	400203d0 	.word	0x400203d0
 80ecd40:	500203d0 	.word	0x500203d0
 80ecd44:	40021050 	.word	0x40021050
 80ecd48:	50021050 	.word	0x50021050
 80ecd4c:	400210d0 	.word	0x400210d0
 80ecd50:	500210d0 	.word	0x500210d0
 80ecd54:	40021150 	.word	0x40021150
 80ecd58:	50021150 	.word	0x50021150
 80ecd5c:	400211d0 	.word	0x400211d0
 80ecd60:	500211d0 	.word	0x500211d0
 80ecd64:	40021250 	.word	0x40021250
 80ecd68:	50021250 	.word	0x50021250
 80ecd6c:	400212d0 	.word	0x400212d0
 80ecd70:	500212d0 	.word	0x500212d0
 80ecd74:	40021350 	.word	0x40021350
 80ecd78:	50021350 	.word	0x50021350
 80ecd7c:	400213d0 	.word	0x400213d0
 80ecd80:	500213d0 	.word	0x500213d0
 80ecd84:	3cc02100 	.word	0x3cc02100

080ecd88 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80ecd88:	b580      	push	{r7, lr}
 80ecd8a:	b084      	sub	sp, #16
 80ecd8c:	af00      	add	r7, sp, #0
 80ecd8e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80ecd90:	f7fd fce0 	bl	80ea754 <HAL_GetTick>
 80ecd94:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80ecd96:	687b      	ldr	r3, [r7, #4]
 80ecd98:	2b00      	cmp	r3, #0
 80ecd9a:	d101      	bne.n	80ecda0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80ecd9c:	2301      	movs	r3, #1
 80ecd9e:	e0db      	b.n	80ecf58 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80ecda0:	687b      	ldr	r3, [r7, #4]
 80ecda2:	681b      	ldr	r3, [r3, #0]
 80ecda4:	4a6e      	ldr	r2, [pc, #440]	@ (80ecf60 <HAL_DMAEx_List_Init+0x1d8>)
 80ecda6:	4293      	cmp	r3, r2
 80ecda8:	f000 809f 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdac:	687b      	ldr	r3, [r7, #4]
 80ecdae:	681b      	ldr	r3, [r3, #0]
 80ecdb0:	4a6c      	ldr	r2, [pc, #432]	@ (80ecf64 <HAL_DMAEx_List_Init+0x1dc>)
 80ecdb2:	4293      	cmp	r3, r2
 80ecdb4:	f000 8099 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdb8:	687b      	ldr	r3, [r7, #4]
 80ecdba:	681b      	ldr	r3, [r3, #0]
 80ecdbc:	4a6a      	ldr	r2, [pc, #424]	@ (80ecf68 <HAL_DMAEx_List_Init+0x1e0>)
 80ecdbe:	4293      	cmp	r3, r2
 80ecdc0:	f000 8093 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdc4:	687b      	ldr	r3, [r7, #4]
 80ecdc6:	681b      	ldr	r3, [r3, #0]
 80ecdc8:	4a68      	ldr	r2, [pc, #416]	@ (80ecf6c <HAL_DMAEx_List_Init+0x1e4>)
 80ecdca:	4293      	cmp	r3, r2
 80ecdcc:	f000 808d 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdd0:	687b      	ldr	r3, [r7, #4]
 80ecdd2:	681b      	ldr	r3, [r3, #0]
 80ecdd4:	4a66      	ldr	r2, [pc, #408]	@ (80ecf70 <HAL_DMAEx_List_Init+0x1e8>)
 80ecdd6:	4293      	cmp	r3, r2
 80ecdd8:	f000 8087 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecddc:	687b      	ldr	r3, [r7, #4]
 80ecdde:	681b      	ldr	r3, [r3, #0]
 80ecde0:	4a64      	ldr	r2, [pc, #400]	@ (80ecf74 <HAL_DMAEx_List_Init+0x1ec>)
 80ecde2:	4293      	cmp	r3, r2
 80ecde4:	f000 8081 	beq.w	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecde8:	687b      	ldr	r3, [r7, #4]
 80ecdea:	681b      	ldr	r3, [r3, #0]
 80ecdec:	4a62      	ldr	r2, [pc, #392]	@ (80ecf78 <HAL_DMAEx_List_Init+0x1f0>)
 80ecdee:	4293      	cmp	r3, r2
 80ecdf0:	d07b      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdf2:	687b      	ldr	r3, [r7, #4]
 80ecdf4:	681b      	ldr	r3, [r3, #0]
 80ecdf6:	4a61      	ldr	r2, [pc, #388]	@ (80ecf7c <HAL_DMAEx_List_Init+0x1f4>)
 80ecdf8:	4293      	cmp	r3, r2
 80ecdfa:	d076      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecdfc:	687b      	ldr	r3, [r7, #4]
 80ecdfe:	681b      	ldr	r3, [r3, #0]
 80ece00:	4a5f      	ldr	r2, [pc, #380]	@ (80ecf80 <HAL_DMAEx_List_Init+0x1f8>)
 80ece02:	4293      	cmp	r3, r2
 80ece04:	d071      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece06:	687b      	ldr	r3, [r7, #4]
 80ece08:	681b      	ldr	r3, [r3, #0]
 80ece0a:	4a5e      	ldr	r2, [pc, #376]	@ (80ecf84 <HAL_DMAEx_List_Init+0x1fc>)
 80ece0c:	4293      	cmp	r3, r2
 80ece0e:	d06c      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece10:	687b      	ldr	r3, [r7, #4]
 80ece12:	681b      	ldr	r3, [r3, #0]
 80ece14:	4a5c      	ldr	r2, [pc, #368]	@ (80ecf88 <HAL_DMAEx_List_Init+0x200>)
 80ece16:	4293      	cmp	r3, r2
 80ece18:	d067      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece1a:	687b      	ldr	r3, [r7, #4]
 80ece1c:	681b      	ldr	r3, [r3, #0]
 80ece1e:	4a5b      	ldr	r2, [pc, #364]	@ (80ecf8c <HAL_DMAEx_List_Init+0x204>)
 80ece20:	4293      	cmp	r3, r2
 80ece22:	d062      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece24:	687b      	ldr	r3, [r7, #4]
 80ece26:	681b      	ldr	r3, [r3, #0]
 80ece28:	4a59      	ldr	r2, [pc, #356]	@ (80ecf90 <HAL_DMAEx_List_Init+0x208>)
 80ece2a:	4293      	cmp	r3, r2
 80ece2c:	d05d      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece2e:	687b      	ldr	r3, [r7, #4]
 80ece30:	681b      	ldr	r3, [r3, #0]
 80ece32:	4a58      	ldr	r2, [pc, #352]	@ (80ecf94 <HAL_DMAEx_List_Init+0x20c>)
 80ece34:	4293      	cmp	r3, r2
 80ece36:	d058      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece38:	687b      	ldr	r3, [r7, #4]
 80ece3a:	681b      	ldr	r3, [r3, #0]
 80ece3c:	4a56      	ldr	r2, [pc, #344]	@ (80ecf98 <HAL_DMAEx_List_Init+0x210>)
 80ece3e:	4293      	cmp	r3, r2
 80ece40:	d053      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece42:	687b      	ldr	r3, [r7, #4]
 80ece44:	681b      	ldr	r3, [r3, #0]
 80ece46:	4a55      	ldr	r2, [pc, #340]	@ (80ecf9c <HAL_DMAEx_List_Init+0x214>)
 80ece48:	4293      	cmp	r3, r2
 80ece4a:	d04e      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece4c:	687b      	ldr	r3, [r7, #4]
 80ece4e:	681b      	ldr	r3, [r3, #0]
 80ece50:	4a53      	ldr	r2, [pc, #332]	@ (80ecfa0 <HAL_DMAEx_List_Init+0x218>)
 80ece52:	4293      	cmp	r3, r2
 80ece54:	d049      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece56:	687b      	ldr	r3, [r7, #4]
 80ece58:	681b      	ldr	r3, [r3, #0]
 80ece5a:	4a52      	ldr	r2, [pc, #328]	@ (80ecfa4 <HAL_DMAEx_List_Init+0x21c>)
 80ece5c:	4293      	cmp	r3, r2
 80ece5e:	d044      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece60:	687b      	ldr	r3, [r7, #4]
 80ece62:	681b      	ldr	r3, [r3, #0]
 80ece64:	4a50      	ldr	r2, [pc, #320]	@ (80ecfa8 <HAL_DMAEx_List_Init+0x220>)
 80ece66:	4293      	cmp	r3, r2
 80ece68:	d03f      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece6a:	687b      	ldr	r3, [r7, #4]
 80ece6c:	681b      	ldr	r3, [r3, #0]
 80ece6e:	4a4f      	ldr	r2, [pc, #316]	@ (80ecfac <HAL_DMAEx_List_Init+0x224>)
 80ece70:	4293      	cmp	r3, r2
 80ece72:	d03a      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece74:	687b      	ldr	r3, [r7, #4]
 80ece76:	681b      	ldr	r3, [r3, #0]
 80ece78:	4a4d      	ldr	r2, [pc, #308]	@ (80ecfb0 <HAL_DMAEx_List_Init+0x228>)
 80ece7a:	4293      	cmp	r3, r2
 80ece7c:	d035      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece7e:	687b      	ldr	r3, [r7, #4]
 80ece80:	681b      	ldr	r3, [r3, #0]
 80ece82:	4a4c      	ldr	r2, [pc, #304]	@ (80ecfb4 <HAL_DMAEx_List_Init+0x22c>)
 80ece84:	4293      	cmp	r3, r2
 80ece86:	d030      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece88:	687b      	ldr	r3, [r7, #4]
 80ece8a:	681b      	ldr	r3, [r3, #0]
 80ece8c:	4a4a      	ldr	r2, [pc, #296]	@ (80ecfb8 <HAL_DMAEx_List_Init+0x230>)
 80ece8e:	4293      	cmp	r3, r2
 80ece90:	d02b      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece92:	687b      	ldr	r3, [r7, #4]
 80ece94:	681b      	ldr	r3, [r3, #0]
 80ece96:	4a49      	ldr	r2, [pc, #292]	@ (80ecfbc <HAL_DMAEx_List_Init+0x234>)
 80ece98:	4293      	cmp	r3, r2
 80ece9a:	d026      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ece9c:	687b      	ldr	r3, [r7, #4]
 80ece9e:	681b      	ldr	r3, [r3, #0]
 80ecea0:	4a47      	ldr	r2, [pc, #284]	@ (80ecfc0 <HAL_DMAEx_List_Init+0x238>)
 80ecea2:	4293      	cmp	r3, r2
 80ecea4:	d021      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecea6:	687b      	ldr	r3, [r7, #4]
 80ecea8:	681b      	ldr	r3, [r3, #0]
 80eceaa:	4a46      	ldr	r2, [pc, #280]	@ (80ecfc4 <HAL_DMAEx_List_Init+0x23c>)
 80eceac:	4293      	cmp	r3, r2
 80eceae:	d01c      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80eceb0:	687b      	ldr	r3, [r7, #4]
 80eceb2:	681b      	ldr	r3, [r3, #0]
 80eceb4:	4a44      	ldr	r2, [pc, #272]	@ (80ecfc8 <HAL_DMAEx_List_Init+0x240>)
 80eceb6:	4293      	cmp	r3, r2
 80eceb8:	d017      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80eceba:	687b      	ldr	r3, [r7, #4]
 80ecebc:	681b      	ldr	r3, [r3, #0]
 80ecebe:	4a43      	ldr	r2, [pc, #268]	@ (80ecfcc <HAL_DMAEx_List_Init+0x244>)
 80ecec0:	4293      	cmp	r3, r2
 80ecec2:	d012      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecec4:	687b      	ldr	r3, [r7, #4]
 80ecec6:	681b      	ldr	r3, [r3, #0]
 80ecec8:	4a41      	ldr	r2, [pc, #260]	@ (80ecfd0 <HAL_DMAEx_List_Init+0x248>)
 80ececa:	4293      	cmp	r3, r2
 80ececc:	d00d      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecece:	687b      	ldr	r3, [r7, #4]
 80eced0:	681b      	ldr	r3, [r3, #0]
 80eced2:	4a40      	ldr	r2, [pc, #256]	@ (80ecfd4 <HAL_DMAEx_List_Init+0x24c>)
 80eced4:	4293      	cmp	r3, r2
 80eced6:	d008      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80eced8:	687b      	ldr	r3, [r7, #4]
 80eceda:	681b      	ldr	r3, [r3, #0]
 80ecedc:	4a3e      	ldr	r2, [pc, #248]	@ (80ecfd8 <HAL_DMAEx_List_Init+0x250>)
 80ecede:	4293      	cmp	r3, r2
 80ecee0:	d003      	beq.n	80eceea <HAL_DMAEx_List_Init+0x162>
 80ecee2:	687b      	ldr	r3, [r7, #4]
 80ecee4:	681b      	ldr	r3, [r3, #0]
 80ecee6:	4a3d      	ldr	r2, [pc, #244]	@ (80ecfdc <HAL_DMAEx_List_Init+0x254>)
 80ecee8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80eceea:	687b      	ldr	r3, [r7, #4]
 80eceec:	2200      	movs	r2, #0
 80eceee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80ecef2:	687b      	ldr	r3, [r7, #4]
 80ecef4:	2202      	movs	r2, #2
 80ecef6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80ecefa:	687b      	ldr	r3, [r7, #4]
 80ecefc:	681b      	ldr	r3, [r3, #0]
 80ecefe:	695a      	ldr	r2, [r3, #20]
 80ecf00:	687b      	ldr	r3, [r7, #4]
 80ecf02:	681b      	ldr	r3, [r3, #0]
 80ecf04:	f042 0206 	orr.w	r2, r2, #6
 80ecf08:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80ecf0a:	e00f      	b.n	80ecf2c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80ecf0c:	f7fd fc22 	bl	80ea754 <HAL_GetTick>
 80ecf10:	4602      	mov	r2, r0
 80ecf12:	68fb      	ldr	r3, [r7, #12]
 80ecf14:	1ad3      	subs	r3, r2, r3
 80ecf16:	2b05      	cmp	r3, #5
 80ecf18:	d908      	bls.n	80ecf2c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80ecf1a:	687b      	ldr	r3, [r7, #4]
 80ecf1c:	2210      	movs	r2, #16
 80ecf1e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80ecf20:	687b      	ldr	r3, [r7, #4]
 80ecf22:	2203      	movs	r2, #3
 80ecf24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80ecf28:	2301      	movs	r3, #1
 80ecf2a:	e015      	b.n	80ecf58 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80ecf2c:	687b      	ldr	r3, [r7, #4]
 80ecf2e:	681b      	ldr	r3, [r3, #0]
 80ecf30:	695b      	ldr	r3, [r3, #20]
 80ecf32:	f003 0301 	and.w	r3, r3, #1
 80ecf36:	2b00      	cmp	r3, #0
 80ecf38:	d1e8      	bne.n	80ecf0c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80ecf3a:	6878      	ldr	r0, [r7, #4]
 80ecf3c:	f000 fa2c 	bl	80ed398 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80ecf40:	687b      	ldr	r3, [r7, #4]
 80ecf42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80ecf44:	687b      	ldr	r3, [r7, #4]
 80ecf46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80ecf48:	687b      	ldr	r3, [r7, #4]
 80ecf4a:	2200      	movs	r2, #0
 80ecf4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80ecf4e:	687b      	ldr	r3, [r7, #4]
 80ecf50:	2201      	movs	r2, #1
 80ecf52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80ecf56:	2300      	movs	r3, #0
}
 80ecf58:	4618      	mov	r0, r3
 80ecf5a:	3710      	adds	r7, #16
 80ecf5c:	46bd      	mov	sp, r7
 80ecf5e:	bd80      	pop	{r7, pc}
 80ecf60:	40020050 	.word	0x40020050
 80ecf64:	50020050 	.word	0x50020050
 80ecf68:	400200d0 	.word	0x400200d0
 80ecf6c:	500200d0 	.word	0x500200d0
 80ecf70:	40020150 	.word	0x40020150
 80ecf74:	50020150 	.word	0x50020150
 80ecf78:	400201d0 	.word	0x400201d0
 80ecf7c:	500201d0 	.word	0x500201d0
 80ecf80:	40020250 	.word	0x40020250
 80ecf84:	50020250 	.word	0x50020250
 80ecf88:	400202d0 	.word	0x400202d0
 80ecf8c:	500202d0 	.word	0x500202d0
 80ecf90:	40020350 	.word	0x40020350
 80ecf94:	50020350 	.word	0x50020350
 80ecf98:	400203d0 	.word	0x400203d0
 80ecf9c:	500203d0 	.word	0x500203d0
 80ecfa0:	40021050 	.word	0x40021050
 80ecfa4:	50021050 	.word	0x50021050
 80ecfa8:	400210d0 	.word	0x400210d0
 80ecfac:	500210d0 	.word	0x500210d0
 80ecfb0:	40021150 	.word	0x40021150
 80ecfb4:	50021150 	.word	0x50021150
 80ecfb8:	400211d0 	.word	0x400211d0
 80ecfbc:	500211d0 	.word	0x500211d0
 80ecfc0:	40021250 	.word	0x40021250
 80ecfc4:	50021250 	.word	0x50021250
 80ecfc8:	400212d0 	.word	0x400212d0
 80ecfcc:	500212d0 	.word	0x500212d0
 80ecfd0:	40021350 	.word	0x40021350
 80ecfd4:	50021350 	.word	0x50021350
 80ecfd8:	400213d0 	.word	0x400213d0
 80ecfdc:	500213d0 	.word	0x500213d0

080ecfe0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80ecfe0:	b580      	push	{r7, lr}
 80ecfe2:	b082      	sub	sp, #8
 80ecfe4:	af00      	add	r7, sp, #0
 80ecfe6:	6078      	str	r0, [r7, #4]
 80ecfe8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80ecfea:	687b      	ldr	r3, [r7, #4]
 80ecfec:	2b00      	cmp	r3, #0
 80ecfee:	d002      	beq.n	80ecff6 <HAL_DMAEx_List_BuildNode+0x16>
 80ecff0:	683b      	ldr	r3, [r7, #0]
 80ecff2:	2b00      	cmp	r3, #0
 80ecff4:	d101      	bne.n	80ecffa <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80ecff6:	2301      	movs	r3, #1
 80ecff8:	e004      	b.n	80ed004 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80ecffa:	6839      	ldr	r1, [r7, #0]
 80ecffc:	6878      	ldr	r0, [r7, #4]
 80ecffe:	f000 fb23 	bl	80ed648 <DMA_List_BuildNode>

  return HAL_OK;
 80ed002:	2300      	movs	r3, #0
}
 80ed004:	4618      	mov	r0, r3
 80ed006:	3708      	adds	r7, #8
 80ed008:	46bd      	mov	sp, r7
 80ed00a:	bd80      	pop	{r7, pc}

080ed00c <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80ed00c:	b580      	push	{r7, lr}
 80ed00e:	b08c      	sub	sp, #48	@ 0x30
 80ed010:	af00      	add	r7, sp, #0
 80ed012:	60f8      	str	r0, [r7, #12]
 80ed014:	60b9      	str	r1, [r7, #8]
 80ed016:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80ed018:	68fb      	ldr	r3, [r7, #12]
 80ed01a:	2b00      	cmp	r3, #0
 80ed01c:	d002      	beq.n	80ed024 <HAL_DMAEx_List_InsertNode+0x18>
 80ed01e:	687b      	ldr	r3, [r7, #4]
 80ed020:	2b00      	cmp	r3, #0
 80ed022:	d101      	bne.n	80ed028 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80ed024:	2301      	movs	r3, #1
 80ed026:	e0b6      	b.n	80ed196 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80ed028:	68fb      	ldr	r3, [r7, #12]
 80ed02a:	695b      	ldr	r3, [r3, #20]
 80ed02c:	2b01      	cmp	r3, #1
 80ed02e:	d104      	bne.n	80ed03a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed030:	68fb      	ldr	r3, [r7, #12]
 80ed032:	2204      	movs	r2, #4
 80ed034:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed036:	2301      	movs	r3, #1
 80ed038:	e0ad      	b.n	80ed196 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80ed03a:	68fb      	ldr	r3, [r7, #12]
 80ed03c:	681b      	ldr	r3, [r3, #0]
 80ed03e:	687a      	ldr	r2, [r7, #4]
 80ed040:	68b9      	ldr	r1, [r7, #8]
 80ed042:	4618      	mov	r0, r3
 80ed044:	f000 fc60 	bl	80ed908 <DMA_List_CheckNodesBaseAddresses>
 80ed048:	4603      	mov	r3, r0
 80ed04a:	2b00      	cmp	r3, #0
 80ed04c:	d004      	beq.n	80ed058 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80ed04e:	68fb      	ldr	r3, [r7, #12]
 80ed050:	2205      	movs	r2, #5
 80ed052:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed054:	2301      	movs	r3, #1
 80ed056:	e09e      	b.n	80ed196 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80ed058:	68fb      	ldr	r3, [r7, #12]
 80ed05a:	681b      	ldr	r3, [r3, #0]
 80ed05c:	687a      	ldr	r2, [r7, #4]
 80ed05e:	68b9      	ldr	r1, [r7, #8]
 80ed060:	4618      	mov	r0, r3
 80ed062:	f000 fc81 	bl	80ed968 <DMA_List_CheckNodesTypes>
 80ed066:	4603      	mov	r3, r0
 80ed068:	2b00      	cmp	r3, #0
 80ed06a:	d004      	beq.n	80ed076 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed06c:	68fb      	ldr	r3, [r7, #12]
 80ed06e:	2204      	movs	r2, #4
 80ed070:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed072:	2301      	movs	r3, #1
 80ed074:	e08f      	b.n	80ed196 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80ed076:	68fb      	ldr	r3, [r7, #12]
 80ed078:	2202      	movs	r2, #2
 80ed07a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80ed07c:	68fb      	ldr	r3, [r7, #12]
 80ed07e:	2200      	movs	r2, #0
 80ed080:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80ed082:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80ed086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80ed08a:	4619      	mov	r1, r3
 80ed08c:	6878      	ldr	r0, [r7, #4]
 80ed08e:	f000 fca7 	bl	80ed9e0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80ed092:	68fb      	ldr	r3, [r7, #12]
 80ed094:	681b      	ldr	r3, [r3, #0]
 80ed096:	2b00      	cmp	r3, #0
 80ed098:	d11a      	bne.n	80ed0d0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80ed09a:	68bb      	ldr	r3, [r7, #8]
 80ed09c:	2b00      	cmp	r3, #0
 80ed09e:	d106      	bne.n	80ed0ae <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80ed0a0:	68fb      	ldr	r3, [r7, #12]
 80ed0a2:	687a      	ldr	r2, [r7, #4]
 80ed0a4:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80ed0a6:	68fb      	ldr	r3, [r7, #12]
 80ed0a8:	2201      	movs	r2, #1
 80ed0aa:	609a      	str	r2, [r3, #8]
 80ed0ac:	e06c      	b.n	80ed188 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80ed0ae:	68fb      	ldr	r3, [r7, #12]
 80ed0b0:	68ba      	ldr	r2, [r7, #8]
 80ed0b2:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80ed0b4:	687a      	ldr	r2, [r7, #4]
 80ed0b6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed0ba:	4013      	ands	r3, r2
 80ed0bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ed0be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed0c0:	4319      	orrs	r1, r3
 80ed0c2:	68bb      	ldr	r3, [r7, #8]
 80ed0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80ed0c8:	68fb      	ldr	r3, [r7, #12]
 80ed0ca:	2202      	movs	r2, #2
 80ed0cc:	609a      	str	r2, [r3, #8]
 80ed0ce:	e05b      	b.n	80ed188 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80ed0d0:	68bb      	ldr	r3, [r7, #8]
 80ed0d2:	2b00      	cmp	r3, #0
 80ed0d4:	d10f      	bne.n	80ed0f6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80ed0d6:	68fb      	ldr	r3, [r7, #12]
 80ed0d8:	681b      	ldr	r3, [r3, #0]
 80ed0da:	461a      	mov	r2, r3
 80ed0dc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed0e0:	4013      	ands	r3, r2
 80ed0e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ed0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed0e6:	4319      	orrs	r1, r3
 80ed0e8:	687b      	ldr	r3, [r7, #4]
 80ed0ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80ed0ee:	68fb      	ldr	r3, [r7, #12]
 80ed0f0:	687a      	ldr	r2, [r7, #4]
 80ed0f2:	601a      	str	r2, [r3, #0]
 80ed0f4:	e043      	b.n	80ed17e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80ed0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80ed0f8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80ed0fa:	f107 0314 	add.w	r3, r7, #20
 80ed0fe:	461a      	mov	r2, r3
 80ed100:	68b9      	ldr	r1, [r7, #8]
 80ed102:	68f8      	ldr	r0, [r7, #12]
 80ed104:	f000 fc9c 	bl	80eda40 <DMA_List_FindNode>
 80ed108:	4603      	mov	r3, r0
 80ed10a:	2b00      	cmp	r3, #0
 80ed10c:	d132      	bne.n	80ed174 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80ed10e:	69fa      	ldr	r2, [r7, #28]
 80ed110:	68fb      	ldr	r3, [r7, #12]
 80ed112:	689b      	ldr	r3, [r3, #8]
 80ed114:	429a      	cmp	r2, r3
 80ed116:	d11a      	bne.n	80ed14e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80ed118:	68fb      	ldr	r3, [r7, #12]
 80ed11a:	685b      	ldr	r3, [r3, #4]
 80ed11c:	2b00      	cmp	r3, #0
 80ed11e:	d00b      	beq.n	80ed138 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80ed120:	68fb      	ldr	r3, [r7, #12]
 80ed122:	685b      	ldr	r3, [r3, #4]
 80ed124:	461a      	mov	r2, r3
 80ed126:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed12a:	4013      	ands	r3, r2
 80ed12c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ed12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed130:	4319      	orrs	r1, r3
 80ed132:	687b      	ldr	r3, [r7, #4]
 80ed134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80ed138:	687a      	ldr	r2, [r7, #4]
 80ed13a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed13e:	4013      	ands	r3, r2
 80ed140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ed142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed144:	4319      	orrs	r1, r3
 80ed146:	68bb      	ldr	r3, [r7, #8]
 80ed148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80ed14c:	e017      	b.n	80ed17e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80ed14e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80ed150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed152:	68bb      	ldr	r3, [r7, #8]
 80ed154:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80ed158:	687b      	ldr	r3, [r7, #4]
 80ed15a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80ed15e:	687a      	ldr	r2, [r7, #4]
 80ed160:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed164:	4013      	ands	r3, r2
 80ed166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ed168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ed16a:	4319      	orrs	r1, r3
 80ed16c:	68bb      	ldr	r3, [r7, #8]
 80ed16e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80ed172:	e004      	b.n	80ed17e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80ed174:	68fb      	ldr	r3, [r7, #12]
 80ed176:	2206      	movs	r2, #6
 80ed178:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80ed17a:	2301      	movs	r3, #1
 80ed17c:	e00b      	b.n	80ed196 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80ed17e:	68fb      	ldr	r3, [r7, #12]
 80ed180:	689b      	ldr	r3, [r3, #8]
 80ed182:	1c5a      	adds	r2, r3, #1
 80ed184:	68fb      	ldr	r3, [r7, #12]
 80ed186:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80ed188:	68fb      	ldr	r3, [r7, #12]
 80ed18a:	2200      	movs	r2, #0
 80ed18c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80ed18e:	68fb      	ldr	r3, [r7, #12]
 80ed190:	2201      	movs	r2, #1
 80ed192:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80ed194:	2300      	movs	r3, #0
}
 80ed196:	4618      	mov	r0, r3
 80ed198:	3730      	adds	r7, #48	@ 0x30
 80ed19a:	46bd      	mov	sp, r7
 80ed19c:	bd80      	pop	{r7, pc}

080ed19e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80ed19e:	b580      	push	{r7, lr}
 80ed1a0:	b08a      	sub	sp, #40	@ 0x28
 80ed1a2:	af00      	add	r7, sp, #0
 80ed1a4:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80ed1a6:	687b      	ldr	r3, [r7, #4]
 80ed1a8:	2b00      	cmp	r3, #0
 80ed1aa:	d101      	bne.n	80ed1b0 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80ed1ac:	2301      	movs	r3, #1
 80ed1ae:	e052      	b.n	80ed256 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80ed1b0:	687b      	ldr	r3, [r7, #4]
 80ed1b2:	681b      	ldr	r3, [r3, #0]
 80ed1b4:	2b00      	cmp	r3, #0
 80ed1b6:	d104      	bne.n	80ed1c2 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80ed1b8:	687b      	ldr	r3, [r7, #4]
 80ed1ba:	2202      	movs	r2, #2
 80ed1bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed1be:	2301      	movs	r3, #1
 80ed1c0:	e049      	b.n	80ed256 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80ed1c2:	687b      	ldr	r3, [r7, #4]
 80ed1c4:	685b      	ldr	r3, [r3, #4]
 80ed1c6:	2b00      	cmp	r3, #0
 80ed1c8:	d00c      	beq.n	80ed1e4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80ed1ca:	687b      	ldr	r3, [r7, #4]
 80ed1cc:	685a      	ldr	r2, [r3, #4]
 80ed1ce:	687b      	ldr	r3, [r7, #4]
 80ed1d0:	681b      	ldr	r3, [r3, #0]
 80ed1d2:	429a      	cmp	r2, r3
 80ed1d4:	d101      	bne.n	80ed1da <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80ed1d6:	2300      	movs	r3, #0
 80ed1d8:	e03d      	b.n	80ed256 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed1da:	687b      	ldr	r3, [r7, #4]
 80ed1dc:	2204      	movs	r2, #4
 80ed1de:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80ed1e0:	2301      	movs	r3, #1
 80ed1e2:	e038      	b.n	80ed256 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80ed1e4:	687b      	ldr	r3, [r7, #4]
 80ed1e6:	695b      	ldr	r3, [r3, #20]
 80ed1e8:	2b01      	cmp	r3, #1
 80ed1ea:	d104      	bne.n	80ed1f6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed1ec:	687b      	ldr	r3, [r7, #4]
 80ed1ee:	2204      	movs	r2, #4
 80ed1f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed1f2:	2301      	movs	r3, #1
 80ed1f4:	e02f      	b.n	80ed256 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80ed1f6:	687b      	ldr	r3, [r7, #4]
 80ed1f8:	2202      	movs	r2, #2
 80ed1fa:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80ed1fc:	687b      	ldr	r3, [r7, #4]
 80ed1fe:	2200      	movs	r2, #0
 80ed200:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80ed202:	687b      	ldr	r3, [r7, #4]
 80ed204:	681b      	ldr	r3, [r3, #0]
 80ed206:	f107 0220 	add.w	r2, r7, #32
 80ed20a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80ed20e:	4618      	mov	r0, r3
 80ed210:	f000 fbe6 	bl	80ed9e0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80ed214:	6a3b      	ldr	r3, [r7, #32]
 80ed216:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80ed218:	f107 030c 	add.w	r3, r7, #12
 80ed21c:	461a      	mov	r2, r3
 80ed21e:	2100      	movs	r1, #0
 80ed220:	6878      	ldr	r0, [r7, #4]
 80ed222:	f000 fc0d 	bl	80eda40 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80ed226:	687b      	ldr	r3, [r7, #4]
 80ed228:	681b      	ldr	r3, [r3, #0]
 80ed22a:	461a      	mov	r2, r3
 80ed22c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80ed230:	4013      	ands	r3, r2
 80ed232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80ed234:	69ba      	ldr	r2, [r7, #24]
 80ed236:	4610      	mov	r0, r2
 80ed238:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80ed23a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80ed23c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80ed240:	687b      	ldr	r3, [r7, #4]
 80ed242:	681a      	ldr	r2, [r3, #0]
 80ed244:	687b      	ldr	r3, [r7, #4]
 80ed246:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80ed248:	687b      	ldr	r3, [r7, #4]
 80ed24a:	2200      	movs	r2, #0
 80ed24c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80ed24e:	687b      	ldr	r3, [r7, #4]
 80ed250:	2201      	movs	r2, #1
 80ed252:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80ed254:	2300      	movs	r3, #0
}
 80ed256:	4618      	mov	r0, r3
 80ed258:	3728      	adds	r7, #40	@ 0x28
 80ed25a:	46bd      	mov	sp, r7
 80ed25c:	bd80      	pop	{r7, pc}
	...

080ed260 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80ed260:	b480      	push	{r7}
 80ed262:	b085      	sub	sp, #20
 80ed264:	af00      	add	r7, sp, #0
 80ed266:	6078      	str	r0, [r7, #4]
 80ed268:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80ed26a:	687b      	ldr	r3, [r7, #4]
 80ed26c:	2b00      	cmp	r3, #0
 80ed26e:	d002      	beq.n	80ed276 <HAL_DMAEx_List_LinkQ+0x16>
 80ed270:	683b      	ldr	r3, [r7, #0]
 80ed272:	2b00      	cmp	r3, #0
 80ed274:	d101      	bne.n	80ed27a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80ed276:	2301      	movs	r3, #1
 80ed278:	e078      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 80ed27a:	687b      	ldr	r3, [r7, #4]
 80ed27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed27e:	2b00      	cmp	r3, #0
 80ed280:	d101      	bne.n	80ed286 <HAL_DMAEx_List_LinkQ+0x26>
  {
    return HAL_ERROR;
 80ed282:	2301      	movs	r3, #1
 80ed284:	e072      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Get DMA state */
  state = hdma->State;
 80ed286:	687b      	ldr	r3, [r7, #4]
 80ed288:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80ed28c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80ed28e:	687b      	ldr	r3, [r7, #4]
 80ed290:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80ed294:	b2db      	uxtb	r3, r3
 80ed296:	2b02      	cmp	r3, #2
 80ed298:	d002      	beq.n	80ed2a0 <HAL_DMAEx_List_LinkQ+0x40>
 80ed29a:	7bfb      	ldrb	r3, [r7, #15]
 80ed29c:	2b05      	cmp	r3, #5
 80ed29e:	d108      	bne.n	80ed2b2 <HAL_DMAEx_List_LinkQ+0x52>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80ed2a0:	687b      	ldr	r3, [r7, #4]
 80ed2a2:	2240      	movs	r2, #64	@ 0x40
 80ed2a4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80ed2a6:	687b      	ldr	r3, [r7, #4]
 80ed2a8:	2200      	movs	r2, #0
 80ed2aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80ed2ae:	2301      	movs	r3, #1
 80ed2b0:	e05c      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80ed2b2:	683b      	ldr	r3, [r7, #0]
 80ed2b4:	7b1b      	ldrb	r3, [r3, #12]
 80ed2b6:	b2db      	uxtb	r3, r3
 80ed2b8:	2b02      	cmp	r3, #2
 80ed2ba:	d104      	bne.n	80ed2c6 <HAL_DMAEx_List_LinkQ+0x66>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80ed2bc:	683b      	ldr	r3, [r7, #0]
 80ed2be:	2201      	movs	r2, #1
 80ed2c0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed2c2:	2301      	movs	r3, #1
 80ed2c4:	e052      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80ed2c6:	687b      	ldr	r3, [r7, #4]
 80ed2c8:	681b      	ldr	r3, [r3, #0]
 80ed2ca:	4a2b      	ldr	r2, [pc, #172]	@ (80ed378 <HAL_DMAEx_List_LinkQ+0x118>)
 80ed2cc:	4293      	cmp	r3, r2
 80ed2ce:	d022      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed2d0:	687b      	ldr	r3, [r7, #4]
 80ed2d2:	681b      	ldr	r3, [r3, #0]
 80ed2d4:	4a29      	ldr	r2, [pc, #164]	@ (80ed37c <HAL_DMAEx_List_LinkQ+0x11c>)
 80ed2d6:	4293      	cmp	r3, r2
 80ed2d8:	d01d      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed2da:	687b      	ldr	r3, [r7, #4]
 80ed2dc:	681b      	ldr	r3, [r3, #0]
 80ed2de:	4a28      	ldr	r2, [pc, #160]	@ (80ed380 <HAL_DMAEx_List_LinkQ+0x120>)
 80ed2e0:	4293      	cmp	r3, r2
 80ed2e2:	d018      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed2e4:	687b      	ldr	r3, [r7, #4]
 80ed2e6:	681b      	ldr	r3, [r3, #0]
 80ed2e8:	4a26      	ldr	r2, [pc, #152]	@ (80ed384 <HAL_DMAEx_List_LinkQ+0x124>)
 80ed2ea:	4293      	cmp	r3, r2
 80ed2ec:	d013      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed2ee:	687b      	ldr	r3, [r7, #4]
 80ed2f0:	681b      	ldr	r3, [r3, #0]
 80ed2f2:	4a25      	ldr	r2, [pc, #148]	@ (80ed388 <HAL_DMAEx_List_LinkQ+0x128>)
 80ed2f4:	4293      	cmp	r3, r2
 80ed2f6:	d00e      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed2f8:	687b      	ldr	r3, [r7, #4]
 80ed2fa:	681b      	ldr	r3, [r3, #0]
 80ed2fc:	4a23      	ldr	r2, [pc, #140]	@ (80ed38c <HAL_DMAEx_List_LinkQ+0x12c>)
 80ed2fe:	4293      	cmp	r3, r2
 80ed300:	d009      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed302:	687b      	ldr	r3, [r7, #4]
 80ed304:	681b      	ldr	r3, [r3, #0]
 80ed306:	4a22      	ldr	r2, [pc, #136]	@ (80ed390 <HAL_DMAEx_List_LinkQ+0x130>)
 80ed308:	4293      	cmp	r3, r2
 80ed30a:	d004      	beq.n	80ed316 <HAL_DMAEx_List_LinkQ+0xb6>
 80ed30c:	687b      	ldr	r3, [r7, #4]
 80ed30e:	681b      	ldr	r3, [r3, #0]
 80ed310:	4a20      	ldr	r2, [pc, #128]	@ (80ed394 <HAL_DMAEx_List_LinkQ+0x134>)
 80ed312:	4293      	cmp	r3, r2
 80ed314:	d101      	bne.n	80ed31a <HAL_DMAEx_List_LinkQ+0xba>
 80ed316:	2301      	movs	r3, #1
 80ed318:	e000      	b.n	80ed31c <HAL_DMAEx_List_LinkQ+0xbc>
 80ed31a:	2300      	movs	r3, #0
 80ed31c:	2b00      	cmp	r3, #0
 80ed31e:	d10b      	bne.n	80ed338 <HAL_DMAEx_List_LinkQ+0xd8>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80ed320:	683b      	ldr	r3, [r7, #0]
 80ed322:	681b      	ldr	r3, [r3, #0]
 80ed324:	6a1b      	ldr	r3, [r3, #32]
 80ed326:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80ed32a:	2b00      	cmp	r3, #0
 80ed32c:	d004      	beq.n	80ed338 <HAL_DMAEx_List_LinkQ+0xd8>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80ed32e:	683b      	ldr	r3, [r7, #0]
 80ed330:	2203      	movs	r2, #3
 80ed332:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80ed334:	2301      	movs	r3, #1
 80ed336:	e019      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80ed338:	687b      	ldr	r3, [r7, #4]
 80ed33a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed33c:	2b81      	cmp	r3, #129	@ 0x81
 80ed33e:	d108      	bne.n	80ed352 <HAL_DMAEx_List_LinkQ+0xf2>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80ed340:	683b      	ldr	r3, [r7, #0]
 80ed342:	685b      	ldr	r3, [r3, #4]
 80ed344:	2b00      	cmp	r3, #0
 80ed346:	d10d      	bne.n	80ed364 <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed348:	683b      	ldr	r3, [r7, #0]
 80ed34a:	2204      	movs	r2, #4
 80ed34c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80ed34e:	2301      	movs	r3, #1
 80ed350:	e00c      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80ed352:	683b      	ldr	r3, [r7, #0]
 80ed354:	685b      	ldr	r3, [r3, #4]
 80ed356:	2b00      	cmp	r3, #0
 80ed358:	d004      	beq.n	80ed364 <HAL_DMAEx_List_LinkQ+0x104>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80ed35a:	683b      	ldr	r3, [r7, #0]
 80ed35c:	2204      	movs	r2, #4
 80ed35e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80ed360:	2301      	movs	r3, #1
 80ed362:	e003      	b.n	80ed36c <HAL_DMAEx_List_LinkQ+0x10c>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80ed364:	687b      	ldr	r3, [r7, #4]
 80ed366:	683a      	ldr	r2, [r7, #0]
 80ed368:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80ed36a:	2300      	movs	r3, #0
}
 80ed36c:	4618      	mov	r0, r3
 80ed36e:	3714      	adds	r7, #20
 80ed370:	46bd      	mov	sp, r7
 80ed372:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ed376:	4770      	bx	lr
 80ed378:	40020350 	.word	0x40020350
 80ed37c:	50020350 	.word	0x50020350
 80ed380:	400203d0 	.word	0x400203d0
 80ed384:	500203d0 	.word	0x500203d0
 80ed388:	40021350 	.word	0x40021350
 80ed38c:	50021350 	.word	0x50021350
 80ed390:	400213d0 	.word	0x400213d0
 80ed394:	500213d0 	.word	0x500213d0

080ed398 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80ed398:	b480      	push	{r7}
 80ed39a:	b085      	sub	sp, #20
 80ed39c:	af00      	add	r7, sp, #0
 80ed39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80ed3a0:	687b      	ldr	r3, [r7, #4]
 80ed3a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80ed3a4:	687b      	ldr	r3, [r7, #4]
 80ed3a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80ed3a8:	4313      	orrs	r3, r2
 80ed3aa:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80ed3ac:	687b      	ldr	r3, [r7, #4]
 80ed3ae:	681b      	ldr	r3, [r3, #0]
 80ed3b0:	4a85      	ldr	r2, [pc, #532]	@ (80ed5c8 <DMA_List_Init+0x230>)
 80ed3b2:	4293      	cmp	r3, r2
 80ed3b4:	f000 80a0 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3b8:	687b      	ldr	r3, [r7, #4]
 80ed3ba:	681b      	ldr	r3, [r3, #0]
 80ed3bc:	4a83      	ldr	r2, [pc, #524]	@ (80ed5cc <DMA_List_Init+0x234>)
 80ed3be:	4293      	cmp	r3, r2
 80ed3c0:	f000 809a 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3c4:	687b      	ldr	r3, [r7, #4]
 80ed3c6:	681b      	ldr	r3, [r3, #0]
 80ed3c8:	4a81      	ldr	r2, [pc, #516]	@ (80ed5d0 <DMA_List_Init+0x238>)
 80ed3ca:	4293      	cmp	r3, r2
 80ed3cc:	f000 8094 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3d0:	687b      	ldr	r3, [r7, #4]
 80ed3d2:	681b      	ldr	r3, [r3, #0]
 80ed3d4:	4a7f      	ldr	r2, [pc, #508]	@ (80ed5d4 <DMA_List_Init+0x23c>)
 80ed3d6:	4293      	cmp	r3, r2
 80ed3d8:	f000 808e 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3dc:	687b      	ldr	r3, [r7, #4]
 80ed3de:	681b      	ldr	r3, [r3, #0]
 80ed3e0:	4a7d      	ldr	r2, [pc, #500]	@ (80ed5d8 <DMA_List_Init+0x240>)
 80ed3e2:	4293      	cmp	r3, r2
 80ed3e4:	f000 8088 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3e8:	687b      	ldr	r3, [r7, #4]
 80ed3ea:	681b      	ldr	r3, [r3, #0]
 80ed3ec:	4a7b      	ldr	r2, [pc, #492]	@ (80ed5dc <DMA_List_Init+0x244>)
 80ed3ee:	4293      	cmp	r3, r2
 80ed3f0:	f000 8082 	beq.w	80ed4f8 <DMA_List_Init+0x160>
 80ed3f4:	687b      	ldr	r3, [r7, #4]
 80ed3f6:	681b      	ldr	r3, [r3, #0]
 80ed3f8:	4a79      	ldr	r2, [pc, #484]	@ (80ed5e0 <DMA_List_Init+0x248>)
 80ed3fa:	4293      	cmp	r3, r2
 80ed3fc:	d07c      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed3fe:	687b      	ldr	r3, [r7, #4]
 80ed400:	681b      	ldr	r3, [r3, #0]
 80ed402:	4a78      	ldr	r2, [pc, #480]	@ (80ed5e4 <DMA_List_Init+0x24c>)
 80ed404:	4293      	cmp	r3, r2
 80ed406:	d077      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed408:	687b      	ldr	r3, [r7, #4]
 80ed40a:	681b      	ldr	r3, [r3, #0]
 80ed40c:	4a76      	ldr	r2, [pc, #472]	@ (80ed5e8 <DMA_List_Init+0x250>)
 80ed40e:	4293      	cmp	r3, r2
 80ed410:	d072      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed412:	687b      	ldr	r3, [r7, #4]
 80ed414:	681b      	ldr	r3, [r3, #0]
 80ed416:	4a75      	ldr	r2, [pc, #468]	@ (80ed5ec <DMA_List_Init+0x254>)
 80ed418:	4293      	cmp	r3, r2
 80ed41a:	d06d      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed41c:	687b      	ldr	r3, [r7, #4]
 80ed41e:	681b      	ldr	r3, [r3, #0]
 80ed420:	4a73      	ldr	r2, [pc, #460]	@ (80ed5f0 <DMA_List_Init+0x258>)
 80ed422:	4293      	cmp	r3, r2
 80ed424:	d068      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed426:	687b      	ldr	r3, [r7, #4]
 80ed428:	681b      	ldr	r3, [r3, #0]
 80ed42a:	4a72      	ldr	r2, [pc, #456]	@ (80ed5f4 <DMA_List_Init+0x25c>)
 80ed42c:	4293      	cmp	r3, r2
 80ed42e:	d063      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed430:	687b      	ldr	r3, [r7, #4]
 80ed432:	681b      	ldr	r3, [r3, #0]
 80ed434:	4a70      	ldr	r2, [pc, #448]	@ (80ed5f8 <DMA_List_Init+0x260>)
 80ed436:	4293      	cmp	r3, r2
 80ed438:	d05e      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed43a:	687b      	ldr	r3, [r7, #4]
 80ed43c:	681b      	ldr	r3, [r3, #0]
 80ed43e:	4a6f      	ldr	r2, [pc, #444]	@ (80ed5fc <DMA_List_Init+0x264>)
 80ed440:	4293      	cmp	r3, r2
 80ed442:	d059      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed444:	687b      	ldr	r3, [r7, #4]
 80ed446:	681b      	ldr	r3, [r3, #0]
 80ed448:	4a6d      	ldr	r2, [pc, #436]	@ (80ed600 <DMA_List_Init+0x268>)
 80ed44a:	4293      	cmp	r3, r2
 80ed44c:	d054      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed44e:	687b      	ldr	r3, [r7, #4]
 80ed450:	681b      	ldr	r3, [r3, #0]
 80ed452:	4a6c      	ldr	r2, [pc, #432]	@ (80ed604 <DMA_List_Init+0x26c>)
 80ed454:	4293      	cmp	r3, r2
 80ed456:	d04f      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed458:	687b      	ldr	r3, [r7, #4]
 80ed45a:	681b      	ldr	r3, [r3, #0]
 80ed45c:	4a6a      	ldr	r2, [pc, #424]	@ (80ed608 <DMA_List_Init+0x270>)
 80ed45e:	4293      	cmp	r3, r2
 80ed460:	d04a      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed462:	687b      	ldr	r3, [r7, #4]
 80ed464:	681b      	ldr	r3, [r3, #0]
 80ed466:	4a69      	ldr	r2, [pc, #420]	@ (80ed60c <DMA_List_Init+0x274>)
 80ed468:	4293      	cmp	r3, r2
 80ed46a:	d045      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed46c:	687b      	ldr	r3, [r7, #4]
 80ed46e:	681b      	ldr	r3, [r3, #0]
 80ed470:	4a67      	ldr	r2, [pc, #412]	@ (80ed610 <DMA_List_Init+0x278>)
 80ed472:	4293      	cmp	r3, r2
 80ed474:	d040      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed476:	687b      	ldr	r3, [r7, #4]
 80ed478:	681b      	ldr	r3, [r3, #0]
 80ed47a:	4a66      	ldr	r2, [pc, #408]	@ (80ed614 <DMA_List_Init+0x27c>)
 80ed47c:	4293      	cmp	r3, r2
 80ed47e:	d03b      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed480:	687b      	ldr	r3, [r7, #4]
 80ed482:	681b      	ldr	r3, [r3, #0]
 80ed484:	4a64      	ldr	r2, [pc, #400]	@ (80ed618 <DMA_List_Init+0x280>)
 80ed486:	4293      	cmp	r3, r2
 80ed488:	d036      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed48a:	687b      	ldr	r3, [r7, #4]
 80ed48c:	681b      	ldr	r3, [r3, #0]
 80ed48e:	4a63      	ldr	r2, [pc, #396]	@ (80ed61c <DMA_List_Init+0x284>)
 80ed490:	4293      	cmp	r3, r2
 80ed492:	d031      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed494:	687b      	ldr	r3, [r7, #4]
 80ed496:	681b      	ldr	r3, [r3, #0]
 80ed498:	4a61      	ldr	r2, [pc, #388]	@ (80ed620 <DMA_List_Init+0x288>)
 80ed49a:	4293      	cmp	r3, r2
 80ed49c:	d02c      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed49e:	687b      	ldr	r3, [r7, #4]
 80ed4a0:	681b      	ldr	r3, [r3, #0]
 80ed4a2:	4a60      	ldr	r2, [pc, #384]	@ (80ed624 <DMA_List_Init+0x28c>)
 80ed4a4:	4293      	cmp	r3, r2
 80ed4a6:	d027      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4a8:	687b      	ldr	r3, [r7, #4]
 80ed4aa:	681b      	ldr	r3, [r3, #0]
 80ed4ac:	4a5e      	ldr	r2, [pc, #376]	@ (80ed628 <DMA_List_Init+0x290>)
 80ed4ae:	4293      	cmp	r3, r2
 80ed4b0:	d022      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4b2:	687b      	ldr	r3, [r7, #4]
 80ed4b4:	681b      	ldr	r3, [r3, #0]
 80ed4b6:	4a5d      	ldr	r2, [pc, #372]	@ (80ed62c <DMA_List_Init+0x294>)
 80ed4b8:	4293      	cmp	r3, r2
 80ed4ba:	d01d      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4bc:	687b      	ldr	r3, [r7, #4]
 80ed4be:	681b      	ldr	r3, [r3, #0]
 80ed4c0:	4a5b      	ldr	r2, [pc, #364]	@ (80ed630 <DMA_List_Init+0x298>)
 80ed4c2:	4293      	cmp	r3, r2
 80ed4c4:	d018      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4c6:	687b      	ldr	r3, [r7, #4]
 80ed4c8:	681b      	ldr	r3, [r3, #0]
 80ed4ca:	4a5a      	ldr	r2, [pc, #360]	@ (80ed634 <DMA_List_Init+0x29c>)
 80ed4cc:	4293      	cmp	r3, r2
 80ed4ce:	d013      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4d0:	687b      	ldr	r3, [r7, #4]
 80ed4d2:	681b      	ldr	r3, [r3, #0]
 80ed4d4:	4a58      	ldr	r2, [pc, #352]	@ (80ed638 <DMA_List_Init+0x2a0>)
 80ed4d6:	4293      	cmp	r3, r2
 80ed4d8:	d00e      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4da:	687b      	ldr	r3, [r7, #4]
 80ed4dc:	681b      	ldr	r3, [r3, #0]
 80ed4de:	4a57      	ldr	r2, [pc, #348]	@ (80ed63c <DMA_List_Init+0x2a4>)
 80ed4e0:	4293      	cmp	r3, r2
 80ed4e2:	d009      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4e4:	687b      	ldr	r3, [r7, #4]
 80ed4e6:	681b      	ldr	r3, [r3, #0]
 80ed4e8:	4a55      	ldr	r2, [pc, #340]	@ (80ed640 <DMA_List_Init+0x2a8>)
 80ed4ea:	4293      	cmp	r3, r2
 80ed4ec:	d004      	beq.n	80ed4f8 <DMA_List_Init+0x160>
 80ed4ee:	687b      	ldr	r3, [r7, #4]
 80ed4f0:	681b      	ldr	r3, [r3, #0]
 80ed4f2:	4a54      	ldr	r2, [pc, #336]	@ (80ed644 <DMA_List_Init+0x2ac>)
 80ed4f4:	4293      	cmp	r3, r2
 80ed4f6:	d101      	bne.n	80ed4fc <DMA_List_Init+0x164>
 80ed4f8:	2301      	movs	r3, #1
 80ed4fa:	e000      	b.n	80ed4fe <DMA_List_Init+0x166>
 80ed4fc:	2300      	movs	r3, #0
 80ed4fe:	2b00      	cmp	r3, #0
 80ed500:	d004      	beq.n	80ed50c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80ed502:	687b      	ldr	r3, [r7, #4]
 80ed504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80ed506:	68fa      	ldr	r2, [r7, #12]
 80ed508:	4313      	orrs	r3, r2
 80ed50a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80ed50c:	687b      	ldr	r3, [r7, #4]
 80ed50e:	681b      	ldr	r3, [r3, #0]
 80ed510:	695b      	ldr	r3, [r3, #20]
 80ed512:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80ed516:	687b      	ldr	r3, [r7, #4]
 80ed518:	681b      	ldr	r3, [r3, #0]
 80ed51a:	68fa      	ldr	r2, [r7, #12]
 80ed51c:	430a      	orrs	r2, r1
 80ed51e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80ed520:	687b      	ldr	r3, [r7, #4]
 80ed522:	681b      	ldr	r3, [r3, #0]
 80ed524:	2200      	movs	r2, #0
 80ed526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80ed528:	687b      	ldr	r3, [r7, #4]
 80ed52a:	681b      	ldr	r3, [r3, #0]
 80ed52c:	687a      	ldr	r2, [r7, #4]
 80ed52e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80ed530:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80ed532:	687b      	ldr	r3, [r7, #4]
 80ed534:	681b      	ldr	r3, [r3, #0]
 80ed536:	2200      	movs	r2, #0
 80ed538:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80ed53a:	687b      	ldr	r3, [r7, #4]
 80ed53c:	681b      	ldr	r3, [r3, #0]
 80ed53e:	2200      	movs	r2, #0
 80ed540:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80ed542:	687b      	ldr	r3, [r7, #4]
 80ed544:	681b      	ldr	r3, [r3, #0]
 80ed546:	2200      	movs	r2, #0
 80ed548:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80ed54a:	687b      	ldr	r3, [r7, #4]
 80ed54c:	681b      	ldr	r3, [r3, #0]
 80ed54e:	4a2a      	ldr	r2, [pc, #168]	@ (80ed5f8 <DMA_List_Init+0x260>)
 80ed550:	4293      	cmp	r3, r2
 80ed552:	d022      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed554:	687b      	ldr	r3, [r7, #4]
 80ed556:	681b      	ldr	r3, [r3, #0]
 80ed558:	4a28      	ldr	r2, [pc, #160]	@ (80ed5fc <DMA_List_Init+0x264>)
 80ed55a:	4293      	cmp	r3, r2
 80ed55c:	d01d      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed55e:	687b      	ldr	r3, [r7, #4]
 80ed560:	681b      	ldr	r3, [r3, #0]
 80ed562:	4a27      	ldr	r2, [pc, #156]	@ (80ed600 <DMA_List_Init+0x268>)
 80ed564:	4293      	cmp	r3, r2
 80ed566:	d018      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed568:	687b      	ldr	r3, [r7, #4]
 80ed56a:	681b      	ldr	r3, [r3, #0]
 80ed56c:	4a25      	ldr	r2, [pc, #148]	@ (80ed604 <DMA_List_Init+0x26c>)
 80ed56e:	4293      	cmp	r3, r2
 80ed570:	d013      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed572:	687b      	ldr	r3, [r7, #4]
 80ed574:	681b      	ldr	r3, [r3, #0]
 80ed576:	4a30      	ldr	r2, [pc, #192]	@ (80ed638 <DMA_List_Init+0x2a0>)
 80ed578:	4293      	cmp	r3, r2
 80ed57a:	d00e      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed57c:	687b      	ldr	r3, [r7, #4]
 80ed57e:	681b      	ldr	r3, [r3, #0]
 80ed580:	4a2e      	ldr	r2, [pc, #184]	@ (80ed63c <DMA_List_Init+0x2a4>)
 80ed582:	4293      	cmp	r3, r2
 80ed584:	d009      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed586:	687b      	ldr	r3, [r7, #4]
 80ed588:	681b      	ldr	r3, [r3, #0]
 80ed58a:	4a2d      	ldr	r2, [pc, #180]	@ (80ed640 <DMA_List_Init+0x2a8>)
 80ed58c:	4293      	cmp	r3, r2
 80ed58e:	d004      	beq.n	80ed59a <DMA_List_Init+0x202>
 80ed590:	687b      	ldr	r3, [r7, #4]
 80ed592:	681b      	ldr	r3, [r3, #0]
 80ed594:	4a2b      	ldr	r2, [pc, #172]	@ (80ed644 <DMA_List_Init+0x2ac>)
 80ed596:	4293      	cmp	r3, r2
 80ed598:	d101      	bne.n	80ed59e <DMA_List_Init+0x206>
 80ed59a:	2301      	movs	r3, #1
 80ed59c:	e000      	b.n	80ed5a0 <DMA_List_Init+0x208>
 80ed59e:	2300      	movs	r3, #0
 80ed5a0:	2b00      	cmp	r3, #0
 80ed5a2:	d007      	beq.n	80ed5b4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80ed5a4:	687b      	ldr	r3, [r7, #4]
 80ed5a6:	681b      	ldr	r3, [r3, #0]
 80ed5a8:	2200      	movs	r2, #0
 80ed5aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80ed5ac:	687b      	ldr	r3, [r7, #4]
 80ed5ae:	681b      	ldr	r3, [r3, #0]
 80ed5b0:	2200      	movs	r2, #0
 80ed5b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80ed5b4:	687b      	ldr	r3, [r7, #4]
 80ed5b6:	681b      	ldr	r3, [r3, #0]
 80ed5b8:	2200      	movs	r2, #0
 80ed5ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80ed5bc:	bf00      	nop
 80ed5be:	3714      	adds	r7, #20
 80ed5c0:	46bd      	mov	sp, r7
 80ed5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ed5c6:	4770      	bx	lr
 80ed5c8:	40020050 	.word	0x40020050
 80ed5cc:	50020050 	.word	0x50020050
 80ed5d0:	400200d0 	.word	0x400200d0
 80ed5d4:	500200d0 	.word	0x500200d0
 80ed5d8:	40020150 	.word	0x40020150
 80ed5dc:	50020150 	.word	0x50020150
 80ed5e0:	400201d0 	.word	0x400201d0
 80ed5e4:	500201d0 	.word	0x500201d0
 80ed5e8:	40020250 	.word	0x40020250
 80ed5ec:	50020250 	.word	0x50020250
 80ed5f0:	400202d0 	.word	0x400202d0
 80ed5f4:	500202d0 	.word	0x500202d0
 80ed5f8:	40020350 	.word	0x40020350
 80ed5fc:	50020350 	.word	0x50020350
 80ed600:	400203d0 	.word	0x400203d0
 80ed604:	500203d0 	.word	0x500203d0
 80ed608:	40021050 	.word	0x40021050
 80ed60c:	50021050 	.word	0x50021050
 80ed610:	400210d0 	.word	0x400210d0
 80ed614:	500210d0 	.word	0x500210d0
 80ed618:	40021150 	.word	0x40021150
 80ed61c:	50021150 	.word	0x50021150
 80ed620:	400211d0 	.word	0x400211d0
 80ed624:	500211d0 	.word	0x500211d0
 80ed628:	40021250 	.word	0x40021250
 80ed62c:	50021250 	.word	0x50021250
 80ed630:	400212d0 	.word	0x400212d0
 80ed634:	500212d0 	.word	0x500212d0
 80ed638:	40021350 	.word	0x40021350
 80ed63c:	50021350 	.word	0x50021350
 80ed640:	400213d0 	.word	0x400213d0
 80ed644:	500213d0 	.word	0x500213d0

080ed648 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80ed648:	b480      	push	{r7}
 80ed64a:	b085      	sub	sp, #20
 80ed64c:	af00      	add	r7, sp, #0
 80ed64e:	6078      	str	r0, [r7, #4]
 80ed650:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80ed652:	687b      	ldr	r3, [r7, #4]
 80ed654:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80ed656:	687b      	ldr	r3, [r7, #4]
 80ed658:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80ed65a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80ed65c:	687b      	ldr	r3, [r7, #4]
 80ed65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80ed660:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80ed662:	687b      	ldr	r3, [r7, #4]
 80ed664:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80ed666:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80ed668:	687b      	ldr	r3, [r7, #4]
 80ed66a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80ed66c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80ed66e:	683b      	ldr	r3, [r7, #0]
 80ed670:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80ed672:	687b      	ldr	r3, [r7, #4]
 80ed674:	681b      	ldr	r3, [r3, #0]
 80ed676:	f003 0320 	and.w	r3, r3, #32
 80ed67a:	2b00      	cmp	r3, #0
 80ed67c:	d017      	beq.n	80ed6ae <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80ed67e:	683b      	ldr	r3, [r7, #0]
 80ed680:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80ed682:	687b      	ldr	r3, [r7, #4]
 80ed684:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80ed686:	687b      	ldr	r3, [r7, #4]
 80ed688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80ed68a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80ed68c:	687b      	ldr	r3, [r7, #4]
 80ed68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ed690:	3b01      	subs	r3, #1
 80ed692:	051b      	lsls	r3, r3, #20
 80ed694:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80ed698:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80ed69a:	687b      	ldr	r3, [r7, #4]
 80ed69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ed69e:	3b01      	subs	r3, #1
 80ed6a0:	011b      	lsls	r3, r3, #4
 80ed6a2:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80ed6a6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80ed6a8:	431a      	orrs	r2, r3
 80ed6aa:	683b      	ldr	r3, [r7, #0]
 80ed6ac:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80ed6ae:	687b      	ldr	r3, [r7, #4]
 80ed6b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80ed6b2:	687b      	ldr	r3, [r7, #4]
 80ed6b4:	6859      	ldr	r1, [r3, #4]
 80ed6b6:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80ed6ba:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80ed6bc:	431a      	orrs	r2, r3
 80ed6be:	683b      	ldr	r3, [r7, #0]
 80ed6c0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80ed6c2:	687b      	ldr	r3, [r7, #4]
 80ed6c4:	68db      	ldr	r3, [r3, #12]
 80ed6c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80ed6ca:	d10c      	bne.n	80ed6e6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80ed6cc:	687b      	ldr	r3, [r7, #4]
 80ed6ce:	681b      	ldr	r3, [r3, #0]
 80ed6d0:	f003 0320 	and.w	r3, r3, #32
 80ed6d4:	2b00      	cmp	r3, #0
 80ed6d6:	d011      	beq.n	80ed6fc <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80ed6d8:	683b      	ldr	r3, [r7, #0]
 80ed6da:	685b      	ldr	r3, [r3, #4]
 80ed6dc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80ed6e0:	683b      	ldr	r3, [r7, #0]
 80ed6e2:	605a      	str	r2, [r3, #4]
 80ed6e4:	e00a      	b.n	80ed6fc <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80ed6e6:	687b      	ldr	r3, [r7, #4]
 80ed6e8:	68db      	ldr	r3, [r3, #12]
 80ed6ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80ed6ee:	d105      	bne.n	80ed6fc <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80ed6f0:	683b      	ldr	r3, [r7, #0]
 80ed6f2:	685b      	ldr	r3, [r3, #4]
 80ed6f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80ed6f8:	683b      	ldr	r3, [r7, #0]
 80ed6fa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80ed6fc:	683b      	ldr	r3, [r7, #0]
 80ed6fe:	685a      	ldr	r2, [r3, #4]
 80ed700:	687b      	ldr	r3, [r7, #4]
 80ed702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ed704:	431a      	orrs	r2, r3
 80ed706:	683b      	ldr	r3, [r7, #0]
 80ed708:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80ed70a:	687b      	ldr	r3, [r7, #4]
 80ed70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80ed70e:	2b00      	cmp	r3, #0
 80ed710:	d00f      	beq.n	80ed732 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80ed712:	683b      	ldr	r3, [r7, #0]
 80ed714:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80ed716:	687b      	ldr	r3, [r7, #4]
 80ed718:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80ed71a:	687b      	ldr	r3, [r7, #4]
 80ed71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80ed71e:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80ed720:	687b      	ldr	r3, [r7, #4]
 80ed722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80ed724:	041b      	lsls	r3, r3, #16
 80ed726:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80ed72a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80ed72c:	431a      	orrs	r2, r3
 80ed72e:	683b      	ldr	r3, [r7, #0]
 80ed730:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80ed732:	687b      	ldr	r3, [r7, #4]
 80ed734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80ed736:	b29a      	uxth	r2, r3
 80ed738:	683b      	ldr	r3, [r7, #0]
 80ed73a:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80ed73c:	687b      	ldr	r3, [r7, #4]
 80ed73e:	681b      	ldr	r3, [r3, #0]
 80ed740:	f003 0302 	and.w	r3, r3, #2
 80ed744:	2b00      	cmp	r3, #0
 80ed746:	d04e      	beq.n	80ed7e6 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80ed748:	683b      	ldr	r3, [r7, #0]
 80ed74a:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80ed74c:	687b      	ldr	r3, [r7, #4]
 80ed74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80ed750:	3b01      	subs	r3, #1
 80ed752:	0419      	lsls	r1, r3, #16
 80ed754:	4b6a      	ldr	r3, [pc, #424]	@ (80ed900 <DMA_List_BuildNode+0x2b8>)
 80ed756:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80ed758:	431a      	orrs	r2, r3
 80ed75a:	683b      	ldr	r3, [r7, #0]
 80ed75c:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80ed75e:	687b      	ldr	r3, [r7, #4]
 80ed760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed762:	2b00      	cmp	r3, #0
 80ed764:	da06      	bge.n	80ed774 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80ed766:	683b      	ldr	r3, [r7, #0]
 80ed768:	689b      	ldr	r3, [r3, #8]
 80ed76a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80ed76e:	683b      	ldr	r3, [r7, #0]
 80ed770:	609a      	str	r2, [r3, #8]
 80ed772:	e005      	b.n	80ed780 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80ed774:	683b      	ldr	r3, [r7, #0]
 80ed776:	689b      	ldr	r3, [r3, #8]
 80ed778:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80ed77c:	683b      	ldr	r3, [r7, #0]
 80ed77e:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80ed780:	687b      	ldr	r3, [r7, #4]
 80ed782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ed784:	2b00      	cmp	r3, #0
 80ed786:	da06      	bge.n	80ed796 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80ed788:	683b      	ldr	r3, [r7, #0]
 80ed78a:	689b      	ldr	r3, [r3, #8]
 80ed78c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80ed790:	683b      	ldr	r3, [r7, #0]
 80ed792:	609a      	str	r2, [r3, #8]
 80ed794:	e005      	b.n	80ed7a2 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80ed796:	683b      	ldr	r3, [r7, #0]
 80ed798:	689b      	ldr	r3, [r3, #8]
 80ed79a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80ed79e:	683b      	ldr	r3, [r7, #0]
 80ed7a0:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80ed7a2:	687b      	ldr	r3, [r7, #4]
 80ed7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ed7a6:	2b00      	cmp	r3, #0
 80ed7a8:	da06      	bge.n	80ed7b8 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80ed7aa:	683b      	ldr	r3, [r7, #0]
 80ed7ac:	689b      	ldr	r3, [r3, #8]
 80ed7ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80ed7b2:	683b      	ldr	r3, [r7, #0]
 80ed7b4:	609a      	str	r2, [r3, #8]
 80ed7b6:	e005      	b.n	80ed7c4 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80ed7b8:	683b      	ldr	r3, [r7, #0]
 80ed7ba:	689b      	ldr	r3, [r3, #8]
 80ed7bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80ed7c0:	683b      	ldr	r3, [r7, #0]
 80ed7c2:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80ed7c4:	687b      	ldr	r3, [r7, #4]
 80ed7c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80ed7c8:	2b00      	cmp	r3, #0
 80ed7ca:	da06      	bge.n	80ed7da <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80ed7cc:	683b      	ldr	r3, [r7, #0]
 80ed7ce:	689b      	ldr	r3, [r3, #8]
 80ed7d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80ed7d4:	683b      	ldr	r3, [r7, #0]
 80ed7d6:	609a      	str	r2, [r3, #8]
 80ed7d8:	e005      	b.n	80ed7e6 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80ed7da:	683b      	ldr	r3, [r7, #0]
 80ed7dc:	689b      	ldr	r3, [r3, #8]
 80ed7de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80ed7e2:	683b      	ldr	r3, [r7, #0]
 80ed7e4:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80ed7e6:	687b      	ldr	r3, [r7, #4]
 80ed7e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80ed7ea:	683b      	ldr	r3, [r7, #0]
 80ed7ec:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80ed7ee:	687b      	ldr	r3, [r7, #4]
 80ed7f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80ed7f2:	683b      	ldr	r3, [r7, #0]
 80ed7f4:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80ed7f6:	687b      	ldr	r3, [r7, #4]
 80ed7f8:	681b      	ldr	r3, [r3, #0]
 80ed7fa:	f003 0302 	and.w	r3, r3, #2
 80ed7fe:	2b00      	cmp	r3, #0
 80ed800:	d05d      	beq.n	80ed8be <DMA_List_BuildNode+0x276>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80ed802:	687b      	ldr	r3, [r7, #4]
 80ed804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed806:	2b00      	cmp	r3, #0
 80ed808:	da09      	bge.n	80ed81e <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80ed80a:	687b      	ldr	r3, [r7, #4]
 80ed80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed80e:	425b      	negs	r3, r3
 80ed810:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80ed812:	68fb      	ldr	r3, [r7, #12]
 80ed814:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80ed818:	683b      	ldr	r3, [r7, #0]
 80ed81a:	615a      	str	r2, [r3, #20]
 80ed81c:	e005      	b.n	80ed82a <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80ed81e:	687b      	ldr	r3, [r7, #4]
 80ed820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ed822:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80ed826:	683b      	ldr	r3, [r7, #0]
 80ed828:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80ed82a:	687b      	ldr	r3, [r7, #4]
 80ed82c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ed82e:	2b00      	cmp	r3, #0
 80ed830:	da0d      	bge.n	80ed84e <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80ed832:	687b      	ldr	r3, [r7, #4]
 80ed834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ed836:	425b      	negs	r3, r3
 80ed838:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80ed83a:	683b      	ldr	r3, [r7, #0]
 80ed83c:	695a      	ldr	r2, [r3, #20]
 80ed83e:	68fb      	ldr	r3, [r7, #12]
 80ed840:	0419      	lsls	r1, r3, #16
 80ed842:	4b30      	ldr	r3, [pc, #192]	@ (80ed904 <DMA_List_BuildNode+0x2bc>)
 80ed844:	400b      	ands	r3, r1
 80ed846:	431a      	orrs	r2, r3
 80ed848:	683b      	ldr	r3, [r7, #0]
 80ed84a:	615a      	str	r2, [r3, #20]
 80ed84c:	e009      	b.n	80ed862 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80ed84e:	683b      	ldr	r3, [r7, #0]
 80ed850:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80ed852:	687b      	ldr	r3, [r7, #4]
 80ed854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ed856:	0419      	lsls	r1, r3, #16
 80ed858:	4b2a      	ldr	r3, [pc, #168]	@ (80ed904 <DMA_List_BuildNode+0x2bc>)
 80ed85a:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80ed85c:	431a      	orrs	r2, r3
 80ed85e:	683b      	ldr	r3, [r7, #0]
 80ed860:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80ed862:	687b      	ldr	r3, [r7, #4]
 80ed864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ed866:	2b00      	cmp	r3, #0
 80ed868:	da08      	bge.n	80ed87c <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80ed86a:	687b      	ldr	r3, [r7, #4]
 80ed86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ed86e:	425b      	negs	r3, r3
 80ed870:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80ed872:	68fb      	ldr	r3, [r7, #12]
 80ed874:	b29a      	uxth	r2, r3
 80ed876:	683b      	ldr	r3, [r7, #0]
 80ed878:	619a      	str	r2, [r3, #24]
 80ed87a:	e004      	b.n	80ed886 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80ed87c:	687b      	ldr	r3, [r7, #4]
 80ed87e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ed880:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80ed882:	683b      	ldr	r3, [r7, #0]
 80ed884:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80ed886:	687b      	ldr	r3, [r7, #4]
 80ed888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80ed88a:	2b00      	cmp	r3, #0
 80ed88c:	da0b      	bge.n	80ed8a6 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80ed88e:	687b      	ldr	r3, [r7, #4]
 80ed890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80ed892:	425b      	negs	r3, r3
 80ed894:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80ed896:	683b      	ldr	r3, [r7, #0]
 80ed898:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80ed89a:	68fb      	ldr	r3, [r7, #12]
 80ed89c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80ed89e:	431a      	orrs	r2, r3
 80ed8a0:	683b      	ldr	r3, [r7, #0]
 80ed8a2:	619a      	str	r2, [r3, #24]
 80ed8a4:	e007      	b.n	80ed8b6 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80ed8a6:	683b      	ldr	r3, [r7, #0]
 80ed8a8:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80ed8aa:	687b      	ldr	r3, [r7, #4]
 80ed8ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80ed8ae:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80ed8b0:	431a      	orrs	r2, r3
 80ed8b2:	683b      	ldr	r3, [r7, #0]
 80ed8b4:	619a      	str	r2, [r3, #24]
    }
    /********************************************************************************* CBR2 register value is updated */

    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80ed8b6:	683b      	ldr	r3, [r7, #0]
 80ed8b8:	2200      	movs	r2, #0
 80ed8ba:	61da      	str	r2, [r3, #28]
 80ed8bc:	e002      	b.n	80ed8c4 <DMA_List_BuildNode+0x27c>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80ed8be:	683b      	ldr	r3, [r7, #0]
 80ed8c0:	2200      	movs	r2, #0
 80ed8c2:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80ed8c4:	687b      	ldr	r3, [r7, #4]
 80ed8c6:	681a      	ldr	r2, [r3, #0]
 80ed8c8:	683b      	ldr	r3, [r7, #0]
 80ed8ca:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80ed8cc:	687b      	ldr	r3, [r7, #4]
 80ed8ce:	681b      	ldr	r3, [r3, #0]
 80ed8d0:	f003 0302 	and.w	r3, r3, #2
 80ed8d4:	2b00      	cmp	r3, #0
 80ed8d6:	d006      	beq.n	80ed8e6 <DMA_List_BuildNode+0x29e>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80ed8d8:	683b      	ldr	r3, [r7, #0]
 80ed8da:	6a1b      	ldr	r3, [r3, #32]
 80ed8dc:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80ed8e0:	683b      	ldr	r3, [r7, #0]
 80ed8e2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80ed8e4:	e005      	b.n	80ed8f2 <DMA_List_BuildNode+0x2aa>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80ed8e6:	683b      	ldr	r3, [r7, #0]
 80ed8e8:	6a1b      	ldr	r3, [r3, #32]
 80ed8ea:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80ed8ee:	683b      	ldr	r3, [r7, #0]
 80ed8f0:	621a      	str	r2, [r3, #32]
}
 80ed8f2:	bf00      	nop
 80ed8f4:	3714      	adds	r7, #20
 80ed8f6:	46bd      	mov	sp, r7
 80ed8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ed8fc:	4770      	bx	lr
 80ed8fe:	bf00      	nop
 80ed900:	07ff0000 	.word	0x07ff0000
 80ed904:	1fff0000 	.word	0x1fff0000

080ed908 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80ed908:	b480      	push	{r7}
 80ed90a:	b087      	sub	sp, #28
 80ed90c:	af00      	add	r7, sp, #0
 80ed90e:	60f8      	str	r0, [r7, #12]
 80ed910:	60b9      	str	r1, [r7, #8]
 80ed912:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80ed914:	68fa      	ldr	r2, [r7, #12]
 80ed916:	68bb      	ldr	r3, [r7, #8]
 80ed918:	431a      	orrs	r2, r3
 80ed91a:	687b      	ldr	r3, [r7, #4]
 80ed91c:	4313      	orrs	r3, r2
 80ed91e:	0c1b      	lsrs	r3, r3, #16
 80ed920:	041b      	lsls	r3, r3, #16
 80ed922:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80ed924:	2300      	movs	r3, #0
 80ed926:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80ed928:	68fb      	ldr	r3, [r7, #12]
 80ed92a:	2b00      	cmp	r3, #0
 80ed92c:	d002      	beq.n	80ed934 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80ed92e:	68fb      	ldr	r3, [r7, #12]
 80ed930:	617b      	str	r3, [r7, #20]
 80ed932:	e00a      	b.n	80ed94a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80ed934:	68bb      	ldr	r3, [r7, #8]
 80ed936:	2b00      	cmp	r3, #0
 80ed938:	d002      	beq.n	80ed940 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80ed93a:	68bb      	ldr	r3, [r7, #8]
 80ed93c:	617b      	str	r3, [r7, #20]
 80ed93e:	e004      	b.n	80ed94a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80ed940:	687b      	ldr	r3, [r7, #4]
 80ed942:	2b00      	cmp	r3, #0
 80ed944:	d001      	beq.n	80ed94a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80ed946:	687b      	ldr	r3, [r7, #4]
 80ed948:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80ed94a:	697b      	ldr	r3, [r7, #20]
 80ed94c:	0c1b      	lsrs	r3, r3, #16
 80ed94e:	041b      	lsls	r3, r3, #16
 80ed950:	693a      	ldr	r2, [r7, #16]
 80ed952:	429a      	cmp	r2, r3
 80ed954:	d001      	beq.n	80ed95a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80ed956:	2301      	movs	r3, #1
 80ed958:	e000      	b.n	80ed95c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80ed95a:	2300      	movs	r3, #0
}
 80ed95c:	4618      	mov	r0, r3
 80ed95e:	371c      	adds	r7, #28
 80ed960:	46bd      	mov	sp, r7
 80ed962:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ed966:	4770      	bx	lr

080ed968 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80ed968:	b480      	push	{r7}
 80ed96a:	b087      	sub	sp, #28
 80ed96c:	af00      	add	r7, sp, #0
 80ed96e:	60f8      	str	r0, [r7, #12]
 80ed970:	60b9      	str	r1, [r7, #8]
 80ed972:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80ed974:	2300      	movs	r3, #0
 80ed976:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80ed978:	68fb      	ldr	r3, [r7, #12]
 80ed97a:	2b00      	cmp	r3, #0
 80ed97c:	d004      	beq.n	80ed988 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80ed97e:	68fb      	ldr	r3, [r7, #12]
 80ed980:	6a1b      	ldr	r3, [r3, #32]
 80ed982:	b2db      	uxtb	r3, r3
 80ed984:	617b      	str	r3, [r7, #20]
 80ed986:	e00e      	b.n	80ed9a6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80ed988:	68bb      	ldr	r3, [r7, #8]
 80ed98a:	2b00      	cmp	r3, #0
 80ed98c:	d004      	beq.n	80ed998 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80ed98e:	68bb      	ldr	r3, [r7, #8]
 80ed990:	6a1b      	ldr	r3, [r3, #32]
 80ed992:	b2db      	uxtb	r3, r3
 80ed994:	617b      	str	r3, [r7, #20]
 80ed996:	e006      	b.n	80ed9a6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80ed998:	687b      	ldr	r3, [r7, #4]
 80ed99a:	2b00      	cmp	r3, #0
 80ed99c:	d003      	beq.n	80ed9a6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80ed99e:	687b      	ldr	r3, [r7, #4]
 80ed9a0:	6a1b      	ldr	r3, [r3, #32]
 80ed9a2:	b2db      	uxtb	r3, r3
 80ed9a4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80ed9a6:	68bb      	ldr	r3, [r7, #8]
 80ed9a8:	2b00      	cmp	r3, #0
 80ed9aa:	d007      	beq.n	80ed9bc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80ed9ac:	68bb      	ldr	r3, [r7, #8]
 80ed9ae:	6a1b      	ldr	r3, [r3, #32]
 80ed9b0:	b2db      	uxtb	r3, r3
 80ed9b2:	697a      	ldr	r2, [r7, #20]
 80ed9b4:	429a      	cmp	r2, r3
 80ed9b6:	d001      	beq.n	80ed9bc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80ed9b8:	2302      	movs	r3, #2
 80ed9ba:	e00b      	b.n	80ed9d4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80ed9bc:	687b      	ldr	r3, [r7, #4]
 80ed9be:	2b00      	cmp	r3, #0
 80ed9c0:	d007      	beq.n	80ed9d2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80ed9c2:	687b      	ldr	r3, [r7, #4]
 80ed9c4:	6a1b      	ldr	r3, [r3, #32]
 80ed9c6:	b2db      	uxtb	r3, r3
 80ed9c8:	697a      	ldr	r2, [r7, #20]
 80ed9ca:	429a      	cmp	r2, r3
 80ed9cc:	d001      	beq.n	80ed9d2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80ed9ce:	2303      	movs	r3, #3
 80ed9d0:	e000      	b.n	80ed9d4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80ed9d2:	2300      	movs	r3, #0
}
 80ed9d4:	4618      	mov	r0, r3
 80ed9d6:	371c      	adds	r7, #28
 80ed9d8:	46bd      	mov	sp, r7
 80ed9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ed9de:	4770      	bx	lr

080ed9e0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80ed9e0:	b480      	push	{r7}
 80ed9e2:	b085      	sub	sp, #20
 80ed9e4:	af00      	add	r7, sp, #0
 80ed9e6:	60f8      	str	r0, [r7, #12]
 80ed9e8:	60b9      	str	r1, [r7, #8]
 80ed9ea:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80ed9ec:	68fb      	ldr	r3, [r7, #12]
 80ed9ee:	6a1b      	ldr	r3, [r3, #32]
 80ed9f0:	f003 0302 	and.w	r3, r3, #2
 80ed9f4:	2b00      	cmp	r3, #0
 80ed9f6:	d00c      	beq.n	80eda12 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80ed9f8:	68bb      	ldr	r3, [r7, #8]
 80ed9fa:	2b00      	cmp	r3, #0
 80ed9fc:	d002      	beq.n	80eda04 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80ed9fe:	68bb      	ldr	r3, [r7, #8]
 80eda00:	4a0d      	ldr	r2, [pc, #52]	@ (80eda38 <DMA_List_GetCLLRNodeInfo+0x58>)
 80eda02:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80eda04:	687b      	ldr	r3, [r7, #4]
 80eda06:	2b00      	cmp	r3, #0
 80eda08:	d00f      	beq.n	80eda2a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80eda0a:	687b      	ldr	r3, [r7, #4]
 80eda0c:	2207      	movs	r2, #7
 80eda0e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80eda10:	e00b      	b.n	80eda2a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80eda12:	68bb      	ldr	r3, [r7, #8]
 80eda14:	2b00      	cmp	r3, #0
 80eda16:	d002      	beq.n	80eda1e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80eda18:	68bb      	ldr	r3, [r7, #8]
 80eda1a:	4a08      	ldr	r2, [pc, #32]	@ (80eda3c <DMA_List_GetCLLRNodeInfo+0x5c>)
 80eda1c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80eda1e:	687b      	ldr	r3, [r7, #4]
 80eda20:	2b00      	cmp	r3, #0
 80eda22:	d002      	beq.n	80eda2a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80eda24:	687b      	ldr	r3, [r7, #4]
 80eda26:	2205      	movs	r2, #5
 80eda28:	601a      	str	r2, [r3, #0]
}
 80eda2a:	bf00      	nop
 80eda2c:	3714      	adds	r7, #20
 80eda2e:	46bd      	mov	sp, r7
 80eda30:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eda34:	4770      	bx	lr
 80eda36:	bf00      	nop
 80eda38:	fe010000 	.word	0xfe010000
 80eda3c:	f8010000 	.word	0xf8010000

080eda40 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80eda40:	b480      	push	{r7}
 80eda42:	b089      	sub	sp, #36	@ 0x24
 80eda44:	af00      	add	r7, sp, #0
 80eda46:	60f8      	str	r0, [r7, #12]
 80eda48:	60b9      	str	r1, [r7, #8]
 80eda4a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80eda4c:	2300      	movs	r3, #0
 80eda4e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80eda50:	2300      	movs	r3, #0
 80eda52:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80eda54:	2300      	movs	r3, #0
 80eda56:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80eda58:	687b      	ldr	r3, [r7, #4]
 80eda5a:	681b      	ldr	r3, [r3, #0]
 80eda5c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80eda5e:	68bb      	ldr	r3, [r7, #8]
 80eda60:	2b00      	cmp	r3, #0
 80eda62:	d142      	bne.n	80edaea <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80eda64:	e01d      	b.n	80edaa2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80eda66:	69fb      	ldr	r3, [r7, #28]
 80eda68:	2b00      	cmp	r3, #0
 80eda6a:	d107      	bne.n	80eda7c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80eda6c:	68fb      	ldr	r3, [r7, #12]
 80eda6e:	681b      	ldr	r3, [r3, #0]
 80eda70:	461a      	mov	r2, r3
 80eda72:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80eda76:	4013      	ands	r3, r2
 80eda78:	61bb      	str	r3, [r7, #24]
 80eda7a:	e00f      	b.n	80eda9c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80eda7c:	69bb      	ldr	r3, [r7, #24]
 80eda7e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80eda80:	68fb      	ldr	r3, [r7, #12]
 80eda82:	681b      	ldr	r3, [r3, #0]
 80eda84:	0c1b      	lsrs	r3, r3, #16
 80eda86:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80eda88:	69ba      	ldr	r2, [r7, #24]
 80eda8a:	4413      	add	r3, r2
 80eda8c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80eda8e:	693b      	ldr	r3, [r7, #16]
 80eda90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80eda94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80eda98:	4013      	ands	r3, r2
 80eda9a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80eda9c:	69fb      	ldr	r3, [r7, #28]
 80eda9e:	3301      	adds	r3, #1
 80edaa0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80edaa2:	68fb      	ldr	r3, [r7, #12]
 80edaa4:	689b      	ldr	r3, [r3, #8]
 80edaa6:	69fa      	ldr	r2, [r7, #28]
 80edaa8:	429a      	cmp	r2, r3
 80edaaa:	d3dc      	bcc.n	80eda66 <DMA_List_FindNode+0x26>
 80edaac:	e029      	b.n	80edb02 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80edaae:	69fb      	ldr	r3, [r7, #28]
 80edab0:	2b00      	cmp	r3, #0
 80edab2:	d107      	bne.n	80edac4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80edab4:	68fb      	ldr	r3, [r7, #12]
 80edab6:	681b      	ldr	r3, [r3, #0]
 80edab8:	461a      	mov	r2, r3
 80edaba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80edabe:	4013      	ands	r3, r2
 80edac0:	61bb      	str	r3, [r7, #24]
 80edac2:	e00f      	b.n	80edae4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80edac4:	69bb      	ldr	r3, [r7, #24]
 80edac6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80edac8:	68fb      	ldr	r3, [r7, #12]
 80edaca:	681b      	ldr	r3, [r3, #0]
 80edacc:	0c1b      	lsrs	r3, r3, #16
 80edace:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80edad0:	69ba      	ldr	r2, [r7, #24]
 80edad2:	4413      	add	r3, r2
 80edad4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80edad6:	693b      	ldr	r3, [r7, #16]
 80edad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80edadc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80edae0:	4013      	ands	r3, r2
 80edae2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80edae4:	69fb      	ldr	r3, [r7, #28]
 80edae6:	3301      	adds	r3, #1
 80edae8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80edaea:	68fb      	ldr	r3, [r7, #12]
 80edaec:	689b      	ldr	r3, [r3, #8]
 80edaee:	69fa      	ldr	r2, [r7, #28]
 80edaf0:	429a      	cmp	r2, r3
 80edaf2:	d206      	bcs.n	80edb02 <DMA_List_FindNode+0xc2>
 80edaf4:	68ba      	ldr	r2, [r7, #8]
 80edaf6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80edafa:	4013      	ands	r3, r2
 80edafc:	69ba      	ldr	r2, [r7, #24]
 80edafe:	429a      	cmp	r2, r3
 80edb00:	d1d5      	bne.n	80edaae <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80edb02:	68bb      	ldr	r3, [r7, #8]
 80edb04:	2b00      	cmp	r3, #0
 80edb06:	d008      	beq.n	80edb1a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80edb08:	68ba      	ldr	r2, [r7, #8]
 80edb0a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80edb0e:	4013      	ands	r3, r2
 80edb10:	69ba      	ldr	r2, [r7, #24]
 80edb12:	429a      	cmp	r2, r3
 80edb14:	d001      	beq.n	80edb1a <DMA_List_FindNode+0xda>
    {
      return 1U;
 80edb16:	2301      	movs	r3, #1
 80edb18:	e02b      	b.n	80edb72 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80edb1a:	687b      	ldr	r3, [r7, #4]
 80edb1c:	69fa      	ldr	r2, [r7, #28]
 80edb1e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80edb20:	68fb      	ldr	r3, [r7, #12]
 80edb22:	681b      	ldr	r3, [r3, #0]
 80edb24:	0c1b      	lsrs	r3, r3, #16
 80edb26:	041b      	lsls	r3, r3, #16
 80edb28:	697a      	ldr	r2, [r7, #20]
 80edb2a:	431a      	orrs	r2, r3
 80edb2c:	687b      	ldr	r3, [r7, #4]
 80edb2e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80edb30:	68fb      	ldr	r3, [r7, #12]
 80edb32:	681b      	ldr	r3, [r3, #0]
 80edb34:	0c1b      	lsrs	r3, r3, #16
 80edb36:	041b      	lsls	r3, r3, #16
 80edb38:	69ba      	ldr	r2, [r7, #24]
 80edb3a:	431a      	orrs	r2, r3
 80edb3c:	687b      	ldr	r3, [r7, #4]
 80edb3e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80edb40:	687b      	ldr	r3, [r7, #4]
 80edb42:	68db      	ldr	r3, [r3, #12]
 80edb44:	461a      	mov	r2, r3
 80edb46:	693b      	ldr	r3, [r7, #16]
 80edb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80edb4c:	2b00      	cmp	r3, #0
 80edb4e:	d00f      	beq.n	80edb70 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80edb50:	687b      	ldr	r3, [r7, #4]
 80edb52:	68db      	ldr	r3, [r3, #12]
 80edb54:	461a      	mov	r2, r3
 80edb56:	693b      	ldr	r3, [r7, #16]
 80edb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80edb5c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80edb60:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80edb62:	68fb      	ldr	r3, [r7, #12]
 80edb64:	681b      	ldr	r3, [r3, #0]
 80edb66:	0c1b      	lsrs	r3, r3, #16
 80edb68:	041b      	lsls	r3, r3, #16
 80edb6a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80edb6c:	687b      	ldr	r3, [r7, #4]
 80edb6e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80edb70:	2300      	movs	r3, #0
}
 80edb72:	4618      	mov	r0, r3
 80edb74:	3724      	adds	r7, #36	@ 0x24
 80edb76:	46bd      	mov	sp, r7
 80edb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 80edb7c:	4770      	bx	lr
	...

080edb80 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80edb80:	b580      	push	{r7, lr}
 80edb82:	b084      	sub	sp, #16
 80edb84:	af00      	add	r7, sp, #0
 80edb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80edb88:	687b      	ldr	r3, [r7, #4]
 80edb8a:	2b00      	cmp	r3, #0
 80edb8c:	d101      	bne.n	80edb92 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80edb8e:	2301      	movs	r3, #1
 80edb90:	e147      	b.n	80ede22 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80edb92:	687b      	ldr	r3, [r7, #4]
 80edb94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80edb98:	b2db      	uxtb	r3, r3
 80edb9a:	2b00      	cmp	r3, #0
 80edb9c:	d106      	bne.n	80edbac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80edb9e:	687b      	ldr	r3, [r7, #4]
 80edba0:	2200      	movs	r2, #0
 80edba2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80edba6:	6878      	ldr	r0, [r7, #4]
 80edba8:	f7fa ff7c 	bl	80e8aa4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80edbac:	687b      	ldr	r3, [r7, #4]
 80edbae:	681b      	ldr	r3, [r3, #0]
 80edbb0:	699a      	ldr	r2, [r3, #24]
 80edbb2:	687b      	ldr	r3, [r7, #4]
 80edbb4:	681b      	ldr	r3, [r3, #0]
 80edbb6:	f022 0210 	bic.w	r2, r2, #16
 80edbba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80edbbc:	f7fc fdca 	bl	80ea754 <HAL_GetTick>
 80edbc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80edbc2:	e012      	b.n	80edbea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80edbc4:	f7fc fdc6 	bl	80ea754 <HAL_GetTick>
 80edbc8:	4602      	mov	r2, r0
 80edbca:	68fb      	ldr	r3, [r7, #12]
 80edbcc:	1ad3      	subs	r3, r2, r3
 80edbce:	2b0a      	cmp	r3, #10
 80edbd0:	d90b      	bls.n	80edbea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80edbd2:	687b      	ldr	r3, [r7, #4]
 80edbd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80edbd6:	f043 0201 	orr.w	r2, r3, #1
 80edbda:	687b      	ldr	r3, [r7, #4]
 80edbdc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80edbde:	687b      	ldr	r3, [r7, #4]
 80edbe0:	2203      	movs	r2, #3
 80edbe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80edbe6:	2301      	movs	r3, #1
 80edbe8:	e11b      	b.n	80ede22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80edbea:	687b      	ldr	r3, [r7, #4]
 80edbec:	681b      	ldr	r3, [r3, #0]
 80edbee:	699b      	ldr	r3, [r3, #24]
 80edbf0:	f003 0308 	and.w	r3, r3, #8
 80edbf4:	2b08      	cmp	r3, #8
 80edbf6:	d0e5      	beq.n	80edbc4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80edbf8:	687b      	ldr	r3, [r7, #4]
 80edbfa:	681b      	ldr	r3, [r3, #0]
 80edbfc:	699a      	ldr	r2, [r3, #24]
 80edbfe:	687b      	ldr	r3, [r7, #4]
 80edc00:	681b      	ldr	r3, [r3, #0]
 80edc02:	f042 0201 	orr.w	r2, r2, #1
 80edc06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80edc08:	f7fc fda4 	bl	80ea754 <HAL_GetTick>
 80edc0c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80edc0e:	e012      	b.n	80edc36 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80edc10:	f7fc fda0 	bl	80ea754 <HAL_GetTick>
 80edc14:	4602      	mov	r2, r0
 80edc16:	68fb      	ldr	r3, [r7, #12]
 80edc18:	1ad3      	subs	r3, r2, r3
 80edc1a:	2b0a      	cmp	r3, #10
 80edc1c:	d90b      	bls.n	80edc36 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80edc1e:	687b      	ldr	r3, [r7, #4]
 80edc20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80edc22:	f043 0201 	orr.w	r2, r3, #1
 80edc26:	687b      	ldr	r3, [r7, #4]
 80edc28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80edc2a:	687b      	ldr	r3, [r7, #4]
 80edc2c:	2203      	movs	r2, #3
 80edc2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80edc32:	2301      	movs	r3, #1
 80edc34:	e0f5      	b.n	80ede22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80edc36:	687b      	ldr	r3, [r7, #4]
 80edc38:	681b      	ldr	r3, [r3, #0]
 80edc3a:	699b      	ldr	r3, [r3, #24]
 80edc3c:	f003 0301 	and.w	r3, r3, #1
 80edc40:	2b00      	cmp	r3, #0
 80edc42:	d0e5      	beq.n	80edc10 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80edc44:	687b      	ldr	r3, [r7, #4]
 80edc46:	681b      	ldr	r3, [r3, #0]
 80edc48:	699a      	ldr	r2, [r3, #24]
 80edc4a:	687b      	ldr	r3, [r7, #4]
 80edc4c:	681b      	ldr	r3, [r3, #0]
 80edc4e:	f042 0202 	orr.w	r2, r2, #2
 80edc52:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80edc54:	687b      	ldr	r3, [r7, #4]
 80edc56:	681b      	ldr	r3, [r3, #0]
 80edc58:	4a74      	ldr	r2, [pc, #464]	@ (80ede2c <HAL_FDCAN_Init+0x2ac>)
 80edc5a:	4293      	cmp	r3, r2
 80edc5c:	d103      	bne.n	80edc66 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80edc5e:	4a74      	ldr	r2, [pc, #464]	@ (80ede30 <HAL_FDCAN_Init+0x2b0>)
 80edc60:	687b      	ldr	r3, [r7, #4]
 80edc62:	685b      	ldr	r3, [r3, #4]
 80edc64:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80edc66:	687b      	ldr	r3, [r7, #4]
 80edc68:	7c1b      	ldrb	r3, [r3, #16]
 80edc6a:	2b01      	cmp	r3, #1
 80edc6c:	d108      	bne.n	80edc80 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80edc6e:	687b      	ldr	r3, [r7, #4]
 80edc70:	681b      	ldr	r3, [r3, #0]
 80edc72:	699a      	ldr	r2, [r3, #24]
 80edc74:	687b      	ldr	r3, [r7, #4]
 80edc76:	681b      	ldr	r3, [r3, #0]
 80edc78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80edc7c:	619a      	str	r2, [r3, #24]
 80edc7e:	e007      	b.n	80edc90 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80edc80:	687b      	ldr	r3, [r7, #4]
 80edc82:	681b      	ldr	r3, [r3, #0]
 80edc84:	699a      	ldr	r2, [r3, #24]
 80edc86:	687b      	ldr	r3, [r7, #4]
 80edc88:	681b      	ldr	r3, [r3, #0]
 80edc8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80edc8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80edc90:	687b      	ldr	r3, [r7, #4]
 80edc92:	7c5b      	ldrb	r3, [r3, #17]
 80edc94:	2b01      	cmp	r3, #1
 80edc96:	d108      	bne.n	80edcaa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80edc98:	687b      	ldr	r3, [r7, #4]
 80edc9a:	681b      	ldr	r3, [r3, #0]
 80edc9c:	699a      	ldr	r2, [r3, #24]
 80edc9e:	687b      	ldr	r3, [r7, #4]
 80edca0:	681b      	ldr	r3, [r3, #0]
 80edca2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80edca6:	619a      	str	r2, [r3, #24]
 80edca8:	e007      	b.n	80edcba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80edcaa:	687b      	ldr	r3, [r7, #4]
 80edcac:	681b      	ldr	r3, [r3, #0]
 80edcae:	699a      	ldr	r2, [r3, #24]
 80edcb0:	687b      	ldr	r3, [r7, #4]
 80edcb2:	681b      	ldr	r3, [r3, #0]
 80edcb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80edcb8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80edcba:	687b      	ldr	r3, [r7, #4]
 80edcbc:	7c9b      	ldrb	r3, [r3, #18]
 80edcbe:	2b01      	cmp	r3, #1
 80edcc0:	d108      	bne.n	80edcd4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80edcc2:	687b      	ldr	r3, [r7, #4]
 80edcc4:	681b      	ldr	r3, [r3, #0]
 80edcc6:	699a      	ldr	r2, [r3, #24]
 80edcc8:	687b      	ldr	r3, [r7, #4]
 80edcca:	681b      	ldr	r3, [r3, #0]
 80edccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80edcd0:	619a      	str	r2, [r3, #24]
 80edcd2:	e007      	b.n	80edce4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80edcd4:	687b      	ldr	r3, [r7, #4]
 80edcd6:	681b      	ldr	r3, [r3, #0]
 80edcd8:	699a      	ldr	r2, [r3, #24]
 80edcda:	687b      	ldr	r3, [r7, #4]
 80edcdc:	681b      	ldr	r3, [r3, #0]
 80edcde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80edce2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80edce4:	687b      	ldr	r3, [r7, #4]
 80edce6:	681b      	ldr	r3, [r3, #0]
 80edce8:	699b      	ldr	r3, [r3, #24]
 80edcea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80edcee:	687b      	ldr	r3, [r7, #4]
 80edcf0:	689a      	ldr	r2, [r3, #8]
 80edcf2:	687b      	ldr	r3, [r7, #4]
 80edcf4:	681b      	ldr	r3, [r3, #0]
 80edcf6:	430a      	orrs	r2, r1
 80edcf8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80edcfa:	687b      	ldr	r3, [r7, #4]
 80edcfc:	681b      	ldr	r3, [r3, #0]
 80edcfe:	699a      	ldr	r2, [r3, #24]
 80edd00:	687b      	ldr	r3, [r7, #4]
 80edd02:	681b      	ldr	r3, [r3, #0]
 80edd04:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80edd08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80edd0a:	687b      	ldr	r3, [r7, #4]
 80edd0c:	681b      	ldr	r3, [r3, #0]
 80edd0e:	691a      	ldr	r2, [r3, #16]
 80edd10:	687b      	ldr	r3, [r7, #4]
 80edd12:	681b      	ldr	r3, [r3, #0]
 80edd14:	f022 0210 	bic.w	r2, r2, #16
 80edd18:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80edd1a:	687b      	ldr	r3, [r7, #4]
 80edd1c:	68db      	ldr	r3, [r3, #12]
 80edd1e:	2b01      	cmp	r3, #1
 80edd20:	d108      	bne.n	80edd34 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80edd22:	687b      	ldr	r3, [r7, #4]
 80edd24:	681b      	ldr	r3, [r3, #0]
 80edd26:	699a      	ldr	r2, [r3, #24]
 80edd28:	687b      	ldr	r3, [r7, #4]
 80edd2a:	681b      	ldr	r3, [r3, #0]
 80edd2c:	f042 0204 	orr.w	r2, r2, #4
 80edd30:	619a      	str	r2, [r3, #24]
 80edd32:	e02c      	b.n	80edd8e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80edd34:	687b      	ldr	r3, [r7, #4]
 80edd36:	68db      	ldr	r3, [r3, #12]
 80edd38:	2b00      	cmp	r3, #0
 80edd3a:	d028      	beq.n	80edd8e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80edd3c:	687b      	ldr	r3, [r7, #4]
 80edd3e:	68db      	ldr	r3, [r3, #12]
 80edd40:	2b02      	cmp	r3, #2
 80edd42:	d01c      	beq.n	80edd7e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80edd44:	687b      	ldr	r3, [r7, #4]
 80edd46:	681b      	ldr	r3, [r3, #0]
 80edd48:	699a      	ldr	r2, [r3, #24]
 80edd4a:	687b      	ldr	r3, [r7, #4]
 80edd4c:	681b      	ldr	r3, [r3, #0]
 80edd4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80edd52:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80edd54:	687b      	ldr	r3, [r7, #4]
 80edd56:	681b      	ldr	r3, [r3, #0]
 80edd58:	691a      	ldr	r2, [r3, #16]
 80edd5a:	687b      	ldr	r3, [r7, #4]
 80edd5c:	681b      	ldr	r3, [r3, #0]
 80edd5e:	f042 0210 	orr.w	r2, r2, #16
 80edd62:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80edd64:	687b      	ldr	r3, [r7, #4]
 80edd66:	68db      	ldr	r3, [r3, #12]
 80edd68:	2b03      	cmp	r3, #3
 80edd6a:	d110      	bne.n	80edd8e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80edd6c:	687b      	ldr	r3, [r7, #4]
 80edd6e:	681b      	ldr	r3, [r3, #0]
 80edd70:	699a      	ldr	r2, [r3, #24]
 80edd72:	687b      	ldr	r3, [r7, #4]
 80edd74:	681b      	ldr	r3, [r3, #0]
 80edd76:	f042 0220 	orr.w	r2, r2, #32
 80edd7a:	619a      	str	r2, [r3, #24]
 80edd7c:	e007      	b.n	80edd8e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80edd7e:	687b      	ldr	r3, [r7, #4]
 80edd80:	681b      	ldr	r3, [r3, #0]
 80edd82:	699a      	ldr	r2, [r3, #24]
 80edd84:	687b      	ldr	r3, [r7, #4]
 80edd86:	681b      	ldr	r3, [r3, #0]
 80edd88:	f042 0220 	orr.w	r2, r2, #32
 80edd8c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80edd8e:	687b      	ldr	r3, [r7, #4]
 80edd90:	699b      	ldr	r3, [r3, #24]
 80edd92:	3b01      	subs	r3, #1
 80edd94:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80edd96:	687b      	ldr	r3, [r7, #4]
 80edd98:	69db      	ldr	r3, [r3, #28]
 80edd9a:	3b01      	subs	r3, #1
 80edd9c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80edd9e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80edda0:	687b      	ldr	r3, [r7, #4]
 80edda2:	6a1b      	ldr	r3, [r3, #32]
 80edda4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80edda6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80eddaa:	687b      	ldr	r3, [r7, #4]
 80eddac:	695b      	ldr	r3, [r3, #20]
 80eddae:	3b01      	subs	r3, #1
 80eddb0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80eddb2:	687b      	ldr	r3, [r7, #4]
 80eddb4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80eddb6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80eddb8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80eddba:	687b      	ldr	r3, [r7, #4]
 80eddbc:	689b      	ldr	r3, [r3, #8]
 80eddbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80eddc2:	d115      	bne.n	80eddf0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80eddc4:	687b      	ldr	r3, [r7, #4]
 80eddc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eddc8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80eddca:	687b      	ldr	r3, [r7, #4]
 80eddcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80eddce:	3b01      	subs	r3, #1
 80eddd0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80eddd2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80eddd4:	687b      	ldr	r3, [r7, #4]
 80eddd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80eddd8:	3b01      	subs	r3, #1
 80eddda:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80edddc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80edde0:	687b      	ldr	r3, [r7, #4]
 80edde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80edde4:	3b01      	subs	r3, #1
 80edde6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80edde8:	687b      	ldr	r3, [r7, #4]
 80eddea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80eddec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80eddee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80eddf0:	687b      	ldr	r3, [r7, #4]
 80eddf2:	681b      	ldr	r3, [r3, #0]
 80eddf4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80eddf8:	687b      	ldr	r3, [r7, #4]
 80eddfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80eddfc:	687b      	ldr	r3, [r7, #4]
 80eddfe:	681b      	ldr	r3, [r3, #0]
 80ede00:	430a      	orrs	r2, r1
 80ede02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80ede06:	6878      	ldr	r0, [r7, #4]
 80ede08:	f000 fcc6 	bl	80ee798 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80ede0c:	687b      	ldr	r3, [r7, #4]
 80ede0e:	2200      	movs	r2, #0
 80ede10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80ede12:	687b      	ldr	r3, [r7, #4]
 80ede14:	2200      	movs	r2, #0
 80ede16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80ede18:	687b      	ldr	r3, [r7, #4]
 80ede1a:	2201      	movs	r2, #1
 80ede1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80ede20:	2300      	movs	r3, #0
}
 80ede22:	4618      	mov	r0, r3
 80ede24:	3710      	adds	r7, #16
 80ede26:	46bd      	mov	sp, r7
 80ede28:	bd80      	pop	{r7, pc}
 80ede2a:	bf00      	nop
 80ede2c:	4000a400 	.word	0x4000a400
 80ede30:	4000a500 	.word	0x4000a500

080ede34 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80ede34:	b480      	push	{r7}
 80ede36:	b087      	sub	sp, #28
 80ede38:	af00      	add	r7, sp, #0
 80ede3a:	6078      	str	r0, [r7, #4]
 80ede3c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80ede3e:	687b      	ldr	r3, [r7, #4]
 80ede40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80ede44:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80ede46:	7dfb      	ldrb	r3, [r7, #23]
 80ede48:	2b01      	cmp	r3, #1
 80ede4a:	d002      	beq.n	80ede52 <HAL_FDCAN_ConfigFilter+0x1e>
 80ede4c:	7dfb      	ldrb	r3, [r7, #23]
 80ede4e:	2b02      	cmp	r3, #2
 80ede50:	d13d      	bne.n	80edece <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80ede52:	683b      	ldr	r3, [r7, #0]
 80ede54:	681b      	ldr	r3, [r3, #0]
 80ede56:	2b00      	cmp	r3, #0
 80ede58:	d119      	bne.n	80ede8e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80ede5a:	683b      	ldr	r3, [r7, #0]
 80ede5c:	689b      	ldr	r3, [r3, #8]
 80ede5e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80ede60:	683b      	ldr	r3, [r7, #0]
 80ede62:	68db      	ldr	r3, [r3, #12]
 80ede64:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80ede66:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80ede68:	683b      	ldr	r3, [r7, #0]
 80ede6a:	691b      	ldr	r3, [r3, #16]
 80ede6c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80ede6e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80ede70:	683b      	ldr	r3, [r7, #0]
 80ede72:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80ede74:	4313      	orrs	r3, r2
 80ede76:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80ede78:	687b      	ldr	r3, [r7, #4]
 80ede7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80ede7c:	683b      	ldr	r3, [r7, #0]
 80ede7e:	685b      	ldr	r3, [r3, #4]
 80ede80:	009b      	lsls	r3, r3, #2
 80ede82:	4413      	add	r3, r2
 80ede84:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80ede86:	68bb      	ldr	r3, [r7, #8]
 80ede88:	693a      	ldr	r2, [r7, #16]
 80ede8a:	601a      	str	r2, [r3, #0]
 80ede8c:	e01d      	b.n	80edeca <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80ede8e:	683b      	ldr	r3, [r7, #0]
 80ede90:	68db      	ldr	r3, [r3, #12]
 80ede92:	075a      	lsls	r2, r3, #29
 80ede94:	683b      	ldr	r3, [r7, #0]
 80ede96:	691b      	ldr	r3, [r3, #16]
 80ede98:	4313      	orrs	r3, r2
 80ede9a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80ede9c:	683b      	ldr	r3, [r7, #0]
 80ede9e:	689b      	ldr	r3, [r3, #8]
 80edea0:	079a      	lsls	r2, r3, #30
 80edea2:	683b      	ldr	r3, [r7, #0]
 80edea4:	695b      	ldr	r3, [r3, #20]
 80edea6:	4313      	orrs	r3, r2
 80edea8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80edeaa:	687b      	ldr	r3, [r7, #4]
 80edeac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80edeae:	683b      	ldr	r3, [r7, #0]
 80edeb0:	685b      	ldr	r3, [r3, #4]
 80edeb2:	00db      	lsls	r3, r3, #3
 80edeb4:	4413      	add	r3, r2
 80edeb6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80edeb8:	68bb      	ldr	r3, [r7, #8]
 80edeba:	693a      	ldr	r2, [r7, #16]
 80edebc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80edebe:	68bb      	ldr	r3, [r7, #8]
 80edec0:	3304      	adds	r3, #4
 80edec2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80edec4:	68bb      	ldr	r3, [r7, #8]
 80edec6:	68fa      	ldr	r2, [r7, #12]
 80edec8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80edeca:	2300      	movs	r3, #0
 80edecc:	e006      	b.n	80ededc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80edece:	687b      	ldr	r3, [r7, #4]
 80eded0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80eded2:	f043 0202 	orr.w	r2, r3, #2
 80eded6:	687b      	ldr	r3, [r7, #4]
 80eded8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80ededa:	2301      	movs	r3, #1
  }
}
 80ededc:	4618      	mov	r0, r3
 80edede:	371c      	adds	r7, #28
 80edee0:	46bd      	mov	sp, r7
 80edee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80edee6:	4770      	bx	lr

080edee8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80edee8:	b480      	push	{r7}
 80edeea:	b085      	sub	sp, #20
 80edeec:	af00      	add	r7, sp, #0
 80edeee:	60f8      	str	r0, [r7, #12]
 80edef0:	60b9      	str	r1, [r7, #8]
 80edef2:	607a      	str	r2, [r7, #4]
 80edef4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80edef6:	68fb      	ldr	r3, [r7, #12]
 80edef8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80edefc:	b2db      	uxtb	r3, r3
 80edefe:	2b01      	cmp	r3, #1
 80edf00:	d116      	bne.n	80edf30 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80edf02:	68fb      	ldr	r3, [r7, #12]
 80edf04:	681b      	ldr	r3, [r3, #0]
 80edf06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80edf0a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80edf0e:	68bb      	ldr	r3, [r7, #8]
 80edf10:	011a      	lsls	r2, r3, #4
 80edf12:	687b      	ldr	r3, [r7, #4]
 80edf14:	009b      	lsls	r3, r3, #2
 80edf16:	431a      	orrs	r2, r3
 80edf18:	683b      	ldr	r3, [r7, #0]
 80edf1a:	005b      	lsls	r3, r3, #1
 80edf1c:	431a      	orrs	r2, r3
 80edf1e:	69bb      	ldr	r3, [r7, #24]
 80edf20:	431a      	orrs	r2, r3
 80edf22:	68fb      	ldr	r3, [r7, #12]
 80edf24:	681b      	ldr	r3, [r3, #0]
 80edf26:	430a      	orrs	r2, r1
 80edf28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80edf2c:	2300      	movs	r3, #0
 80edf2e:	e006      	b.n	80edf3e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80edf30:	68fb      	ldr	r3, [r7, #12]
 80edf32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80edf34:	f043 0204 	orr.w	r2, r3, #4
 80edf38:	68fb      	ldr	r3, [r7, #12]
 80edf3a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80edf3c:	2301      	movs	r3, #1
  }
}
 80edf3e:	4618      	mov	r0, r3
 80edf40:	3714      	adds	r7, #20
 80edf42:	46bd      	mov	sp, r7
 80edf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 80edf48:	4770      	bx	lr

080edf4a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80edf4a:	b480      	push	{r7}
 80edf4c:	b083      	sub	sp, #12
 80edf4e:	af00      	add	r7, sp, #0
 80edf50:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80edf52:	687b      	ldr	r3, [r7, #4]
 80edf54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80edf58:	b2db      	uxtb	r3, r3
 80edf5a:	2b01      	cmp	r3, #1
 80edf5c:	d110      	bne.n	80edf80 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80edf5e:	687b      	ldr	r3, [r7, #4]
 80edf60:	2202      	movs	r2, #2
 80edf62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80edf66:	687b      	ldr	r3, [r7, #4]
 80edf68:	681b      	ldr	r3, [r3, #0]
 80edf6a:	699a      	ldr	r2, [r3, #24]
 80edf6c:	687b      	ldr	r3, [r7, #4]
 80edf6e:	681b      	ldr	r3, [r3, #0]
 80edf70:	f022 0201 	bic.w	r2, r2, #1
 80edf74:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80edf76:	687b      	ldr	r3, [r7, #4]
 80edf78:	2200      	movs	r2, #0
 80edf7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80edf7c:	2300      	movs	r3, #0
 80edf7e:	e006      	b.n	80edf8e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80edf80:	687b      	ldr	r3, [r7, #4]
 80edf82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80edf84:	f043 0204 	orr.w	r2, r3, #4
 80edf88:	687b      	ldr	r3, [r7, #4]
 80edf8a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80edf8c:	2301      	movs	r3, #1
  }
}
 80edf8e:	4618      	mov	r0, r3
 80edf90:	370c      	adds	r7, #12
 80edf92:	46bd      	mov	sp, r7
 80edf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 80edf98:	4770      	bx	lr

080edf9a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80edf9a:	b580      	push	{r7, lr}
 80edf9c:	b086      	sub	sp, #24
 80edf9e:	af00      	add	r7, sp, #0
 80edfa0:	60f8      	str	r0, [r7, #12]
 80edfa2:	60b9      	str	r1, [r7, #8]
 80edfa4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80edfa6:	68fb      	ldr	r3, [r7, #12]
 80edfa8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80edfac:	b2db      	uxtb	r3, r3
 80edfae:	2b02      	cmp	r3, #2
 80edfb0:	d12c      	bne.n	80ee00c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80edfb2:	68fb      	ldr	r3, [r7, #12]
 80edfb4:	681b      	ldr	r3, [r3, #0]
 80edfb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80edfba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80edfbe:	2b00      	cmp	r3, #0
 80edfc0:	d007      	beq.n	80edfd2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80edfc2:	68fb      	ldr	r3, [r7, #12]
 80edfc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80edfc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80edfca:	68fb      	ldr	r3, [r7, #12]
 80edfcc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80edfce:	2301      	movs	r3, #1
 80edfd0:	e023      	b.n	80ee01a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80edfd2:	68fb      	ldr	r3, [r7, #12]
 80edfd4:	681b      	ldr	r3, [r3, #0]
 80edfd6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80edfda:	0c1b      	lsrs	r3, r3, #16
 80edfdc:	f003 0303 	and.w	r3, r3, #3
 80edfe0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80edfe2:	697b      	ldr	r3, [r7, #20]
 80edfe4:	687a      	ldr	r2, [r7, #4]
 80edfe6:	68b9      	ldr	r1, [r7, #8]
 80edfe8:	68f8      	ldr	r0, [r7, #12]
 80edfea:	f000 fc37 	bl	80ee85c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80edfee:	68fb      	ldr	r3, [r7, #12]
 80edff0:	681b      	ldr	r3, [r3, #0]
 80edff2:	2101      	movs	r1, #1
 80edff4:	697a      	ldr	r2, [r7, #20]
 80edff6:	fa01 f202 	lsl.w	r2, r1, r2
 80edffa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80edffe:	2201      	movs	r2, #1
 80ee000:	697b      	ldr	r3, [r7, #20]
 80ee002:	409a      	lsls	r2, r3
 80ee004:	68fb      	ldr	r3, [r7, #12]
 80ee006:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80ee008:	2300      	movs	r3, #0
 80ee00a:	e006      	b.n	80ee01a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80ee00c:	68fb      	ldr	r3, [r7, #12]
 80ee00e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee010:	f043 0208 	orr.w	r2, r3, #8
 80ee014:	68fb      	ldr	r3, [r7, #12]
 80ee016:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80ee018:	2301      	movs	r3, #1
  }
}
 80ee01a:	4618      	mov	r0, r3
 80ee01c:	3718      	adds	r7, #24
 80ee01e:	46bd      	mov	sp, r7
 80ee020:	bd80      	pop	{r7, pc}
	...

080ee024 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80ee024:	b480      	push	{r7}
 80ee026:	b08b      	sub	sp, #44	@ 0x2c
 80ee028:	af00      	add	r7, sp, #0
 80ee02a:	60f8      	str	r0, [r7, #12]
 80ee02c:	60b9      	str	r1, [r7, #8]
 80ee02e:	607a      	str	r2, [r7, #4]
 80ee030:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80ee032:	2300      	movs	r3, #0
 80ee034:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80ee036:	68fb      	ldr	r3, [r7, #12]
 80ee038:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80ee03c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80ee03e:	7efb      	ldrb	r3, [r7, #27]
 80ee040:	2b02      	cmp	r3, #2
 80ee042:	f040 80e8 	bne.w	80ee216 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80ee046:	68bb      	ldr	r3, [r7, #8]
 80ee048:	2b40      	cmp	r3, #64	@ 0x40
 80ee04a:	d137      	bne.n	80ee0bc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80ee04c:	68fb      	ldr	r3, [r7, #12]
 80ee04e:	681b      	ldr	r3, [r3, #0]
 80ee050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80ee054:	f003 030f 	and.w	r3, r3, #15
 80ee058:	2b00      	cmp	r3, #0
 80ee05a:	d107      	bne.n	80ee06c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80ee05c:	68fb      	ldr	r3, [r7, #12]
 80ee05e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee060:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80ee064:	68fb      	ldr	r3, [r7, #12]
 80ee066:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80ee068:	2301      	movs	r3, #1
 80ee06a:	e0db      	b.n	80ee224 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80ee06c:	68fb      	ldr	r3, [r7, #12]
 80ee06e:	681b      	ldr	r3, [r3, #0]
 80ee070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80ee074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80ee078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80ee07c:	d10a      	bne.n	80ee094 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80ee07e:	68fb      	ldr	r3, [r7, #12]
 80ee080:	681b      	ldr	r3, [r3, #0]
 80ee082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80ee086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80ee08a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80ee08e:	d101      	bne.n	80ee094 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80ee090:	2301      	movs	r3, #1
 80ee092:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80ee094:	68fb      	ldr	r3, [r7, #12]
 80ee096:	681b      	ldr	r3, [r3, #0]
 80ee098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80ee09c:	0a1b      	lsrs	r3, r3, #8
 80ee09e:	f003 0303 	and.w	r3, r3, #3
 80ee0a2:	69fa      	ldr	r2, [r7, #28]
 80ee0a4:	4413      	add	r3, r2
 80ee0a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80ee0a8:	68fb      	ldr	r3, [r7, #12]
 80ee0aa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80ee0ac:	69fa      	ldr	r2, [r7, #28]
 80ee0ae:	4613      	mov	r3, r2
 80ee0b0:	00db      	lsls	r3, r3, #3
 80ee0b2:	4413      	add	r3, r2
 80ee0b4:	00db      	lsls	r3, r3, #3
 80ee0b6:	440b      	add	r3, r1
 80ee0b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80ee0ba:	e036      	b.n	80ee12a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80ee0bc:	68fb      	ldr	r3, [r7, #12]
 80ee0be:	681b      	ldr	r3, [r3, #0]
 80ee0c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80ee0c4:	f003 030f 	and.w	r3, r3, #15
 80ee0c8:	2b00      	cmp	r3, #0
 80ee0ca:	d107      	bne.n	80ee0dc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80ee0cc:	68fb      	ldr	r3, [r7, #12]
 80ee0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee0d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80ee0d4:	68fb      	ldr	r3, [r7, #12]
 80ee0d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80ee0d8:	2301      	movs	r3, #1
 80ee0da:	e0a3      	b.n	80ee224 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80ee0dc:	68fb      	ldr	r3, [r7, #12]
 80ee0de:	681b      	ldr	r3, [r3, #0]
 80ee0e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80ee0e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80ee0e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80ee0ec:	d10a      	bne.n	80ee104 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80ee0ee:	68fb      	ldr	r3, [r7, #12]
 80ee0f0:	681b      	ldr	r3, [r3, #0]
 80ee0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80ee0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80ee0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80ee0fe:	d101      	bne.n	80ee104 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80ee100:	2301      	movs	r3, #1
 80ee102:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80ee104:	68fb      	ldr	r3, [r7, #12]
 80ee106:	681b      	ldr	r3, [r3, #0]
 80ee108:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80ee10c:	0a1b      	lsrs	r3, r3, #8
 80ee10e:	f003 0303 	and.w	r3, r3, #3
 80ee112:	69fa      	ldr	r2, [r7, #28]
 80ee114:	4413      	add	r3, r2
 80ee116:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80ee118:	68fb      	ldr	r3, [r7, #12]
 80ee11a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80ee11c:	69fa      	ldr	r2, [r7, #28]
 80ee11e:	4613      	mov	r3, r2
 80ee120:	00db      	lsls	r3, r3, #3
 80ee122:	4413      	add	r3, r2
 80ee124:	00db      	lsls	r3, r3, #3
 80ee126:	440b      	add	r3, r1
 80ee128:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80ee12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee12c:	681b      	ldr	r3, [r3, #0]
 80ee12e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80ee132:	687b      	ldr	r3, [r7, #4]
 80ee134:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80ee136:	687b      	ldr	r3, [r7, #4]
 80ee138:	685b      	ldr	r3, [r3, #4]
 80ee13a:	2b00      	cmp	r3, #0
 80ee13c:	d107      	bne.n	80ee14e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80ee13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee140:	681b      	ldr	r3, [r3, #0]
 80ee142:	0c9b      	lsrs	r3, r3, #18
 80ee144:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80ee148:	687b      	ldr	r3, [r7, #4]
 80ee14a:	601a      	str	r2, [r3, #0]
 80ee14c:	e005      	b.n	80ee15a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80ee14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee150:	681b      	ldr	r3, [r3, #0]
 80ee152:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80ee156:	687b      	ldr	r3, [r7, #4]
 80ee158:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80ee15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee15c:	681b      	ldr	r3, [r3, #0]
 80ee15e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80ee162:	687b      	ldr	r3, [r7, #4]
 80ee164:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80ee166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee168:	681b      	ldr	r3, [r3, #0]
 80ee16a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80ee16e:	687b      	ldr	r3, [r7, #4]
 80ee170:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80ee172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee174:	3304      	adds	r3, #4
 80ee176:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80ee178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee17a:	681b      	ldr	r3, [r3, #0]
 80ee17c:	b29a      	uxth	r2, r3
 80ee17e:	687b      	ldr	r3, [r7, #4]
 80ee180:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80ee182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee184:	681b      	ldr	r3, [r3, #0]
 80ee186:	0c1b      	lsrs	r3, r3, #16
 80ee188:	f003 020f 	and.w	r2, r3, #15
 80ee18c:	687b      	ldr	r3, [r7, #4]
 80ee18e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80ee190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee192:	681b      	ldr	r3, [r3, #0]
 80ee194:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80ee198:	687b      	ldr	r3, [r7, #4]
 80ee19a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80ee19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee19e:	681b      	ldr	r3, [r3, #0]
 80ee1a0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80ee1a4:	687b      	ldr	r3, [r7, #4]
 80ee1a6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80ee1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee1aa:	681b      	ldr	r3, [r3, #0]
 80ee1ac:	0e1b      	lsrs	r3, r3, #24
 80ee1ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80ee1b2:	687b      	ldr	r3, [r7, #4]
 80ee1b4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80ee1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee1b8:	681b      	ldr	r3, [r3, #0]
 80ee1ba:	0fda      	lsrs	r2, r3, #31
 80ee1bc:	687b      	ldr	r3, [r7, #4]
 80ee1be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80ee1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee1c2:	3304      	adds	r3, #4
 80ee1c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80ee1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee1c8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80ee1ca:	2300      	movs	r3, #0
 80ee1cc:	623b      	str	r3, [r7, #32]
 80ee1ce:	e00a      	b.n	80ee1e6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80ee1d0:	697a      	ldr	r2, [r7, #20]
 80ee1d2:	6a3b      	ldr	r3, [r7, #32]
 80ee1d4:	441a      	add	r2, r3
 80ee1d6:	6839      	ldr	r1, [r7, #0]
 80ee1d8:	6a3b      	ldr	r3, [r7, #32]
 80ee1da:	440b      	add	r3, r1
 80ee1dc:	7812      	ldrb	r2, [r2, #0]
 80ee1de:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80ee1e0:	6a3b      	ldr	r3, [r7, #32]
 80ee1e2:	3301      	adds	r3, #1
 80ee1e4:	623b      	str	r3, [r7, #32]
 80ee1e6:	687b      	ldr	r3, [r7, #4]
 80ee1e8:	68db      	ldr	r3, [r3, #12]
 80ee1ea:	4a11      	ldr	r2, [pc, #68]	@ (80ee230 <HAL_FDCAN_GetRxMessage+0x20c>)
 80ee1ec:	5cd3      	ldrb	r3, [r2, r3]
 80ee1ee:	461a      	mov	r2, r3
 80ee1f0:	6a3b      	ldr	r3, [r7, #32]
 80ee1f2:	4293      	cmp	r3, r2
 80ee1f4:	d3ec      	bcc.n	80ee1d0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80ee1f6:	68bb      	ldr	r3, [r7, #8]
 80ee1f8:	2b40      	cmp	r3, #64	@ 0x40
 80ee1fa:	d105      	bne.n	80ee208 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80ee1fc:	68fb      	ldr	r3, [r7, #12]
 80ee1fe:	681b      	ldr	r3, [r3, #0]
 80ee200:	69fa      	ldr	r2, [r7, #28]
 80ee202:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80ee206:	e004      	b.n	80ee212 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80ee208:	68fb      	ldr	r3, [r7, #12]
 80ee20a:	681b      	ldr	r3, [r3, #0]
 80ee20c:	69fa      	ldr	r2, [r7, #28]
 80ee20e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80ee212:	2300      	movs	r3, #0
 80ee214:	e006      	b.n	80ee224 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80ee216:	68fb      	ldr	r3, [r7, #12]
 80ee218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee21a:	f043 0208 	orr.w	r2, r3, #8
 80ee21e:	68fb      	ldr	r3, [r7, #12]
 80ee220:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80ee222:	2301      	movs	r3, #1
  }
}
 80ee224:	4618      	mov	r0, r3
 80ee226:	372c      	adds	r7, #44	@ 0x2c
 80ee228:	46bd      	mov	sp, r7
 80ee22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee22e:	4770      	bx	lr
 80ee230:	080fae4c 	.word	0x080fae4c

080ee234 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80ee234:	b480      	push	{r7}
 80ee236:	b085      	sub	sp, #20
 80ee238:	af00      	add	r7, sp, #0
 80ee23a:	6078      	str	r0, [r7, #4]
 80ee23c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80ee23e:	683b      	ldr	r3, [r7, #0]
 80ee240:	2b40      	cmp	r3, #64	@ 0x40
 80ee242:	d107      	bne.n	80ee254 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80ee244:	687b      	ldr	r3, [r7, #4]
 80ee246:	681b      	ldr	r3, [r3, #0]
 80ee248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80ee24c:	f003 030f 	and.w	r3, r3, #15
 80ee250:	60fb      	str	r3, [r7, #12]
 80ee252:	e006      	b.n	80ee262 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80ee254:	687b      	ldr	r3, [r7, #4]
 80ee256:	681b      	ldr	r3, [r3, #0]
 80ee258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80ee25c:	f003 030f 	and.w	r3, r3, #15
 80ee260:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80ee262:	68fb      	ldr	r3, [r7, #12]
}
 80ee264:	4618      	mov	r0, r3
 80ee266:	3714      	adds	r7, #20
 80ee268:	46bd      	mov	sp, r7
 80ee26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee26e:	4770      	bx	lr

080ee270 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80ee270:	b480      	push	{r7}
 80ee272:	b085      	sub	sp, #20
 80ee274:	af00      	add	r7, sp, #0
 80ee276:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80ee278:	687b      	ldr	r3, [r7, #4]
 80ee27a:	681b      	ldr	r3, [r3, #0]
 80ee27c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80ee280:	f003 0307 	and.w	r3, r3, #7
 80ee284:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80ee286:	68fb      	ldr	r3, [r7, #12]
}
 80ee288:	4618      	mov	r0, r3
 80ee28a:	3714      	adds	r7, #20
 80ee28c:	46bd      	mov	sp, r7
 80ee28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee292:	4770      	bx	lr

080ee294 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80ee294:	b480      	push	{r7}
 80ee296:	b087      	sub	sp, #28
 80ee298:	af00      	add	r7, sp, #0
 80ee29a:	60f8      	str	r0, [r7, #12]
 80ee29c:	60b9      	str	r1, [r7, #8]
 80ee29e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80ee2a0:	68fb      	ldr	r3, [r7, #12]
 80ee2a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80ee2a6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80ee2a8:	7dfb      	ldrb	r3, [r7, #23]
 80ee2aa:	2b01      	cmp	r3, #1
 80ee2ac:	d003      	beq.n	80ee2b6 <HAL_FDCAN_ActivateNotification+0x22>
 80ee2ae:	7dfb      	ldrb	r3, [r7, #23]
 80ee2b0:	2b02      	cmp	r3, #2
 80ee2b2:	f040 80c8 	bne.w	80ee446 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80ee2b6:	68fb      	ldr	r3, [r7, #12]
 80ee2b8:	681b      	ldr	r3, [r3, #0]
 80ee2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80ee2bc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80ee2be:	68bb      	ldr	r3, [r7, #8]
 80ee2c0:	f003 0307 	and.w	r3, r3, #7
 80ee2c4:	2b00      	cmp	r3, #0
 80ee2c6:	d004      	beq.n	80ee2d2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80ee2c8:	693b      	ldr	r3, [r7, #16]
 80ee2ca:	f003 0301 	and.w	r3, r3, #1
 80ee2ce:	2b00      	cmp	r3, #0
 80ee2d0:	d03b      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80ee2d2:	68bb      	ldr	r3, [r7, #8]
 80ee2d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80ee2d8:	2b00      	cmp	r3, #0
 80ee2da:	d004      	beq.n	80ee2e6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80ee2dc:	693b      	ldr	r3, [r7, #16]
 80ee2de:	f003 0302 	and.w	r3, r3, #2
 80ee2e2:	2b00      	cmp	r3, #0
 80ee2e4:	d031      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80ee2e6:	68bb      	ldr	r3, [r7, #8]
 80ee2e8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80ee2ec:	2b00      	cmp	r3, #0
 80ee2ee:	d004      	beq.n	80ee2fa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80ee2f0:	693b      	ldr	r3, [r7, #16]
 80ee2f2:	f003 0304 	and.w	r3, r3, #4
 80ee2f6:	2b00      	cmp	r3, #0
 80ee2f8:	d027      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80ee2fa:	68bb      	ldr	r3, [r7, #8]
 80ee2fc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80ee300:	2b00      	cmp	r3, #0
 80ee302:	d004      	beq.n	80ee30e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80ee304:	693b      	ldr	r3, [r7, #16]
 80ee306:	f003 0308 	and.w	r3, r3, #8
 80ee30a:	2b00      	cmp	r3, #0
 80ee30c:	d01d      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80ee30e:	68bb      	ldr	r3, [r7, #8]
 80ee310:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80ee314:	2b00      	cmp	r3, #0
 80ee316:	d004      	beq.n	80ee322 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80ee318:	693b      	ldr	r3, [r7, #16]
 80ee31a:	f003 0310 	and.w	r3, r3, #16
 80ee31e:	2b00      	cmp	r3, #0
 80ee320:	d013      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80ee322:	68bb      	ldr	r3, [r7, #8]
 80ee324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80ee328:	2b00      	cmp	r3, #0
 80ee32a:	d004      	beq.n	80ee336 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80ee32c:	693b      	ldr	r3, [r7, #16]
 80ee32e:	f003 0320 	and.w	r3, r3, #32
 80ee332:	2b00      	cmp	r3, #0
 80ee334:	d009      	beq.n	80ee34a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80ee336:	68bb      	ldr	r3, [r7, #8]
 80ee338:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80ee33c:	2b00      	cmp	r3, #0
 80ee33e:	d00c      	beq.n	80ee35a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80ee340:	693b      	ldr	r3, [r7, #16]
 80ee342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80ee346:	2b00      	cmp	r3, #0
 80ee348:	d107      	bne.n	80ee35a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80ee34a:	68fb      	ldr	r3, [r7, #12]
 80ee34c:	681b      	ldr	r3, [r3, #0]
 80ee34e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80ee350:	68fb      	ldr	r3, [r7, #12]
 80ee352:	681b      	ldr	r3, [r3, #0]
 80ee354:	f042 0201 	orr.w	r2, r2, #1
 80ee358:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80ee35a:	68bb      	ldr	r3, [r7, #8]
 80ee35c:	f003 0307 	and.w	r3, r3, #7
 80ee360:	2b00      	cmp	r3, #0
 80ee362:	d004      	beq.n	80ee36e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80ee364:	693b      	ldr	r3, [r7, #16]
 80ee366:	f003 0301 	and.w	r3, r3, #1
 80ee36a:	2b00      	cmp	r3, #0
 80ee36c:	d13b      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80ee36e:	68bb      	ldr	r3, [r7, #8]
 80ee370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80ee374:	2b00      	cmp	r3, #0
 80ee376:	d004      	beq.n	80ee382 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80ee378:	693b      	ldr	r3, [r7, #16]
 80ee37a:	f003 0302 	and.w	r3, r3, #2
 80ee37e:	2b00      	cmp	r3, #0
 80ee380:	d131      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80ee382:	68bb      	ldr	r3, [r7, #8]
 80ee384:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80ee388:	2b00      	cmp	r3, #0
 80ee38a:	d004      	beq.n	80ee396 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80ee38c:	693b      	ldr	r3, [r7, #16]
 80ee38e:	f003 0304 	and.w	r3, r3, #4
 80ee392:	2b00      	cmp	r3, #0
 80ee394:	d127      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80ee396:	68bb      	ldr	r3, [r7, #8]
 80ee398:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80ee39c:	2b00      	cmp	r3, #0
 80ee39e:	d004      	beq.n	80ee3aa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80ee3a0:	693b      	ldr	r3, [r7, #16]
 80ee3a2:	f003 0308 	and.w	r3, r3, #8
 80ee3a6:	2b00      	cmp	r3, #0
 80ee3a8:	d11d      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80ee3aa:	68bb      	ldr	r3, [r7, #8]
 80ee3ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80ee3b0:	2b00      	cmp	r3, #0
 80ee3b2:	d004      	beq.n	80ee3be <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80ee3b4:	693b      	ldr	r3, [r7, #16]
 80ee3b6:	f003 0310 	and.w	r3, r3, #16
 80ee3ba:	2b00      	cmp	r3, #0
 80ee3bc:	d113      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80ee3be:	68bb      	ldr	r3, [r7, #8]
 80ee3c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80ee3c4:	2b00      	cmp	r3, #0
 80ee3c6:	d004      	beq.n	80ee3d2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80ee3c8:	693b      	ldr	r3, [r7, #16]
 80ee3ca:	f003 0320 	and.w	r3, r3, #32
 80ee3ce:	2b00      	cmp	r3, #0
 80ee3d0:	d109      	bne.n	80ee3e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80ee3d2:	68bb      	ldr	r3, [r7, #8]
 80ee3d4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80ee3d8:	2b00      	cmp	r3, #0
 80ee3da:	d00c      	beq.n	80ee3f6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80ee3dc:	693b      	ldr	r3, [r7, #16]
 80ee3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80ee3e2:	2b00      	cmp	r3, #0
 80ee3e4:	d007      	beq.n	80ee3f6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80ee3e6:	68fb      	ldr	r3, [r7, #12]
 80ee3e8:	681b      	ldr	r3, [r3, #0]
 80ee3ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80ee3ec:	68fb      	ldr	r3, [r7, #12]
 80ee3ee:	681b      	ldr	r3, [r3, #0]
 80ee3f0:	f042 0202 	orr.w	r2, r2, #2
 80ee3f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80ee3f6:	68bb      	ldr	r3, [r7, #8]
 80ee3f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80ee3fc:	2b00      	cmp	r3, #0
 80ee3fe:	d009      	beq.n	80ee414 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80ee400:	68fb      	ldr	r3, [r7, #12]
 80ee402:	681b      	ldr	r3, [r3, #0]
 80ee404:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80ee408:	68fb      	ldr	r3, [r7, #12]
 80ee40a:	681b      	ldr	r3, [r3, #0]
 80ee40c:	687a      	ldr	r2, [r7, #4]
 80ee40e:	430a      	orrs	r2, r1
 80ee410:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80ee414:	68bb      	ldr	r3, [r7, #8]
 80ee416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80ee41a:	2b00      	cmp	r3, #0
 80ee41c:	d009      	beq.n	80ee432 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80ee41e:	68fb      	ldr	r3, [r7, #12]
 80ee420:	681b      	ldr	r3, [r3, #0]
 80ee422:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80ee426:	68fb      	ldr	r3, [r7, #12]
 80ee428:	681b      	ldr	r3, [r3, #0]
 80ee42a:	687a      	ldr	r2, [r7, #4]
 80ee42c:	430a      	orrs	r2, r1
 80ee42e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80ee432:	68fb      	ldr	r3, [r7, #12]
 80ee434:	681b      	ldr	r3, [r3, #0]
 80ee436:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80ee438:	68fb      	ldr	r3, [r7, #12]
 80ee43a:	681b      	ldr	r3, [r3, #0]
 80ee43c:	68ba      	ldr	r2, [r7, #8]
 80ee43e:	430a      	orrs	r2, r1
 80ee440:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80ee442:	2300      	movs	r3, #0
 80ee444:	e006      	b.n	80ee454 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80ee446:	68fb      	ldr	r3, [r7, #12]
 80ee448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee44a:	f043 0202 	orr.w	r2, r3, #2
 80ee44e:	68fb      	ldr	r3, [r7, #12]
 80ee450:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80ee452:	2301      	movs	r3, #1
  }
}
 80ee454:	4618      	mov	r0, r3
 80ee456:	371c      	adds	r7, #28
 80ee458:	46bd      	mov	sp, r7
 80ee45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee45e:	4770      	bx	lr

080ee460 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80ee460:	b580      	push	{r7, lr}
 80ee462:	b08c      	sub	sp, #48	@ 0x30
 80ee464:	af00      	add	r7, sp, #0
 80ee466:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80ee468:	687b      	ldr	r3, [r7, #4]
 80ee46a:	681b      	ldr	r3, [r3, #0]
 80ee46c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee46e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80ee472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80ee474:	687b      	ldr	r3, [r7, #4]
 80ee476:	681b      	ldr	r3, [r3, #0]
 80ee478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee47a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80ee47c:	4013      	ands	r3, r2
 80ee47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80ee480:	687b      	ldr	r3, [r7, #4]
 80ee482:	681b      	ldr	r3, [r3, #0]
 80ee484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee486:	f003 0307 	and.w	r3, r3, #7
 80ee48a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80ee48c:	687b      	ldr	r3, [r7, #4]
 80ee48e:	681b      	ldr	r3, [r3, #0]
 80ee490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ee494:	4013      	ands	r3, r2
 80ee496:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80ee498:	687b      	ldr	r3, [r7, #4]
 80ee49a:	681b      	ldr	r3, [r3, #0]
 80ee49c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee49e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80ee4a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80ee4a4:	687b      	ldr	r3, [r7, #4]
 80ee4a6:	681b      	ldr	r3, [r3, #0]
 80ee4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee4aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ee4ac:	4013      	ands	r3, r2
 80ee4ae:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80ee4b0:	687b      	ldr	r3, [r7, #4]
 80ee4b2:	681b      	ldr	r3, [r3, #0]
 80ee4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee4b6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80ee4ba:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80ee4bc:	687b      	ldr	r3, [r7, #4]
 80ee4be:	681b      	ldr	r3, [r3, #0]
 80ee4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee4c2:	6a3a      	ldr	r2, [r7, #32]
 80ee4c4:	4013      	ands	r3, r2
 80ee4c6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80ee4c8:	687b      	ldr	r3, [r7, #4]
 80ee4ca:	681b      	ldr	r3, [r3, #0]
 80ee4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee4ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80ee4d2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80ee4d4:	687b      	ldr	r3, [r7, #4]
 80ee4d6:	681b      	ldr	r3, [r3, #0]
 80ee4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee4da:	69fa      	ldr	r2, [r7, #28]
 80ee4dc:	4013      	ands	r3, r2
 80ee4de:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80ee4e0:	687b      	ldr	r3, [r7, #4]
 80ee4e2:	681b      	ldr	r3, [r3, #0]
 80ee4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80ee4e6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80ee4e8:	687b      	ldr	r3, [r7, #4]
 80ee4ea:	681b      	ldr	r3, [r3, #0]
 80ee4ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80ee4ee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80ee4f0:	697b      	ldr	r3, [r7, #20]
 80ee4f2:	099b      	lsrs	r3, r3, #6
 80ee4f4:	f003 0301 	and.w	r3, r3, #1
 80ee4f8:	2b00      	cmp	r3, #0
 80ee4fa:	d00c      	beq.n	80ee516 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80ee4fc:	69bb      	ldr	r3, [r7, #24]
 80ee4fe:	099b      	lsrs	r3, r3, #6
 80ee500:	f003 0301 	and.w	r3, r3, #1
 80ee504:	2b00      	cmp	r3, #0
 80ee506:	d006      	beq.n	80ee516 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80ee508:	687b      	ldr	r3, [r7, #4]
 80ee50a:	681b      	ldr	r3, [r3, #0]
 80ee50c:	2240      	movs	r2, #64	@ 0x40
 80ee50e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80ee510:	6878      	ldr	r0, [r7, #4]
 80ee512:	f000 f922 	bl	80ee75a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80ee516:	697b      	ldr	r3, [r7, #20]
 80ee518:	0a1b      	lsrs	r3, r3, #8
 80ee51a:	f003 0301 	and.w	r3, r3, #1
 80ee51e:	2b00      	cmp	r3, #0
 80ee520:	d01a      	beq.n	80ee558 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80ee522:	69bb      	ldr	r3, [r7, #24]
 80ee524:	0a1b      	lsrs	r3, r3, #8
 80ee526:	f003 0301 	and.w	r3, r3, #1
 80ee52a:	2b00      	cmp	r3, #0
 80ee52c:	d014      	beq.n	80ee558 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80ee52e:	687b      	ldr	r3, [r7, #4]
 80ee530:	681b      	ldr	r3, [r3, #0]
 80ee532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80ee536:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80ee538:	687b      	ldr	r3, [r7, #4]
 80ee53a:	681b      	ldr	r3, [r3, #0]
 80ee53c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80ee540:	693a      	ldr	r2, [r7, #16]
 80ee542:	4013      	ands	r3, r2
 80ee544:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80ee546:	687b      	ldr	r3, [r7, #4]
 80ee548:	681b      	ldr	r3, [r3, #0]
 80ee54a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80ee54e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80ee550:	6939      	ldr	r1, [r7, #16]
 80ee552:	6878      	ldr	r0, [r7, #4]
 80ee554:	f000 f8e2 	bl	80ee71c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80ee558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80ee55a:	2b00      	cmp	r3, #0
 80ee55c:	d007      	beq.n	80ee56e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80ee55e:	687b      	ldr	r3, [r7, #4]
 80ee560:	681b      	ldr	r3, [r3, #0]
 80ee562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80ee564:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80ee566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80ee568:	6878      	ldr	r0, [r7, #4]
 80ee56a:	f000 f8ac 	bl	80ee6c6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80ee56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80ee570:	2b00      	cmp	r3, #0
 80ee572:	d007      	beq.n	80ee584 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80ee574:	687b      	ldr	r3, [r7, #4]
 80ee576:	681b      	ldr	r3, [r3, #0]
 80ee578:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80ee57a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80ee57c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80ee57e:	6878      	ldr	r0, [r7, #4]
 80ee580:	f00a ff56 	bl	80f9430 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80ee584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80ee586:	2b00      	cmp	r3, #0
 80ee588:	d007      	beq.n	80ee59a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80ee58a:	687b      	ldr	r3, [r7, #4]
 80ee58c:	681b      	ldr	r3, [r3, #0]
 80ee58e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80ee590:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80ee592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80ee594:	6878      	ldr	r0, [r7, #4]
 80ee596:	f000 f8a1 	bl	80ee6dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80ee59a:	697b      	ldr	r3, [r7, #20]
 80ee59c:	0a5b      	lsrs	r3, r3, #9
 80ee59e:	f003 0301 	and.w	r3, r3, #1
 80ee5a2:	2b00      	cmp	r3, #0
 80ee5a4:	d00d      	beq.n	80ee5c2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80ee5a6:	69bb      	ldr	r3, [r7, #24]
 80ee5a8:	0a5b      	lsrs	r3, r3, #9
 80ee5aa:	f003 0301 	and.w	r3, r3, #1
 80ee5ae:	2b00      	cmp	r3, #0
 80ee5b0:	d007      	beq.n	80ee5c2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80ee5b2:	687b      	ldr	r3, [r7, #4]
 80ee5b4:	681b      	ldr	r3, [r3, #0]
 80ee5b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80ee5ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80ee5bc:	6878      	ldr	r0, [r7, #4]
 80ee5be:	f000 f898 	bl	80ee6f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80ee5c2:	697b      	ldr	r3, [r7, #20]
 80ee5c4:	09db      	lsrs	r3, r3, #7
 80ee5c6:	f003 0301 	and.w	r3, r3, #1
 80ee5ca:	2b00      	cmp	r3, #0
 80ee5cc:	d019      	beq.n	80ee602 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80ee5ce:	69bb      	ldr	r3, [r7, #24]
 80ee5d0:	09db      	lsrs	r3, r3, #7
 80ee5d2:	f003 0301 	and.w	r3, r3, #1
 80ee5d6:	2b00      	cmp	r3, #0
 80ee5d8:	d013      	beq.n	80ee602 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80ee5da:	687b      	ldr	r3, [r7, #4]
 80ee5dc:	681b      	ldr	r3, [r3, #0]
 80ee5de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80ee5e2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80ee5e4:	687b      	ldr	r3, [r7, #4]
 80ee5e6:	681b      	ldr	r3, [r3, #0]
 80ee5e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80ee5ec:	68fa      	ldr	r2, [r7, #12]
 80ee5ee:	4013      	ands	r3, r2
 80ee5f0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80ee5f2:	687b      	ldr	r3, [r7, #4]
 80ee5f4:	681b      	ldr	r3, [r3, #0]
 80ee5f6:	2280      	movs	r2, #128	@ 0x80
 80ee5f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80ee5fa:	68f9      	ldr	r1, [r7, #12]
 80ee5fc:	6878      	ldr	r0, [r7, #4]
 80ee5fe:	f000 f882 	bl	80ee706 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80ee602:	697b      	ldr	r3, [r7, #20]
 80ee604:	0b5b      	lsrs	r3, r3, #13
 80ee606:	f003 0301 	and.w	r3, r3, #1
 80ee60a:	2b00      	cmp	r3, #0
 80ee60c:	d00d      	beq.n	80ee62a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80ee60e:	69bb      	ldr	r3, [r7, #24]
 80ee610:	0b5b      	lsrs	r3, r3, #13
 80ee612:	f003 0301 	and.w	r3, r3, #1
 80ee616:	2b00      	cmp	r3, #0
 80ee618:	d007      	beq.n	80ee62a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80ee61a:	687b      	ldr	r3, [r7, #4]
 80ee61c:	681b      	ldr	r3, [r3, #0]
 80ee61e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80ee622:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80ee624:	6878      	ldr	r0, [r7, #4]
 80ee626:	f000 f884 	bl	80ee732 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80ee62a:	697b      	ldr	r3, [r7, #20]
 80ee62c:	0bdb      	lsrs	r3, r3, #15
 80ee62e:	f003 0301 	and.w	r3, r3, #1
 80ee632:	2b00      	cmp	r3, #0
 80ee634:	d00d      	beq.n	80ee652 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80ee636:	69bb      	ldr	r3, [r7, #24]
 80ee638:	0bdb      	lsrs	r3, r3, #15
 80ee63a:	f003 0301 	and.w	r3, r3, #1
 80ee63e:	2b00      	cmp	r3, #0
 80ee640:	d007      	beq.n	80ee652 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80ee642:	687b      	ldr	r3, [r7, #4]
 80ee644:	681b      	ldr	r3, [r3, #0]
 80ee646:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80ee64a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80ee64c:	6878      	ldr	r0, [r7, #4]
 80ee64e:	f000 f87a 	bl	80ee746 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80ee652:	697b      	ldr	r3, [r7, #20]
 80ee654:	0b9b      	lsrs	r3, r3, #14
 80ee656:	f003 0301 	and.w	r3, r3, #1
 80ee65a:	2b00      	cmp	r3, #0
 80ee65c:	d010      	beq.n	80ee680 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80ee65e:	69bb      	ldr	r3, [r7, #24]
 80ee660:	0b9b      	lsrs	r3, r3, #14
 80ee662:	f003 0301 	and.w	r3, r3, #1
 80ee666:	2b00      	cmp	r3, #0
 80ee668:	d00a      	beq.n	80ee680 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80ee66a:	687b      	ldr	r3, [r7, #4]
 80ee66c:	681b      	ldr	r3, [r3, #0]
 80ee66e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80ee672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80ee674:	687b      	ldr	r3, [r7, #4]
 80ee676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee678:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80ee67c:	687b      	ldr	r3, [r7, #4]
 80ee67e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80ee680:	69fb      	ldr	r3, [r7, #28]
 80ee682:	2b00      	cmp	r3, #0
 80ee684:	d007      	beq.n	80ee696 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80ee686:	687b      	ldr	r3, [r7, #4]
 80ee688:	681b      	ldr	r3, [r3, #0]
 80ee68a:	69fa      	ldr	r2, [r7, #28]
 80ee68c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80ee68e:	69f9      	ldr	r1, [r7, #28]
 80ee690:	6878      	ldr	r0, [r7, #4]
 80ee692:	f000 f876 	bl	80ee782 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80ee696:	6a3b      	ldr	r3, [r7, #32]
 80ee698:	2b00      	cmp	r3, #0
 80ee69a:	d009      	beq.n	80ee6b0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80ee69c:	687b      	ldr	r3, [r7, #4]
 80ee69e:	681b      	ldr	r3, [r3, #0]
 80ee6a0:	6a3a      	ldr	r2, [r7, #32]
 80ee6a2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80ee6a4:	687b      	ldr	r3, [r7, #4]
 80ee6a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80ee6a8:	6a3b      	ldr	r3, [r7, #32]
 80ee6aa:	431a      	orrs	r2, r3
 80ee6ac:	687b      	ldr	r3, [r7, #4]
 80ee6ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80ee6b0:	687b      	ldr	r3, [r7, #4]
 80ee6b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80ee6b4:	2b00      	cmp	r3, #0
 80ee6b6:	d002      	beq.n	80ee6be <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80ee6b8:	6878      	ldr	r0, [r7, #4]
 80ee6ba:	f000 f858 	bl	80ee76e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80ee6be:	bf00      	nop
 80ee6c0:	3730      	adds	r7, #48	@ 0x30
 80ee6c2:	46bd      	mov	sp, r7
 80ee6c4:	bd80      	pop	{r7, pc}

080ee6c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80ee6c6:	b480      	push	{r7}
 80ee6c8:	b083      	sub	sp, #12
 80ee6ca:	af00      	add	r7, sp, #0
 80ee6cc:	6078      	str	r0, [r7, #4]
 80ee6ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80ee6d0:	bf00      	nop
 80ee6d2:	370c      	adds	r7, #12
 80ee6d4:	46bd      	mov	sp, r7
 80ee6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee6da:	4770      	bx	lr

080ee6dc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80ee6dc:	b480      	push	{r7}
 80ee6de:	b083      	sub	sp, #12
 80ee6e0:	af00      	add	r7, sp, #0
 80ee6e2:	6078      	str	r0, [r7, #4]
 80ee6e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80ee6e6:	bf00      	nop
 80ee6e8:	370c      	adds	r7, #12
 80ee6ea:	46bd      	mov	sp, r7
 80ee6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee6f0:	4770      	bx	lr

080ee6f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80ee6f2:	b480      	push	{r7}
 80ee6f4:	b083      	sub	sp, #12
 80ee6f6:	af00      	add	r7, sp, #0
 80ee6f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80ee6fa:	bf00      	nop
 80ee6fc:	370c      	adds	r7, #12
 80ee6fe:	46bd      	mov	sp, r7
 80ee700:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee704:	4770      	bx	lr

080ee706 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80ee706:	b480      	push	{r7}
 80ee708:	b083      	sub	sp, #12
 80ee70a:	af00      	add	r7, sp, #0
 80ee70c:	6078      	str	r0, [r7, #4]
 80ee70e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80ee710:	bf00      	nop
 80ee712:	370c      	adds	r7, #12
 80ee714:	46bd      	mov	sp, r7
 80ee716:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee71a:	4770      	bx	lr

080ee71c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80ee71c:	b480      	push	{r7}
 80ee71e:	b083      	sub	sp, #12
 80ee720:	af00      	add	r7, sp, #0
 80ee722:	6078      	str	r0, [r7, #4]
 80ee724:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80ee726:	bf00      	nop
 80ee728:	370c      	adds	r7, #12
 80ee72a:	46bd      	mov	sp, r7
 80ee72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee730:	4770      	bx	lr

080ee732 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80ee732:	b480      	push	{r7}
 80ee734:	b083      	sub	sp, #12
 80ee736:	af00      	add	r7, sp, #0
 80ee738:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80ee73a:	bf00      	nop
 80ee73c:	370c      	adds	r7, #12
 80ee73e:	46bd      	mov	sp, r7
 80ee740:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee744:	4770      	bx	lr

080ee746 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80ee746:	b480      	push	{r7}
 80ee748:	b083      	sub	sp, #12
 80ee74a:	af00      	add	r7, sp, #0
 80ee74c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80ee74e:	bf00      	nop
 80ee750:	370c      	adds	r7, #12
 80ee752:	46bd      	mov	sp, r7
 80ee754:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee758:	4770      	bx	lr

080ee75a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80ee75a:	b480      	push	{r7}
 80ee75c:	b083      	sub	sp, #12
 80ee75e:	af00      	add	r7, sp, #0
 80ee760:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80ee762:	bf00      	nop
 80ee764:	370c      	adds	r7, #12
 80ee766:	46bd      	mov	sp, r7
 80ee768:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee76c:	4770      	bx	lr

080ee76e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80ee76e:	b480      	push	{r7}
 80ee770:	b083      	sub	sp, #12
 80ee772:	af00      	add	r7, sp, #0
 80ee774:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80ee776:	bf00      	nop
 80ee778:	370c      	adds	r7, #12
 80ee77a:	46bd      	mov	sp, r7
 80ee77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee780:	4770      	bx	lr

080ee782 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80ee782:	b480      	push	{r7}
 80ee784:	b083      	sub	sp, #12
 80ee786:	af00      	add	r7, sp, #0
 80ee788:	6078      	str	r0, [r7, #4]
 80ee78a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80ee78c:	bf00      	nop
 80ee78e:	370c      	adds	r7, #12
 80ee790:	46bd      	mov	sp, r7
 80ee792:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee796:	4770      	bx	lr

080ee798 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80ee798:	b480      	push	{r7}
 80ee79a:	b085      	sub	sp, #20
 80ee79c:	af00      	add	r7, sp, #0
 80ee79e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80ee7a0:	4b2c      	ldr	r3, [pc, #176]	@ (80ee854 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80ee7a2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80ee7a4:	687b      	ldr	r3, [r7, #4]
 80ee7a6:	681b      	ldr	r3, [r3, #0]
 80ee7a8:	4a2b      	ldr	r2, [pc, #172]	@ (80ee858 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80ee7aa:	4293      	cmp	r3, r2
 80ee7ac:	d103      	bne.n	80ee7b6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80ee7ae:	68bb      	ldr	r3, [r7, #8]
 80ee7b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80ee7b4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80ee7b6:	687b      	ldr	r3, [r7, #4]
 80ee7b8:	68ba      	ldr	r2, [r7, #8]
 80ee7ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80ee7bc:	687b      	ldr	r3, [r7, #4]
 80ee7be:	681b      	ldr	r3, [r3, #0]
 80ee7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80ee7c4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80ee7c8:	687b      	ldr	r3, [r7, #4]
 80ee7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ee7cc:	041a      	lsls	r2, r3, #16
 80ee7ce:	687b      	ldr	r3, [r7, #4]
 80ee7d0:	681b      	ldr	r3, [r3, #0]
 80ee7d2:	430a      	orrs	r2, r1
 80ee7d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80ee7d8:	68bb      	ldr	r3, [r7, #8]
 80ee7da:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80ee7de:	687b      	ldr	r3, [r7, #4]
 80ee7e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80ee7e2:	687b      	ldr	r3, [r7, #4]
 80ee7e4:	681b      	ldr	r3, [r3, #0]
 80ee7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80ee7ea:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80ee7ee:	687b      	ldr	r3, [r7, #4]
 80ee7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80ee7f2:	061a      	lsls	r2, r3, #24
 80ee7f4:	687b      	ldr	r3, [r7, #4]
 80ee7f6:	681b      	ldr	r3, [r3, #0]
 80ee7f8:	430a      	orrs	r2, r1
 80ee7fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80ee7fe:	68bb      	ldr	r3, [r7, #8]
 80ee800:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80ee804:	687b      	ldr	r3, [r7, #4]
 80ee806:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80ee808:	68bb      	ldr	r3, [r7, #8]
 80ee80a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80ee80e:	687b      	ldr	r3, [r7, #4]
 80ee810:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80ee812:	68bb      	ldr	r3, [r7, #8]
 80ee814:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80ee818:	687b      	ldr	r3, [r7, #4]
 80ee81a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80ee81c:	68bb      	ldr	r3, [r7, #8]
 80ee81e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80ee822:	687b      	ldr	r3, [r7, #4]
 80ee824:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80ee826:	68bb      	ldr	r3, [r7, #8]
 80ee828:	60fb      	str	r3, [r7, #12]
 80ee82a:	e005      	b.n	80ee838 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80ee82c:	68fb      	ldr	r3, [r7, #12]
 80ee82e:	2200      	movs	r2, #0
 80ee830:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80ee832:	68fb      	ldr	r3, [r7, #12]
 80ee834:	3304      	adds	r3, #4
 80ee836:	60fb      	str	r3, [r7, #12]
 80ee838:	68bb      	ldr	r3, [r7, #8]
 80ee83a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80ee83e:	68fa      	ldr	r2, [r7, #12]
 80ee840:	429a      	cmp	r2, r3
 80ee842:	d3f3      	bcc.n	80ee82c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80ee844:	bf00      	nop
 80ee846:	bf00      	nop
 80ee848:	3714      	adds	r7, #20
 80ee84a:	46bd      	mov	sp, r7
 80ee84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee850:	4770      	bx	lr
 80ee852:	bf00      	nop
 80ee854:	4000ac00 	.word	0x4000ac00
 80ee858:	4000a800 	.word	0x4000a800

080ee85c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80ee85c:	b480      	push	{r7}
 80ee85e:	b089      	sub	sp, #36	@ 0x24
 80ee860:	af00      	add	r7, sp, #0
 80ee862:	60f8      	str	r0, [r7, #12]
 80ee864:	60b9      	str	r1, [r7, #8]
 80ee866:	607a      	str	r2, [r7, #4]
 80ee868:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80ee86a:	68bb      	ldr	r3, [r7, #8]
 80ee86c:	685b      	ldr	r3, [r3, #4]
 80ee86e:	2b00      	cmp	r3, #0
 80ee870:	d10a      	bne.n	80ee888 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80ee872:	68bb      	ldr	r3, [r7, #8]
 80ee874:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80ee876:	68bb      	ldr	r3, [r7, #8]
 80ee878:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80ee87a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80ee87c:	68bb      	ldr	r3, [r7, #8]
 80ee87e:	681b      	ldr	r3, [r3, #0]
 80ee880:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80ee882:	4313      	orrs	r3, r2
 80ee884:	61fb      	str	r3, [r7, #28]
 80ee886:	e00a      	b.n	80ee89e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80ee888:	68bb      	ldr	r3, [r7, #8]
 80ee88a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80ee88c:	68bb      	ldr	r3, [r7, #8]
 80ee88e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80ee890:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80ee892:	68bb      	ldr	r3, [r7, #8]
 80ee894:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80ee896:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80ee898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80ee89c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80ee89e:	68bb      	ldr	r3, [r7, #8]
 80ee8a0:	6a1b      	ldr	r3, [r3, #32]
 80ee8a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80ee8a4:	68bb      	ldr	r3, [r7, #8]
 80ee8a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80ee8a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80ee8aa:	68bb      	ldr	r3, [r7, #8]
 80ee8ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80ee8ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80ee8b0:	68bb      	ldr	r3, [r7, #8]
 80ee8b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80ee8b4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80ee8b6:	68bb      	ldr	r3, [r7, #8]
 80ee8b8:	68db      	ldr	r3, [r3, #12]
 80ee8ba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80ee8bc:	4313      	orrs	r3, r2
 80ee8be:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80ee8c0:	68fb      	ldr	r3, [r7, #12]
 80ee8c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80ee8c4:	683a      	ldr	r2, [r7, #0]
 80ee8c6:	4613      	mov	r3, r2
 80ee8c8:	00db      	lsls	r3, r3, #3
 80ee8ca:	4413      	add	r3, r2
 80ee8cc:	00db      	lsls	r3, r3, #3
 80ee8ce:	440b      	add	r3, r1
 80ee8d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80ee8d2:	69bb      	ldr	r3, [r7, #24]
 80ee8d4:	69fa      	ldr	r2, [r7, #28]
 80ee8d6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80ee8d8:	69bb      	ldr	r3, [r7, #24]
 80ee8da:	3304      	adds	r3, #4
 80ee8dc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80ee8de:	69bb      	ldr	r3, [r7, #24]
 80ee8e0:	693a      	ldr	r2, [r7, #16]
 80ee8e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80ee8e4:	69bb      	ldr	r3, [r7, #24]
 80ee8e6:	3304      	adds	r3, #4
 80ee8e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80ee8ea:	2300      	movs	r3, #0
 80ee8ec:	617b      	str	r3, [r7, #20]
 80ee8ee:	e020      	b.n	80ee932 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80ee8f0:	697b      	ldr	r3, [r7, #20]
 80ee8f2:	3303      	adds	r3, #3
 80ee8f4:	687a      	ldr	r2, [r7, #4]
 80ee8f6:	4413      	add	r3, r2
 80ee8f8:	781b      	ldrb	r3, [r3, #0]
 80ee8fa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80ee8fc:	697b      	ldr	r3, [r7, #20]
 80ee8fe:	3302      	adds	r3, #2
 80ee900:	6879      	ldr	r1, [r7, #4]
 80ee902:	440b      	add	r3, r1
 80ee904:	781b      	ldrb	r3, [r3, #0]
 80ee906:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80ee908:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80ee90a:	697b      	ldr	r3, [r7, #20]
 80ee90c:	3301      	adds	r3, #1
 80ee90e:	6879      	ldr	r1, [r7, #4]
 80ee910:	440b      	add	r3, r1
 80ee912:	781b      	ldrb	r3, [r3, #0]
 80ee914:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80ee916:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80ee918:	6879      	ldr	r1, [r7, #4]
 80ee91a:	697a      	ldr	r2, [r7, #20]
 80ee91c:	440a      	add	r2, r1
 80ee91e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80ee920:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80ee922:	69bb      	ldr	r3, [r7, #24]
 80ee924:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80ee926:	69bb      	ldr	r3, [r7, #24]
 80ee928:	3304      	adds	r3, #4
 80ee92a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80ee92c:	697b      	ldr	r3, [r7, #20]
 80ee92e:	3304      	adds	r3, #4
 80ee930:	617b      	str	r3, [r7, #20]
 80ee932:	68bb      	ldr	r3, [r7, #8]
 80ee934:	68db      	ldr	r3, [r3, #12]
 80ee936:	4a06      	ldr	r2, [pc, #24]	@ (80ee950 <FDCAN_CopyMessageToRAM+0xf4>)
 80ee938:	5cd3      	ldrb	r3, [r2, r3]
 80ee93a:	461a      	mov	r2, r3
 80ee93c:	697b      	ldr	r3, [r7, #20]
 80ee93e:	4293      	cmp	r3, r2
 80ee940:	d3d6      	bcc.n	80ee8f0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80ee942:	bf00      	nop
 80ee944:	bf00      	nop
 80ee946:	3724      	adds	r7, #36	@ 0x24
 80ee948:	46bd      	mov	sp, r7
 80ee94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ee94e:	4770      	bx	lr
 80ee950:	080fae4c 	.word	0x080fae4c

080ee954 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80ee954:	b580      	push	{r7, lr}
 80ee956:	b088      	sub	sp, #32
 80ee958:	af00      	add	r7, sp, #0
 80ee95a:	60f8      	str	r0, [r7, #12]
 80ee95c:	60b9      	str	r1, [r7, #8]
 80ee95e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80ee960:	4b31      	ldr	r3, [pc, #196]	@ (80eea28 <HAL_FLASH_Program+0xd4>)
 80ee962:	2200      	movs	r2, #0
 80ee964:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80ee966:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80ee96a:	f000 f8ad 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80ee96e:	4603      	mov	r3, r0
 80ee970:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80ee972:	7ffb      	ldrb	r3, [r7, #31]
 80ee974:	2b00      	cmp	r3, #0
 80ee976:	d152      	bne.n	80eea1e <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80ee978:	4a2b      	ldr	r2, [pc, #172]	@ (80eea28 <HAL_FLASH_Program+0xd4>)
 80ee97a:	68fb      	ldr	r3, [r7, #12]
 80ee97c:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80ee97e:	4b2b      	ldr	r3, [pc, #172]	@ (80eea2c <HAL_FLASH_Program+0xd8>)
 80ee980:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80ee982:	68fb      	ldr	r3, [r7, #12]
 80ee984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80ee988:	2b02      	cmp	r3, #2
 80ee98a:	d104      	bne.n	80ee996 <HAL_FLASH_Program+0x42>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80ee98c:	6879      	ldr	r1, [r7, #4]
 80ee98e:	68b8      	ldr	r0, [r7, #8]
 80ee990:	f000 f8e8 	bl	80eeb64 <FLASH_Program_QuadWord>
 80ee994:	e026      	b.n	80ee9e4 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 80ee996:	68fb      	ldr	r3, [r7, #12]
 80ee998:	4a25      	ldr	r2, [pc, #148]	@ (80eea30 <HAL_FLASH_Program+0xdc>)
 80ee99a:	4293      	cmp	r3, r2
 80ee99c:	d003      	beq.n	80ee9a6 <HAL_FLASH_Program+0x52>
 80ee99e:	68fb      	ldr	r3, [r7, #12]
 80ee9a0:	4a24      	ldr	r2, [pc, #144]	@ (80eea34 <HAL_FLASH_Program+0xe0>)
 80ee9a2:	4293      	cmp	r3, r2
 80ee9a4:	d104      	bne.n	80ee9b0 <HAL_FLASH_Program+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 80ee9a6:	6879      	ldr	r1, [r7, #4]
 80ee9a8:	68b8      	ldr	r0, [r7, #8]
 80ee9aa:	f000 f917 	bl	80eebdc <FLASH_Program_QuadWord_OBK>
 80ee9ae:	e019      	b.n	80ee9e4 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 80ee9b0:	68fb      	ldr	r3, [r7, #12]
 80ee9b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80ee9b6:	4a20      	ldr	r2, [pc, #128]	@ (80eea38 <HAL_FLASH_Program+0xe4>)
 80ee9b8:	4293      	cmp	r3, r2
 80ee9ba:	d104      	bne.n	80ee9c6 <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80ee9bc:	6879      	ldr	r1, [r7, #4]
 80ee9be:	68b8      	ldr	r0, [r7, #8]
 80ee9c0:	f000 f958 	bl	80eec74 <FLASH_Program_HalfWord>
 80ee9c4:	e00e      	b.n	80ee9e4 <HAL_FLASH_Program+0x90>
    }
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_WORD_EDATA)
 80ee9c6:	68fb      	ldr	r3, [r7, #12]
 80ee9c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80ee9cc:	4a1b      	ldr	r2, [pc, #108]	@ (80eea3c <HAL_FLASH_Program+0xe8>)
 80ee9ce:	4293      	cmp	r3, r2
 80ee9d0:	d104      	bne.n	80ee9dc <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_Word(FlashAddress, DataAddress);
 80ee9d2:	6879      	ldr	r1, [r7, #4]
 80ee9d4:	68b8      	ldr	r0, [r7, #8]
 80ee9d6:	f000 f967 	bl	80eeca8 <FLASH_Program_Word>
 80ee9da:	e003      	b.n	80ee9e4 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80ee9dc:	6879      	ldr	r1, [r7, #4]
 80ee9de:	68b8      	ldr	r0, [r7, #8]
 80ee9e0:	f000 f948 	bl	80eec74 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80ee9e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80ee9e8:	f000 f86e 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80ee9ec:	4603      	mov	r3, r0
 80ee9ee:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 80ee9f0:	69bb      	ldr	r3, [r7, #24]
 80ee9f2:	681a      	ldr	r2, [r3, #0]
 80ee9f4:	68fb      	ldr	r3, [r7, #12]
 80ee9f6:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 80ee9fa:	f023 0304 	bic.w	r3, r3, #4
 80ee9fe:	43db      	mvns	r3, r3
 80eea00:	401a      	ands	r2, r3
 80eea02:	69bb      	ldr	r3, [r7, #24]
 80eea04:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80eea06:	68fb      	ldr	r3, [r7, #12]
 80eea08:	4a0a      	ldr	r2, [pc, #40]	@ (80eea34 <HAL_FLASH_Program+0xe0>)
 80eea0a:	4293      	cmp	r3, r2
 80eea0c:	d107      	bne.n	80eea1e <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80eea0e:	4b0c      	ldr	r3, [pc, #48]	@ (80eea40 <HAL_FLASH_Program+0xec>)
 80eea10:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80eea12:	697b      	ldr	r3, [r7, #20]
 80eea14:	681b      	ldr	r3, [r3, #0]
 80eea16:	f023 0204 	bic.w	r2, r3, #4
 80eea1a:	697b      	ldr	r3, [r7, #20]
 80eea1c:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* return status */
  return status;
 80eea1e:	7ffb      	ldrb	r3, [r7, #31]
}
 80eea20:	4618      	mov	r0, r3
 80eea22:	3720      	adds	r7, #32
 80eea24:	46bd      	mov	sp, r7
 80eea26:	bd80      	pop	{r7, pc}
 80eea28:	2000000c 	.word	0x2000000c
 80eea2c:	40022028 	.word	0x40022028
 80eea30:	10000002 	.word	0x10000002
 80eea34:	10000006 	.word	0x10000006
 80eea38:	40000002 	.word	0x40000002
 80eea3c:	60000002 	.word	0x60000002
 80eea40:	40022040 	.word	0x40022040

080eea44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80eea44:	b480      	push	{r7}
 80eea46:	b083      	sub	sp, #12
 80eea48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80eea4a:	2300      	movs	r3, #0
 80eea4c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80eea4e:	4b0d      	ldr	r3, [pc, #52]	@ (80eea84 <HAL_FLASH_Unlock+0x40>)
 80eea50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eea52:	f003 0301 	and.w	r3, r3, #1
 80eea56:	2b00      	cmp	r3, #0
 80eea58:	d00d      	beq.n	80eea76 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80eea5a:	4b0a      	ldr	r3, [pc, #40]	@ (80eea84 <HAL_FLASH_Unlock+0x40>)
 80eea5c:	4a0a      	ldr	r2, [pc, #40]	@ (80eea88 <HAL_FLASH_Unlock+0x44>)
 80eea5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80eea60:	4b08      	ldr	r3, [pc, #32]	@ (80eea84 <HAL_FLASH_Unlock+0x40>)
 80eea62:	4a0a      	ldr	r2, [pc, #40]	@ (80eea8c <HAL_FLASH_Unlock+0x48>)
 80eea64:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80eea66:	4b07      	ldr	r3, [pc, #28]	@ (80eea84 <HAL_FLASH_Unlock+0x40>)
 80eea68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eea6a:	f003 0301 	and.w	r3, r3, #1
 80eea6e:	2b00      	cmp	r3, #0
 80eea70:	d001      	beq.n	80eea76 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80eea72:	2301      	movs	r3, #1
 80eea74:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80eea76:	79fb      	ldrb	r3, [r7, #7]
}
 80eea78:	4618      	mov	r0, r3
 80eea7a:	370c      	adds	r7, #12
 80eea7c:	46bd      	mov	sp, r7
 80eea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eea82:	4770      	bx	lr
 80eea84:	40022000 	.word	0x40022000
 80eea88:	45670123 	.word	0x45670123
 80eea8c:	cdef89ab 	.word	0xcdef89ab

080eea90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80eea90:	b480      	push	{r7}
 80eea92:	b083      	sub	sp, #12
 80eea94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80eea96:	2300      	movs	r3, #0
 80eea98:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 80eea9a:	4b0a      	ldr	r3, [pc, #40]	@ (80eeac4 <HAL_FLASH_Lock+0x34>)
 80eea9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eea9e:	4a09      	ldr	r2, [pc, #36]	@ (80eeac4 <HAL_FLASH_Lock+0x34>)
 80eeaa0:	f043 0301 	orr.w	r3, r3, #1
 80eeaa4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 80eeaa6:	4b07      	ldr	r3, [pc, #28]	@ (80eeac4 <HAL_FLASH_Lock+0x34>)
 80eeaa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80eeaaa:	f003 0301 	and.w	r3, r3, #1
 80eeaae:	2b00      	cmp	r3, #0
 80eeab0:	d101      	bne.n	80eeab6 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 80eeab2:	2301      	movs	r3, #1
 80eeab4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80eeab6:	79fb      	ldrb	r3, [r7, #7]
}
 80eeab8:	4618      	mov	r0, r3
 80eeaba:	370c      	adds	r7, #12
 80eeabc:	46bd      	mov	sp, r7
 80eeabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eeac2:	4770      	bx	lr
 80eeac4:	40022000 	.word	0x40022000

080eeac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80eeac8:	b580      	push	{r7, lr}
 80eeaca:	b086      	sub	sp, #24
 80eeacc:	af00      	add	r7, sp, #0
 80eeace:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 80eead0:	f7fb fe40 	bl	80ea754 <HAL_GetTick>
 80eead4:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80eead6:	4b20      	ldr	r3, [pc, #128]	@ (80eeb58 <FLASH_WaitForLastOperation+0x90>)
 80eead8:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80eeada:	e010      	b.n	80eeafe <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 80eeadc:	687b      	ldr	r3, [r7, #4]
 80eeade:	f1b3 3fff 	cmp.w	r3, #4294967295
 80eeae2:	d00c      	beq.n	80eeafe <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80eeae4:	f7fb fe36 	bl	80ea754 <HAL_GetTick>
 80eeae8:	4602      	mov	r2, r0
 80eeaea:	697b      	ldr	r3, [r7, #20]
 80eeaec:	1ad3      	subs	r3, r2, r3
 80eeaee:	687a      	ldr	r2, [r7, #4]
 80eeaf0:	429a      	cmp	r2, r3
 80eeaf2:	d302      	bcc.n	80eeafa <FLASH_WaitForLastOperation+0x32>
 80eeaf4:	687b      	ldr	r3, [r7, #4]
 80eeaf6:	2b00      	cmp	r3, #0
 80eeaf8:	d101      	bne.n	80eeafe <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 80eeafa:	2303      	movs	r3, #3
 80eeafc:	e027      	b.n	80eeb4e <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80eeafe:	693b      	ldr	r3, [r7, #16]
 80eeb00:	681b      	ldr	r3, [r3, #0]
 80eeb02:	f003 030b 	and.w	r3, r3, #11
 80eeb06:	2b00      	cmp	r3, #0
 80eeb08:	d1e8      	bne.n	80eeadc <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80eeb0a:	4b14      	ldr	r3, [pc, #80]	@ (80eeb5c <FLASH_WaitForLastOperation+0x94>)
 80eeb0c:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80eeb0e:	693b      	ldr	r3, [r7, #16]
 80eeb10:	681b      	ldr	r3, [r3, #0]
 80eeb12:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 80eeb16:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80eeb18:	68bb      	ldr	r3, [r7, #8]
 80eeb1a:	2b00      	cmp	r3, #0
 80eeb1c:	d00c      	beq.n	80eeb38 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80eeb1e:	4b10      	ldr	r3, [pc, #64]	@ (80eeb60 <FLASH_WaitForLastOperation+0x98>)
 80eeb20:	685a      	ldr	r2, [r3, #4]
 80eeb22:	68bb      	ldr	r3, [r7, #8]
 80eeb24:	4313      	orrs	r3, r2
 80eeb26:	4a0e      	ldr	r2, [pc, #56]	@ (80eeb60 <FLASH_WaitForLastOperation+0x98>)
 80eeb28:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80eeb2a:	68bb      	ldr	r3, [r7, #8]
 80eeb2c:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 80eeb30:	68fb      	ldr	r3, [r7, #12]
 80eeb32:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80eeb34:	2301      	movs	r3, #1
 80eeb36:	e00a      	b.n	80eeb4e <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80eeb38:	693b      	ldr	r3, [r7, #16]
 80eeb3a:	681b      	ldr	r3, [r3, #0]
 80eeb3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80eeb40:	2b00      	cmp	r3, #0
 80eeb42:	d003      	beq.n	80eeb4c <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80eeb44:	68fb      	ldr	r3, [r7, #12]
 80eeb46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80eeb4a:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80eeb4c:	2300      	movs	r3, #0
}
 80eeb4e:	4618      	mov	r0, r3
 80eeb50:	3718      	adds	r7, #24
 80eeb52:	46bd      	mov	sp, r7
 80eeb54:	bd80      	pop	{r7, pc}
 80eeb56:	bf00      	nop
 80eeb58:	40022020 	.word	0x40022020
 80eeb5c:	40022030 	.word	0x40022030
 80eeb60:	2000000c 	.word	0x2000000c

080eeb64 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 80eeb64:	b480      	push	{r7}
 80eeb66:	b08b      	sub	sp, #44	@ 0x2c
 80eeb68:	af00      	add	r7, sp, #0
 80eeb6a:	6078      	str	r0, [r7, #4]
 80eeb6c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80eeb6e:	2304      	movs	r3, #4
 80eeb70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80eeb74:	687b      	ldr	r3, [r7, #4]
 80eeb76:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80eeb78:	683b      	ldr	r3, [r7, #0]
 80eeb7a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eeb7c:	4b16      	ldr	r3, [pc, #88]	@ (80eebd8 <FLASH_Program_QuadWord+0x74>)
 80eeb7e:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80eeb80:	69bb      	ldr	r3, [r7, #24]
 80eeb82:	681b      	ldr	r3, [r3, #0]
 80eeb84:	f043 0202 	orr.w	r2, r3, #2
 80eeb88:	69bb      	ldr	r3, [r7, #24]
 80eeb8a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80eeb8c:	f3ef 8310 	mrs	r3, PRIMASK
 80eeb90:	613b      	str	r3, [r7, #16]
  return(result);
 80eeb92:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80eeb94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80eeb96:	b672      	cpsid	i
}
 80eeb98:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80eeb9a:	69fb      	ldr	r3, [r7, #28]
 80eeb9c:	681a      	ldr	r2, [r3, #0]
 80eeb9e:	6a3b      	ldr	r3, [r7, #32]
 80eeba0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80eeba2:	6a3b      	ldr	r3, [r7, #32]
 80eeba4:	3304      	adds	r3, #4
 80eeba6:	623b      	str	r3, [r7, #32]
    src_addr++;
 80eeba8:	69fb      	ldr	r3, [r7, #28]
 80eebaa:	3304      	adds	r3, #4
 80eebac:	61fb      	str	r3, [r7, #28]
    index--;
 80eebae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80eebb2:	3b01      	subs	r3, #1
 80eebb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 80eebb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80eebbc:	2b00      	cmp	r3, #0
 80eebbe:	d1ec      	bne.n	80eeb9a <FLASH_Program_QuadWord+0x36>
 80eebc0:	697b      	ldr	r3, [r7, #20]
 80eebc2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80eebc4:	68fb      	ldr	r3, [r7, #12]
 80eebc6:	f383 8810 	msr	PRIMASK, r3
}
 80eebca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80eebcc:	bf00      	nop
 80eebce:	372c      	adds	r7, #44	@ 0x2c
 80eebd0:	46bd      	mov	sp, r7
 80eebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eebd6:	4770      	bx	lr
 80eebd8:	40022028 	.word	0x40022028

080eebdc <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 80eebdc:	b480      	push	{r7}
 80eebde:	b08b      	sub	sp, #44	@ 0x2c
 80eebe0:	af00      	add	r7, sp, #0
 80eebe2:	6078      	str	r0, [r7, #4]
 80eebe4:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80eebe6:	2304      	movs	r3, #4
 80eebe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80eebec:	687b      	ldr	r3, [r7, #4]
 80eebee:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80eebf0:	683b      	ldr	r3, [r7, #0]
 80eebf2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eebf4:	4b1c      	ldr	r3, [pc, #112]	@ (80eec68 <FLASH_Program_QuadWord_OBK+0x8c>)
 80eebf6:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80eebf8:	4b1c      	ldr	r3, [pc, #112]	@ (80eec6c <FLASH_Program_QuadWord_OBK+0x90>)
 80eebfa:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80eebfc:	69bb      	ldr	r3, [r7, #24]
 80eebfe:	681b      	ldr	r3, [r3, #0]
 80eec00:	f043 0202 	orr.w	r2, r3, #2
 80eec04:	69bb      	ldr	r3, [r7, #24]
 80eec06:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80eec08:	697b      	ldr	r3, [r7, #20]
 80eec0a:	681a      	ldr	r2, [r3, #0]
 80eec0c:	4b18      	ldr	r3, [pc, #96]	@ (80eec70 <FLASH_Program_QuadWord_OBK+0x94>)
 80eec0e:	689b      	ldr	r3, [r3, #8]
 80eec10:	f003 0304 	and.w	r3, r3, #4
 80eec14:	431a      	orrs	r2, r3
 80eec16:	697b      	ldr	r3, [r7, #20]
 80eec18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80eec1a:	f3ef 8310 	mrs	r3, PRIMASK
 80eec1e:	60fb      	str	r3, [r7, #12]
  return(result);
 80eec20:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80eec22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80eec24:	b672      	cpsid	i
}
 80eec26:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80eec28:	69fb      	ldr	r3, [r7, #28]
 80eec2a:	681a      	ldr	r2, [r3, #0]
 80eec2c:	6a3b      	ldr	r3, [r7, #32]
 80eec2e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80eec30:	6a3b      	ldr	r3, [r7, #32]
 80eec32:	3304      	adds	r3, #4
 80eec34:	623b      	str	r3, [r7, #32]
    src_addr++;
 80eec36:	69fb      	ldr	r3, [r7, #28]
 80eec38:	3304      	adds	r3, #4
 80eec3a:	61fb      	str	r3, [r7, #28]
    index--;
 80eec3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80eec40:	3b01      	subs	r3, #1
 80eec42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 80eec46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80eec4a:	2b00      	cmp	r3, #0
 80eec4c:	d1ec      	bne.n	80eec28 <FLASH_Program_QuadWord_OBK+0x4c>
 80eec4e:	693b      	ldr	r3, [r7, #16]
 80eec50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80eec52:	68bb      	ldr	r3, [r7, #8]
 80eec54:	f383 8810 	msr	PRIMASK, r3
}
 80eec58:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80eec5a:	bf00      	nop
 80eec5c:	372c      	adds	r7, #44	@ 0x2c
 80eec5e:	46bd      	mov	sp, r7
 80eec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eec64:	4770      	bx	lr
 80eec66:	bf00      	nop
 80eec68:	40022028 	.word	0x40022028
 80eec6c:	40022040 	.word	0x40022040
 80eec70:	2000000c 	.word	0x2000000c

080eec74 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 80eec74:	b480      	push	{r7}
 80eec76:	b085      	sub	sp, #20
 80eec78:	af00      	add	r7, sp, #0
 80eec7a:	6078      	str	r0, [r7, #4]
 80eec7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eec7e:	4b09      	ldr	r3, [pc, #36]	@ (80eeca4 <FLASH_Program_HalfWord+0x30>)
 80eec80:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80eec82:	68fb      	ldr	r3, [r7, #12]
 80eec84:	681b      	ldr	r3, [r3, #0]
 80eec86:	f043 0202 	orr.w	r2, r3, #2
 80eec8a:	68fb      	ldr	r3, [r7, #12]
 80eec8c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 80eec8e:	683a      	ldr	r2, [r7, #0]
 80eec90:	687b      	ldr	r3, [r7, #4]
 80eec92:	8812      	ldrh	r2, [r2, #0]
 80eec94:	b292      	uxth	r2, r2
 80eec96:	801a      	strh	r2, [r3, #0]
}
 80eec98:	bf00      	nop
 80eec9a:	3714      	adds	r7, #20
 80eec9c:	46bd      	mov	sp, r7
 80eec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eeca2:	4770      	bx	lr
 80eeca4:	40022028 	.word	0x40022028

080eeca8 <FLASH_Program_Word>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t FlashAddress, uint32_t DataAddress)
{
 80eeca8:	b480      	push	{r7}
 80eecaa:	b085      	sub	sp, #20
 80eecac:	af00      	add	r7, sp, #0
 80eecae:	6078      	str	r0, [r7, #4]
 80eecb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eecb2:	4b09      	ldr	r3, [pc, #36]	@ (80eecd8 <FLASH_Program_Word+0x30>)
 80eecb4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80eecb6:	68fb      	ldr	r3, [r7, #12]
 80eecb8:	681b      	ldr	r3, [r3, #0]
 80eecba:	f043 0202 	orr.w	r2, r3, #2
 80eecbe:	68fb      	ldr	r3, [r7, #12]
 80eecc0:	601a      	str	r2, [r3, #0]

    *(__IO uint32_t *)FlashAddress = *(__IO uint32_t *)DataAddress;
 80eecc2:	683a      	ldr	r2, [r7, #0]
 80eecc4:	687b      	ldr	r3, [r7, #4]
 80eecc6:	6812      	ldr	r2, [r2, #0]
 80eecc8:	601a      	str	r2, [r3, #0]
}
 80eecca:	bf00      	nop
 80eeccc:	3714      	adds	r7, #20
 80eecce:	46bd      	mov	sp, r7
 80eecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eecd4:	4770      	bx	lr
 80eecd6:	bf00      	nop
 80eecd8:	40022028 	.word	0x40022028

080eecdc <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80eecdc:	b580      	push	{r7, lr}
 80eecde:	b086      	sub	sp, #24
 80eece0:	af00      	add	r7, sp, #0
 80eece2:	6078      	str	r0, [r7, #4]
 80eece4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80eece6:	4b3a      	ldr	r3, [pc, #232]	@ (80eedd0 <HAL_FLASHEx_Erase+0xf4>)
 80eece8:	781b      	ldrb	r3, [r3, #0]
 80eecea:	2b01      	cmp	r3, #1
 80eecec:	d101      	bne.n	80eecf2 <HAL_FLASHEx_Erase+0x16>
 80eecee:	2302      	movs	r3, #2
 80eecf0:	e06a      	b.n	80eedc8 <HAL_FLASHEx_Erase+0xec>
 80eecf2:	4b37      	ldr	r3, [pc, #220]	@ (80eedd0 <HAL_FLASHEx_Erase+0xf4>)
 80eecf4:	2201      	movs	r2, #1
 80eecf6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80eecf8:	4b35      	ldr	r3, [pc, #212]	@ (80eedd0 <HAL_FLASHEx_Erase+0xf4>)
 80eecfa:	2200      	movs	r2, #0
 80eecfc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80eecfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80eed02:	f7ff fee1 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80eed06:	4603      	mov	r3, r0
 80eed08:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80eed0a:	7dfb      	ldrb	r3, [r7, #23]
 80eed0c:	2b00      	cmp	r3, #0
 80eed0e:	d157      	bne.n	80eedc0 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80eed10:	687b      	ldr	r3, [r7, #4]
 80eed12:	681b      	ldr	r3, [r3, #0]
 80eed14:	4a2e      	ldr	r2, [pc, #184]	@ (80eedd0 <HAL_FLASHEx_Erase+0xf4>)
 80eed16:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eed18:	4b2e      	ldr	r3, [pc, #184]	@ (80eedd4 <HAL_FLASHEx_Erase+0xf8>)
 80eed1a:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80eed1c:	687b      	ldr	r3, [r7, #4]
 80eed1e:	681b      	ldr	r3, [r3, #0]
 80eed20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80eed24:	f248 0208 	movw	r2, #32776	@ 0x8008
 80eed28:	4293      	cmp	r3, r2
 80eed2a:	d10b      	bne.n	80eed44 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80eed2c:	687b      	ldr	r3, [r7, #4]
 80eed2e:	685b      	ldr	r3, [r3, #4]
 80eed30:	4618      	mov	r0, r3
 80eed32:	f000 f853 	bl	80eeddc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80eed36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80eed3a:	f7ff fec5 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80eed3e:	4603      	mov	r3, r0
 80eed40:	75fb      	strb	r3, [r7, #23]
 80eed42:	e033      	b.n	80eedac <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 80eed44:	687b      	ldr	r3, [r7, #4]
 80eed46:	681b      	ldr	r3, [r3, #0]
 80eed48:	4a23      	ldr	r2, [pc, #140]	@ (80eedd8 <HAL_FLASHEx_Erase+0xfc>)
 80eed4a:	4293      	cmp	r3, r2
 80eed4c:	d108      	bne.n	80eed60 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 80eed4e:	f000 f8b5 	bl	80eeebc <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80eed52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80eed56:	f7ff feb7 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80eed5a:	4603      	mov	r3, r0
 80eed5c:	75fb      	strb	r3, [r7, #23]
 80eed5e:	e025      	b.n	80eedac <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 80eed60:	683b      	ldr	r3, [r7, #0]
 80eed62:	f04f 32ff 	mov.w	r2, #4294967295
 80eed66:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 80eed68:	687b      	ldr	r3, [r7, #4]
 80eed6a:	689b      	ldr	r3, [r3, #8]
 80eed6c:	613b      	str	r3, [r7, #16]
 80eed6e:	e015      	b.n	80eed9c <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 80eed70:	687b      	ldr	r3, [r7, #4]
 80eed72:	685b      	ldr	r3, [r3, #4]
 80eed74:	4619      	mov	r1, r3
 80eed76:	6938      	ldr	r0, [r7, #16]
 80eed78:	f000 f868 	bl	80eee4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80eed7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80eed80:	f7ff fea2 	bl	80eeac8 <FLASH_WaitForLastOperation>
 80eed84:	4603      	mov	r3, r0
 80eed86:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 80eed88:	7dfb      	ldrb	r3, [r7, #23]
 80eed8a:	2b00      	cmp	r3, #0
 80eed8c:	d003      	beq.n	80eed96 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80eed8e:	683b      	ldr	r3, [r7, #0]
 80eed90:	693a      	ldr	r2, [r7, #16]
 80eed92:	601a      	str	r2, [r3, #0]
          break;
 80eed94:	e00a      	b.n	80eedac <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 80eed96:	693b      	ldr	r3, [r7, #16]
 80eed98:	3301      	adds	r3, #1
 80eed9a:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 80eed9c:	687b      	ldr	r3, [r7, #4]
 80eed9e:	68da      	ldr	r2, [r3, #12]
 80eeda0:	687b      	ldr	r3, [r7, #4]
 80eeda2:	689b      	ldr	r3, [r3, #8]
 80eeda4:	4413      	add	r3, r2
 80eeda6:	693a      	ldr	r2, [r7, #16]
 80eeda8:	429a      	cmp	r2, r3
 80eedaa:	d3e1      	bcc.n	80eed70 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 80eedac:	68fb      	ldr	r3, [r7, #12]
 80eedae:	681a      	ldr	r2, [r3, #0]
 80eedb0:	687b      	ldr	r3, [r7, #4]
 80eedb2:	681b      	ldr	r3, [r3, #0]
 80eedb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80eedb8:	43db      	mvns	r3, r3
 80eedba:	401a      	ands	r2, r3
 80eedbc:	68fb      	ldr	r3, [r7, #12]
 80eedbe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80eedc0:	4b03      	ldr	r3, [pc, #12]	@ (80eedd0 <HAL_FLASHEx_Erase+0xf4>)
 80eedc2:	2200      	movs	r2, #0
 80eedc4:	701a      	strb	r2, [r3, #0]

  return status;
 80eedc6:	7dfb      	ldrb	r3, [r7, #23]
}
 80eedc8:	4618      	mov	r0, r3
 80eedca:	3718      	adds	r7, #24
 80eedcc:	46bd      	mov	sp, r7
 80eedce:	bd80      	pop	{r7, pc}
 80eedd0:	2000000c 	.word	0x2000000c
 80eedd4:	40022028 	.word	0x40022028
 80eedd8:	80000008 	.word	0x80000008

080eeddc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80eeddc:	b480      	push	{r7}
 80eedde:	b085      	sub	sp, #20
 80eede0:	af00      	add	r7, sp, #0
 80eede2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eede4:	4b18      	ldr	r3, [pc, #96]	@ (80eee48 <FLASH_MassErase+0x6c>)
 80eede6:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80eede8:	687b      	ldr	r3, [r7, #4]
 80eedea:	f003 0303 	and.w	r3, r3, #3
 80eedee:	2b03      	cmp	r3, #3
 80eedf0:	d108      	bne.n	80eee04 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 80eedf2:	68fb      	ldr	r3, [r7, #12]
 80eedf4:	681b      	ldr	r3, [r3, #0]
 80eedf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80eedfa:	f043 0320 	orr.w	r3, r3, #32
 80eedfe:	68fa      	ldr	r2, [r7, #12]
 80eee00:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 80eee02:	e01b      	b.n	80eee3c <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80eee04:	687b      	ldr	r3, [r7, #4]
 80eee06:	f003 0301 	and.w	r3, r3, #1
 80eee0a:	2b00      	cmp	r3, #0
 80eee0c:	d009      	beq.n	80eee22 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 80eee0e:	68fb      	ldr	r3, [r7, #12]
 80eee10:	681b      	ldr	r3, [r3, #0]
 80eee12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80eee16:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80eee1a:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 80eee1e:	68fb      	ldr	r3, [r7, #12]
 80eee20:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80eee22:	687b      	ldr	r3, [r7, #4]
 80eee24:	f003 0302 	and.w	r3, r3, #2
 80eee28:	2b00      	cmp	r3, #0
 80eee2a:	d007      	beq.n	80eee3c <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 80eee2c:	68fb      	ldr	r3, [r7, #12]
 80eee2e:	681b      	ldr	r3, [r3, #0]
 80eee30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80eee34:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80eee38:	68fa      	ldr	r2, [r7, #12]
 80eee3a:	6013      	str	r3, [r2, #0]
}
 80eee3c:	bf00      	nop
 80eee3e:	3714      	adds	r7, #20
 80eee40:	46bd      	mov	sp, r7
 80eee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eee46:	4770      	bx	lr
 80eee48:	40022028 	.word	0x40022028

080eee4c <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 80eee4c:	b480      	push	{r7}
 80eee4e:	b085      	sub	sp, #20
 80eee50:	af00      	add	r7, sp, #0
 80eee52:	6078      	str	r0, [r7, #4]
 80eee54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80eee56:	4b18      	ldr	r3, [pc, #96]	@ (80eeeb8 <FLASH_Erase_Sector+0x6c>)
 80eee58:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80eee5a:	683b      	ldr	r3, [r7, #0]
 80eee5c:	f003 0301 	and.w	r3, r3, #1
 80eee60:	2b00      	cmp	r3, #0
 80eee62:	d011      	beq.n	80eee88 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 80eee64:	68fb      	ldr	r3, [r7, #12]
 80eee66:	681b      	ldr	r3, [r3, #0]
 80eee68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80eee6c:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 80eee70:	68fa      	ldr	r2, [r7, #12]
 80eee72:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80eee74:	68fb      	ldr	r3, [r7, #12]
 80eee76:	681a      	ldr	r2, [r3, #0]
 80eee78:	687b      	ldr	r3, [r7, #4]
 80eee7a:	019b      	lsls	r3, r3, #6
 80eee7c:	4313      	orrs	r3, r2
 80eee7e:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 80eee82:	68fb      	ldr	r3, [r7, #12]
 80eee84:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 80eee86:	e010      	b.n	80eeeaa <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 80eee88:	68fb      	ldr	r3, [r7, #12]
 80eee8a:	681b      	ldr	r3, [r3, #0]
 80eee8c:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 80eee90:	68fb      	ldr	r3, [r7, #12]
 80eee92:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80eee94:	68fb      	ldr	r3, [r7, #12]
 80eee96:	681a      	ldr	r2, [r3, #0]
 80eee98:	687b      	ldr	r3, [r7, #4]
 80eee9a:	019b      	lsls	r3, r3, #6
 80eee9c:	4313      	orrs	r3, r2
 80eee9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80eeea2:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 80eeea6:	68fa      	ldr	r2, [r7, #12]
 80eeea8:	6013      	str	r3, [r2, #0]
}
 80eeeaa:	bf00      	nop
 80eeeac:	3714      	adds	r7, #20
 80eeeae:	46bd      	mov	sp, r7
 80eeeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eeeb4:	4770      	bx	lr
 80eeeb6:	bf00      	nop
 80eeeb8:	40022028 	.word	0x40022028

080eeebc <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 80eeebc:	b480      	push	{r7}
 80eeebe:	b083      	sub	sp, #12
 80eeec0:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80eeec2:	4b07      	ldr	r3, [pc, #28]	@ (80eeee0 <FLASH_OBKErase+0x24>)
 80eeec4:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 80eeec6:	687b      	ldr	r3, [r7, #4]
 80eeec8:	681b      	ldr	r3, [r3, #0]
 80eeeca:	f043 0208 	orr.w	r2, r3, #8
 80eeece:	687b      	ldr	r3, [r7, #4]
 80eeed0:	601a      	str	r2, [r3, #0]
}
 80eeed2:	bf00      	nop
 80eeed4:	370c      	adds	r7, #12
 80eeed6:	46bd      	mov	sp, r7
 80eeed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80eeedc:	4770      	bx	lr
 80eeede:	bf00      	nop
 80eeee0:	40022040 	.word	0x40022040

080eeee4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80eeee4:	b480      	push	{r7}
 80eeee6:	b087      	sub	sp, #28
 80eeee8:	af00      	add	r7, sp, #0
 80eeeea:	6078      	str	r0, [r7, #4]
 80eeeec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80eeeee:	2300      	movs	r3, #0
 80eeef0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80eeef2:	e142      	b.n	80ef17a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80eeef4:	683b      	ldr	r3, [r7, #0]
 80eeef6:	681a      	ldr	r2, [r3, #0]
 80eeef8:	2101      	movs	r1, #1
 80eeefa:	693b      	ldr	r3, [r7, #16]
 80eeefc:	fa01 f303 	lsl.w	r3, r1, r3
 80eef00:	4013      	ands	r3, r2
 80eef02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80eef04:	68fb      	ldr	r3, [r7, #12]
 80eef06:	2b00      	cmp	r3, #0
 80eef08:	f000 8134 	beq.w	80ef174 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80eef0c:	683b      	ldr	r3, [r7, #0]
 80eef0e:	685b      	ldr	r3, [r3, #4]
 80eef10:	2b02      	cmp	r3, #2
 80eef12:	d003      	beq.n	80eef1c <HAL_GPIO_Init+0x38>
 80eef14:	683b      	ldr	r3, [r7, #0]
 80eef16:	685b      	ldr	r3, [r3, #4]
 80eef18:	2b12      	cmp	r3, #18
 80eef1a:	d125      	bne.n	80eef68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80eef1c:	693b      	ldr	r3, [r7, #16]
 80eef1e:	08da      	lsrs	r2, r3, #3
 80eef20:	687b      	ldr	r3, [r7, #4]
 80eef22:	3208      	adds	r2, #8
 80eef24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80eef28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80eef2a:	693b      	ldr	r3, [r7, #16]
 80eef2c:	f003 0307 	and.w	r3, r3, #7
 80eef30:	009b      	lsls	r3, r3, #2
 80eef32:	220f      	movs	r2, #15
 80eef34:	fa02 f303 	lsl.w	r3, r2, r3
 80eef38:	43db      	mvns	r3, r3
 80eef3a:	697a      	ldr	r2, [r7, #20]
 80eef3c:	4013      	ands	r3, r2
 80eef3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80eef40:	683b      	ldr	r3, [r7, #0]
 80eef42:	691b      	ldr	r3, [r3, #16]
 80eef44:	f003 020f 	and.w	r2, r3, #15
 80eef48:	693b      	ldr	r3, [r7, #16]
 80eef4a:	f003 0307 	and.w	r3, r3, #7
 80eef4e:	009b      	lsls	r3, r3, #2
 80eef50:	fa02 f303 	lsl.w	r3, r2, r3
 80eef54:	697a      	ldr	r2, [r7, #20]
 80eef56:	4313      	orrs	r3, r2
 80eef58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80eef5a:	693b      	ldr	r3, [r7, #16]
 80eef5c:	08da      	lsrs	r2, r3, #3
 80eef5e:	687b      	ldr	r3, [r7, #4]
 80eef60:	3208      	adds	r2, #8
 80eef62:	6979      	ldr	r1, [r7, #20]
 80eef64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80eef68:	687b      	ldr	r3, [r7, #4]
 80eef6a:	681b      	ldr	r3, [r3, #0]
 80eef6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80eef6e:	693b      	ldr	r3, [r7, #16]
 80eef70:	005b      	lsls	r3, r3, #1
 80eef72:	2203      	movs	r2, #3
 80eef74:	fa02 f303 	lsl.w	r3, r2, r3
 80eef78:	43db      	mvns	r3, r3
 80eef7a:	697a      	ldr	r2, [r7, #20]
 80eef7c:	4013      	ands	r3, r2
 80eef7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80eef80:	683b      	ldr	r3, [r7, #0]
 80eef82:	685b      	ldr	r3, [r3, #4]
 80eef84:	f003 0203 	and.w	r2, r3, #3
 80eef88:	693b      	ldr	r3, [r7, #16]
 80eef8a:	005b      	lsls	r3, r3, #1
 80eef8c:	fa02 f303 	lsl.w	r3, r2, r3
 80eef90:	697a      	ldr	r2, [r7, #20]
 80eef92:	4313      	orrs	r3, r2
 80eef94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80eef96:	687b      	ldr	r3, [r7, #4]
 80eef98:	697a      	ldr	r2, [r7, #20]
 80eef9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80eef9c:	683b      	ldr	r3, [r7, #0]
 80eef9e:	685b      	ldr	r3, [r3, #4]
 80eefa0:	2b01      	cmp	r3, #1
 80eefa2:	d00b      	beq.n	80eefbc <HAL_GPIO_Init+0xd8>
 80eefa4:	683b      	ldr	r3, [r7, #0]
 80eefa6:	685b      	ldr	r3, [r3, #4]
 80eefa8:	2b02      	cmp	r3, #2
 80eefaa:	d007      	beq.n	80eefbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80eefac:	683b      	ldr	r3, [r7, #0]
 80eefae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80eefb0:	2b11      	cmp	r3, #17
 80eefb2:	d003      	beq.n	80eefbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80eefb4:	683b      	ldr	r3, [r7, #0]
 80eefb6:	685b      	ldr	r3, [r3, #4]
 80eefb8:	2b12      	cmp	r3, #18
 80eefba:	d130      	bne.n	80ef01e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80eefbc:	687b      	ldr	r3, [r7, #4]
 80eefbe:	689b      	ldr	r3, [r3, #8]
 80eefc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80eefc2:	693b      	ldr	r3, [r7, #16]
 80eefc4:	005b      	lsls	r3, r3, #1
 80eefc6:	2203      	movs	r2, #3
 80eefc8:	fa02 f303 	lsl.w	r3, r2, r3
 80eefcc:	43db      	mvns	r3, r3
 80eefce:	697a      	ldr	r2, [r7, #20]
 80eefd0:	4013      	ands	r3, r2
 80eefd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80eefd4:	683b      	ldr	r3, [r7, #0]
 80eefd6:	68da      	ldr	r2, [r3, #12]
 80eefd8:	693b      	ldr	r3, [r7, #16]
 80eefda:	005b      	lsls	r3, r3, #1
 80eefdc:	fa02 f303 	lsl.w	r3, r2, r3
 80eefe0:	697a      	ldr	r2, [r7, #20]
 80eefe2:	4313      	orrs	r3, r2
 80eefe4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80eefe6:	687b      	ldr	r3, [r7, #4]
 80eefe8:	697a      	ldr	r2, [r7, #20]
 80eefea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80eefec:	687b      	ldr	r3, [r7, #4]
 80eefee:	685b      	ldr	r3, [r3, #4]
 80eeff0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80eeff2:	2201      	movs	r2, #1
 80eeff4:	693b      	ldr	r3, [r7, #16]
 80eeff6:	fa02 f303 	lsl.w	r3, r2, r3
 80eeffa:	43db      	mvns	r3, r3
 80eeffc:	697a      	ldr	r2, [r7, #20]
 80eeffe:	4013      	ands	r3, r2
 80ef000:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80ef002:	683b      	ldr	r3, [r7, #0]
 80ef004:	685b      	ldr	r3, [r3, #4]
 80ef006:	091b      	lsrs	r3, r3, #4
 80ef008:	f003 0201 	and.w	r2, r3, #1
 80ef00c:	693b      	ldr	r3, [r7, #16]
 80ef00e:	fa02 f303 	lsl.w	r3, r2, r3
 80ef012:	697a      	ldr	r2, [r7, #20]
 80ef014:	4313      	orrs	r3, r2
 80ef016:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80ef018:	687b      	ldr	r3, [r7, #4]
 80ef01a:	697a      	ldr	r2, [r7, #20]
 80ef01c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80ef01e:	683b      	ldr	r3, [r7, #0]
 80ef020:	685b      	ldr	r3, [r3, #4]
 80ef022:	f003 0303 	and.w	r3, r3, #3
 80ef026:	2b03      	cmp	r3, #3
 80ef028:	d109      	bne.n	80ef03e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80ef02a:	683b      	ldr	r3, [r7, #0]
 80ef02c:	685b      	ldr	r3, [r3, #4]
 80ef02e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80ef032:	2b03      	cmp	r3, #3
 80ef034:	d11b      	bne.n	80ef06e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80ef036:	683b      	ldr	r3, [r7, #0]
 80ef038:	689b      	ldr	r3, [r3, #8]
 80ef03a:	2b01      	cmp	r3, #1
 80ef03c:	d017      	beq.n	80ef06e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80ef03e:	687b      	ldr	r3, [r7, #4]
 80ef040:	68db      	ldr	r3, [r3, #12]
 80ef042:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80ef044:	693b      	ldr	r3, [r7, #16]
 80ef046:	005b      	lsls	r3, r3, #1
 80ef048:	2203      	movs	r2, #3
 80ef04a:	fa02 f303 	lsl.w	r3, r2, r3
 80ef04e:	43db      	mvns	r3, r3
 80ef050:	697a      	ldr	r2, [r7, #20]
 80ef052:	4013      	ands	r3, r2
 80ef054:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80ef056:	683b      	ldr	r3, [r7, #0]
 80ef058:	689a      	ldr	r2, [r3, #8]
 80ef05a:	693b      	ldr	r3, [r7, #16]
 80ef05c:	005b      	lsls	r3, r3, #1
 80ef05e:	fa02 f303 	lsl.w	r3, r2, r3
 80ef062:	697a      	ldr	r2, [r7, #20]
 80ef064:	4313      	orrs	r3, r2
 80ef066:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80ef068:	687b      	ldr	r3, [r7, #4]
 80ef06a:	697a      	ldr	r2, [r7, #20]
 80ef06c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80ef06e:	683b      	ldr	r3, [r7, #0]
 80ef070:	685b      	ldr	r3, [r3, #4]
 80ef072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80ef076:	2b00      	cmp	r3, #0
 80ef078:	d07c      	beq.n	80ef174 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80ef07a:	4a47      	ldr	r2, [pc, #284]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef07c:	693b      	ldr	r3, [r7, #16]
 80ef07e:	089b      	lsrs	r3, r3, #2
 80ef080:	3318      	adds	r3, #24
 80ef082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80ef086:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80ef088:	693b      	ldr	r3, [r7, #16]
 80ef08a:	f003 0303 	and.w	r3, r3, #3
 80ef08e:	00db      	lsls	r3, r3, #3
 80ef090:	220f      	movs	r2, #15
 80ef092:	fa02 f303 	lsl.w	r3, r2, r3
 80ef096:	43db      	mvns	r3, r3
 80ef098:	697a      	ldr	r2, [r7, #20]
 80ef09a:	4013      	ands	r3, r2
 80ef09c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80ef09e:	687b      	ldr	r3, [r7, #4]
 80ef0a0:	0a9a      	lsrs	r2, r3, #10
 80ef0a2:	4b3e      	ldr	r3, [pc, #248]	@ (80ef19c <HAL_GPIO_Init+0x2b8>)
 80ef0a4:	4013      	ands	r3, r2
 80ef0a6:	693a      	ldr	r2, [r7, #16]
 80ef0a8:	f002 0203 	and.w	r2, r2, #3
 80ef0ac:	00d2      	lsls	r2, r2, #3
 80ef0ae:	4093      	lsls	r3, r2
 80ef0b0:	697a      	ldr	r2, [r7, #20]
 80ef0b2:	4313      	orrs	r3, r2
 80ef0b4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80ef0b6:	4938      	ldr	r1, [pc, #224]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef0b8:	693b      	ldr	r3, [r7, #16]
 80ef0ba:	089b      	lsrs	r3, r3, #2
 80ef0bc:	3318      	adds	r3, #24
 80ef0be:	697a      	ldr	r2, [r7, #20]
 80ef0c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80ef0c4:	4b34      	ldr	r3, [pc, #208]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef0c6:	681b      	ldr	r3, [r3, #0]
 80ef0c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80ef0ca:	68fb      	ldr	r3, [r7, #12]
 80ef0cc:	43db      	mvns	r3, r3
 80ef0ce:	697a      	ldr	r2, [r7, #20]
 80ef0d0:	4013      	ands	r3, r2
 80ef0d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80ef0d4:	683b      	ldr	r3, [r7, #0]
 80ef0d6:	685b      	ldr	r3, [r3, #4]
 80ef0d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80ef0dc:	2b00      	cmp	r3, #0
 80ef0de:	d003      	beq.n	80ef0e8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80ef0e0:	697a      	ldr	r2, [r7, #20]
 80ef0e2:	68fb      	ldr	r3, [r7, #12]
 80ef0e4:	4313      	orrs	r3, r2
 80ef0e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80ef0e8:	4a2b      	ldr	r2, [pc, #172]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef0ea:	697b      	ldr	r3, [r7, #20]
 80ef0ec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80ef0ee:	4b2a      	ldr	r3, [pc, #168]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef0f0:	685b      	ldr	r3, [r3, #4]
 80ef0f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80ef0f4:	68fb      	ldr	r3, [r7, #12]
 80ef0f6:	43db      	mvns	r3, r3
 80ef0f8:	697a      	ldr	r2, [r7, #20]
 80ef0fa:	4013      	ands	r3, r2
 80ef0fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80ef0fe:	683b      	ldr	r3, [r7, #0]
 80ef100:	685b      	ldr	r3, [r3, #4]
 80ef102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80ef106:	2b00      	cmp	r3, #0
 80ef108:	d003      	beq.n	80ef112 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80ef10a:	697a      	ldr	r2, [r7, #20]
 80ef10c:	68fb      	ldr	r3, [r7, #12]
 80ef10e:	4313      	orrs	r3, r2
 80ef110:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80ef112:	4a21      	ldr	r2, [pc, #132]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef114:	697b      	ldr	r3, [r7, #20]
 80ef116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80ef118:	4b1f      	ldr	r3, [pc, #124]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80ef11e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80ef120:	68fb      	ldr	r3, [r7, #12]
 80ef122:	43db      	mvns	r3, r3
 80ef124:	697a      	ldr	r2, [r7, #20]
 80ef126:	4013      	ands	r3, r2
 80ef128:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80ef12a:	683b      	ldr	r3, [r7, #0]
 80ef12c:	685b      	ldr	r3, [r3, #4]
 80ef12e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80ef132:	2b00      	cmp	r3, #0
 80ef134:	d003      	beq.n	80ef13e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80ef136:	697a      	ldr	r2, [r7, #20]
 80ef138:	68fb      	ldr	r3, [r7, #12]
 80ef13a:	4313      	orrs	r3, r2
 80ef13c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80ef13e:	4a16      	ldr	r2, [pc, #88]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef140:	697b      	ldr	r3, [r7, #20]
 80ef142:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80ef146:	4b14      	ldr	r3, [pc, #80]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80ef14c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80ef14e:	68fb      	ldr	r3, [r7, #12]
 80ef150:	43db      	mvns	r3, r3
 80ef152:	697a      	ldr	r2, [r7, #20]
 80ef154:	4013      	ands	r3, r2
 80ef156:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80ef158:	683b      	ldr	r3, [r7, #0]
 80ef15a:	685b      	ldr	r3, [r3, #4]
 80ef15c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80ef160:	2b00      	cmp	r3, #0
 80ef162:	d003      	beq.n	80ef16c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80ef164:	697a      	ldr	r2, [r7, #20]
 80ef166:	68fb      	ldr	r3, [r7, #12]
 80ef168:	4313      	orrs	r3, r2
 80ef16a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80ef16c:	4a0a      	ldr	r2, [pc, #40]	@ (80ef198 <HAL_GPIO_Init+0x2b4>)
 80ef16e:	697b      	ldr	r3, [r7, #20]
 80ef170:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80ef174:	693b      	ldr	r3, [r7, #16]
 80ef176:	3301      	adds	r3, #1
 80ef178:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80ef17a:	683b      	ldr	r3, [r7, #0]
 80ef17c:	681a      	ldr	r2, [r3, #0]
 80ef17e:	693b      	ldr	r3, [r7, #16]
 80ef180:	fa22 f303 	lsr.w	r3, r2, r3
 80ef184:	2b00      	cmp	r3, #0
 80ef186:	f47f aeb5 	bne.w	80eeef4 <HAL_GPIO_Init+0x10>
  }
}
 80ef18a:	bf00      	nop
 80ef18c:	bf00      	nop
 80ef18e:	371c      	adds	r7, #28
 80ef190:	46bd      	mov	sp, r7
 80ef192:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef196:	4770      	bx	lr
 80ef198:	44022000 	.word	0x44022000
 80ef19c:	002f7f7f 	.word	0x002f7f7f

080ef1a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80ef1a0:	b480      	push	{r7}
 80ef1a2:	b085      	sub	sp, #20
 80ef1a4:	af00      	add	r7, sp, #0
 80ef1a6:	6078      	str	r0, [r7, #4]
 80ef1a8:	460b      	mov	r3, r1
 80ef1aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80ef1ac:	687b      	ldr	r3, [r7, #4]
 80ef1ae:	691a      	ldr	r2, [r3, #16]
 80ef1b0:	887b      	ldrh	r3, [r7, #2]
 80ef1b2:	4013      	ands	r3, r2
 80ef1b4:	2b00      	cmp	r3, #0
 80ef1b6:	d002      	beq.n	80ef1be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80ef1b8:	2301      	movs	r3, #1
 80ef1ba:	73fb      	strb	r3, [r7, #15]
 80ef1bc:	e001      	b.n	80ef1c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80ef1be:	2300      	movs	r3, #0
 80ef1c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80ef1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80ef1c4:	4618      	mov	r0, r3
 80ef1c6:	3714      	adds	r7, #20
 80ef1c8:	46bd      	mov	sp, r7
 80ef1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef1ce:	4770      	bx	lr

080ef1d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80ef1d0:	b480      	push	{r7}
 80ef1d2:	b083      	sub	sp, #12
 80ef1d4:	af00      	add	r7, sp, #0
 80ef1d6:	6078      	str	r0, [r7, #4]
 80ef1d8:	460b      	mov	r3, r1
 80ef1da:	807b      	strh	r3, [r7, #2]
 80ef1dc:	4613      	mov	r3, r2
 80ef1de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80ef1e0:	787b      	ldrb	r3, [r7, #1]
 80ef1e2:	2b00      	cmp	r3, #0
 80ef1e4:	d003      	beq.n	80ef1ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80ef1e6:	887a      	ldrh	r2, [r7, #2]
 80ef1e8:	687b      	ldr	r3, [r7, #4]
 80ef1ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80ef1ec:	e002      	b.n	80ef1f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80ef1ee:	887a      	ldrh	r2, [r7, #2]
 80ef1f0:	687b      	ldr	r3, [r7, #4]
 80ef1f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80ef1f4:	bf00      	nop
 80ef1f6:	370c      	adds	r7, #12
 80ef1f8:	46bd      	mov	sp, r7
 80ef1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef1fe:	4770      	bx	lr

080ef200 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80ef200:	b480      	push	{r7}
 80ef202:	b085      	sub	sp, #20
 80ef204:	af00      	add	r7, sp, #0
 80ef206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80ef208:	2300      	movs	r3, #0
 80ef20a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80ef20c:	4b0b      	ldr	r3, [pc, #44]	@ (80ef23c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80ef20e:	681b      	ldr	r3, [r3, #0]
 80ef210:	f003 0301 	and.w	r3, r3, #1
 80ef214:	2b00      	cmp	r3, #0
 80ef216:	d002      	beq.n	80ef21e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80ef218:	2301      	movs	r3, #1
 80ef21a:	73fb      	strb	r3, [r7, #15]
 80ef21c:	e007      	b.n	80ef22e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80ef21e:	4b07      	ldr	r3, [pc, #28]	@ (80ef23c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80ef220:	681b      	ldr	r3, [r3, #0]
 80ef222:	f023 0204 	bic.w	r2, r3, #4
 80ef226:	4905      	ldr	r1, [pc, #20]	@ (80ef23c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80ef228:	687b      	ldr	r3, [r7, #4]
 80ef22a:	4313      	orrs	r3, r2
 80ef22c:	600b      	str	r3, [r1, #0]
  }

  return status;
 80ef22e:	7bfb      	ldrb	r3, [r7, #15]
}
 80ef230:	4618      	mov	r0, r3
 80ef232:	3714      	adds	r7, #20
 80ef234:	46bd      	mov	sp, r7
 80ef236:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef23a:	4770      	bx	lr
 80ef23c:	40030400 	.word	0x40030400

080ef240 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80ef240:	b480      	push	{r7}
 80ef242:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80ef244:	4b05      	ldr	r3, [pc, #20]	@ (80ef25c <HAL_ICACHE_Enable+0x1c>)
 80ef246:	681b      	ldr	r3, [r3, #0]
 80ef248:	4a04      	ldr	r2, [pc, #16]	@ (80ef25c <HAL_ICACHE_Enable+0x1c>)
 80ef24a:	f043 0301 	orr.w	r3, r3, #1
 80ef24e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80ef250:	2300      	movs	r3, #0
}
 80ef252:	4618      	mov	r0, r3
 80ef254:	46bd      	mov	sp, r7
 80ef256:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef25a:	4770      	bx	lr
 80ef25c:	40030400 	.word	0x40030400

080ef260 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80ef260:	b480      	push	{r7}
 80ef262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80ef264:	4b05      	ldr	r3, [pc, #20]	@ (80ef27c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80ef266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80ef268:	4a04      	ldr	r2, [pc, #16]	@ (80ef27c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80ef26a:	f043 0301 	orr.w	r3, r3, #1
 80ef26e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80ef270:	bf00      	nop
 80ef272:	46bd      	mov	sp, r7
 80ef274:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ef278:	4770      	bx	lr
 80ef27a:	bf00      	nop
 80ef27c:	44020800 	.word	0x44020800

080ef280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80ef280:	b580      	push	{r7, lr}
 80ef282:	b088      	sub	sp, #32
 80ef284:	af00      	add	r7, sp, #0
 80ef286:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80ef288:	687b      	ldr	r3, [r7, #4]
 80ef28a:	2b00      	cmp	r3, #0
 80ef28c:	d102      	bne.n	80ef294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80ef28e:	2301      	movs	r3, #1
 80ef290:	f000 bc28 	b.w	80efae4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80ef294:	4b94      	ldr	r3, [pc, #592]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef296:	69db      	ldr	r3, [r3, #28]
 80ef298:	f003 0318 	and.w	r3, r3, #24
 80ef29c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80ef29e:	4b92      	ldr	r3, [pc, #584]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef2a2:	f003 0303 	and.w	r3, r3, #3
 80ef2a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80ef2a8:	687b      	ldr	r3, [r7, #4]
 80ef2aa:	681b      	ldr	r3, [r3, #0]
 80ef2ac:	f003 0310 	and.w	r3, r3, #16
 80ef2b0:	2b00      	cmp	r3, #0
 80ef2b2:	d05b      	beq.n	80ef36c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80ef2b4:	69fb      	ldr	r3, [r7, #28]
 80ef2b6:	2b08      	cmp	r3, #8
 80ef2b8:	d005      	beq.n	80ef2c6 <HAL_RCC_OscConfig+0x46>
 80ef2ba:	69fb      	ldr	r3, [r7, #28]
 80ef2bc:	2b18      	cmp	r3, #24
 80ef2be:	d114      	bne.n	80ef2ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80ef2c0:	69bb      	ldr	r3, [r7, #24]
 80ef2c2:	2b02      	cmp	r3, #2
 80ef2c4:	d111      	bne.n	80ef2ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80ef2c6:	687b      	ldr	r3, [r7, #4]
 80ef2c8:	69db      	ldr	r3, [r3, #28]
 80ef2ca:	2b00      	cmp	r3, #0
 80ef2cc:	d102      	bne.n	80ef2d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80ef2ce:	2301      	movs	r3, #1
 80ef2d0:	f000 bc08 	b.w	80efae4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80ef2d4:	4b84      	ldr	r3, [pc, #528]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef2d6:	699b      	ldr	r3, [r3, #24]
 80ef2d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80ef2dc:	687b      	ldr	r3, [r7, #4]
 80ef2de:	6a1b      	ldr	r3, [r3, #32]
 80ef2e0:	041b      	lsls	r3, r3, #16
 80ef2e2:	4981      	ldr	r1, [pc, #516]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef2e4:	4313      	orrs	r3, r2
 80ef2e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80ef2e8:	e040      	b.n	80ef36c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80ef2ea:	687b      	ldr	r3, [r7, #4]
 80ef2ec:	69db      	ldr	r3, [r3, #28]
 80ef2ee:	2b00      	cmp	r3, #0
 80ef2f0:	d023      	beq.n	80ef33a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80ef2f2:	4b7d      	ldr	r3, [pc, #500]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef2f4:	681b      	ldr	r3, [r3, #0]
 80ef2f6:	4a7c      	ldr	r2, [pc, #496]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef2f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80ef2fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef2fe:	f7fb fa29 	bl	80ea754 <HAL_GetTick>
 80ef302:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80ef304:	e008      	b.n	80ef318 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80ef306:	f7fb fa25 	bl	80ea754 <HAL_GetTick>
 80ef30a:	4602      	mov	r2, r0
 80ef30c:	697b      	ldr	r3, [r7, #20]
 80ef30e:	1ad3      	subs	r3, r2, r3
 80ef310:	2b02      	cmp	r3, #2
 80ef312:	d901      	bls.n	80ef318 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80ef314:	2303      	movs	r3, #3
 80ef316:	e3e5      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80ef318:	4b73      	ldr	r3, [pc, #460]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef31a:	681b      	ldr	r3, [r3, #0]
 80ef31c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80ef320:	2b00      	cmp	r3, #0
 80ef322:	d0f0      	beq.n	80ef306 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80ef324:	4b70      	ldr	r3, [pc, #448]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef326:	699b      	ldr	r3, [r3, #24]
 80ef328:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80ef32c:	687b      	ldr	r3, [r7, #4]
 80ef32e:	6a1b      	ldr	r3, [r3, #32]
 80ef330:	041b      	lsls	r3, r3, #16
 80ef332:	496d      	ldr	r1, [pc, #436]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef334:	4313      	orrs	r3, r2
 80ef336:	618b      	str	r3, [r1, #24]
 80ef338:	e018      	b.n	80ef36c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80ef33a:	4b6b      	ldr	r3, [pc, #428]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef33c:	681b      	ldr	r3, [r3, #0]
 80ef33e:	4a6a      	ldr	r2, [pc, #424]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80ef344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef346:	f7fb fa05 	bl	80ea754 <HAL_GetTick>
 80ef34a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80ef34c:	e008      	b.n	80ef360 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80ef34e:	f7fb fa01 	bl	80ea754 <HAL_GetTick>
 80ef352:	4602      	mov	r2, r0
 80ef354:	697b      	ldr	r3, [r7, #20]
 80ef356:	1ad3      	subs	r3, r2, r3
 80ef358:	2b02      	cmp	r3, #2
 80ef35a:	d901      	bls.n	80ef360 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80ef35c:	2303      	movs	r3, #3
 80ef35e:	e3c1      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80ef360:	4b61      	ldr	r3, [pc, #388]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef362:	681b      	ldr	r3, [r3, #0]
 80ef364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80ef368:	2b00      	cmp	r3, #0
 80ef36a:	d1f0      	bne.n	80ef34e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80ef36c:	687b      	ldr	r3, [r7, #4]
 80ef36e:	681b      	ldr	r3, [r3, #0]
 80ef370:	f003 0301 	and.w	r3, r3, #1
 80ef374:	2b00      	cmp	r3, #0
 80ef376:	f000 80a0 	beq.w	80ef4ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80ef37a:	69fb      	ldr	r3, [r7, #28]
 80ef37c:	2b10      	cmp	r3, #16
 80ef37e:	d005      	beq.n	80ef38c <HAL_RCC_OscConfig+0x10c>
 80ef380:	69fb      	ldr	r3, [r7, #28]
 80ef382:	2b18      	cmp	r3, #24
 80ef384:	d109      	bne.n	80ef39a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80ef386:	69bb      	ldr	r3, [r7, #24]
 80ef388:	2b03      	cmp	r3, #3
 80ef38a:	d106      	bne.n	80ef39a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80ef38c:	687b      	ldr	r3, [r7, #4]
 80ef38e:	685b      	ldr	r3, [r3, #4]
 80ef390:	2b00      	cmp	r3, #0
 80ef392:	f040 8092 	bne.w	80ef4ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80ef396:	2301      	movs	r3, #1
 80ef398:	e3a4      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80ef39a:	687b      	ldr	r3, [r7, #4]
 80ef39c:	685b      	ldr	r3, [r3, #4]
 80ef39e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80ef3a2:	d106      	bne.n	80ef3b2 <HAL_RCC_OscConfig+0x132>
 80ef3a4:	4b50      	ldr	r3, [pc, #320]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3a6:	681b      	ldr	r3, [r3, #0]
 80ef3a8:	4a4f      	ldr	r2, [pc, #316]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80ef3ae:	6013      	str	r3, [r2, #0]
 80ef3b0:	e058      	b.n	80ef464 <HAL_RCC_OscConfig+0x1e4>
 80ef3b2:	687b      	ldr	r3, [r7, #4]
 80ef3b4:	685b      	ldr	r3, [r3, #4]
 80ef3b6:	2b00      	cmp	r3, #0
 80ef3b8:	d112      	bne.n	80ef3e0 <HAL_RCC_OscConfig+0x160>
 80ef3ba:	4b4b      	ldr	r3, [pc, #300]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3bc:	681b      	ldr	r3, [r3, #0]
 80ef3be:	4a4a      	ldr	r2, [pc, #296]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80ef3c4:	6013      	str	r3, [r2, #0]
 80ef3c6:	4b48      	ldr	r3, [pc, #288]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3c8:	681b      	ldr	r3, [r3, #0]
 80ef3ca:	4a47      	ldr	r2, [pc, #284]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80ef3d0:	6013      	str	r3, [r2, #0]
 80ef3d2:	4b45      	ldr	r3, [pc, #276]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3d4:	681b      	ldr	r3, [r3, #0]
 80ef3d6:	4a44      	ldr	r2, [pc, #272]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80ef3dc:	6013      	str	r3, [r2, #0]
 80ef3de:	e041      	b.n	80ef464 <HAL_RCC_OscConfig+0x1e4>
 80ef3e0:	687b      	ldr	r3, [r7, #4]
 80ef3e2:	685b      	ldr	r3, [r3, #4]
 80ef3e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80ef3e8:	d112      	bne.n	80ef410 <HAL_RCC_OscConfig+0x190>
 80ef3ea:	4b3f      	ldr	r3, [pc, #252]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3ec:	681b      	ldr	r3, [r3, #0]
 80ef3ee:	4a3e      	ldr	r2, [pc, #248]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80ef3f4:	6013      	str	r3, [r2, #0]
 80ef3f6:	4b3c      	ldr	r3, [pc, #240]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3f8:	681b      	ldr	r3, [r3, #0]
 80ef3fa:	4a3b      	ldr	r2, [pc, #236]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef3fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80ef400:	6013      	str	r3, [r2, #0]
 80ef402:	4b39      	ldr	r3, [pc, #228]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef404:	681b      	ldr	r3, [r3, #0]
 80ef406:	4a38      	ldr	r2, [pc, #224]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80ef40c:	6013      	str	r3, [r2, #0]
 80ef40e:	e029      	b.n	80ef464 <HAL_RCC_OscConfig+0x1e4>
 80ef410:	687b      	ldr	r3, [r7, #4]
 80ef412:	685b      	ldr	r3, [r3, #4]
 80ef414:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80ef418:	d112      	bne.n	80ef440 <HAL_RCC_OscConfig+0x1c0>
 80ef41a:	4b33      	ldr	r3, [pc, #204]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef41c:	681b      	ldr	r3, [r3, #0]
 80ef41e:	4a32      	ldr	r2, [pc, #200]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80ef424:	6013      	str	r3, [r2, #0]
 80ef426:	4b30      	ldr	r3, [pc, #192]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef428:	681b      	ldr	r3, [r3, #0]
 80ef42a:	4a2f      	ldr	r2, [pc, #188]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef42c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80ef430:	6013      	str	r3, [r2, #0]
 80ef432:	4b2d      	ldr	r3, [pc, #180]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef434:	681b      	ldr	r3, [r3, #0]
 80ef436:	4a2c      	ldr	r2, [pc, #176]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80ef43c:	6013      	str	r3, [r2, #0]
 80ef43e:	e011      	b.n	80ef464 <HAL_RCC_OscConfig+0x1e4>
 80ef440:	4b29      	ldr	r3, [pc, #164]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef442:	681b      	ldr	r3, [r3, #0]
 80ef444:	4a28      	ldr	r2, [pc, #160]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80ef44a:	6013      	str	r3, [r2, #0]
 80ef44c:	4b26      	ldr	r3, [pc, #152]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef44e:	681b      	ldr	r3, [r3, #0]
 80ef450:	4a25      	ldr	r2, [pc, #148]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80ef456:	6013      	str	r3, [r2, #0]
 80ef458:	4b23      	ldr	r3, [pc, #140]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef45a:	681b      	ldr	r3, [r3, #0]
 80ef45c:	4a22      	ldr	r2, [pc, #136]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef45e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80ef462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80ef464:	687b      	ldr	r3, [r7, #4]
 80ef466:	685b      	ldr	r3, [r3, #4]
 80ef468:	2b00      	cmp	r3, #0
 80ef46a:	d013      	beq.n	80ef494 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef46c:	f7fb f972 	bl	80ea754 <HAL_GetTick>
 80ef470:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80ef472:	e008      	b.n	80ef486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80ef474:	f7fb f96e 	bl	80ea754 <HAL_GetTick>
 80ef478:	4602      	mov	r2, r0
 80ef47a:	697b      	ldr	r3, [r7, #20]
 80ef47c:	1ad3      	subs	r3, r2, r3
 80ef47e:	2b64      	cmp	r3, #100	@ 0x64
 80ef480:	d901      	bls.n	80ef486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80ef482:	2303      	movs	r3, #3
 80ef484:	e32e      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80ef486:	4b18      	ldr	r3, [pc, #96]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef488:	681b      	ldr	r3, [r3, #0]
 80ef48a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80ef48e:	2b00      	cmp	r3, #0
 80ef490:	d0f0      	beq.n	80ef474 <HAL_RCC_OscConfig+0x1f4>
 80ef492:	e012      	b.n	80ef4ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef494:	f7fb f95e 	bl	80ea754 <HAL_GetTick>
 80ef498:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80ef49a:	e008      	b.n	80ef4ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80ef49c:	f7fb f95a 	bl	80ea754 <HAL_GetTick>
 80ef4a0:	4602      	mov	r2, r0
 80ef4a2:	697b      	ldr	r3, [r7, #20]
 80ef4a4:	1ad3      	subs	r3, r2, r3
 80ef4a6:	2b64      	cmp	r3, #100	@ 0x64
 80ef4a8:	d901      	bls.n	80ef4ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80ef4aa:	2303      	movs	r3, #3
 80ef4ac:	e31a      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80ef4ae:	4b0e      	ldr	r3, [pc, #56]	@ (80ef4e8 <HAL_RCC_OscConfig+0x268>)
 80ef4b0:	681b      	ldr	r3, [r3, #0]
 80ef4b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80ef4b6:	2b00      	cmp	r3, #0
 80ef4b8:	d1f0      	bne.n	80ef49c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80ef4ba:	687b      	ldr	r3, [r7, #4]
 80ef4bc:	681b      	ldr	r3, [r3, #0]
 80ef4be:	f003 0302 	and.w	r3, r3, #2
 80ef4c2:	2b00      	cmp	r3, #0
 80ef4c4:	f000 809a 	beq.w	80ef5fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80ef4c8:	69fb      	ldr	r3, [r7, #28]
 80ef4ca:	2b00      	cmp	r3, #0
 80ef4cc:	d005      	beq.n	80ef4da <HAL_RCC_OscConfig+0x25a>
 80ef4ce:	69fb      	ldr	r3, [r7, #28]
 80ef4d0:	2b18      	cmp	r3, #24
 80ef4d2:	d149      	bne.n	80ef568 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80ef4d4:	69bb      	ldr	r3, [r7, #24]
 80ef4d6:	2b01      	cmp	r3, #1
 80ef4d8:	d146      	bne.n	80ef568 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80ef4da:	687b      	ldr	r3, [r7, #4]
 80ef4dc:	68db      	ldr	r3, [r3, #12]
 80ef4de:	2b00      	cmp	r3, #0
 80ef4e0:	d104      	bne.n	80ef4ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80ef4e2:	2301      	movs	r3, #1
 80ef4e4:	e2fe      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
 80ef4e6:	bf00      	nop
 80ef4e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80ef4ec:	69fb      	ldr	r3, [r7, #28]
 80ef4ee:	2b00      	cmp	r3, #0
 80ef4f0:	d11c      	bne.n	80ef52c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80ef4f2:	4b9a      	ldr	r3, [pc, #616]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef4f4:	681b      	ldr	r3, [r3, #0]
 80ef4f6:	f003 0218 	and.w	r2, r3, #24
 80ef4fa:	687b      	ldr	r3, [r7, #4]
 80ef4fc:	691b      	ldr	r3, [r3, #16]
 80ef4fe:	429a      	cmp	r2, r3
 80ef500:	d014      	beq.n	80ef52c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80ef502:	4b96      	ldr	r3, [pc, #600]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef504:	681b      	ldr	r3, [r3, #0]
 80ef506:	f023 0218 	bic.w	r2, r3, #24
 80ef50a:	687b      	ldr	r3, [r7, #4]
 80ef50c:	691b      	ldr	r3, [r3, #16]
 80ef50e:	4993      	ldr	r1, [pc, #588]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef510:	4313      	orrs	r3, r2
 80ef512:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80ef514:	f000 fdd0 	bl	80f00b8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80ef518:	4b91      	ldr	r3, [pc, #580]	@ (80ef760 <HAL_RCC_OscConfig+0x4e0>)
 80ef51a:	681b      	ldr	r3, [r3, #0]
 80ef51c:	4618      	mov	r0, r3
 80ef51e:	f7fb f88f 	bl	80ea640 <HAL_InitTick>
 80ef522:	4603      	mov	r3, r0
 80ef524:	2b00      	cmp	r3, #0
 80ef526:	d001      	beq.n	80ef52c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80ef528:	2301      	movs	r3, #1
 80ef52a:	e2db      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef52c:	f7fb f912 	bl	80ea754 <HAL_GetTick>
 80ef530:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80ef532:	e008      	b.n	80ef546 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80ef534:	f7fb f90e 	bl	80ea754 <HAL_GetTick>
 80ef538:	4602      	mov	r2, r0
 80ef53a:	697b      	ldr	r3, [r7, #20]
 80ef53c:	1ad3      	subs	r3, r2, r3
 80ef53e:	2b02      	cmp	r3, #2
 80ef540:	d901      	bls.n	80ef546 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80ef542:	2303      	movs	r3, #3
 80ef544:	e2ce      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80ef546:	4b85      	ldr	r3, [pc, #532]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef548:	681b      	ldr	r3, [r3, #0]
 80ef54a:	f003 0302 	and.w	r3, r3, #2
 80ef54e:	2b00      	cmp	r3, #0
 80ef550:	d0f0      	beq.n	80ef534 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80ef552:	4b82      	ldr	r3, [pc, #520]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef554:	691b      	ldr	r3, [r3, #16]
 80ef556:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80ef55a:	687b      	ldr	r3, [r7, #4]
 80ef55c:	695b      	ldr	r3, [r3, #20]
 80ef55e:	041b      	lsls	r3, r3, #16
 80ef560:	497e      	ldr	r1, [pc, #504]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef562:	4313      	orrs	r3, r2
 80ef564:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80ef566:	e049      	b.n	80ef5fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80ef568:	687b      	ldr	r3, [r7, #4]
 80ef56a:	68db      	ldr	r3, [r3, #12]
 80ef56c:	2b00      	cmp	r3, #0
 80ef56e:	d02c      	beq.n	80ef5ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80ef570:	4b7a      	ldr	r3, [pc, #488]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef572:	681b      	ldr	r3, [r3, #0]
 80ef574:	f023 0218 	bic.w	r2, r3, #24
 80ef578:	687b      	ldr	r3, [r7, #4]
 80ef57a:	691b      	ldr	r3, [r3, #16]
 80ef57c:	4977      	ldr	r1, [pc, #476]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef57e:	4313      	orrs	r3, r2
 80ef580:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80ef582:	4b76      	ldr	r3, [pc, #472]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef584:	681b      	ldr	r3, [r3, #0]
 80ef586:	4a75      	ldr	r2, [pc, #468]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef588:	f043 0301 	orr.w	r3, r3, #1
 80ef58c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef58e:	f7fb f8e1 	bl	80ea754 <HAL_GetTick>
 80ef592:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80ef594:	e008      	b.n	80ef5a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80ef596:	f7fb f8dd 	bl	80ea754 <HAL_GetTick>
 80ef59a:	4602      	mov	r2, r0
 80ef59c:	697b      	ldr	r3, [r7, #20]
 80ef59e:	1ad3      	subs	r3, r2, r3
 80ef5a0:	2b02      	cmp	r3, #2
 80ef5a2:	d901      	bls.n	80ef5a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80ef5a4:	2303      	movs	r3, #3
 80ef5a6:	e29d      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80ef5a8:	4b6c      	ldr	r3, [pc, #432]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5aa:	681b      	ldr	r3, [r3, #0]
 80ef5ac:	f003 0302 	and.w	r3, r3, #2
 80ef5b0:	2b00      	cmp	r3, #0
 80ef5b2:	d0f0      	beq.n	80ef596 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80ef5b4:	4b69      	ldr	r3, [pc, #420]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5b6:	691b      	ldr	r3, [r3, #16]
 80ef5b8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80ef5bc:	687b      	ldr	r3, [r7, #4]
 80ef5be:	695b      	ldr	r3, [r3, #20]
 80ef5c0:	041b      	lsls	r3, r3, #16
 80ef5c2:	4966      	ldr	r1, [pc, #408]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5c4:	4313      	orrs	r3, r2
 80ef5c6:	610b      	str	r3, [r1, #16]
 80ef5c8:	e018      	b.n	80ef5fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80ef5ca:	4b64      	ldr	r3, [pc, #400]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5cc:	681b      	ldr	r3, [r3, #0]
 80ef5ce:	4a63      	ldr	r2, [pc, #396]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5d0:	f023 0301 	bic.w	r3, r3, #1
 80ef5d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef5d6:	f7fb f8bd 	bl	80ea754 <HAL_GetTick>
 80ef5da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80ef5dc:	e008      	b.n	80ef5f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80ef5de:	f7fb f8b9 	bl	80ea754 <HAL_GetTick>
 80ef5e2:	4602      	mov	r2, r0
 80ef5e4:	697b      	ldr	r3, [r7, #20]
 80ef5e6:	1ad3      	subs	r3, r2, r3
 80ef5e8:	2b02      	cmp	r3, #2
 80ef5ea:	d901      	bls.n	80ef5f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80ef5ec:	2303      	movs	r3, #3
 80ef5ee:	e279      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80ef5f0:	4b5a      	ldr	r3, [pc, #360]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef5f2:	681b      	ldr	r3, [r3, #0]
 80ef5f4:	f003 0302 	and.w	r3, r3, #2
 80ef5f8:	2b00      	cmp	r3, #0
 80ef5fa:	d1f0      	bne.n	80ef5de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80ef5fc:	687b      	ldr	r3, [r7, #4]
 80ef5fe:	681b      	ldr	r3, [r3, #0]
 80ef600:	f003 0308 	and.w	r3, r3, #8
 80ef604:	2b00      	cmp	r3, #0
 80ef606:	d03c      	beq.n	80ef682 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80ef608:	687b      	ldr	r3, [r7, #4]
 80ef60a:	699b      	ldr	r3, [r3, #24]
 80ef60c:	2b00      	cmp	r3, #0
 80ef60e:	d01c      	beq.n	80ef64a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80ef610:	4b52      	ldr	r3, [pc, #328]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef616:	4a51      	ldr	r2, [pc, #324]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef618:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80ef61c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef620:	f7fb f898 	bl	80ea754 <HAL_GetTick>
 80ef624:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80ef626:	e008      	b.n	80ef63a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80ef628:	f7fb f894 	bl	80ea754 <HAL_GetTick>
 80ef62c:	4602      	mov	r2, r0
 80ef62e:	697b      	ldr	r3, [r7, #20]
 80ef630:	1ad3      	subs	r3, r2, r3
 80ef632:	2b02      	cmp	r3, #2
 80ef634:	d901      	bls.n	80ef63a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80ef636:	2303      	movs	r3, #3
 80ef638:	e254      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80ef63a:	4b48      	ldr	r3, [pc, #288]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef63c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80ef644:	2b00      	cmp	r3, #0
 80ef646:	d0ef      	beq.n	80ef628 <HAL_RCC_OscConfig+0x3a8>
 80ef648:	e01b      	b.n	80ef682 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80ef64a:	4b44      	ldr	r3, [pc, #272]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef64c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef650:	4a42      	ldr	r2, [pc, #264]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef652:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80ef656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef65a:	f7fb f87b 	bl	80ea754 <HAL_GetTick>
 80ef65e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80ef660:	e008      	b.n	80ef674 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80ef662:	f7fb f877 	bl	80ea754 <HAL_GetTick>
 80ef666:	4602      	mov	r2, r0
 80ef668:	697b      	ldr	r3, [r7, #20]
 80ef66a:	1ad3      	subs	r3, r2, r3
 80ef66c:	2b02      	cmp	r3, #2
 80ef66e:	d901      	bls.n	80ef674 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80ef670:	2303      	movs	r3, #3
 80ef672:	e237      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80ef674:	4b39      	ldr	r3, [pc, #228]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef67a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80ef67e:	2b00      	cmp	r3, #0
 80ef680:	d1ef      	bne.n	80ef662 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80ef682:	687b      	ldr	r3, [r7, #4]
 80ef684:	681b      	ldr	r3, [r3, #0]
 80ef686:	f003 0304 	and.w	r3, r3, #4
 80ef68a:	2b00      	cmp	r3, #0
 80ef68c:	f000 80d2 	beq.w	80ef834 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80ef690:	4b34      	ldr	r3, [pc, #208]	@ (80ef764 <HAL_RCC_OscConfig+0x4e4>)
 80ef692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ef694:	f003 0301 	and.w	r3, r3, #1
 80ef698:	2b00      	cmp	r3, #0
 80ef69a:	d118      	bne.n	80ef6ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80ef69c:	4b31      	ldr	r3, [pc, #196]	@ (80ef764 <HAL_RCC_OscConfig+0x4e4>)
 80ef69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ef6a0:	4a30      	ldr	r2, [pc, #192]	@ (80ef764 <HAL_RCC_OscConfig+0x4e4>)
 80ef6a2:	f043 0301 	orr.w	r3, r3, #1
 80ef6a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80ef6a8:	f7fb f854 	bl	80ea754 <HAL_GetTick>
 80ef6ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80ef6ae:	e008      	b.n	80ef6c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80ef6b0:	f7fb f850 	bl	80ea754 <HAL_GetTick>
 80ef6b4:	4602      	mov	r2, r0
 80ef6b6:	697b      	ldr	r3, [r7, #20]
 80ef6b8:	1ad3      	subs	r3, r2, r3
 80ef6ba:	2b02      	cmp	r3, #2
 80ef6bc:	d901      	bls.n	80ef6c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80ef6be:	2303      	movs	r3, #3
 80ef6c0:	e210      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80ef6c2:	4b28      	ldr	r3, [pc, #160]	@ (80ef764 <HAL_RCC_OscConfig+0x4e4>)
 80ef6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ef6c6:	f003 0301 	and.w	r3, r3, #1
 80ef6ca:	2b00      	cmp	r3, #0
 80ef6cc:	d0f0      	beq.n	80ef6b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80ef6ce:	687b      	ldr	r3, [r7, #4]
 80ef6d0:	689b      	ldr	r3, [r3, #8]
 80ef6d2:	2b01      	cmp	r3, #1
 80ef6d4:	d108      	bne.n	80ef6e8 <HAL_RCC_OscConfig+0x468>
 80ef6d6:	4b21      	ldr	r3, [pc, #132]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef6d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef6dc:	4a1f      	ldr	r2, [pc, #124]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef6de:	f043 0301 	orr.w	r3, r3, #1
 80ef6e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef6e6:	e074      	b.n	80ef7d2 <HAL_RCC_OscConfig+0x552>
 80ef6e8:	687b      	ldr	r3, [r7, #4]
 80ef6ea:	689b      	ldr	r3, [r3, #8]
 80ef6ec:	2b00      	cmp	r3, #0
 80ef6ee:	d118      	bne.n	80ef722 <HAL_RCC_OscConfig+0x4a2>
 80ef6f0:	4b1a      	ldr	r3, [pc, #104]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef6f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef6f6:	4a19      	ldr	r2, [pc, #100]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef6f8:	f023 0301 	bic.w	r3, r3, #1
 80ef6fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef700:	4b16      	ldr	r3, [pc, #88]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef706:	4a15      	ldr	r2, [pc, #84]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80ef70c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef710:	4b12      	ldr	r3, [pc, #72]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef716:	4a11      	ldr	r2, [pc, #68]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef718:	f023 0304 	bic.w	r3, r3, #4
 80ef71c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef720:	e057      	b.n	80ef7d2 <HAL_RCC_OscConfig+0x552>
 80ef722:	687b      	ldr	r3, [r7, #4]
 80ef724:	689b      	ldr	r3, [r3, #8]
 80ef726:	2b05      	cmp	r3, #5
 80ef728:	d11e      	bne.n	80ef768 <HAL_RCC_OscConfig+0x4e8>
 80ef72a:	4b0c      	ldr	r3, [pc, #48]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef72c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef730:	4a0a      	ldr	r2, [pc, #40]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef732:	f043 0304 	orr.w	r3, r3, #4
 80ef736:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef73a:	4b08      	ldr	r3, [pc, #32]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef73c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef740:	4a06      	ldr	r2, [pc, #24]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80ef746:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef74a:	4b04      	ldr	r3, [pc, #16]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef74c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef750:	4a02      	ldr	r2, [pc, #8]	@ (80ef75c <HAL_RCC_OscConfig+0x4dc>)
 80ef752:	f043 0301 	orr.w	r3, r3, #1
 80ef756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef75a:	e03a      	b.n	80ef7d2 <HAL_RCC_OscConfig+0x552>
 80ef75c:	44020c00 	.word	0x44020c00
 80ef760:	20000004 	.word	0x20000004
 80ef764:	44020800 	.word	0x44020800
 80ef768:	687b      	ldr	r3, [r7, #4]
 80ef76a:	689b      	ldr	r3, [r3, #8]
 80ef76c:	2b85      	cmp	r3, #133	@ 0x85
 80ef76e:	d118      	bne.n	80ef7a2 <HAL_RCC_OscConfig+0x522>
 80ef770:	4ba2      	ldr	r3, [pc, #648]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef776:	4aa1      	ldr	r2, [pc, #644]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef778:	f043 0304 	orr.w	r3, r3, #4
 80ef77c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef780:	4b9e      	ldr	r3, [pc, #632]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef786:	4a9d      	ldr	r2, [pc, #628]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80ef78c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef790:	4b9a      	ldr	r3, [pc, #616]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef796:	4a99      	ldr	r2, [pc, #612]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef798:	f043 0301 	orr.w	r3, r3, #1
 80ef79c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef7a0:	e017      	b.n	80ef7d2 <HAL_RCC_OscConfig+0x552>
 80ef7a2:	4b96      	ldr	r3, [pc, #600]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef7a8:	4a94      	ldr	r2, [pc, #592]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7aa:	f023 0301 	bic.w	r3, r3, #1
 80ef7ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef7b2:	4b92      	ldr	r3, [pc, #584]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef7b8:	4a90      	ldr	r2, [pc, #576]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7ba:	f023 0304 	bic.w	r3, r3, #4
 80ef7be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80ef7c2:	4b8e      	ldr	r3, [pc, #568]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef7c8:	4a8c      	ldr	r2, [pc, #560]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80ef7ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80ef7d2:	687b      	ldr	r3, [r7, #4]
 80ef7d4:	689b      	ldr	r3, [r3, #8]
 80ef7d6:	2b00      	cmp	r3, #0
 80ef7d8:	d016      	beq.n	80ef808 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef7da:	f7fa ffbb 	bl	80ea754 <HAL_GetTick>
 80ef7de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80ef7e0:	e00a      	b.n	80ef7f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80ef7e2:	f7fa ffb7 	bl	80ea754 <HAL_GetTick>
 80ef7e6:	4602      	mov	r2, r0
 80ef7e8:	697b      	ldr	r3, [r7, #20]
 80ef7ea:	1ad3      	subs	r3, r2, r3
 80ef7ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80ef7f0:	4293      	cmp	r3, r2
 80ef7f2:	d901      	bls.n	80ef7f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80ef7f4:	2303      	movs	r3, #3
 80ef7f6:	e175      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80ef7f8:	4b80      	ldr	r3, [pc, #512]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef7fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef7fe:	f003 0302 	and.w	r3, r3, #2
 80ef802:	2b00      	cmp	r3, #0
 80ef804:	d0ed      	beq.n	80ef7e2 <HAL_RCC_OscConfig+0x562>
 80ef806:	e015      	b.n	80ef834 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef808:	f7fa ffa4 	bl	80ea754 <HAL_GetTick>
 80ef80c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80ef80e:	e00a      	b.n	80ef826 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80ef810:	f7fa ffa0 	bl	80ea754 <HAL_GetTick>
 80ef814:	4602      	mov	r2, r0
 80ef816:	697b      	ldr	r3, [r7, #20]
 80ef818:	1ad3      	subs	r3, r2, r3
 80ef81a:	f241 3288 	movw	r2, #5000	@ 0x1388
 80ef81e:	4293      	cmp	r3, r2
 80ef820:	d901      	bls.n	80ef826 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80ef822:	2303      	movs	r3, #3
 80ef824:	e15e      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80ef826:	4b75      	ldr	r3, [pc, #468]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80ef82c:	f003 0302 	and.w	r3, r3, #2
 80ef830:	2b00      	cmp	r3, #0
 80ef832:	d1ed      	bne.n	80ef810 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80ef834:	687b      	ldr	r3, [r7, #4]
 80ef836:	681b      	ldr	r3, [r3, #0]
 80ef838:	f003 0320 	and.w	r3, r3, #32
 80ef83c:	2b00      	cmp	r3, #0
 80ef83e:	d036      	beq.n	80ef8ae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80ef840:	687b      	ldr	r3, [r7, #4]
 80ef842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80ef844:	2b00      	cmp	r3, #0
 80ef846:	d019      	beq.n	80ef87c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80ef848:	4b6c      	ldr	r3, [pc, #432]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef84a:	681b      	ldr	r3, [r3, #0]
 80ef84c:	4a6b      	ldr	r2, [pc, #428]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef84e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80ef852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef854:	f7fa ff7e 	bl	80ea754 <HAL_GetTick>
 80ef858:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80ef85a:	e008      	b.n	80ef86e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80ef85c:	f7fa ff7a 	bl	80ea754 <HAL_GetTick>
 80ef860:	4602      	mov	r2, r0
 80ef862:	697b      	ldr	r3, [r7, #20]
 80ef864:	1ad3      	subs	r3, r2, r3
 80ef866:	2b02      	cmp	r3, #2
 80ef868:	d901      	bls.n	80ef86e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80ef86a:	2303      	movs	r3, #3
 80ef86c:	e13a      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80ef86e:	4b63      	ldr	r3, [pc, #396]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef870:	681b      	ldr	r3, [r3, #0]
 80ef872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80ef876:	2b00      	cmp	r3, #0
 80ef878:	d0f0      	beq.n	80ef85c <HAL_RCC_OscConfig+0x5dc>
 80ef87a:	e018      	b.n	80ef8ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80ef87c:	4b5f      	ldr	r3, [pc, #380]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef87e:	681b      	ldr	r3, [r3, #0]
 80ef880:	4a5e      	ldr	r2, [pc, #376]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80ef886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80ef888:	f7fa ff64 	bl	80ea754 <HAL_GetTick>
 80ef88c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80ef88e:	e008      	b.n	80ef8a2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80ef890:	f7fa ff60 	bl	80ea754 <HAL_GetTick>
 80ef894:	4602      	mov	r2, r0
 80ef896:	697b      	ldr	r3, [r7, #20]
 80ef898:	1ad3      	subs	r3, r2, r3
 80ef89a:	2b02      	cmp	r3, #2
 80ef89c:	d901      	bls.n	80ef8a2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80ef89e:	2303      	movs	r3, #3
 80ef8a0:	e120      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80ef8a2:	4b56      	ldr	r3, [pc, #344]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef8a4:	681b      	ldr	r3, [r3, #0]
 80ef8a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80ef8aa:	2b00      	cmp	r3, #0
 80ef8ac:	d1f0      	bne.n	80ef890 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80ef8ae:	687b      	ldr	r3, [r7, #4]
 80ef8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef8b2:	2b00      	cmp	r3, #0
 80ef8b4:	f000 8115 	beq.w	80efae2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80ef8b8:	69fb      	ldr	r3, [r7, #28]
 80ef8ba:	2b18      	cmp	r3, #24
 80ef8bc:	f000 80af 	beq.w	80efa1e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80ef8c0:	687b      	ldr	r3, [r7, #4]
 80ef8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef8c4:	2b02      	cmp	r3, #2
 80ef8c6:	f040 8086 	bne.w	80ef9d6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80ef8ca:	4b4c      	ldr	r3, [pc, #304]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef8cc:	681b      	ldr	r3, [r3, #0]
 80ef8ce:	4a4b      	ldr	r2, [pc, #300]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef8d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80ef8d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef8d6:	f7fa ff3d 	bl	80ea754 <HAL_GetTick>
 80ef8da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80ef8dc:	e008      	b.n	80ef8f0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80ef8de:	f7fa ff39 	bl	80ea754 <HAL_GetTick>
 80ef8e2:	4602      	mov	r2, r0
 80ef8e4:	697b      	ldr	r3, [r7, #20]
 80ef8e6:	1ad3      	subs	r3, r2, r3
 80ef8e8:	2b02      	cmp	r3, #2
 80ef8ea:	d901      	bls.n	80ef8f0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80ef8ec:	2303      	movs	r3, #3
 80ef8ee:	e0f9      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80ef8f0:	4b42      	ldr	r3, [pc, #264]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef8f2:	681b      	ldr	r3, [r3, #0]
 80ef8f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80ef8f8:	2b00      	cmp	r3, #0
 80ef8fa:	d1f0      	bne.n	80ef8de <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80ef8fc:	4b3f      	ldr	r3, [pc, #252]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef8fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef900:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80ef904:	f023 0303 	bic.w	r3, r3, #3
 80ef908:	687a      	ldr	r2, [r7, #4]
 80ef90a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80ef90c:	687a      	ldr	r2, [r7, #4]
 80ef90e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80ef910:	0212      	lsls	r2, r2, #8
 80ef912:	430a      	orrs	r2, r1
 80ef914:	4939      	ldr	r1, [pc, #228]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef916:	4313      	orrs	r3, r2
 80ef918:	628b      	str	r3, [r1, #40]	@ 0x28
 80ef91a:	687b      	ldr	r3, [r7, #4]
 80ef91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80ef91e:	3b01      	subs	r3, #1
 80ef920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80ef924:	687b      	ldr	r3, [r7, #4]
 80ef926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80ef928:	3b01      	subs	r3, #1
 80ef92a:	025b      	lsls	r3, r3, #9
 80ef92c:	b29b      	uxth	r3, r3
 80ef92e:	431a      	orrs	r2, r3
 80ef930:	687b      	ldr	r3, [r7, #4]
 80ef932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80ef934:	3b01      	subs	r3, #1
 80ef936:	041b      	lsls	r3, r3, #16
 80ef938:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80ef93c:	431a      	orrs	r2, r3
 80ef93e:	687b      	ldr	r3, [r7, #4]
 80ef940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80ef942:	3b01      	subs	r3, #1
 80ef944:	061b      	lsls	r3, r3, #24
 80ef946:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80ef94a:	492c      	ldr	r1, [pc, #176]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef94c:	4313      	orrs	r3, r2
 80ef94e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80ef950:	4b2a      	ldr	r3, [pc, #168]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef954:	4a29      	ldr	r2, [pc, #164]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef956:	f023 0310 	bic.w	r3, r3, #16
 80ef95a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80ef95c:	687b      	ldr	r3, [r7, #4]
 80ef95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80ef960:	4a26      	ldr	r2, [pc, #152]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef962:	00db      	lsls	r3, r3, #3
 80ef964:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80ef966:	4b25      	ldr	r3, [pc, #148]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef96a:	4a24      	ldr	r2, [pc, #144]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef96c:	f043 0310 	orr.w	r3, r3, #16
 80ef970:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80ef972:	4b22      	ldr	r3, [pc, #136]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef976:	f023 020c 	bic.w	r2, r3, #12
 80ef97a:	687b      	ldr	r3, [r7, #4]
 80ef97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80ef97e:	491f      	ldr	r1, [pc, #124]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef980:	4313      	orrs	r3, r2
 80ef982:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80ef984:	4b1d      	ldr	r3, [pc, #116]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef988:	f023 0220 	bic.w	r2, r3, #32
 80ef98c:	687b      	ldr	r3, [r7, #4]
 80ef98e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80ef990:	491a      	ldr	r1, [pc, #104]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef992:	4313      	orrs	r3, r2
 80ef994:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80ef996:	4b19      	ldr	r3, [pc, #100]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80ef99a:	4a18      	ldr	r2, [pc, #96]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef99c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80ef9a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80ef9a2:	4b16      	ldr	r3, [pc, #88]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef9a4:	681b      	ldr	r3, [r3, #0]
 80ef9a6:	4a15      	ldr	r2, [pc, #84]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef9a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80ef9ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef9ae:	f7fa fed1 	bl	80ea754 <HAL_GetTick>
 80ef9b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80ef9b4:	e008      	b.n	80ef9c8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80ef9b6:	f7fa fecd 	bl	80ea754 <HAL_GetTick>
 80ef9ba:	4602      	mov	r2, r0
 80ef9bc:	697b      	ldr	r3, [r7, #20]
 80ef9be:	1ad3      	subs	r3, r2, r3
 80ef9c0:	2b02      	cmp	r3, #2
 80ef9c2:	d901      	bls.n	80ef9c8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80ef9c4:	2303      	movs	r3, #3
 80ef9c6:	e08d      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80ef9c8:	4b0c      	ldr	r3, [pc, #48]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef9ca:	681b      	ldr	r3, [r3, #0]
 80ef9cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80ef9d0:	2b00      	cmp	r3, #0
 80ef9d2:	d0f0      	beq.n	80ef9b6 <HAL_RCC_OscConfig+0x736>
 80ef9d4:	e085      	b.n	80efae2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80ef9d6:	4b09      	ldr	r3, [pc, #36]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef9d8:	681b      	ldr	r3, [r3, #0]
 80ef9da:	4a08      	ldr	r2, [pc, #32]	@ (80ef9fc <HAL_RCC_OscConfig+0x77c>)
 80ef9dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80ef9e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80ef9e2:	f7fa feb7 	bl	80ea754 <HAL_GetTick>
 80ef9e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80ef9e8:	e00a      	b.n	80efa00 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80ef9ea:	f7fa feb3 	bl	80ea754 <HAL_GetTick>
 80ef9ee:	4602      	mov	r2, r0
 80ef9f0:	697b      	ldr	r3, [r7, #20]
 80ef9f2:	1ad3      	subs	r3, r2, r3
 80ef9f4:	2b02      	cmp	r3, #2
 80ef9f6:	d903      	bls.n	80efa00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80ef9f8:	2303      	movs	r3, #3
 80ef9fa:	e073      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
 80ef9fc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80efa00:	4b3a      	ldr	r3, [pc, #232]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa02:	681b      	ldr	r3, [r3, #0]
 80efa04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80efa08:	2b00      	cmp	r3, #0
 80efa0a:	d1ee      	bne.n	80ef9ea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80efa0c:	4b37      	ldr	r3, [pc, #220]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efa10:	4a36      	ldr	r2, [pc, #216]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80efa16:	f023 0303 	bic.w	r3, r3, #3
 80efa1a:	6293      	str	r3, [r2, #40]	@ 0x28
 80efa1c:	e061      	b.n	80efae2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80efa1e:	4b33      	ldr	r3, [pc, #204]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efa22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80efa24:	4b31      	ldr	r3, [pc, #196]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80efa28:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80efa2a:	687b      	ldr	r3, [r7, #4]
 80efa2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efa2e:	2b01      	cmp	r3, #1
 80efa30:	d031      	beq.n	80efa96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80efa32:	693b      	ldr	r3, [r7, #16]
 80efa34:	f003 0203 	and.w	r2, r3, #3
 80efa38:	687b      	ldr	r3, [r7, #4]
 80efa3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80efa3c:	429a      	cmp	r2, r3
 80efa3e:	d12a      	bne.n	80efa96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80efa40:	693b      	ldr	r3, [r7, #16]
 80efa42:	0a1b      	lsrs	r3, r3, #8
 80efa44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80efa48:	687b      	ldr	r3, [r7, #4]
 80efa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80efa4c:	429a      	cmp	r2, r3
 80efa4e:	d122      	bne.n	80efa96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80efa50:	68fb      	ldr	r3, [r7, #12]
 80efa52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80efa56:	687b      	ldr	r3, [r7, #4]
 80efa58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80efa5a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80efa5c:	429a      	cmp	r2, r3
 80efa5e:	d11a      	bne.n	80efa96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80efa60:	68fb      	ldr	r3, [r7, #12]
 80efa62:	0a5b      	lsrs	r3, r3, #9
 80efa64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80efa68:	687b      	ldr	r3, [r7, #4]
 80efa6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80efa6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80efa6e:	429a      	cmp	r2, r3
 80efa70:	d111      	bne.n	80efa96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80efa72:	68fb      	ldr	r3, [r7, #12]
 80efa74:	0c1b      	lsrs	r3, r3, #16
 80efa76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80efa7a:	687b      	ldr	r3, [r7, #4]
 80efa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80efa7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80efa80:	429a      	cmp	r2, r3
 80efa82:	d108      	bne.n	80efa96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80efa84:	68fb      	ldr	r3, [r7, #12]
 80efa86:	0e1b      	lsrs	r3, r3, #24
 80efa88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80efa8c:	687b      	ldr	r3, [r7, #4]
 80efa8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80efa90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80efa92:	429a      	cmp	r2, r3
 80efa94:	d001      	beq.n	80efa9a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80efa96:	2301      	movs	r3, #1
 80efa98:	e024      	b.n	80efae4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80efa9a:	4b14      	ldr	r3, [pc, #80]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80efa9e:	08db      	lsrs	r3, r3, #3
 80efaa0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80efaa4:	687b      	ldr	r3, [r7, #4]
 80efaa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80efaa8:	429a      	cmp	r2, r3
 80efaaa:	d01a      	beq.n	80efae2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80efaac:	4b0f      	ldr	r3, [pc, #60]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efaae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efab0:	4a0e      	ldr	r2, [pc, #56]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efab2:	f023 0310 	bic.w	r3, r3, #16
 80efab6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80efab8:	f7fa fe4c 	bl	80ea754 <HAL_GetTick>
 80efabc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80efabe:	bf00      	nop
 80efac0:	f7fa fe48 	bl	80ea754 <HAL_GetTick>
 80efac4:	4602      	mov	r2, r0
 80efac6:	697b      	ldr	r3, [r7, #20]
 80efac8:	4293      	cmp	r3, r2
 80efaca:	d0f9      	beq.n	80efac0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80efacc:	687b      	ldr	r3, [r7, #4]
 80eface:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80efad0:	4a06      	ldr	r2, [pc, #24]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efad2:	00db      	lsls	r3, r3, #3
 80efad4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80efad6:	4b05      	ldr	r3, [pc, #20]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efada:	4a04      	ldr	r2, [pc, #16]	@ (80efaec <HAL_RCC_OscConfig+0x86c>)
 80efadc:	f043 0310 	orr.w	r3, r3, #16
 80efae0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80efae2:	2300      	movs	r3, #0
}
 80efae4:	4618      	mov	r0, r3
 80efae6:	3720      	adds	r7, #32
 80efae8:	46bd      	mov	sp, r7
 80efaea:	bd80      	pop	{r7, pc}
 80efaec:	44020c00 	.word	0x44020c00

080efaf0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80efaf0:	b580      	push	{r7, lr}
 80efaf2:	b084      	sub	sp, #16
 80efaf4:	af00      	add	r7, sp, #0
 80efaf6:	6078      	str	r0, [r7, #4]
 80efaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80efafa:	687b      	ldr	r3, [r7, #4]
 80efafc:	2b00      	cmp	r3, #0
 80efafe:	d101      	bne.n	80efb04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80efb00:	2301      	movs	r3, #1
 80efb02:	e19e      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80efb04:	4b83      	ldr	r3, [pc, #524]	@ (80efd14 <HAL_RCC_ClockConfig+0x224>)
 80efb06:	681b      	ldr	r3, [r3, #0]
 80efb08:	f003 030f 	and.w	r3, r3, #15
 80efb0c:	683a      	ldr	r2, [r7, #0]
 80efb0e:	429a      	cmp	r2, r3
 80efb10:	d910      	bls.n	80efb34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80efb12:	4b80      	ldr	r3, [pc, #512]	@ (80efd14 <HAL_RCC_ClockConfig+0x224>)
 80efb14:	681b      	ldr	r3, [r3, #0]
 80efb16:	f023 020f 	bic.w	r2, r3, #15
 80efb1a:	497e      	ldr	r1, [pc, #504]	@ (80efd14 <HAL_RCC_ClockConfig+0x224>)
 80efb1c:	683b      	ldr	r3, [r7, #0]
 80efb1e:	4313      	orrs	r3, r2
 80efb20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80efb22:	4b7c      	ldr	r3, [pc, #496]	@ (80efd14 <HAL_RCC_ClockConfig+0x224>)
 80efb24:	681b      	ldr	r3, [r3, #0]
 80efb26:	f003 030f 	and.w	r3, r3, #15
 80efb2a:	683a      	ldr	r2, [r7, #0]
 80efb2c:	429a      	cmp	r2, r3
 80efb2e:	d001      	beq.n	80efb34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80efb30:	2301      	movs	r3, #1
 80efb32:	e186      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80efb34:	687b      	ldr	r3, [r7, #4]
 80efb36:	681b      	ldr	r3, [r3, #0]
 80efb38:	f003 0310 	and.w	r3, r3, #16
 80efb3c:	2b00      	cmp	r3, #0
 80efb3e:	d012      	beq.n	80efb66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80efb40:	687b      	ldr	r3, [r7, #4]
 80efb42:	695a      	ldr	r2, [r3, #20]
 80efb44:	4b74      	ldr	r3, [pc, #464]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb46:	6a1b      	ldr	r3, [r3, #32]
 80efb48:	0a1b      	lsrs	r3, r3, #8
 80efb4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efb4e:	429a      	cmp	r2, r3
 80efb50:	d909      	bls.n	80efb66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80efb52:	4b71      	ldr	r3, [pc, #452]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb54:	6a1b      	ldr	r3, [r3, #32]
 80efb56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80efb5a:	687b      	ldr	r3, [r7, #4]
 80efb5c:	695b      	ldr	r3, [r3, #20]
 80efb5e:	021b      	lsls	r3, r3, #8
 80efb60:	496d      	ldr	r1, [pc, #436]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb62:	4313      	orrs	r3, r2
 80efb64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80efb66:	687b      	ldr	r3, [r7, #4]
 80efb68:	681b      	ldr	r3, [r3, #0]
 80efb6a:	f003 0308 	and.w	r3, r3, #8
 80efb6e:	2b00      	cmp	r3, #0
 80efb70:	d012      	beq.n	80efb98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80efb72:	687b      	ldr	r3, [r7, #4]
 80efb74:	691a      	ldr	r2, [r3, #16]
 80efb76:	4b68      	ldr	r3, [pc, #416]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb78:	6a1b      	ldr	r3, [r3, #32]
 80efb7a:	091b      	lsrs	r3, r3, #4
 80efb7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efb80:	429a      	cmp	r2, r3
 80efb82:	d909      	bls.n	80efb98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80efb84:	4b64      	ldr	r3, [pc, #400]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb86:	6a1b      	ldr	r3, [r3, #32]
 80efb88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80efb8c:	687b      	ldr	r3, [r7, #4]
 80efb8e:	691b      	ldr	r3, [r3, #16]
 80efb90:	011b      	lsls	r3, r3, #4
 80efb92:	4961      	ldr	r1, [pc, #388]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efb94:	4313      	orrs	r3, r2
 80efb96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80efb98:	687b      	ldr	r3, [r7, #4]
 80efb9a:	681b      	ldr	r3, [r3, #0]
 80efb9c:	f003 0304 	and.w	r3, r3, #4
 80efba0:	2b00      	cmp	r3, #0
 80efba2:	d010      	beq.n	80efbc6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80efba4:	687b      	ldr	r3, [r7, #4]
 80efba6:	68da      	ldr	r2, [r3, #12]
 80efba8:	4b5b      	ldr	r3, [pc, #364]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbaa:	6a1b      	ldr	r3, [r3, #32]
 80efbac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efbb0:	429a      	cmp	r2, r3
 80efbb2:	d908      	bls.n	80efbc6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80efbb4:	4b58      	ldr	r3, [pc, #352]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbb6:	6a1b      	ldr	r3, [r3, #32]
 80efbb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80efbbc:	687b      	ldr	r3, [r7, #4]
 80efbbe:	68db      	ldr	r3, [r3, #12]
 80efbc0:	4955      	ldr	r1, [pc, #340]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbc2:	4313      	orrs	r3, r2
 80efbc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80efbc6:	687b      	ldr	r3, [r7, #4]
 80efbc8:	681b      	ldr	r3, [r3, #0]
 80efbca:	f003 0302 	and.w	r3, r3, #2
 80efbce:	2b00      	cmp	r3, #0
 80efbd0:	d010      	beq.n	80efbf4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80efbd2:	687b      	ldr	r3, [r7, #4]
 80efbd4:	689a      	ldr	r2, [r3, #8]
 80efbd6:	4b50      	ldr	r3, [pc, #320]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbd8:	6a1b      	ldr	r3, [r3, #32]
 80efbda:	f003 030f 	and.w	r3, r3, #15
 80efbde:	429a      	cmp	r2, r3
 80efbe0:	d908      	bls.n	80efbf4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80efbe2:	4b4d      	ldr	r3, [pc, #308]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbe4:	6a1b      	ldr	r3, [r3, #32]
 80efbe6:	f023 020f 	bic.w	r2, r3, #15
 80efbea:	687b      	ldr	r3, [r7, #4]
 80efbec:	689b      	ldr	r3, [r3, #8]
 80efbee:	494a      	ldr	r1, [pc, #296]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efbf0:	4313      	orrs	r3, r2
 80efbf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80efbf4:	687b      	ldr	r3, [r7, #4]
 80efbf6:	681b      	ldr	r3, [r3, #0]
 80efbf8:	f003 0301 	and.w	r3, r3, #1
 80efbfc:	2b00      	cmp	r3, #0
 80efbfe:	f000 8093 	beq.w	80efd28 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80efc02:	687b      	ldr	r3, [r7, #4]
 80efc04:	685b      	ldr	r3, [r3, #4]
 80efc06:	2b03      	cmp	r3, #3
 80efc08:	d107      	bne.n	80efc1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80efc0a:	4b43      	ldr	r3, [pc, #268]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc0c:	681b      	ldr	r3, [r3, #0]
 80efc0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80efc12:	2b00      	cmp	r3, #0
 80efc14:	d121      	bne.n	80efc5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80efc16:	2301      	movs	r3, #1
 80efc18:	e113      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80efc1a:	687b      	ldr	r3, [r7, #4]
 80efc1c:	685b      	ldr	r3, [r3, #4]
 80efc1e:	2b02      	cmp	r3, #2
 80efc20:	d107      	bne.n	80efc32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80efc22:	4b3d      	ldr	r3, [pc, #244]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc24:	681b      	ldr	r3, [r3, #0]
 80efc26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80efc2a:	2b00      	cmp	r3, #0
 80efc2c:	d115      	bne.n	80efc5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80efc2e:	2301      	movs	r3, #1
 80efc30:	e107      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80efc32:	687b      	ldr	r3, [r7, #4]
 80efc34:	685b      	ldr	r3, [r3, #4]
 80efc36:	2b01      	cmp	r3, #1
 80efc38:	d107      	bne.n	80efc4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80efc3a:	4b37      	ldr	r3, [pc, #220]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc3c:	681b      	ldr	r3, [r3, #0]
 80efc3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80efc42:	2b00      	cmp	r3, #0
 80efc44:	d109      	bne.n	80efc5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80efc46:	2301      	movs	r3, #1
 80efc48:	e0fb      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80efc4a:	4b33      	ldr	r3, [pc, #204]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc4c:	681b      	ldr	r3, [r3, #0]
 80efc4e:	f003 0302 	and.w	r3, r3, #2
 80efc52:	2b00      	cmp	r3, #0
 80efc54:	d101      	bne.n	80efc5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80efc56:	2301      	movs	r3, #1
 80efc58:	e0f3      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80efc5a:	4b2f      	ldr	r3, [pc, #188]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc5c:	69db      	ldr	r3, [r3, #28]
 80efc5e:	f023 0203 	bic.w	r2, r3, #3
 80efc62:	687b      	ldr	r3, [r7, #4]
 80efc64:	685b      	ldr	r3, [r3, #4]
 80efc66:	492c      	ldr	r1, [pc, #176]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc68:	4313      	orrs	r3, r2
 80efc6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80efc6c:	f7fa fd72 	bl	80ea754 <HAL_GetTick>
 80efc70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80efc72:	687b      	ldr	r3, [r7, #4]
 80efc74:	685b      	ldr	r3, [r3, #4]
 80efc76:	2b03      	cmp	r3, #3
 80efc78:	d112      	bne.n	80efca0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80efc7a:	e00a      	b.n	80efc92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80efc7c:	f7fa fd6a 	bl	80ea754 <HAL_GetTick>
 80efc80:	4602      	mov	r2, r0
 80efc82:	68fb      	ldr	r3, [r7, #12]
 80efc84:	1ad3      	subs	r3, r2, r3
 80efc86:	f241 3288 	movw	r2, #5000	@ 0x1388
 80efc8a:	4293      	cmp	r3, r2
 80efc8c:	d901      	bls.n	80efc92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80efc8e:	2303      	movs	r3, #3
 80efc90:	e0d7      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80efc92:	4b21      	ldr	r3, [pc, #132]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efc94:	69db      	ldr	r3, [r3, #28]
 80efc96:	f003 0318 	and.w	r3, r3, #24
 80efc9a:	2b18      	cmp	r3, #24
 80efc9c:	d1ee      	bne.n	80efc7c <HAL_RCC_ClockConfig+0x18c>
 80efc9e:	e043      	b.n	80efd28 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80efca0:	687b      	ldr	r3, [r7, #4]
 80efca2:	685b      	ldr	r3, [r3, #4]
 80efca4:	2b02      	cmp	r3, #2
 80efca6:	d112      	bne.n	80efcce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80efca8:	e00a      	b.n	80efcc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80efcaa:	f7fa fd53 	bl	80ea754 <HAL_GetTick>
 80efcae:	4602      	mov	r2, r0
 80efcb0:	68fb      	ldr	r3, [r7, #12]
 80efcb2:	1ad3      	subs	r3, r2, r3
 80efcb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80efcb8:	4293      	cmp	r3, r2
 80efcba:	d901      	bls.n	80efcc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80efcbc:	2303      	movs	r3, #3
 80efcbe:	e0c0      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80efcc0:	4b15      	ldr	r3, [pc, #84]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efcc2:	69db      	ldr	r3, [r3, #28]
 80efcc4:	f003 0318 	and.w	r3, r3, #24
 80efcc8:	2b10      	cmp	r3, #16
 80efcca:	d1ee      	bne.n	80efcaa <HAL_RCC_ClockConfig+0x1ba>
 80efccc:	e02c      	b.n	80efd28 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80efcce:	687b      	ldr	r3, [r7, #4]
 80efcd0:	685b      	ldr	r3, [r3, #4]
 80efcd2:	2b01      	cmp	r3, #1
 80efcd4:	d122      	bne.n	80efd1c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80efcd6:	e00a      	b.n	80efcee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80efcd8:	f7fa fd3c 	bl	80ea754 <HAL_GetTick>
 80efcdc:	4602      	mov	r2, r0
 80efcde:	68fb      	ldr	r3, [r7, #12]
 80efce0:	1ad3      	subs	r3, r2, r3
 80efce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80efce6:	4293      	cmp	r3, r2
 80efce8:	d901      	bls.n	80efcee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80efcea:	2303      	movs	r3, #3
 80efcec:	e0a9      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80efcee:	4b0a      	ldr	r3, [pc, #40]	@ (80efd18 <HAL_RCC_ClockConfig+0x228>)
 80efcf0:	69db      	ldr	r3, [r3, #28]
 80efcf2:	f003 0318 	and.w	r3, r3, #24
 80efcf6:	2b08      	cmp	r3, #8
 80efcf8:	d1ee      	bne.n	80efcd8 <HAL_RCC_ClockConfig+0x1e8>
 80efcfa:	e015      	b.n	80efd28 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80efcfc:	f7fa fd2a 	bl	80ea754 <HAL_GetTick>
 80efd00:	4602      	mov	r2, r0
 80efd02:	68fb      	ldr	r3, [r7, #12]
 80efd04:	1ad3      	subs	r3, r2, r3
 80efd06:	f241 3288 	movw	r2, #5000	@ 0x1388
 80efd0a:	4293      	cmp	r3, r2
 80efd0c:	d906      	bls.n	80efd1c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80efd0e:	2303      	movs	r3, #3
 80efd10:	e097      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
 80efd12:	bf00      	nop
 80efd14:	40022000 	.word	0x40022000
 80efd18:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80efd1c:	4b4b      	ldr	r3, [pc, #300]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efd1e:	69db      	ldr	r3, [r3, #28]
 80efd20:	f003 0318 	and.w	r3, r3, #24
 80efd24:	2b00      	cmp	r3, #0
 80efd26:	d1e9      	bne.n	80efcfc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80efd28:	687b      	ldr	r3, [r7, #4]
 80efd2a:	681b      	ldr	r3, [r3, #0]
 80efd2c:	f003 0302 	and.w	r3, r3, #2
 80efd30:	2b00      	cmp	r3, #0
 80efd32:	d010      	beq.n	80efd56 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80efd34:	687b      	ldr	r3, [r7, #4]
 80efd36:	689a      	ldr	r2, [r3, #8]
 80efd38:	4b44      	ldr	r3, [pc, #272]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efd3a:	6a1b      	ldr	r3, [r3, #32]
 80efd3c:	f003 030f 	and.w	r3, r3, #15
 80efd40:	429a      	cmp	r2, r3
 80efd42:	d208      	bcs.n	80efd56 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80efd44:	4b41      	ldr	r3, [pc, #260]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efd46:	6a1b      	ldr	r3, [r3, #32]
 80efd48:	f023 020f 	bic.w	r2, r3, #15
 80efd4c:	687b      	ldr	r3, [r7, #4]
 80efd4e:	689b      	ldr	r3, [r3, #8]
 80efd50:	493e      	ldr	r1, [pc, #248]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efd52:	4313      	orrs	r3, r2
 80efd54:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80efd56:	4b3e      	ldr	r3, [pc, #248]	@ (80efe50 <HAL_RCC_ClockConfig+0x360>)
 80efd58:	681b      	ldr	r3, [r3, #0]
 80efd5a:	f003 030f 	and.w	r3, r3, #15
 80efd5e:	683a      	ldr	r2, [r7, #0]
 80efd60:	429a      	cmp	r2, r3
 80efd62:	d210      	bcs.n	80efd86 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80efd64:	4b3a      	ldr	r3, [pc, #232]	@ (80efe50 <HAL_RCC_ClockConfig+0x360>)
 80efd66:	681b      	ldr	r3, [r3, #0]
 80efd68:	f023 020f 	bic.w	r2, r3, #15
 80efd6c:	4938      	ldr	r1, [pc, #224]	@ (80efe50 <HAL_RCC_ClockConfig+0x360>)
 80efd6e:	683b      	ldr	r3, [r7, #0]
 80efd70:	4313      	orrs	r3, r2
 80efd72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80efd74:	4b36      	ldr	r3, [pc, #216]	@ (80efe50 <HAL_RCC_ClockConfig+0x360>)
 80efd76:	681b      	ldr	r3, [r3, #0]
 80efd78:	f003 030f 	and.w	r3, r3, #15
 80efd7c:	683a      	ldr	r2, [r7, #0]
 80efd7e:	429a      	cmp	r2, r3
 80efd80:	d001      	beq.n	80efd86 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80efd82:	2301      	movs	r3, #1
 80efd84:	e05d      	b.n	80efe42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80efd86:	687b      	ldr	r3, [r7, #4]
 80efd88:	681b      	ldr	r3, [r3, #0]
 80efd8a:	f003 0304 	and.w	r3, r3, #4
 80efd8e:	2b00      	cmp	r3, #0
 80efd90:	d010      	beq.n	80efdb4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80efd92:	687b      	ldr	r3, [r7, #4]
 80efd94:	68da      	ldr	r2, [r3, #12]
 80efd96:	4b2d      	ldr	r3, [pc, #180]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efd98:	6a1b      	ldr	r3, [r3, #32]
 80efd9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efd9e:	429a      	cmp	r2, r3
 80efda0:	d208      	bcs.n	80efdb4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80efda2:	4b2a      	ldr	r3, [pc, #168]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efda4:	6a1b      	ldr	r3, [r3, #32]
 80efda6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80efdaa:	687b      	ldr	r3, [r7, #4]
 80efdac:	68db      	ldr	r3, [r3, #12]
 80efdae:	4927      	ldr	r1, [pc, #156]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efdb0:	4313      	orrs	r3, r2
 80efdb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80efdb4:	687b      	ldr	r3, [r7, #4]
 80efdb6:	681b      	ldr	r3, [r3, #0]
 80efdb8:	f003 0308 	and.w	r3, r3, #8
 80efdbc:	2b00      	cmp	r3, #0
 80efdbe:	d012      	beq.n	80efde6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80efdc0:	687b      	ldr	r3, [r7, #4]
 80efdc2:	691a      	ldr	r2, [r3, #16]
 80efdc4:	4b21      	ldr	r3, [pc, #132]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efdc6:	6a1b      	ldr	r3, [r3, #32]
 80efdc8:	091b      	lsrs	r3, r3, #4
 80efdca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efdce:	429a      	cmp	r2, r3
 80efdd0:	d209      	bcs.n	80efde6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80efdd2:	4b1e      	ldr	r3, [pc, #120]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efdd4:	6a1b      	ldr	r3, [r3, #32]
 80efdd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80efdda:	687b      	ldr	r3, [r7, #4]
 80efddc:	691b      	ldr	r3, [r3, #16]
 80efdde:	011b      	lsls	r3, r3, #4
 80efde0:	491a      	ldr	r1, [pc, #104]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efde2:	4313      	orrs	r3, r2
 80efde4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80efde6:	687b      	ldr	r3, [r7, #4]
 80efde8:	681b      	ldr	r3, [r3, #0]
 80efdea:	f003 0310 	and.w	r3, r3, #16
 80efdee:	2b00      	cmp	r3, #0
 80efdf0:	d012      	beq.n	80efe18 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80efdf2:	687b      	ldr	r3, [r7, #4]
 80efdf4:	695a      	ldr	r2, [r3, #20]
 80efdf6:	4b15      	ldr	r3, [pc, #84]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efdf8:	6a1b      	ldr	r3, [r3, #32]
 80efdfa:	0a1b      	lsrs	r3, r3, #8
 80efdfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80efe00:	429a      	cmp	r2, r3
 80efe02:	d209      	bcs.n	80efe18 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80efe04:	4b11      	ldr	r3, [pc, #68]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efe06:	6a1b      	ldr	r3, [r3, #32]
 80efe08:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80efe0c:	687b      	ldr	r3, [r7, #4]
 80efe0e:	695b      	ldr	r3, [r3, #20]
 80efe10:	021b      	lsls	r3, r3, #8
 80efe12:	490e      	ldr	r1, [pc, #56]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efe14:	4313      	orrs	r3, r2
 80efe16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80efe18:	f000 f822 	bl	80efe60 <HAL_RCC_GetSysClockFreq>
 80efe1c:	4602      	mov	r2, r0
 80efe1e:	4b0b      	ldr	r3, [pc, #44]	@ (80efe4c <HAL_RCC_ClockConfig+0x35c>)
 80efe20:	6a1b      	ldr	r3, [r3, #32]
 80efe22:	f003 030f 	and.w	r3, r3, #15
 80efe26:	490b      	ldr	r1, [pc, #44]	@ (80efe54 <HAL_RCC_ClockConfig+0x364>)
 80efe28:	5ccb      	ldrb	r3, [r1, r3]
 80efe2a:	fa22 f303 	lsr.w	r3, r2, r3
 80efe2e:	4a0a      	ldr	r2, [pc, #40]	@ (80efe58 <HAL_RCC_ClockConfig+0x368>)
 80efe30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80efe32:	4b0a      	ldr	r3, [pc, #40]	@ (80efe5c <HAL_RCC_ClockConfig+0x36c>)
 80efe34:	681b      	ldr	r3, [r3, #0]
 80efe36:	4618      	mov	r0, r3
 80efe38:	f7fa fc02 	bl	80ea640 <HAL_InitTick>
 80efe3c:	4603      	mov	r3, r0
 80efe3e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80efe40:	7afb      	ldrb	r3, [r7, #11]
}
 80efe42:	4618      	mov	r0, r3
 80efe44:	3710      	adds	r7, #16
 80efe46:	46bd      	mov	sp, r7
 80efe48:	bd80      	pop	{r7, pc}
 80efe4a:	bf00      	nop
 80efe4c:	44020c00 	.word	0x44020c00
 80efe50:	40022000 	.word	0x40022000
 80efe54:	080fae3c 	.word	0x080fae3c
 80efe58:	20000000 	.word	0x20000000
 80efe5c:	20000004 	.word	0x20000004

080efe60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80efe60:	b480      	push	{r7}
 80efe62:	b089      	sub	sp, #36	@ 0x24
 80efe64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80efe66:	4b8c      	ldr	r3, [pc, #560]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efe68:	69db      	ldr	r3, [r3, #28]
 80efe6a:	f003 0318 	and.w	r3, r3, #24
 80efe6e:	2b08      	cmp	r3, #8
 80efe70:	d102      	bne.n	80efe78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80efe72:	4b8a      	ldr	r3, [pc, #552]	@ (80f009c <HAL_RCC_GetSysClockFreq+0x23c>)
 80efe74:	61fb      	str	r3, [r7, #28]
 80efe76:	e107      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80efe78:	4b87      	ldr	r3, [pc, #540]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efe7a:	69db      	ldr	r3, [r3, #28]
 80efe7c:	f003 0318 	and.w	r3, r3, #24
 80efe80:	2b00      	cmp	r3, #0
 80efe82:	d112      	bne.n	80efeaa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80efe84:	4b84      	ldr	r3, [pc, #528]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efe86:	681b      	ldr	r3, [r3, #0]
 80efe88:	f003 0320 	and.w	r3, r3, #32
 80efe8c:	2b00      	cmp	r3, #0
 80efe8e:	d009      	beq.n	80efea4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80efe90:	4b81      	ldr	r3, [pc, #516]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efe92:	681b      	ldr	r3, [r3, #0]
 80efe94:	08db      	lsrs	r3, r3, #3
 80efe96:	f003 0303 	and.w	r3, r3, #3
 80efe9a:	4a81      	ldr	r2, [pc, #516]	@ (80f00a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80efe9c:	fa22 f303 	lsr.w	r3, r2, r3
 80efea0:	61fb      	str	r3, [r7, #28]
 80efea2:	e0f1      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80efea4:	4b7e      	ldr	r3, [pc, #504]	@ (80f00a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80efea6:	61fb      	str	r3, [r7, #28]
 80efea8:	e0ee      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80efeaa:	4b7b      	ldr	r3, [pc, #492]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efeac:	69db      	ldr	r3, [r3, #28]
 80efeae:	f003 0318 	and.w	r3, r3, #24
 80efeb2:	2b10      	cmp	r3, #16
 80efeb4:	d102      	bne.n	80efebc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80efeb6:	4b7b      	ldr	r3, [pc, #492]	@ (80f00a4 <HAL_RCC_GetSysClockFreq+0x244>)
 80efeb8:	61fb      	str	r3, [r7, #28]
 80efeba:	e0e5      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80efebc:	4b76      	ldr	r3, [pc, #472]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efebe:	69db      	ldr	r3, [r3, #28]
 80efec0:	f003 0318 	and.w	r3, r3, #24
 80efec4:	2b18      	cmp	r3, #24
 80efec6:	f040 80dd 	bne.w	80f0084 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80efeca:	4b73      	ldr	r3, [pc, #460]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efece:	f003 0303 	and.w	r3, r3, #3
 80efed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80efed4:	4b70      	ldr	r3, [pc, #448]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efed8:	0a1b      	lsrs	r3, r3, #8
 80efeda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80efede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80efee0:	4b6d      	ldr	r3, [pc, #436]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80efee4:	091b      	lsrs	r3, r3, #4
 80efee6:	f003 0301 	and.w	r3, r3, #1
 80efeea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80efeec:	4b6a      	ldr	r3, [pc, #424]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80efeee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80efef0:	08db      	lsrs	r3, r3, #3
 80efef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80efef6:	68fa      	ldr	r2, [r7, #12]
 80efef8:	fb02 f303 	mul.w	r3, r2, r3
 80efefc:	ee07 3a90 	vmov	s15, r3
 80eff00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80eff04:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80eff08:	693b      	ldr	r3, [r7, #16]
 80eff0a:	2b00      	cmp	r3, #0
 80eff0c:	f000 80b7 	beq.w	80f007e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80eff10:	697b      	ldr	r3, [r7, #20]
 80eff12:	2b01      	cmp	r3, #1
 80eff14:	d003      	beq.n	80eff1e <HAL_RCC_GetSysClockFreq+0xbe>
 80eff16:	697b      	ldr	r3, [r7, #20]
 80eff18:	2b03      	cmp	r3, #3
 80eff1a:	d056      	beq.n	80effca <HAL_RCC_GetSysClockFreq+0x16a>
 80eff1c:	e077      	b.n	80f000e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80eff1e:	4b5e      	ldr	r3, [pc, #376]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80eff20:	681b      	ldr	r3, [r3, #0]
 80eff22:	f003 0320 	and.w	r3, r3, #32
 80eff26:	2b00      	cmp	r3, #0
 80eff28:	d02d      	beq.n	80eff86 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80eff2a:	4b5b      	ldr	r3, [pc, #364]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80eff2c:	681b      	ldr	r3, [r3, #0]
 80eff2e:	08db      	lsrs	r3, r3, #3
 80eff30:	f003 0303 	and.w	r3, r3, #3
 80eff34:	4a5a      	ldr	r2, [pc, #360]	@ (80f00a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80eff36:	fa22 f303 	lsr.w	r3, r2, r3
 80eff3a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80eff3c:	687b      	ldr	r3, [r7, #4]
 80eff3e:	ee07 3a90 	vmov	s15, r3
 80eff42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80eff46:	693b      	ldr	r3, [r7, #16]
 80eff48:	ee07 3a90 	vmov	s15, r3
 80eff4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80eff50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80eff54:	4b50      	ldr	r3, [pc, #320]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80eff56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80eff58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80eff5c:	ee07 3a90 	vmov	s15, r3
 80eff60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80eff64:	ed97 6a02 	vldr	s12, [r7, #8]
 80eff68:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80f00a8 <HAL_RCC_GetSysClockFreq+0x248>
 80eff6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80eff70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80eff74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80eff78:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80eff7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80eff80:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80eff84:	e065      	b.n	80f0052 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80eff86:	693b      	ldr	r3, [r7, #16]
 80eff88:	ee07 3a90 	vmov	s15, r3
 80eff8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80eff90:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80f00ac <HAL_RCC_GetSysClockFreq+0x24c>
 80eff94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80eff98:	4b3f      	ldr	r3, [pc, #252]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80eff9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80eff9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80effa0:	ee07 3a90 	vmov	s15, r3
 80effa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80effa8:	ed97 6a02 	vldr	s12, [r7, #8]
 80effac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80f00a8 <HAL_RCC_GetSysClockFreq+0x248>
 80effb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80effb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80effb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80effbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80effc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80effc4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80effc8:	e043      	b.n	80f0052 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80effca:	693b      	ldr	r3, [r7, #16]
 80effcc:	ee07 3a90 	vmov	s15, r3
 80effd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80effd4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80f00b0 <HAL_RCC_GetSysClockFreq+0x250>
 80effd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80effdc:	4b2e      	ldr	r3, [pc, #184]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80effde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80effe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80effe4:	ee07 3a90 	vmov	s15, r3
 80effe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80effec:	ed97 6a02 	vldr	s12, [r7, #8]
 80efff0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80f00a8 <HAL_RCC_GetSysClockFreq+0x248>
 80efff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80efff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80efffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80f0000:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80f0004:	ee67 7a27 	vmul.f32	s15, s14, s15
 80f0008:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80f000c:	e021      	b.n	80f0052 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80f000e:	693b      	ldr	r3, [r7, #16]
 80f0010:	ee07 3a90 	vmov	s15, r3
 80f0014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80f0018:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80f00b4 <HAL_RCC_GetSysClockFreq+0x254>
 80f001c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80f0020:	4b1d      	ldr	r3, [pc, #116]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80f0022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f0024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80f0028:	ee07 3a90 	vmov	s15, r3
 80f002c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80f0030:	ed97 6a02 	vldr	s12, [r7, #8]
 80f0034:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80f00a8 <HAL_RCC_GetSysClockFreq+0x248>
 80f0038:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80f003c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80f0040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80f0044:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80f0048:	ee67 7a27 	vmul.f32	s15, s14, s15
 80f004c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80f0050:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80f0052:	4b11      	ldr	r3, [pc, #68]	@ (80f0098 <HAL_RCC_GetSysClockFreq+0x238>)
 80f0054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f0056:	0a5b      	lsrs	r3, r3, #9
 80f0058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80f005c:	3301      	adds	r3, #1
 80f005e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80f0060:	683b      	ldr	r3, [r7, #0]
 80f0062:	ee07 3a90 	vmov	s15, r3
 80f0066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80f006a:	edd7 6a06 	vldr	s13, [r7, #24]
 80f006e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80f0072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80f0076:	ee17 3a90 	vmov	r3, s15
 80f007a:	61fb      	str	r3, [r7, #28]
 80f007c:	e004      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80f007e:	2300      	movs	r3, #0
 80f0080:	61fb      	str	r3, [r7, #28]
 80f0082:	e001      	b.n	80f0088 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80f0084:	4b06      	ldr	r3, [pc, #24]	@ (80f00a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80f0086:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80f0088:	69fb      	ldr	r3, [r7, #28]
}
 80f008a:	4618      	mov	r0, r3
 80f008c:	3724      	adds	r7, #36	@ 0x24
 80f008e:	46bd      	mov	sp, r7
 80f0090:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f0094:	4770      	bx	lr
 80f0096:	bf00      	nop
 80f0098:	44020c00 	.word	0x44020c00
 80f009c:	003d0900 	.word	0x003d0900
 80f00a0:	03d09000 	.word	0x03d09000
 80f00a4:	017d7840 	.word	0x017d7840
 80f00a8:	46000000 	.word	0x46000000
 80f00ac:	4c742400 	.word	0x4c742400
 80f00b0:	4bbebc20 	.word	0x4bbebc20
 80f00b4:	4a742400 	.word	0x4a742400

080f00b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80f00b8:	b580      	push	{r7, lr}
 80f00ba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80f00bc:	f7ff fed0 	bl	80efe60 <HAL_RCC_GetSysClockFreq>
 80f00c0:	4602      	mov	r2, r0
 80f00c2:	4b08      	ldr	r3, [pc, #32]	@ (80f00e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80f00c4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80f00c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80f00ca:	4907      	ldr	r1, [pc, #28]	@ (80f00e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80f00cc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80f00ce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80f00d2:	fa22 f303 	lsr.w	r3, r2, r3
 80f00d6:	4a05      	ldr	r2, [pc, #20]	@ (80f00ec <HAL_RCC_GetHCLKFreq+0x34>)
 80f00d8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80f00da:	4b04      	ldr	r3, [pc, #16]	@ (80f00ec <HAL_RCC_GetHCLKFreq+0x34>)
 80f00dc:	681b      	ldr	r3, [r3, #0]
}
 80f00de:	4618      	mov	r0, r3
 80f00e0:	bd80      	pop	{r7, pc}
 80f00e2:	bf00      	nop
 80f00e4:	44020c00 	.word	0x44020c00
 80f00e8:	080fae3c 	.word	0x080fae3c
 80f00ec:	20000000 	.word	0x20000000

080f00f0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80f00f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80f00f4:	b0d8      	sub	sp, #352	@ 0x160
 80f00f6:	af00      	add	r7, sp, #0
 80f00f8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80f00fc:	2300      	movs	r3, #0
 80f00fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80f0102:	2300      	movs	r3, #0
 80f0104:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80f0108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0110:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80f0114:	2500      	movs	r5, #0
 80f0116:	ea54 0305 	orrs.w	r3, r4, r5
 80f011a:	d00b      	beq.n	80f0134 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80f011c:	4bcd      	ldr	r3, [pc, #820]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f011e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f0122:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80f0126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f012a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80f012c:	4ac9      	ldr	r2, [pc, #804]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f012e:	430b      	orrs	r3, r1
 80f0130:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80f0134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0138:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f013c:	f002 0801 	and.w	r8, r2, #1
 80f0140:	f04f 0900 	mov.w	r9, #0
 80f0144:	ea58 0309 	orrs.w	r3, r8, r9
 80f0148:	d042      	beq.n	80f01d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80f014a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f014e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80f0150:	2b05      	cmp	r3, #5
 80f0152:	d823      	bhi.n	80f019c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80f0154:	a201      	add	r2, pc, #4	@ (adr r2, 80f015c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80f0156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f015a:	bf00      	nop
 80f015c:	080f01a5 	.word	0x080f01a5
 80f0160:	080f0175 	.word	0x080f0175
 80f0164:	080f0189 	.word	0x080f0189
 80f0168:	080f01a5 	.word	0x080f01a5
 80f016c:	080f01a5 	.word	0x080f01a5
 80f0170:	080f01a5 	.word	0x080f01a5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0178:	3308      	adds	r3, #8
 80f017a:	4618      	mov	r0, r3
 80f017c:	f001 ff42 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0180:	4603      	mov	r3, r0
 80f0182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80f0186:	e00e      	b.n	80f01a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f018c:	3330      	adds	r3, #48	@ 0x30
 80f018e:	4618      	mov	r0, r3
 80f0190:	f001 ffd0 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0194:	4603      	mov	r3, r0
 80f0196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80f019a:	e004      	b.n	80f01a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f019c:	2301      	movs	r3, #1
 80f019e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f01a2:	e000      	b.n	80f01a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80f01a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f01a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f01aa:	2b00      	cmp	r3, #0
 80f01ac:	d10c      	bne.n	80f01c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80f01ae:	4ba9      	ldr	r3, [pc, #676]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f01b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f01b4:	f023 0107 	bic.w	r1, r3, #7
 80f01b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f01bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80f01be:	4aa5      	ldr	r2, [pc, #660]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f01c0:	430b      	orrs	r3, r1
 80f01c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f01c6:	e003      	b.n	80f01d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f01c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f01cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80f01d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f01d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f01d8:	f002 0a02 	and.w	sl, r2, #2
 80f01dc:	f04f 0b00 	mov.w	fp, #0
 80f01e0:	ea5a 030b 	orrs.w	r3, sl, fp
 80f01e4:	f000 8088 	beq.w	80f02f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80f01e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f01ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80f01ee:	2b28      	cmp	r3, #40	@ 0x28
 80f01f0:	d868      	bhi.n	80f02c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80f01f2:	a201      	add	r2, pc, #4	@ (adr r2, 80f01f8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80f01f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f01f8:	080f02cd 	.word	0x080f02cd
 80f01fc:	080f02c5 	.word	0x080f02c5
 80f0200:	080f02c5 	.word	0x080f02c5
 80f0204:	080f02c5 	.word	0x080f02c5
 80f0208:	080f02c5 	.word	0x080f02c5
 80f020c:	080f02c5 	.word	0x080f02c5
 80f0210:	080f02c5 	.word	0x080f02c5
 80f0214:	080f02c5 	.word	0x080f02c5
 80f0218:	080f029d 	.word	0x080f029d
 80f021c:	080f02c5 	.word	0x080f02c5
 80f0220:	080f02c5 	.word	0x080f02c5
 80f0224:	080f02c5 	.word	0x080f02c5
 80f0228:	080f02c5 	.word	0x080f02c5
 80f022c:	080f02c5 	.word	0x080f02c5
 80f0230:	080f02c5 	.word	0x080f02c5
 80f0234:	080f02c5 	.word	0x080f02c5
 80f0238:	080f02b1 	.word	0x080f02b1
 80f023c:	080f02c5 	.word	0x080f02c5
 80f0240:	080f02c5 	.word	0x080f02c5
 80f0244:	080f02c5 	.word	0x080f02c5
 80f0248:	080f02c5 	.word	0x080f02c5
 80f024c:	080f02c5 	.word	0x080f02c5
 80f0250:	080f02c5 	.word	0x080f02c5
 80f0254:	080f02c5 	.word	0x080f02c5
 80f0258:	080f02cd 	.word	0x080f02cd
 80f025c:	080f02c5 	.word	0x080f02c5
 80f0260:	080f02c5 	.word	0x080f02c5
 80f0264:	080f02c5 	.word	0x080f02c5
 80f0268:	080f02c5 	.word	0x080f02c5
 80f026c:	080f02c5 	.word	0x080f02c5
 80f0270:	080f02c5 	.word	0x080f02c5
 80f0274:	080f02c5 	.word	0x080f02c5
 80f0278:	080f02cd 	.word	0x080f02cd
 80f027c:	080f02c5 	.word	0x080f02c5
 80f0280:	080f02c5 	.word	0x080f02c5
 80f0284:	080f02c5 	.word	0x080f02c5
 80f0288:	080f02c5 	.word	0x080f02c5
 80f028c:	080f02c5 	.word	0x080f02c5
 80f0290:	080f02c5 	.word	0x080f02c5
 80f0294:	080f02c5 	.word	0x080f02c5
 80f0298:	080f02cd 	.word	0x080f02cd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f029c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f02a0:	3308      	adds	r3, #8
 80f02a2:	4618      	mov	r0, r3
 80f02a4:	f001 feae 	bl	80f2004 <RCCEx_PLL2_Config>
 80f02a8:	4603      	mov	r3, r0
 80f02aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80f02ae:	e00e      	b.n	80f02ce <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f02b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f02b4:	3330      	adds	r3, #48	@ 0x30
 80f02b6:	4618      	mov	r0, r3
 80f02b8:	f001 ff3c 	bl	80f2134 <RCCEx_PLL3_Config>
 80f02bc:	4603      	mov	r3, r0
 80f02be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80f02c2:	e004      	b.n	80f02ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f02c4:	2301      	movs	r3, #1
 80f02c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f02ca:	e000      	b.n	80f02ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80f02cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f02ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f02d2:	2b00      	cmp	r3, #0
 80f02d4:	d10c      	bne.n	80f02f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80f02d6:	4b5f      	ldr	r3, [pc, #380]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f02d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f02dc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80f02e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f02e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80f02e6:	4a5b      	ldr	r2, [pc, #364]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f02e8:	430b      	orrs	r3, r1
 80f02ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f02ee:	e003      	b.n	80f02f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f02f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f02f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80f02f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f02fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0300:	f002 0304 	and.w	r3, r2, #4
 80f0304:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80f0308:	2300      	movs	r3, #0
 80f030a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80f030e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80f0312:	460b      	mov	r3, r1
 80f0314:	4313      	orrs	r3, r2
 80f0316:	d04e      	beq.n	80f03b6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80f0318:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f031c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80f031e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80f0322:	d02c      	beq.n	80f037e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80f0324:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80f0328:	d825      	bhi.n	80f0376 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80f032a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f032e:	d028      	beq.n	80f0382 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80f0330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f0334:	d81f      	bhi.n	80f0376 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80f0336:	2bc0      	cmp	r3, #192	@ 0xc0
 80f0338:	d025      	beq.n	80f0386 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80f033a:	2bc0      	cmp	r3, #192	@ 0xc0
 80f033c:	d81b      	bhi.n	80f0376 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80f033e:	2b80      	cmp	r3, #128	@ 0x80
 80f0340:	d00f      	beq.n	80f0362 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80f0342:	2b80      	cmp	r3, #128	@ 0x80
 80f0344:	d817      	bhi.n	80f0376 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80f0346:	2b00      	cmp	r3, #0
 80f0348:	d01f      	beq.n	80f038a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80f034a:	2b40      	cmp	r3, #64	@ 0x40
 80f034c:	d113      	bne.n	80f0376 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f034e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0352:	3308      	adds	r3, #8
 80f0354:	4618      	mov	r0, r3
 80f0356:	f001 fe55 	bl	80f2004 <RCCEx_PLL2_Config>
 80f035a:	4603      	mov	r3, r0
 80f035c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80f0360:	e014      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0366:	3330      	adds	r3, #48	@ 0x30
 80f0368:	4618      	mov	r0, r3
 80f036a:	f001 fee3 	bl	80f2134 <RCCEx_PLL3_Config>
 80f036e:	4603      	mov	r3, r0
 80f0370:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80f0374:	e00a      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0376:	2301      	movs	r3, #1
 80f0378:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f037c:	e006      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80f037e:	bf00      	nop
 80f0380:	e004      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80f0382:	bf00      	nop
 80f0384:	e002      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80f0386:	bf00      	nop
 80f0388:	e000      	b.n	80f038c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80f038a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f038c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0390:	2b00      	cmp	r3, #0
 80f0392:	d10c      	bne.n	80f03ae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80f0394:	4b2f      	ldr	r3, [pc, #188]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f0396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f039a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80f039e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f03a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80f03a4:	4a2b      	ldr	r2, [pc, #172]	@ (80f0454 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80f03a6:	430b      	orrs	r3, r1
 80f03a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f03ac:	e003      	b.n	80f03b6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f03ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f03b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80f03b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f03ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f03be:	f002 0308 	and.w	r3, r2, #8
 80f03c2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80f03c6:	2300      	movs	r3, #0
 80f03c8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80f03cc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80f03d0:	460b      	mov	r3, r1
 80f03d2:	4313      	orrs	r3, r2
 80f03d4:	d056      	beq.n	80f0484 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80f03d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f03da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f03dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80f03e0:	d031      	beq.n	80f0446 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80f03e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80f03e6:	d82a      	bhi.n	80f043e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80f03e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80f03ec:	d02d      	beq.n	80f044a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80f03ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80f03f2:	d824      	bhi.n	80f043e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80f03f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80f03f8:	d029      	beq.n	80f044e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80f03fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80f03fe:	d81e      	bhi.n	80f043e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80f0400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f0404:	d011      	beq.n	80f042a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80f0406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f040a:	d818      	bhi.n	80f043e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80f040c:	2b00      	cmp	r3, #0
 80f040e:	d023      	beq.n	80f0458 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80f0410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f0414:	d113      	bne.n	80f043e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0416:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f041a:	3308      	adds	r3, #8
 80f041c:	4618      	mov	r0, r3
 80f041e:	f001 fdf1 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0422:	4603      	mov	r3, r0
 80f0424:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80f0428:	e017      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f042a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f042e:	3330      	adds	r3, #48	@ 0x30
 80f0430:	4618      	mov	r0, r3
 80f0432:	f001 fe7f 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0436:	4603      	mov	r3, r0
 80f0438:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80f043c:	e00d      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f043e:	2301      	movs	r3, #1
 80f0440:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0444:	e009      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80f0446:	bf00      	nop
 80f0448:	e007      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80f044a:	bf00      	nop
 80f044c:	e005      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80f044e:	bf00      	nop
 80f0450:	e003      	b.n	80f045a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80f0452:	bf00      	nop
 80f0454:	44020c00 	.word	0x44020c00
        break;
 80f0458:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f045a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f045e:	2b00      	cmp	r3, #0
 80f0460:	d10c      	bne.n	80f047c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80f0462:	4bbb      	ldr	r3, [pc, #748]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f0464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f0468:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80f046c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f0472:	4ab7      	ldr	r2, [pc, #732]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f0474:	430b      	orrs	r3, r1
 80f0476:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f047a:	e003      	b.n	80f0484 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f047c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0480:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80f0484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0488:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f048c:	f002 0310 	and.w	r3, r2, #16
 80f0490:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80f0494:	2300      	movs	r3, #0
 80f0496:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80f049a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80f049e:	460b      	mov	r3, r1
 80f04a0:	4313      	orrs	r3, r2
 80f04a2:	d053      	beq.n	80f054c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80f04a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f04a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80f04aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f04ae:	d031      	beq.n	80f0514 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80f04b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f04b4:	d82a      	bhi.n	80f050c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80f04b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f04ba:	d02d      	beq.n	80f0518 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80f04bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f04c0:	d824      	bhi.n	80f050c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80f04c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f04c6:	d029      	beq.n	80f051c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80f04c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f04cc:	d81e      	bhi.n	80f050c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80f04ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f04d2:	d011      	beq.n	80f04f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80f04d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f04d8:	d818      	bhi.n	80f050c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80f04da:	2b00      	cmp	r3, #0
 80f04dc:	d020      	beq.n	80f0520 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80f04de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80f04e2:	d113      	bne.n	80f050c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f04e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f04e8:	3308      	adds	r3, #8
 80f04ea:	4618      	mov	r0, r3
 80f04ec:	f001 fd8a 	bl	80f2004 <RCCEx_PLL2_Config>
 80f04f0:	4603      	mov	r3, r0
 80f04f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80f04f6:	e014      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f04f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f04fc:	3330      	adds	r3, #48	@ 0x30
 80f04fe:	4618      	mov	r0, r3
 80f0500:	f001 fe18 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0504:	4603      	mov	r3, r0
 80f0506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80f050a:	e00a      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f050c:	2301      	movs	r3, #1
 80f050e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0512:	e006      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80f0514:	bf00      	nop
 80f0516:	e004      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80f0518:	bf00      	nop
 80f051a:	e002      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80f051c:	bf00      	nop
 80f051e:	e000      	b.n	80f0522 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80f0520:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0522:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0526:	2b00      	cmp	r3, #0
 80f0528:	d10c      	bne.n	80f0544 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80f052a:	4b89      	ldr	r3, [pc, #548]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f052c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f0530:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80f0534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80f053a:	4a85      	ldr	r2, [pc, #532]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f053c:	430b      	orrs	r3, r1
 80f053e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f0542:	e003      	b.n	80f054c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0544:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0548:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80f054c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0550:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0554:	f002 0320 	and.w	r3, r2, #32
 80f0558:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80f055c:	2300      	movs	r3, #0
 80f055e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80f0562:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80f0566:	460b      	mov	r3, r1
 80f0568:	4313      	orrs	r3, r2
 80f056a:	d053      	beq.n	80f0614 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80f056c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80f0572:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80f0576:	d031      	beq.n	80f05dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80f0578:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80f057c:	d82a      	bhi.n	80f05d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80f057e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f0582:	d02d      	beq.n	80f05e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80f0584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f0588:	d824      	bhi.n	80f05d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80f058a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80f058e:	d029      	beq.n	80f05e4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80f0590:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80f0594:	d81e      	bhi.n	80f05d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80f0596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f059a:	d011      	beq.n	80f05c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80f059c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f05a0:	d818      	bhi.n	80f05d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80f05a2:	2b00      	cmp	r3, #0
 80f05a4:	d020      	beq.n	80f05e8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80f05a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80f05aa:	d113      	bne.n	80f05d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f05ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f05b0:	3308      	adds	r3, #8
 80f05b2:	4618      	mov	r0, r3
 80f05b4:	f001 fd26 	bl	80f2004 <RCCEx_PLL2_Config>
 80f05b8:	4603      	mov	r3, r0
 80f05ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80f05be:	e014      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f05c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f05c4:	3330      	adds	r3, #48	@ 0x30
 80f05c6:	4618      	mov	r0, r3
 80f05c8:	f001 fdb4 	bl	80f2134 <RCCEx_PLL3_Config>
 80f05cc:	4603      	mov	r3, r0
 80f05ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80f05d2:	e00a      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f05d4:	2301      	movs	r3, #1
 80f05d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f05da:	e006      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80f05dc:	bf00      	nop
 80f05de:	e004      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80f05e0:	bf00      	nop
 80f05e2:	e002      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80f05e4:	bf00      	nop
 80f05e6:	e000      	b.n	80f05ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80f05e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f05ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f05ee:	2b00      	cmp	r3, #0
 80f05f0:	d10c      	bne.n	80f060c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80f05f2:	4b57      	ldr	r3, [pc, #348]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f05f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f05f8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80f05fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80f0602:	4a53      	ldr	r2, [pc, #332]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f0604:	430b      	orrs	r3, r1
 80f0606:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f060a:	e003      	b.n	80f0614 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f060c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0610:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80f0614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0618:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f061c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80f0620:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80f0624:	2300      	movs	r3, #0
 80f0626:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80f062a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80f062e:	460b      	mov	r3, r1
 80f0630:	4313      	orrs	r3, r2
 80f0632:	d053      	beq.n	80f06dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80f0634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80f063a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80f063e:	d031      	beq.n	80f06a4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80f0640:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80f0644:	d82a      	bhi.n	80f069c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80f0646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f064a:	d02d      	beq.n	80f06a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80f064c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f0650:	d824      	bhi.n	80f069c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80f0652:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80f0656:	d029      	beq.n	80f06ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80f0658:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80f065c:	d81e      	bhi.n	80f069c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80f065e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80f0662:	d011      	beq.n	80f0688 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80f0664:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80f0668:	d818      	bhi.n	80f069c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80f066a:	2b00      	cmp	r3, #0
 80f066c:	d020      	beq.n	80f06b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80f066e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f0672:	d113      	bne.n	80f069c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0674:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0678:	3308      	adds	r3, #8
 80f067a:	4618      	mov	r0, r3
 80f067c:	f001 fcc2 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0680:	4603      	mov	r3, r0
 80f0682:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80f0686:	e014      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f068c:	3330      	adds	r3, #48	@ 0x30
 80f068e:	4618      	mov	r0, r3
 80f0690:	f001 fd50 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0694:	4603      	mov	r3, r0
 80f0696:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80f069a:	e00a      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f069c:	2301      	movs	r3, #1
 80f069e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f06a2:	e006      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80f06a4:	bf00      	nop
 80f06a6:	e004      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80f06a8:	bf00      	nop
 80f06aa:	e002      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80f06ac:	bf00      	nop
 80f06ae:	e000      	b.n	80f06b2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80f06b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f06b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f06b6:	2b00      	cmp	r3, #0
 80f06b8:	d10c      	bne.n	80f06d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80f06ba:	4b25      	ldr	r3, [pc, #148]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f06bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f06c0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80f06c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f06c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80f06ca:	4a21      	ldr	r2, [pc, #132]	@ (80f0750 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80f06cc:	430b      	orrs	r3, r1
 80f06ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f06d2:	e003      	b.n	80f06dc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f06d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f06d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80f06dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f06e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f06e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80f06e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80f06ec:	2300      	movs	r3, #0
 80f06ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80f06f2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80f06f6:	460b      	mov	r3, r1
 80f06f8:	4313      	orrs	r3, r2
 80f06fa:	d055      	beq.n	80f07a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80f06fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f0702:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80f0706:	d033      	beq.n	80f0770 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80f0708:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80f070c:	d82c      	bhi.n	80f0768 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80f070e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80f0712:	d02f      	beq.n	80f0774 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80f0714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80f0718:	d826      	bhi.n	80f0768 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80f071a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80f071e:	d02b      	beq.n	80f0778 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80f0720:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80f0724:	d820      	bhi.n	80f0768 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80f0726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f072a:	d013      	beq.n	80f0754 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80f072c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f0730:	d81a      	bhi.n	80f0768 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80f0732:	2b00      	cmp	r3, #0
 80f0734:	d022      	beq.n	80f077c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80f0736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f073a:	d115      	bne.n	80f0768 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f073c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0740:	3308      	adds	r3, #8
 80f0742:	4618      	mov	r0, r3
 80f0744:	f001 fc5e 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0748:	4603      	mov	r3, r0
 80f074a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80f074e:	e016      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80f0750:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0758:	3330      	adds	r3, #48	@ 0x30
 80f075a:	4618      	mov	r0, r3
 80f075c:	f001 fcea 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0760:	4603      	mov	r3, r0
 80f0762:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80f0766:	e00a      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0768:	2301      	movs	r3, #1
 80f076a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f076e:	e006      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80f0770:	bf00      	nop
 80f0772:	e004      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80f0774:	bf00      	nop
 80f0776:	e002      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80f0778:	bf00      	nop
 80f077a:	e000      	b.n	80f077e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80f077c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f077e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0782:	2b00      	cmp	r3, #0
 80f0784:	d10c      	bne.n	80f07a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80f0786:	4bbb      	ldr	r3, [pc, #748]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f0788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f078c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80f0790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f0796:	4ab7      	ldr	r2, [pc, #732]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f0798:	430b      	orrs	r3, r1
 80f079a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f079e:	e003      	b.n	80f07a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f07a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f07a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80f07a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f07ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f07b0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80f07b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80f07b8:	2300      	movs	r3, #0
 80f07ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80f07be:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80f07c2:	460b      	mov	r3, r1
 80f07c4:	4313      	orrs	r3, r2
 80f07c6:	d053      	beq.n	80f0870 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80f07c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f07cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80f07ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f07d2:	d031      	beq.n	80f0838 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80f07d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f07d8:	d82a      	bhi.n	80f0830 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80f07da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f07de:	d02d      	beq.n	80f083c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80f07e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f07e4:	d824      	bhi.n	80f0830 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80f07e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f07ea:	d029      	beq.n	80f0840 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80f07ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f07f0:	d81e      	bhi.n	80f0830 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80f07f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f07f6:	d011      	beq.n	80f081c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80f07f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f07fc:	d818      	bhi.n	80f0830 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80f07fe:	2b00      	cmp	r3, #0
 80f0800:	d020      	beq.n	80f0844 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80f0802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80f0806:	d113      	bne.n	80f0830 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f080c:	3308      	adds	r3, #8
 80f080e:	4618      	mov	r0, r3
 80f0810:	f001 fbf8 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0814:	4603      	mov	r3, r0
 80f0816:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80f081a:	e014      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f081c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0820:	3330      	adds	r3, #48	@ 0x30
 80f0822:	4618      	mov	r0, r3
 80f0824:	f001 fc86 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0828:	4603      	mov	r3, r0
 80f082a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80f082e:	e00a      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0830:	2301      	movs	r3, #1
 80f0832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0836:	e006      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80f0838:	bf00      	nop
 80f083a:	e004      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80f083c:	bf00      	nop
 80f083e:	e002      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80f0840:	bf00      	nop
 80f0842:	e000      	b.n	80f0846 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80f0844:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0846:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f084a:	2b00      	cmp	r3, #0
 80f084c:	d10c      	bne.n	80f0868 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80f084e:	4b89      	ldr	r3, [pc, #548]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f0850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f0854:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80f0858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f085c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80f085e:	4a85      	ldr	r2, [pc, #532]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f0860:	430b      	orrs	r3, r1
 80f0862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f0866:	e003      	b.n	80f0870 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0868:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f086c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80f0870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0874:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0878:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80f087c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80f0880:	2300      	movs	r3, #0
 80f0882:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80f0886:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80f088a:	460b      	mov	r3, r1
 80f088c:	4313      	orrs	r3, r2
 80f088e:	d055      	beq.n	80f093c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80f0890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80f0898:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80f089c:	d031      	beq.n	80f0902 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80f089e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80f08a2:	d82a      	bhi.n	80f08fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80f08a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80f08a8:	d02d      	beq.n	80f0906 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80f08aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80f08ae:	d824      	bhi.n	80f08fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80f08b0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80f08b4:	d029      	beq.n	80f090a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80f08b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80f08ba:	d81e      	bhi.n	80f08fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80f08bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80f08c0:	d011      	beq.n	80f08e6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80f08c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80f08c6:	d818      	bhi.n	80f08fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80f08c8:	2b00      	cmp	r3, #0
 80f08ca:	d020      	beq.n	80f090e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80f08cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80f08d0:	d113      	bne.n	80f08fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f08d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f08d6:	3308      	adds	r3, #8
 80f08d8:	4618      	mov	r0, r3
 80f08da:	f001 fb93 	bl	80f2004 <RCCEx_PLL2_Config>
 80f08de:	4603      	mov	r3, r0
 80f08e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80f08e4:	e014      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f08e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f08ea:	3330      	adds	r3, #48	@ 0x30
 80f08ec:	4618      	mov	r0, r3
 80f08ee:	f001 fc21 	bl	80f2134 <RCCEx_PLL3_Config>
 80f08f2:	4603      	mov	r3, r0
 80f08f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80f08f8:	e00a      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f08fa:	2301      	movs	r3, #1
 80f08fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0900:	e006      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80f0902:	bf00      	nop
 80f0904:	e004      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80f0906:	bf00      	nop
 80f0908:	e002      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80f090a:	bf00      	nop
 80f090c:	e000      	b.n	80f0910 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80f090e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0910:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0914:	2b00      	cmp	r3, #0
 80f0916:	d10d      	bne.n	80f0934 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80f0918:	4b56      	ldr	r3, [pc, #344]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f091a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f091e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80f0922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80f092a:	4a52      	ldr	r2, [pc, #328]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f092c:	430b      	orrs	r3, r1
 80f092e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80f0932:	e003      	b.n	80f093c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0934:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0938:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80f093c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0940:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0944:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80f0948:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80f094c:	2300      	movs	r3, #0
 80f094e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80f0952:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80f0956:	460b      	mov	r3, r1
 80f0958:	4313      	orrs	r3, r2
 80f095a:	d044      	beq.n	80f09e6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80f095c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80f0964:	2b05      	cmp	r3, #5
 80f0966:	d823      	bhi.n	80f09b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80f0968:	a201      	add	r2, pc, #4	@ (adr r2, 80f0970 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80f096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f096e:	bf00      	nop
 80f0970:	080f09b9 	.word	0x080f09b9
 80f0974:	080f0989 	.word	0x080f0989
 80f0978:	080f099d 	.word	0x080f099d
 80f097c:	080f09b9 	.word	0x080f09b9
 80f0980:	080f09b9 	.word	0x080f09b9
 80f0984:	080f09b9 	.word	0x080f09b9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f098c:	3308      	adds	r3, #8
 80f098e:	4618      	mov	r0, r3
 80f0990:	f001 fb38 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0994:	4603      	mov	r3, r0
 80f0996:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80f099a:	e00e      	b.n	80f09ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f099c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f09a0:	3330      	adds	r3, #48	@ 0x30
 80f09a2:	4618      	mov	r0, r3
 80f09a4:	f001 fbc6 	bl	80f2134 <RCCEx_PLL3_Config>
 80f09a8:	4603      	mov	r3, r0
 80f09aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80f09ae:	e004      	b.n	80f09ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f09b0:	2301      	movs	r3, #1
 80f09b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f09b6:	e000      	b.n	80f09ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80f09b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f09ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f09be:	2b00      	cmp	r3, #0
 80f09c0:	d10d      	bne.n	80f09de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80f09c2:	4b2c      	ldr	r3, [pc, #176]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f09c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f09c8:	f023 0107 	bic.w	r1, r3, #7
 80f09cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f09d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80f09d4:	4a27      	ldr	r2, [pc, #156]	@ (80f0a74 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80f09d6:	430b      	orrs	r3, r1
 80f09d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f09dc:	e003      	b.n	80f09e6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f09de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f09e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80f09e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f09ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f09ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80f09f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80f09f6:	2300      	movs	r3, #0
 80f09f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80f09fc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80f0a00:	460b      	mov	r3, r1
 80f0a02:	4313      	orrs	r3, r2
 80f0a04:	d04f      	beq.n	80f0aa6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80f0a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f0a0e:	2b50      	cmp	r3, #80	@ 0x50
 80f0a10:	d029      	beq.n	80f0a66 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80f0a12:	2b50      	cmp	r3, #80	@ 0x50
 80f0a14:	d823      	bhi.n	80f0a5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80f0a16:	2b40      	cmp	r3, #64	@ 0x40
 80f0a18:	d027      	beq.n	80f0a6a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80f0a1a:	2b40      	cmp	r3, #64	@ 0x40
 80f0a1c:	d81f      	bhi.n	80f0a5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80f0a1e:	2b30      	cmp	r3, #48	@ 0x30
 80f0a20:	d025      	beq.n	80f0a6e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80f0a22:	2b30      	cmp	r3, #48	@ 0x30
 80f0a24:	d81b      	bhi.n	80f0a5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80f0a26:	2b20      	cmp	r3, #32
 80f0a28:	d00f      	beq.n	80f0a4a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80f0a2a:	2b20      	cmp	r3, #32
 80f0a2c:	d817      	bhi.n	80f0a5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80f0a2e:	2b00      	cmp	r3, #0
 80f0a30:	d022      	beq.n	80f0a78 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80f0a32:	2b10      	cmp	r3, #16
 80f0a34:	d113      	bne.n	80f0a5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0a3a:	3308      	adds	r3, #8
 80f0a3c:	4618      	mov	r0, r3
 80f0a3e:	f001 fae1 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0a42:	4603      	mov	r3, r0
 80f0a44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80f0a48:	e017      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0a4e:	3330      	adds	r3, #48	@ 0x30
 80f0a50:	4618      	mov	r0, r3
 80f0a52:	f001 fb6f 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0a56:	4603      	mov	r3, r0
 80f0a58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80f0a5c:	e00d      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0a5e:	2301      	movs	r3, #1
 80f0a60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0a64:	e009      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80f0a66:	bf00      	nop
 80f0a68:	e007      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80f0a6a:	bf00      	nop
 80f0a6c:	e005      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80f0a6e:	bf00      	nop
 80f0a70:	e003      	b.n	80f0a7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80f0a72:	bf00      	nop
 80f0a74:	44020c00 	.word	0x44020c00
        break;
 80f0a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0a7e:	2b00      	cmp	r3, #0
 80f0a80:	d10d      	bne.n	80f0a9e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80f0a82:	4baf      	ldr	r3, [pc, #700]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0a84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f0a88:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80f0a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f0a94:	4aaa      	ldr	r2, [pc, #680]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0a96:	430b      	orrs	r3, r1
 80f0a98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f0a9c:	e003      	b.n	80f0aa6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0aa2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80f0aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0aae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80f0ab2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80f0ab6:	2300      	movs	r3, #0
 80f0ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80f0abc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80f0ac0:	460b      	mov	r3, r1
 80f0ac2:	4313      	orrs	r3, r2
 80f0ac4:	d055      	beq.n	80f0b72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80f0ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80f0ace:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f0ad2:	d031      	beq.n	80f0b38 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80f0ad4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f0ad8:	d82a      	bhi.n	80f0b30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80f0ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f0ade:	d02d      	beq.n	80f0b3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80f0ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f0ae4:	d824      	bhi.n	80f0b30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80f0ae6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f0aea:	d029      	beq.n	80f0b40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80f0aec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f0af0:	d81e      	bhi.n	80f0b30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80f0af2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f0af6:	d011      	beq.n	80f0b1c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80f0af8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f0afc:	d818      	bhi.n	80f0b30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80f0afe:	2b00      	cmp	r3, #0
 80f0b00:	d020      	beq.n	80f0b44 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80f0b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80f0b06:	d113      	bne.n	80f0b30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0b0c:	3308      	adds	r3, #8
 80f0b0e:	4618      	mov	r0, r3
 80f0b10:	f001 fa78 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0b14:	4603      	mov	r3, r0
 80f0b16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80f0b1a:	e014      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0b20:	3330      	adds	r3, #48	@ 0x30
 80f0b22:	4618      	mov	r0, r3
 80f0b24:	f001 fb06 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0b28:	4603      	mov	r3, r0
 80f0b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80f0b2e:	e00a      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0b30:	2301      	movs	r3, #1
 80f0b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0b36:	e006      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80f0b38:	bf00      	nop
 80f0b3a:	e004      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80f0b3c:	bf00      	nop
 80f0b3e:	e002      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80f0b40:	bf00      	nop
 80f0b42:	e000      	b.n	80f0b46 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80f0b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0b46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0b4a:	2b00      	cmp	r3, #0
 80f0b4c:	d10d      	bne.n	80f0b6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80f0b4e:	4b7c      	ldr	r3, [pc, #496]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f0b54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80f0b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80f0b60:	4a77      	ldr	r2, [pc, #476]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0b62:	430b      	orrs	r3, r1
 80f0b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80f0b68:	e003      	b.n	80f0b72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0b6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80f0b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0b7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80f0b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80f0b82:	2300      	movs	r3, #0
 80f0b84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80f0b88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80f0b8c:	460b      	mov	r3, r1
 80f0b8e:	4313      	orrs	r3, r2
 80f0b90:	d03d      	beq.n	80f0c0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80f0b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80f0b9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f0b9e:	d01b      	beq.n	80f0bd8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80f0ba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f0ba4:	d814      	bhi.n	80f0bd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80f0ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f0baa:	d017      	beq.n	80f0bdc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80f0bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f0bb0:	d80e      	bhi.n	80f0bd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80f0bb2:	2b00      	cmp	r3, #0
 80f0bb4:	d014      	beq.n	80f0be0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80f0bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f0bba:	d109      	bne.n	80f0bd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0bc0:	3330      	adds	r3, #48	@ 0x30
 80f0bc2:	4618      	mov	r0, r3
 80f0bc4:	f001 fab6 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0bc8:	4603      	mov	r3, r0
 80f0bca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80f0bce:	e008      	b.n	80f0be2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0bd0:	2301      	movs	r3, #1
 80f0bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0bd6:	e004      	b.n	80f0be2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80f0bd8:	bf00      	nop
 80f0bda:	e002      	b.n	80f0be2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80f0bdc:	bf00      	nop
 80f0bde:	e000      	b.n	80f0be2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80f0be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0be6:	2b00      	cmp	r3, #0
 80f0be8:	d10d      	bne.n	80f0c06 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80f0bea:	4b55      	ldr	r3, [pc, #340]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f0bf0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80f0bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80f0bfc:	4a50      	ldr	r2, [pc, #320]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0bfe:	430b      	orrs	r3, r1
 80f0c00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f0c04:	e003      	b.n	80f0c0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0c0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80f0c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0c16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80f0c1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80f0c1e:	2300      	movs	r3, #0
 80f0c20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80f0c24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80f0c28:	460b      	mov	r3, r1
 80f0c2a:	4313      	orrs	r3, r2
 80f0c2c:	d03d      	beq.n	80f0caa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80f0c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80f0c36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80f0c3a:	d01b      	beq.n	80f0c74 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80f0c3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80f0c40:	d814      	bhi.n	80f0c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80f0c42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80f0c46:	d017      	beq.n	80f0c78 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80f0c48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80f0c4c:	d80e      	bhi.n	80f0c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80f0c4e:	2b00      	cmp	r3, #0
 80f0c50:	d014      	beq.n	80f0c7c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80f0c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f0c56:	d109      	bne.n	80f0c6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0c5c:	3330      	adds	r3, #48	@ 0x30
 80f0c5e:	4618      	mov	r0, r3
 80f0c60:	f001 fa68 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0c64:	4603      	mov	r3, r0
 80f0c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80f0c6a:	e008      	b.n	80f0c7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0c6c:	2301      	movs	r3, #1
 80f0c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0c72:	e004      	b.n	80f0c7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80f0c74:	bf00      	nop
 80f0c76:	e002      	b.n	80f0c7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80f0c78:	bf00      	nop
 80f0c7a:	e000      	b.n	80f0c7e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80f0c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0c82:	2b00      	cmp	r3, #0
 80f0c84:	d10d      	bne.n	80f0ca2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80f0c86:	4b2e      	ldr	r3, [pc, #184]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f0c8c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80f0c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80f0c98:	4a29      	ldr	r2, [pc, #164]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0c9a:	430b      	orrs	r3, r1
 80f0c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f0ca0:	e003      	b.n	80f0caa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0ca6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80f0caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0cb2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80f0cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80f0cba:	2300      	movs	r3, #0
 80f0cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80f0cc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80f0cc4:	460b      	mov	r3, r1
 80f0cc6:	4313      	orrs	r3, r2
 80f0cc8:	d040      	beq.n	80f0d4c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80f0cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80f0cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80f0cd6:	d01b      	beq.n	80f0d10 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80f0cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80f0cdc:	d814      	bhi.n	80f0d08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80f0cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f0ce2:	d017      	beq.n	80f0d14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80f0ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f0ce8:	d80e      	bhi.n	80f0d08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80f0cea:	2b00      	cmp	r3, #0
 80f0cec:	d014      	beq.n	80f0d18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80f0cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f0cf2:	d109      	bne.n	80f0d08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0cf8:	3330      	adds	r3, #48	@ 0x30
 80f0cfa:	4618      	mov	r0, r3
 80f0cfc:	f001 fa1a 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0d00:	4603      	mov	r3, r0
 80f0d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80f0d06:	e008      	b.n	80f0d1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0d08:	2301      	movs	r3, #1
 80f0d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0d0e:	e004      	b.n	80f0d1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80f0d10:	bf00      	nop
 80f0d12:	e002      	b.n	80f0d1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80f0d14:	bf00      	nop
 80f0d16:	e000      	b.n	80f0d1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80f0d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0d1e:	2b00      	cmp	r3, #0
 80f0d20:	d110      	bne.n	80f0d44 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80f0d22:	4b07      	ldr	r3, [pc, #28]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f0d28:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80f0d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80f0d34:	4a02      	ldr	r2, [pc, #8]	@ (80f0d40 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80f0d36:	430b      	orrs	r3, r1
 80f0d38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f0d3c:	e006      	b.n	80f0d4c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80f0d3e:	bf00      	nop
 80f0d40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0d48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80f0d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0d54:	2100      	movs	r1, #0
 80f0d56:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80f0d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80f0d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80f0d62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80f0d66:	460b      	mov	r3, r1
 80f0d68:	4313      	orrs	r3, r2
 80f0d6a:	d03d      	beq.n	80f0de8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80f0d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80f0d74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80f0d78:	d01b      	beq.n	80f0db2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80f0d7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80f0d7e:	d814      	bhi.n	80f0daa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80f0d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80f0d84:	d017      	beq.n	80f0db6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80f0d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80f0d8a:	d80e      	bhi.n	80f0daa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80f0d8c:	2b00      	cmp	r3, #0
 80f0d8e:	d014      	beq.n	80f0dba <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80f0d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f0d94:	d109      	bne.n	80f0daa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0d9a:	3330      	adds	r3, #48	@ 0x30
 80f0d9c:	4618      	mov	r0, r3
 80f0d9e:	f001 f9c9 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0da2:	4603      	mov	r3, r0
 80f0da4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80f0da8:	e008      	b.n	80f0dbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0daa:	2301      	movs	r3, #1
 80f0dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0db0:	e004      	b.n	80f0dbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80f0db2:	bf00      	nop
 80f0db4:	e002      	b.n	80f0dbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80f0db6:	bf00      	nop
 80f0db8:	e000      	b.n	80f0dbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80f0dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0dc0:	2b00      	cmp	r3, #0
 80f0dc2:	d10d      	bne.n	80f0de0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80f0dc4:	4bbe      	ldr	r3, [pc, #760]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f0dca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80f0dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80f0dd6:	4aba      	ldr	r2, [pc, #744]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0dd8:	430b      	orrs	r3, r1
 80f0dda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f0dde:	e003      	b.n	80f0de8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80f0de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0df0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80f0df4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80f0df8:	2300      	movs	r3, #0
 80f0dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80f0dfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80f0e02:	460b      	mov	r3, r1
 80f0e04:	4313      	orrs	r3, r2
 80f0e06:	d035      	beq.n	80f0e74 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80f0e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80f0e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f0e14:	d015      	beq.n	80f0e42 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80f0e16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f0e1a:	d80e      	bhi.n	80f0e3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80f0e1c:	2b00      	cmp	r3, #0
 80f0e1e:	d012      	beq.n	80f0e46 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80f0e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80f0e24:	d109      	bne.n	80f0e3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0e2a:	3330      	adds	r3, #48	@ 0x30
 80f0e2c:	4618      	mov	r0, r3
 80f0e2e:	f001 f981 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0e32:	4603      	mov	r3, r0
 80f0e34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80f0e38:	e006      	b.n	80f0e48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0e3a:	2301      	movs	r3, #1
 80f0e3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0e40:	e002      	b.n	80f0e48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80f0e42:	bf00      	nop
 80f0e44:	e000      	b.n	80f0e48 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80f0e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0e48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0e4c:	2b00      	cmp	r3, #0
 80f0e4e:	d10d      	bne.n	80f0e6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80f0e50:	4b9b      	ldr	r3, [pc, #620]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0e52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f0e56:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80f0e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80f0e62:	4a97      	ldr	r2, [pc, #604]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0e64:	430b      	orrs	r3, r1
 80f0e66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f0e6a:	e003      	b.n	80f0e74 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0e70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80f0e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0e7c:	2100      	movs	r1, #0
 80f0e7e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80f0e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80f0e86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80f0e8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80f0e8e:	460b      	mov	r3, r1
 80f0e90:	4313      	orrs	r3, r2
 80f0e92:	d00e      	beq.n	80f0eb2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80f0e94:	4b8a      	ldr	r3, [pc, #552]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0e96:	69db      	ldr	r3, [r3, #28]
 80f0e98:	4a89      	ldr	r2, [pc, #548]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0e9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80f0e9e:	61d3      	str	r3, [r2, #28]
 80f0ea0:	4b87      	ldr	r3, [pc, #540]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0ea2:	69d9      	ldr	r1, [r3, #28]
 80f0ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0ea8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80f0eac:	4a84      	ldr	r2, [pc, #528]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0eae:	430b      	orrs	r3, r1
 80f0eb0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80f0eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0eba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80f0ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80f0ec2:	2300      	movs	r3, #0
 80f0ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80f0ec8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80f0ecc:	460b      	mov	r3, r1
 80f0ece:	4313      	orrs	r3, r2
 80f0ed0:	d055      	beq.n	80f0f7e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80f0ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80f0eda:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80f0ede:	d031      	beq.n	80f0f44 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80f0ee0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80f0ee4:	d82a      	bhi.n	80f0f3c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80f0ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f0eea:	d02d      	beq.n	80f0f48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80f0eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f0ef0:	d824      	bhi.n	80f0f3c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80f0ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80f0ef6:	d029      	beq.n	80f0f4c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80f0ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80f0efc:	d81e      	bhi.n	80f0f3c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80f0efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f0f02:	d011      	beq.n	80f0f28 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80f0f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f0f08:	d818      	bhi.n	80f0f3c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80f0f0a:	2b00      	cmp	r3, #0
 80f0f0c:	d020      	beq.n	80f0f50 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80f0f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f0f12:	d113      	bne.n	80f0f3c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0f18:	3308      	adds	r3, #8
 80f0f1a:	4618      	mov	r0, r3
 80f0f1c:	f001 f872 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0f20:	4603      	mov	r3, r0
 80f0f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80f0f26:	e014      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0f2c:	3330      	adds	r3, #48	@ 0x30
 80f0f2e:	4618      	mov	r0, r3
 80f0f30:	f001 f900 	bl	80f2134 <RCCEx_PLL3_Config>
 80f0f34:	4603      	mov	r3, r0
 80f0f36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80f0f3a:	e00a      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f0f3c:	2301      	movs	r3, #1
 80f0f3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f0f42:	e006      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80f0f44:	bf00      	nop
 80f0f46:	e004      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80f0f48:	bf00      	nop
 80f0f4a:	e002      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80f0f4c:	bf00      	nop
 80f0f4e:	e000      	b.n	80f0f52 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80f0f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f0f52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0f56:	2b00      	cmp	r3, #0
 80f0f58:	d10d      	bne.n	80f0f76 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80f0f5a:	4b59      	ldr	r3, [pc, #356]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f0f60:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80f0f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80f0f6c:	4a54      	ldr	r2, [pc, #336]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f0f6e:	430b      	orrs	r3, r1
 80f0f70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f0f74:	e003      	b.n	80f0f7e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f0f76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f0f7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80f0f7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f0f86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80f0f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80f0f8e:	2300      	movs	r3, #0
 80f0f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80f0f94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80f0f98:	460b      	mov	r3, r1
 80f0f9a:	4313      	orrs	r3, r2
 80f0f9c:	d055      	beq.n	80f104a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80f0f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80f0fa6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f0faa:	d031      	beq.n	80f1010 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80f0fac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f0fb0:	d82a      	bhi.n	80f1008 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80f0fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f0fb6:	d02d      	beq.n	80f1014 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80f0fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f0fbc:	d824      	bhi.n	80f1008 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80f0fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f0fc2:	d029      	beq.n	80f1018 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80f0fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f0fc8:	d81e      	bhi.n	80f1008 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80f0fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f0fce:	d011      	beq.n	80f0ff4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80f0fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f0fd4:	d818      	bhi.n	80f1008 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80f0fd6:	2b00      	cmp	r3, #0
 80f0fd8:	d020      	beq.n	80f101c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80f0fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80f0fde:	d113      	bne.n	80f1008 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f0fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0fe4:	3308      	adds	r3, #8
 80f0fe6:	4618      	mov	r0, r3
 80f0fe8:	f001 f80c 	bl	80f2004 <RCCEx_PLL2_Config>
 80f0fec:	4603      	mov	r3, r0
 80f0fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80f0ff2:	e014      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f0ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f0ff8:	3330      	adds	r3, #48	@ 0x30
 80f0ffa:	4618      	mov	r0, r3
 80f0ffc:	f001 f89a 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1000:	4603      	mov	r3, r0
 80f1002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80f1006:	e00a      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1008:	2301      	movs	r3, #1
 80f100a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f100e:	e006      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80f1010:	bf00      	nop
 80f1012:	e004      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80f1014:	bf00      	nop
 80f1016:	e002      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80f1018:	bf00      	nop
 80f101a:	e000      	b.n	80f101e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80f101c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f101e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1022:	2b00      	cmp	r3, #0
 80f1024:	d10d      	bne.n	80f1042 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80f1026:	4b26      	ldr	r3, [pc, #152]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f1028:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f102c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80f1030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80f1038:	4a21      	ldr	r2, [pc, #132]	@ (80f10c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80f103a:	430b      	orrs	r3, r1
 80f103c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f1040:	e003      	b.n	80f104a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1042:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1046:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80f104a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1052:	2100      	movs	r1, #0
 80f1054:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80f1058:	f003 0320 	and.w	r3, r3, #32
 80f105c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80f1060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80f1064:	460b      	mov	r3, r1
 80f1066:	4313      	orrs	r3, r2
 80f1068:	d057      	beq.n	80f111a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80f106a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f106e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80f1072:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80f1076:	d033      	beq.n	80f10e0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80f1078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80f107c:	d82c      	bhi.n	80f10d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80f107e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f1082:	d02f      	beq.n	80f10e4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80f1084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f1088:	d826      	bhi.n	80f10d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80f108a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f108e:	d02b      	beq.n	80f10e8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80f1090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f1094:	d820      	bhi.n	80f10d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80f1096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f109a:	d013      	beq.n	80f10c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80f109c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f10a0:	d81a      	bhi.n	80f10d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80f10a2:	2b00      	cmp	r3, #0
 80f10a4:	d022      	beq.n	80f10ec <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80f10a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f10aa:	d115      	bne.n	80f10d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f10ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f10b0:	3308      	adds	r3, #8
 80f10b2:	4618      	mov	r0, r3
 80f10b4:	f000 ffa6 	bl	80f2004 <RCCEx_PLL2_Config>
 80f10b8:	4603      	mov	r3, r0
 80f10ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80f10be:	e016      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80f10c0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f10c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f10c8:	3330      	adds	r3, #48	@ 0x30
 80f10ca:	4618      	mov	r0, r3
 80f10cc:	f001 f832 	bl	80f2134 <RCCEx_PLL3_Config>
 80f10d0:	4603      	mov	r3, r0
 80f10d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80f10d6:	e00a      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f10d8:	2301      	movs	r3, #1
 80f10da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f10de:	e006      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80f10e0:	bf00      	nop
 80f10e2:	e004      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80f10e4:	bf00      	nop
 80f10e6:	e002      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80f10e8:	bf00      	nop
 80f10ea:	e000      	b.n	80f10ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80f10ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f10ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f10f2:	2b00      	cmp	r3, #0
 80f10f4:	d10d      	bne.n	80f1112 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80f10f6:	4bbb      	ldr	r3, [pc, #748]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f10f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f10fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80f1100:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80f1108:	4ab6      	ldr	r2, [pc, #728]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f110a:	430b      	orrs	r3, r1
 80f110c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f1110:	e003      	b.n	80f111a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1112:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1116:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80f111a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1122:	2100      	movs	r1, #0
 80f1124:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80f1128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80f112c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80f1130:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80f1134:	460b      	mov	r3, r1
 80f1136:	4313      	orrs	r3, r2
 80f1138:	d055      	beq.n	80f11e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80f113a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f113e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80f1142:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80f1146:	d031      	beq.n	80f11ac <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80f1148:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80f114c:	d82a      	bhi.n	80f11a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80f114e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f1152:	d02d      	beq.n	80f11b0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80f1154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f1158:	d824      	bhi.n	80f11a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80f115a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80f115e:	d029      	beq.n	80f11b4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80f1160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80f1164:	d81e      	bhi.n	80f11a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80f1166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f116a:	d011      	beq.n	80f1190 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80f116c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f1170:	d818      	bhi.n	80f11a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80f1172:	2b00      	cmp	r3, #0
 80f1174:	d020      	beq.n	80f11b8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80f1176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f117a:	d113      	bne.n	80f11a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f117c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1180:	3308      	adds	r3, #8
 80f1182:	4618      	mov	r0, r3
 80f1184:	f000 ff3e 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1188:	4603      	mov	r3, r0
 80f118a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80f118e:	e014      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1194:	3330      	adds	r3, #48	@ 0x30
 80f1196:	4618      	mov	r0, r3
 80f1198:	f000 ffcc 	bl	80f2134 <RCCEx_PLL3_Config>
 80f119c:	4603      	mov	r3, r0
 80f119e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80f11a2:	e00a      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f11a4:	2301      	movs	r3, #1
 80f11a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f11aa:	e006      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80f11ac:	bf00      	nop
 80f11ae:	e004      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80f11b0:	bf00      	nop
 80f11b2:	e002      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80f11b4:	bf00      	nop
 80f11b6:	e000      	b.n	80f11ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80f11b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f11ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f11be:	2b00      	cmp	r3, #0
 80f11c0:	d10d      	bne.n	80f11de <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80f11c2:	4b88      	ldr	r3, [pc, #544]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f11c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f11c8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80f11cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f11d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80f11d4:	4a83      	ldr	r2, [pc, #524]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f11d6:	430b      	orrs	r3, r1
 80f11d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f11dc:	e003      	b.n	80f11e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f11de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f11e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80f11e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f11ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f11ee:	2100      	movs	r1, #0
 80f11f0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80f11f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80f11f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80f11fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80f1200:	460b      	mov	r3, r1
 80f1202:	4313      	orrs	r3, r2
 80f1204:	d055      	beq.n	80f12b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80f1206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f120a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80f120e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f1212:	d031      	beq.n	80f1278 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80f1214:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80f1218:	d82a      	bhi.n	80f1270 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80f121a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f121e:	d02d      	beq.n	80f127c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80f1220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f1224:	d824      	bhi.n	80f1270 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80f1226:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f122a:	d029      	beq.n	80f1280 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80f122c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80f1230:	d81e      	bhi.n	80f1270 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80f1232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f1236:	d011      	beq.n	80f125c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80f1238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80f123c:	d818      	bhi.n	80f1270 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80f123e:	2b00      	cmp	r3, #0
 80f1240:	d020      	beq.n	80f1284 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80f1242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80f1246:	d113      	bne.n	80f1270 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f124c:	3308      	adds	r3, #8
 80f124e:	4618      	mov	r0, r3
 80f1250:	f000 fed8 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1254:	4603      	mov	r3, r0
 80f1256:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80f125a:	e014      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f125c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1260:	3330      	adds	r3, #48	@ 0x30
 80f1262:	4618      	mov	r0, r3
 80f1264:	f000 ff66 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1268:	4603      	mov	r3, r0
 80f126a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80f126e:	e00a      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1270:	2301      	movs	r3, #1
 80f1272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1276:	e006      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80f1278:	bf00      	nop
 80f127a:	e004      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80f127c:	bf00      	nop
 80f127e:	e002      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80f1280:	bf00      	nop
 80f1282:	e000      	b.n	80f1286 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80f1284:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1286:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f128a:	2b00      	cmp	r3, #0
 80f128c:	d10d      	bne.n	80f12aa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80f128e:	4b55      	ldr	r3, [pc, #340]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f1290:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f1294:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80f1298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f129c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80f12a0:	4a50      	ldr	r2, [pc, #320]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f12a2:	430b      	orrs	r3, r1
 80f12a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f12a8:	e003      	b.n	80f12b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f12aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f12ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80f12b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f12b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f12ba:	2100      	movs	r1, #0
 80f12bc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80f12c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80f12c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80f12c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80f12cc:	460b      	mov	r3, r1
 80f12ce:	4313      	orrs	r3, r2
 80f12d0:	d055      	beq.n	80f137e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80f12d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f12d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80f12da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f12de:	d031      	beq.n	80f1344 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80f12e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f12e4:	d82a      	bhi.n	80f133c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80f12e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f12ea:	d02d      	beq.n	80f1348 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80f12ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f12f0:	d824      	bhi.n	80f133c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80f12f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80f12f6:	d029      	beq.n	80f134c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80f12f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80f12fc:	d81e      	bhi.n	80f133c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80f12fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80f1302:	d011      	beq.n	80f1328 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80f1304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80f1308:	d818      	bhi.n	80f133c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80f130a:	2b00      	cmp	r3, #0
 80f130c:	d020      	beq.n	80f1350 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80f130e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80f1312:	d113      	bne.n	80f133c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1318:	3308      	adds	r3, #8
 80f131a:	4618      	mov	r0, r3
 80f131c:	f000 fe72 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1320:	4603      	mov	r3, r0
 80f1322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80f1326:	e014      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f132c:	3330      	adds	r3, #48	@ 0x30
 80f132e:	4618      	mov	r0, r3
 80f1330:	f000 ff00 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1334:	4603      	mov	r3, r0
 80f1336:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80f133a:	e00a      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f133c:	2301      	movs	r3, #1
 80f133e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1342:	e006      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80f1344:	bf00      	nop
 80f1346:	e004      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80f1348:	bf00      	nop
 80f134a:	e002      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80f134c:	bf00      	nop
 80f134e:	e000      	b.n	80f1352 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80f1350:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1352:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1356:	2b00      	cmp	r3, #0
 80f1358:	d10d      	bne.n	80f1376 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80f135a:	4b22      	ldr	r3, [pc, #136]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f135c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f1360:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80f1364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80f136c:	4a1d      	ldr	r2, [pc, #116]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f136e:	430b      	orrs	r3, r1
 80f1370:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80f1374:	e003      	b.n	80f137e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1376:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f137a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80f137e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1382:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1386:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80f138a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80f138e:	2300      	movs	r3, #0
 80f1390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80f1394:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80f1398:	460b      	mov	r3, r1
 80f139a:	4313      	orrs	r3, r2
 80f139c:	d055      	beq.n	80f144a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80f139e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f13a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80f13a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f13aa:	d035      	beq.n	80f1418 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80f13ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80f13b0:	d82e      	bhi.n	80f1410 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80f13b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f13b6:	d031      	beq.n	80f141c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80f13b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80f13bc:	d828      	bhi.n	80f1410 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80f13be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f13c2:	d01b      	beq.n	80f13fc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80f13c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f13c8:	d822      	bhi.n	80f1410 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80f13ca:	2b00      	cmp	r3, #0
 80f13cc:	d003      	beq.n	80f13d6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80f13ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f13d2:	d009      	beq.n	80f13e8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80f13d4:	e01c      	b.n	80f1410 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f13d6:	4b03      	ldr	r3, [pc, #12]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f13d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f13da:	4a02      	ldr	r2, [pc, #8]	@ (80f13e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80f13dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f13e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80f13e2:	e01c      	b.n	80f141e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80f13e4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f13e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f13ec:	3308      	adds	r3, #8
 80f13ee:	4618      	mov	r0, r3
 80f13f0:	f000 fe08 	bl	80f2004 <RCCEx_PLL2_Config>
 80f13f4:	4603      	mov	r3, r0
 80f13f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80f13fa:	e010      	b.n	80f141e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f13fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1400:	3330      	adds	r3, #48	@ 0x30
 80f1402:	4618      	mov	r0, r3
 80f1404:	f000 fe96 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1408:	4603      	mov	r3, r0
 80f140a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80f140e:	e006      	b.n	80f141e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1410:	2301      	movs	r3, #1
 80f1412:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1416:	e002      	b.n	80f141e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80f1418:	bf00      	nop
 80f141a:	e000      	b.n	80f141e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80f141c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f141e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1422:	2b00      	cmp	r3, #0
 80f1424:	d10d      	bne.n	80f1442 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80f1426:	4bc3      	ldr	r3, [pc, #780]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f1428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f142c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80f1430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1434:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80f1438:	4abe      	ldr	r2, [pc, #760]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f143a:	430b      	orrs	r3, r1
 80f143c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80f1440:	e003      	b.n	80f144a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1446:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80f144a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1452:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80f1456:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80f145a:	2300      	movs	r3, #0
 80f145c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80f1460:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80f1464:	460b      	mov	r3, r1
 80f1466:	4313      	orrs	r3, r2
 80f1468:	d051      	beq.n	80f150e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80f146a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f146e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80f1472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f1476:	d033      	beq.n	80f14e0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80f1478:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f147c:	d82c      	bhi.n	80f14d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80f147e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80f1482:	d02d      	beq.n	80f14e0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80f1484:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80f1488:	d826      	bhi.n	80f14d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80f148a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f148e:	d019      	beq.n	80f14c4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80f1490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f1494:	d820      	bhi.n	80f14d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80f1496:	2b00      	cmp	r3, #0
 80f1498:	d003      	beq.n	80f14a2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80f149a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80f149e:	d007      	beq.n	80f14b0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80f14a0:	e01a      	b.n	80f14d8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f14a2:	4ba4      	ldr	r3, [pc, #656]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f14a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f14a6:	4aa3      	ldr	r2, [pc, #652]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f14a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f14ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80f14ae:	e018      	b.n	80f14e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f14b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f14b4:	3308      	adds	r3, #8
 80f14b6:	4618      	mov	r0, r3
 80f14b8:	f000 fda4 	bl	80f2004 <RCCEx_PLL2_Config>
 80f14bc:	4603      	mov	r3, r0
 80f14be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80f14c2:	e00e      	b.n	80f14e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f14c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f14c8:	3330      	adds	r3, #48	@ 0x30
 80f14ca:	4618      	mov	r0, r3
 80f14cc:	f000 fe32 	bl	80f2134 <RCCEx_PLL3_Config>
 80f14d0:	4603      	mov	r3, r0
 80f14d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80f14d6:	e004      	b.n	80f14e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f14d8:	2301      	movs	r3, #1
 80f14da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f14de:	e000      	b.n	80f14e2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80f14e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f14e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f14e6:	2b00      	cmp	r3, #0
 80f14e8:	d10d      	bne.n	80f1506 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80f14ea:	4b92      	ldr	r3, [pc, #584]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f14ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f14f0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80f14f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f14f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80f14fc:	4a8d      	ldr	r2, [pc, #564]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f14fe:	430b      	orrs	r3, r1
 80f1500:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80f1504:	e003      	b.n	80f150e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f150a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80f150e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1512:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1516:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80f151a:	67bb      	str	r3, [r7, #120]	@ 0x78
 80f151c:	2300      	movs	r3, #0
 80f151e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80f1520:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80f1524:	460b      	mov	r3, r1
 80f1526:	4313      	orrs	r3, r2
 80f1528:	d032      	beq.n	80f1590 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80f152a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f152e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80f1532:	2b05      	cmp	r3, #5
 80f1534:	d80f      	bhi.n	80f1556 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80f1536:	2b03      	cmp	r3, #3
 80f1538:	d211      	bcs.n	80f155e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80f153a:	2b01      	cmp	r3, #1
 80f153c:	d911      	bls.n	80f1562 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80f153e:	2b02      	cmp	r3, #2
 80f1540:	d109      	bne.n	80f1556 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1542:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1546:	3308      	adds	r3, #8
 80f1548:	4618      	mov	r0, r3
 80f154a:	f000 fd5b 	bl	80f2004 <RCCEx_PLL2_Config>
 80f154e:	4603      	mov	r3, r0
 80f1550:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1554:	e006      	b.n	80f1564 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80f1556:	2301      	movs	r3, #1
 80f1558:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f155c:	e002      	b.n	80f1564 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80f155e:	bf00      	nop
 80f1560:	e000      	b.n	80f1564 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80f1562:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1564:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1568:	2b00      	cmp	r3, #0
 80f156a:	d10d      	bne.n	80f1588 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80f156c:	4b71      	ldr	r3, [pc, #452]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f156e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f1572:	f023 0107 	bic.w	r1, r3, #7
 80f1576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f157a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80f157e:	4a6d      	ldr	r2, [pc, #436]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f1580:	430b      	orrs	r3, r1
 80f1582:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80f1586:	e003      	b.n	80f1590 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1588:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f158c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80f1590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1594:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1598:	2100      	movs	r1, #0
 80f159a:	6739      	str	r1, [r7, #112]	@ 0x70
 80f159c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80f15a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80f15a2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80f15a6:	460b      	mov	r3, r1
 80f15a8:	4313      	orrs	r3, r2
 80f15aa:	d024      	beq.n	80f15f6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80f15ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f15b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f15b4:	2b00      	cmp	r3, #0
 80f15b6:	d005      	beq.n	80f15c4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80f15b8:	2b08      	cmp	r3, #8
 80f15ba:	d005      	beq.n	80f15c8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f15bc:	2301      	movs	r3, #1
 80f15be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f15c2:	e002      	b.n	80f15ca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80f15c4:	bf00      	nop
 80f15c6:	e000      	b.n	80f15ca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80f15c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f15ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f15ce:	2b00      	cmp	r3, #0
 80f15d0:	d10d      	bne.n	80f15ee <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80f15d2:	4b58      	ldr	r3, [pc, #352]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f15d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f15d8:	f023 0108 	bic.w	r1, r3, #8
 80f15dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f15e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80f15e4:	4a53      	ldr	r2, [pc, #332]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f15e6:	430b      	orrs	r3, r1
 80f15e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80f15ec:	e003      	b.n	80f15f6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f15ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f15f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80f15f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f15fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f15fe:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80f1602:	66bb      	str	r3, [r7, #104]	@ 0x68
 80f1604:	2300      	movs	r3, #0
 80f1606:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80f1608:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80f160c:	460b      	mov	r3, r1
 80f160e:	4313      	orrs	r3, r2
 80f1610:	f000 80b9 	beq.w	80f1786 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80f1614:	4b48      	ldr	r3, [pc, #288]	@ (80f1738 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80f1616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f1618:	4a47      	ldr	r2, [pc, #284]	@ (80f1738 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80f161a:	f043 0301 	orr.w	r3, r3, #1
 80f161e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80f1620:	f7f9 f898 	bl	80ea754 <HAL_GetTick>
 80f1624:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80f1628:	e00b      	b.n	80f1642 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80f162a:	f7f9 f893 	bl	80ea754 <HAL_GetTick>
 80f162e:	4602      	mov	r2, r0
 80f1630:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80f1634:	1ad3      	subs	r3, r2, r3
 80f1636:	2b02      	cmp	r3, #2
 80f1638:	d903      	bls.n	80f1642 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80f163a:	2303      	movs	r3, #3
 80f163c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1640:	e005      	b.n	80f164e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80f1642:	4b3d      	ldr	r3, [pc, #244]	@ (80f1738 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80f1644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f1646:	f003 0301 	and.w	r3, r3, #1
 80f164a:	2b00      	cmp	r3, #0
 80f164c:	d0ed      	beq.n	80f162a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80f164e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1652:	2b00      	cmp	r3, #0
 80f1654:	f040 8093 	bne.w	80f177e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80f1658:	4b36      	ldr	r3, [pc, #216]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f165a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f165e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80f1662:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80f1666:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80f166a:	2b00      	cmp	r3, #0
 80f166c:	d023      	beq.n	80f16b6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80f166e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1672:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80f1676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80f167a:	4293      	cmp	r3, r2
 80f167c:	d01b      	beq.n	80f16b6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80f167e:	4b2d      	ldr	r3, [pc, #180]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f1680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f1684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f1688:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80f168c:	4b29      	ldr	r3, [pc, #164]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f168e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f1692:	4a28      	ldr	r2, [pc, #160]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f1694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80f1698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80f169c:	4b25      	ldr	r3, [pc, #148]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f16a2:	4a24      	ldr	r2, [pc, #144]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f16a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f16a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80f16ac:	4a21      	ldr	r2, [pc, #132]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f16ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80f16b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80f16b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80f16ba:	f003 0301 	and.w	r3, r3, #1
 80f16be:	2b00      	cmp	r3, #0
 80f16c0:	d019      	beq.n	80f16f6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80f16c2:	f7f9 f847 	bl	80ea754 <HAL_GetTick>
 80f16c6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80f16ca:	e00d      	b.n	80f16e8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80f16cc:	f7f9 f842 	bl	80ea754 <HAL_GetTick>
 80f16d0:	4602      	mov	r2, r0
 80f16d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80f16d6:	1ad2      	subs	r2, r2, r3
 80f16d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80f16dc:	429a      	cmp	r2, r3
 80f16de:	d903      	bls.n	80f16e8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80f16e0:	2303      	movs	r3, #3
 80f16e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80f16e6:	e006      	b.n	80f16f6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80f16e8:	4b12      	ldr	r3, [pc, #72]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f16ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f16ee:	f003 0302 	and.w	r3, r3, #2
 80f16f2:	2b00      	cmp	r3, #0
 80f16f4:	d0ea      	beq.n	80f16cc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80f16f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f16fa:	2b00      	cmp	r3, #0
 80f16fc:	d13a      	bne.n	80f1774 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80f16fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1702:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80f1706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80f170a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80f170e:	d115      	bne.n	80f173c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80f1710:	4b08      	ldr	r3, [pc, #32]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f1712:	69db      	ldr	r3, [r3, #28]
 80f1714:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80f1718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f171c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80f1720:	091b      	lsrs	r3, r3, #4
 80f1722:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80f1726:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80f172a:	4a02      	ldr	r2, [pc, #8]	@ (80f1734 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80f172c:	430b      	orrs	r3, r1
 80f172e:	61d3      	str	r3, [r2, #28]
 80f1730:	e00a      	b.n	80f1748 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80f1732:	bf00      	nop
 80f1734:	44020c00 	.word	0x44020c00
 80f1738:	44020800 	.word	0x44020800
 80f173c:	4b9f      	ldr	r3, [pc, #636]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f173e:	69db      	ldr	r3, [r3, #28]
 80f1740:	4a9e      	ldr	r2, [pc, #632]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1742:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80f1746:	61d3      	str	r3, [r2, #28]
 80f1748:	4b9c      	ldr	r3, [pc, #624]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f174a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f174e:	4a9b      	ldr	r2, [pc, #620]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f1754:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80f1758:	4b98      	ldr	r3, [pc, #608]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f175a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80f175e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1762:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80f1766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80f176a:	4a94      	ldr	r2, [pc, #592]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f176c:	430b      	orrs	r3, r1
 80f176e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80f1772:	e008      	b.n	80f1786 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80f1774:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1778:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80f177c:	e003      	b.n	80f1786 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f177e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1782:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80f1786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f178e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80f1792:	663b      	str	r3, [r7, #96]	@ 0x60
 80f1794:	2300      	movs	r3, #0
 80f1796:	667b      	str	r3, [r7, #100]	@ 0x64
 80f1798:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80f179c:	460b      	mov	r3, r1
 80f179e:	4313      	orrs	r3, r2
 80f17a0:	d035      	beq.n	80f180e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80f17a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f17a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80f17aa:	2b30      	cmp	r3, #48	@ 0x30
 80f17ac:	d014      	beq.n	80f17d8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80f17ae:	2b30      	cmp	r3, #48	@ 0x30
 80f17b0:	d80e      	bhi.n	80f17d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80f17b2:	2b20      	cmp	r3, #32
 80f17b4:	d012      	beq.n	80f17dc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80f17b6:	2b20      	cmp	r3, #32
 80f17b8:	d80a      	bhi.n	80f17d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80f17ba:	2b00      	cmp	r3, #0
 80f17bc:	d010      	beq.n	80f17e0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80f17be:	2b10      	cmp	r3, #16
 80f17c0:	d106      	bne.n	80f17d0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f17c2:	4b7e      	ldr	r3, [pc, #504]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f17c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f17c6:	4a7d      	ldr	r2, [pc, #500]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f17c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f17cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80f17ce:	e008      	b.n	80f17e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f17d0:	2301      	movs	r3, #1
 80f17d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f17d6:	e004      	b.n	80f17e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80f17d8:	bf00      	nop
 80f17da:	e002      	b.n	80f17e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80f17dc:	bf00      	nop
 80f17de:	e000      	b.n	80f17e2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80f17e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f17e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f17e6:	2b00      	cmp	r3, #0
 80f17e8:	d10d      	bne.n	80f1806 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80f17ea:	4b74      	ldr	r3, [pc, #464]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f17ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f17f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80f17f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f17f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80f17fc:	4a6f      	ldr	r2, [pc, #444]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f17fe:	430b      	orrs	r3, r1
 80f1800:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80f1804:	e003      	b.n	80f180e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1806:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f180a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80f180e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1812:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1816:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80f181a:	65bb      	str	r3, [r7, #88]	@ 0x58
 80f181c:	2300      	movs	r3, #0
 80f181e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80f1820:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80f1824:	460b      	mov	r3, r1
 80f1826:	4313      	orrs	r3, r2
 80f1828:	d033      	beq.n	80f1892 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80f182a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f182e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80f1832:	2b00      	cmp	r3, #0
 80f1834:	d002      	beq.n	80f183c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80f1836:	2b40      	cmp	r3, #64	@ 0x40
 80f1838:	d007      	beq.n	80f184a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80f183a:	e010      	b.n	80f185e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f183c:	4b5f      	ldr	r3, [pc, #380]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1840:	4a5e      	ldr	r2, [pc, #376]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1846:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80f1848:	e00d      	b.n	80f1866 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f184a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f184e:	3308      	adds	r3, #8
 80f1850:	4618      	mov	r0, r3
 80f1852:	f000 fbd7 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1856:	4603      	mov	r3, r0
 80f1858:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80f185c:	e003      	b.n	80f1866 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80f185e:	2301      	movs	r3, #1
 80f1860:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1864:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1866:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f186a:	2b00      	cmp	r3, #0
 80f186c:	d10d      	bne.n	80f188a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80f186e:	4b53      	ldr	r3, [pc, #332]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1870:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f1874:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80f1878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f187c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80f1880:	4a4e      	ldr	r2, [pc, #312]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1882:	430b      	orrs	r3, r1
 80f1884:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f1888:	e003      	b.n	80f1892 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f188a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f188e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80f1892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1896:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f189a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80f189e:	653b      	str	r3, [r7, #80]	@ 0x50
 80f18a0:	2300      	movs	r3, #0
 80f18a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80f18a4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80f18a8:	460b      	mov	r3, r1
 80f18aa:	4313      	orrs	r3, r2
 80f18ac:	d033      	beq.n	80f1916 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80f18ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f18b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80f18b6:	2b00      	cmp	r3, #0
 80f18b8:	d002      	beq.n	80f18c0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80f18ba:	2b80      	cmp	r3, #128	@ 0x80
 80f18bc:	d007      	beq.n	80f18ce <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80f18be:	e010      	b.n	80f18e2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f18c0:	4b3e      	ldr	r3, [pc, #248]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f18c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f18c4:	4a3d      	ldr	r2, [pc, #244]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f18c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f18ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80f18cc:	e00d      	b.n	80f18ea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f18ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f18d2:	3308      	adds	r3, #8
 80f18d4:	4618      	mov	r0, r3
 80f18d6:	f000 fb95 	bl	80f2004 <RCCEx_PLL2_Config>
 80f18da:	4603      	mov	r3, r0
 80f18dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80f18e0:	e003      	b.n	80f18ea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80f18e2:	2301      	movs	r3, #1
 80f18e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f18e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f18ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f18ee:	2b00      	cmp	r3, #0
 80f18f0:	d10d      	bne.n	80f190e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80f18f2:	4b32      	ldr	r3, [pc, #200]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f18f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f18f8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80f18fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1900:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80f1904:	4a2d      	ldr	r2, [pc, #180]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f1906:	430b      	orrs	r3, r1
 80f1908:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80f190c:	e003      	b.n	80f1916 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f190e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1912:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80f1916:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f191e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80f1922:	64bb      	str	r3, [r7, #72]	@ 0x48
 80f1924:	2300      	movs	r3, #0
 80f1926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80f1928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80f192c:	460b      	mov	r3, r1
 80f192e:	4313      	orrs	r3, r2
 80f1930:	d04a      	beq.n	80f19c8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80f1932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f193a:	2b04      	cmp	r3, #4
 80f193c:	d827      	bhi.n	80f198e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80f193e:	a201      	add	r2, pc, #4	@ (adr r2, 80f1944 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80f1940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f1944:	080f1959 	.word	0x080f1959
 80f1948:	080f1967 	.word	0x080f1967
 80f194c:	080f197b 	.word	0x080f197b
 80f1950:	080f1997 	.word	0x080f1997
 80f1954:	080f1997 	.word	0x080f1997
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1958:	4b18      	ldr	r3, [pc, #96]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f195c:	4a17      	ldr	r2, [pc, #92]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f195e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1962:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80f1964:	e018      	b.n	80f1998 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f196a:	3308      	adds	r3, #8
 80f196c:	4618      	mov	r0, r3
 80f196e:	f000 fb49 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1972:	4603      	mov	r3, r0
 80f1974:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80f1978:	e00e      	b.n	80f1998 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f197a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f197e:	3330      	adds	r3, #48	@ 0x30
 80f1980:	4618      	mov	r0, r3
 80f1982:	f000 fbd7 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1986:	4603      	mov	r3, r0
 80f1988:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80f198c:	e004      	b.n	80f1998 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f198e:	2301      	movs	r3, #1
 80f1990:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1994:	e000      	b.n	80f1998 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80f1996:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1998:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f199c:	2b00      	cmp	r3, #0
 80f199e:	d10f      	bne.n	80f19c0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80f19a0:	4b06      	ldr	r3, [pc, #24]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f19a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f19a6:	f023 0107 	bic.w	r1, r3, #7
 80f19aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f19ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f19b2:	4a02      	ldr	r2, [pc, #8]	@ (80f19bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80f19b4:	430b      	orrs	r3, r1
 80f19b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80f19ba:	e005      	b.n	80f19c8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80f19bc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f19c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f19c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80f19c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f19cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f19d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80f19d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80f19d6:	2300      	movs	r3, #0
 80f19d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80f19da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80f19de:	460b      	mov	r3, r1
 80f19e0:	4313      	orrs	r3, r2
 80f19e2:	f000 8081 	beq.w	80f1ae8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80f19e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f19ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f19ee:	2b20      	cmp	r3, #32
 80f19f0:	d85f      	bhi.n	80f1ab2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80f19f2:	a201      	add	r2, pc, #4	@ (adr r2, 80f19f8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80f19f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f19f8:	080f1a7d 	.word	0x080f1a7d
 80f19fc:	080f1ab3 	.word	0x080f1ab3
 80f1a00:	080f1ab3 	.word	0x080f1ab3
 80f1a04:	080f1ab3 	.word	0x080f1ab3
 80f1a08:	080f1ab3 	.word	0x080f1ab3
 80f1a0c:	080f1ab3 	.word	0x080f1ab3
 80f1a10:	080f1ab3 	.word	0x080f1ab3
 80f1a14:	080f1ab3 	.word	0x080f1ab3
 80f1a18:	080f1a8b 	.word	0x080f1a8b
 80f1a1c:	080f1ab3 	.word	0x080f1ab3
 80f1a20:	080f1ab3 	.word	0x080f1ab3
 80f1a24:	080f1ab3 	.word	0x080f1ab3
 80f1a28:	080f1ab3 	.word	0x080f1ab3
 80f1a2c:	080f1ab3 	.word	0x080f1ab3
 80f1a30:	080f1ab3 	.word	0x080f1ab3
 80f1a34:	080f1ab3 	.word	0x080f1ab3
 80f1a38:	080f1a9f 	.word	0x080f1a9f
 80f1a3c:	080f1ab3 	.word	0x080f1ab3
 80f1a40:	080f1ab3 	.word	0x080f1ab3
 80f1a44:	080f1ab3 	.word	0x080f1ab3
 80f1a48:	080f1ab3 	.word	0x080f1ab3
 80f1a4c:	080f1ab3 	.word	0x080f1ab3
 80f1a50:	080f1ab3 	.word	0x080f1ab3
 80f1a54:	080f1ab3 	.word	0x080f1ab3
 80f1a58:	080f1abb 	.word	0x080f1abb
 80f1a5c:	080f1ab3 	.word	0x080f1ab3
 80f1a60:	080f1ab3 	.word	0x080f1ab3
 80f1a64:	080f1ab3 	.word	0x080f1ab3
 80f1a68:	080f1ab3 	.word	0x080f1ab3
 80f1a6c:	080f1ab3 	.word	0x080f1ab3
 80f1a70:	080f1ab3 	.word	0x080f1ab3
 80f1a74:	080f1ab3 	.word	0x080f1ab3
 80f1a78:	080f1abb 	.word	0x080f1abb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1a7c:	4bab      	ldr	r3, [pc, #684]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1a80:	4aaa      	ldr	r2, [pc, #680]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1a86:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80f1a88:	e018      	b.n	80f1abc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1a8e:	3308      	adds	r3, #8
 80f1a90:	4618      	mov	r0, r3
 80f1a92:	f000 fab7 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1a96:	4603      	mov	r3, r0
 80f1a98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80f1a9c:	e00e      	b.n	80f1abc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1aa2:	3330      	adds	r3, #48	@ 0x30
 80f1aa4:	4618      	mov	r0, r3
 80f1aa6:	f000 fb45 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1aaa:	4603      	mov	r3, r0
 80f1aac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80f1ab0:	e004      	b.n	80f1abc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1ab2:	2301      	movs	r3, #1
 80f1ab4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1ab8:	e000      	b.n	80f1abc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80f1aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1abc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1ac0:	2b00      	cmp	r3, #0
 80f1ac2:	d10d      	bne.n	80f1ae0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80f1ac4:	4b99      	ldr	r3, [pc, #612]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f1aca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80f1ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f1ad6:	4a95      	ldr	r2, [pc, #596]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1ad8:	430b      	orrs	r3, r1
 80f1ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80f1ade:	e003      	b.n	80f1ae8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1ae0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1ae4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80f1ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1af0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80f1af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80f1af6:	2300      	movs	r3, #0
 80f1af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80f1afa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80f1afe:	460b      	mov	r3, r1
 80f1b00:	4313      	orrs	r3, r2
 80f1b02:	d04e      	beq.n	80f1ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80f1b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f1b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f1b10:	d02e      	beq.n	80f1b70 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80f1b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f1b16:	d827      	bhi.n	80f1b68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80f1b18:	2bc0      	cmp	r3, #192	@ 0xc0
 80f1b1a:	d02b      	beq.n	80f1b74 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80f1b1c:	2bc0      	cmp	r3, #192	@ 0xc0
 80f1b1e:	d823      	bhi.n	80f1b68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80f1b20:	2b80      	cmp	r3, #128	@ 0x80
 80f1b22:	d017      	beq.n	80f1b54 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80f1b24:	2b80      	cmp	r3, #128	@ 0x80
 80f1b26:	d81f      	bhi.n	80f1b68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80f1b28:	2b00      	cmp	r3, #0
 80f1b2a:	d002      	beq.n	80f1b32 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80f1b2c:	2b40      	cmp	r3, #64	@ 0x40
 80f1b2e:	d007      	beq.n	80f1b40 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80f1b30:	e01a      	b.n	80f1b68 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1b32:	4b7e      	ldr	r3, [pc, #504]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1b36:	4a7d      	ldr	r2, [pc, #500]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1b3c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80f1b3e:	e01a      	b.n	80f1b76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1b44:	3308      	adds	r3, #8
 80f1b46:	4618      	mov	r0, r3
 80f1b48:	f000 fa5c 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1b4c:	4603      	mov	r3, r0
 80f1b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80f1b52:	e010      	b.n	80f1b76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1b58:	3330      	adds	r3, #48	@ 0x30
 80f1b5a:	4618      	mov	r0, r3
 80f1b5c:	f000 faea 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1b60:	4603      	mov	r3, r0
 80f1b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80f1b66:	e006      	b.n	80f1b76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1b68:	2301      	movs	r3, #1
 80f1b6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1b6e:	e002      	b.n	80f1b76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80f1b70:	bf00      	nop
 80f1b72:	e000      	b.n	80f1b76 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80f1b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1b76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1b7a:	2b00      	cmp	r3, #0
 80f1b7c:	d10d      	bne.n	80f1b9a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80f1b7e:	4b6b      	ldr	r3, [pc, #428]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f1b84:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80f1b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f1b90:	4a66      	ldr	r2, [pc, #408]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1b92:	430b      	orrs	r3, r1
 80f1b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80f1b98:	e003      	b.n	80f1ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1b9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80f1ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1baa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80f1bae:	633b      	str	r3, [r7, #48]	@ 0x30
 80f1bb0:	2300      	movs	r3, #0
 80f1bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 80f1bb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80f1bb8:	460b      	mov	r3, r1
 80f1bba:	4313      	orrs	r3, r2
 80f1bbc:	d055      	beq.n	80f1c6a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80f1bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1bc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80f1bc6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80f1bca:	d031      	beq.n	80f1c30 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80f1bcc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80f1bd0:	d82a      	bhi.n	80f1c28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80f1bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80f1bd6:	d02d      	beq.n	80f1c34 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80f1bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80f1bdc:	d824      	bhi.n	80f1c28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80f1bde:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80f1be2:	d029      	beq.n	80f1c38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80f1be4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80f1be8:	d81e      	bhi.n	80f1c28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80f1bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f1bee:	d011      	beq.n	80f1c14 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80f1bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80f1bf4:	d818      	bhi.n	80f1c28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80f1bf6:	2b00      	cmp	r3, #0
 80f1bf8:	d020      	beq.n	80f1c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80f1bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f1bfe:	d113      	bne.n	80f1c28 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1c04:	3308      	adds	r3, #8
 80f1c06:	4618      	mov	r0, r3
 80f1c08:	f000 f9fc 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1c0c:	4603      	mov	r3, r0
 80f1c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80f1c12:	e014      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1c18:	3330      	adds	r3, #48	@ 0x30
 80f1c1a:	4618      	mov	r0, r3
 80f1c1c:	f000 fa8a 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1c20:	4603      	mov	r3, r0
 80f1c22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80f1c26:	e00a      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1c28:	2301      	movs	r3, #1
 80f1c2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1c2e:	e006      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80f1c30:	bf00      	nop
 80f1c32:	e004      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80f1c34:	bf00      	nop
 80f1c36:	e002      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80f1c38:	bf00      	nop
 80f1c3a:	e000      	b.n	80f1c3e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80f1c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1c3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1c42:	2b00      	cmp	r3, #0
 80f1c44:	d10d      	bne.n	80f1c62 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80f1c46:	4b39      	ldr	r3, [pc, #228]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f1c4c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80f1c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1c54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80f1c58:	4a34      	ldr	r2, [pc, #208]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1c5a:	430b      	orrs	r3, r1
 80f1c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80f1c60:	e003      	b.n	80f1c6a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1c62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1c66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80f1c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1c72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80f1c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 80f1c78:	2300      	movs	r3, #0
 80f1c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80f1c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80f1c80:	460b      	mov	r3, r1
 80f1c82:	4313      	orrs	r3, r2
 80f1c84:	d058      	beq.n	80f1d38 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80f1c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f1c8e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f1c92:	d031      	beq.n	80f1cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80f1c94:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80f1c98:	d82a      	bhi.n	80f1cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80f1c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f1c9e:	d02d      	beq.n	80f1cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80f1ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80f1ca4:	d824      	bhi.n	80f1cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80f1ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f1caa:	d029      	beq.n	80f1d00 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80f1cac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80f1cb0:	d81e      	bhi.n	80f1cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80f1cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f1cb6:	d011      	beq.n	80f1cdc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80f1cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f1cbc:	d818      	bhi.n	80f1cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80f1cbe:	2b00      	cmp	r3, #0
 80f1cc0:	d020      	beq.n	80f1d04 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80f1cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80f1cc6:	d113      	bne.n	80f1cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1ccc:	3308      	adds	r3, #8
 80f1cce:	4618      	mov	r0, r3
 80f1cd0:	f000 f998 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1cd4:	4603      	mov	r3, r0
 80f1cd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80f1cda:	e014      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1ce0:	3330      	adds	r3, #48	@ 0x30
 80f1ce2:	4618      	mov	r0, r3
 80f1ce4:	f000 fa26 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1ce8:	4603      	mov	r3, r0
 80f1cea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80f1cee:	e00a      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1cf0:	2301      	movs	r3, #1
 80f1cf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1cf6:	e006      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80f1cf8:	bf00      	nop
 80f1cfa:	e004      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80f1cfc:	bf00      	nop
 80f1cfe:	e002      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80f1d00:	bf00      	nop
 80f1d02:	e000      	b.n	80f1d06 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80f1d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1d0a:	2b00      	cmp	r3, #0
 80f1d0c:	d110      	bne.n	80f1d30 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80f1d0e:	4b07      	ldr	r3, [pc, #28]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f1d14:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80f1d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80f1d20:	4902      	ldr	r1, [pc, #8]	@ (80f1d2c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80f1d22:	4313      	orrs	r3, r2
 80f1d24:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80f1d28:	e006      	b.n	80f1d38 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80f1d2a:	bf00      	nop
 80f1d2c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1d30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1d34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80f1d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1d40:	2100      	movs	r1, #0
 80f1d42:	6239      	str	r1, [r7, #32]
 80f1d44:	f003 0301 	and.w	r3, r3, #1
 80f1d48:	627b      	str	r3, [r7, #36]	@ 0x24
 80f1d4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80f1d4e:	460b      	mov	r3, r1
 80f1d50:	4313      	orrs	r3, r2
 80f1d52:	d055      	beq.n	80f1e00 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80f1d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80f1d5c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80f1d60:	d031      	beq.n	80f1dc6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80f1d62:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80f1d66:	d82a      	bhi.n	80f1dbe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80f1d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f1d6c:	d02d      	beq.n	80f1dca <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80f1d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80f1d72:	d824      	bhi.n	80f1dbe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80f1d74:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80f1d78:	d029      	beq.n	80f1dce <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80f1d7a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80f1d7e:	d81e      	bhi.n	80f1dbe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80f1d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f1d84:	d011      	beq.n	80f1daa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80f1d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80f1d8a:	d818      	bhi.n	80f1dbe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80f1d8c:	2b00      	cmp	r3, #0
 80f1d8e:	d020      	beq.n	80f1dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80f1d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80f1d94:	d113      	bne.n	80f1dbe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1d9a:	3308      	adds	r3, #8
 80f1d9c:	4618      	mov	r0, r3
 80f1d9e:	f000 f931 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1da2:	4603      	mov	r3, r0
 80f1da4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80f1da8:	e014      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1dae:	3330      	adds	r3, #48	@ 0x30
 80f1db0:	4618      	mov	r0, r3
 80f1db2:	f000 f9bf 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1db6:	4603      	mov	r3, r0
 80f1db8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80f1dbc:	e00a      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1dbe:	2301      	movs	r3, #1
 80f1dc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1dc4:	e006      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80f1dc6:	bf00      	nop
 80f1dc8:	e004      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80f1dca:	bf00      	nop
 80f1dcc:	e002      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80f1dce:	bf00      	nop
 80f1dd0:	e000      	b.n	80f1dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80f1dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1dd4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1dd8:	2b00      	cmp	r3, #0
 80f1dda:	d10d      	bne.n	80f1df8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80f1ddc:	4b88      	ldr	r3, [pc, #544]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80f1de2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80f1de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80f1dee:	4984      	ldr	r1, [pc, #528]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1df0:	4313      	orrs	r3, r2
 80f1df2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80f1df6:	e003      	b.n	80f1e00 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1df8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1dfc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80f1e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1e08:	2100      	movs	r1, #0
 80f1e0a:	61b9      	str	r1, [r7, #24]
 80f1e0c:	f003 0302 	and.w	r3, r3, #2
 80f1e10:	61fb      	str	r3, [r7, #28]
 80f1e12:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80f1e16:	460b      	mov	r3, r1
 80f1e18:	4313      	orrs	r3, r2
 80f1e1a:	d03d      	beq.n	80f1e98 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80f1e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1e20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f1e24:	2b03      	cmp	r3, #3
 80f1e26:	d81c      	bhi.n	80f1e62 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80f1e28:	a201      	add	r2, pc, #4	@ (adr r2, 80f1e30 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80f1e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f1e2e:	bf00      	nop
 80f1e30:	080f1e6b 	.word	0x080f1e6b
 80f1e34:	080f1e41 	.word	0x080f1e41
 80f1e38:	080f1e4f 	.word	0x080f1e4f
 80f1e3c:	080f1e6b 	.word	0x080f1e6b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1e40:	4b6f      	ldr	r3, [pc, #444]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1e44:	4a6e      	ldr	r2, [pc, #440]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1e4a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80f1e4c:	e00e      	b.n	80f1e6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1e52:	3308      	adds	r3, #8
 80f1e54:	4618      	mov	r0, r3
 80f1e56:	f000 f8d5 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1e5a:	4603      	mov	r3, r0
 80f1e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80f1e60:	e004      	b.n	80f1e6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1e62:	2301      	movs	r3, #1
 80f1e64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1e68:	e000      	b.n	80f1e6c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80f1e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1e70:	2b00      	cmp	r3, #0
 80f1e72:	d10d      	bne.n	80f1e90 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80f1e74:	4b62      	ldr	r3, [pc, #392]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f1e7a:	f023 0203 	bic.w	r2, r3, #3
 80f1e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1e82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80f1e86:	495e      	ldr	r1, [pc, #376]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1e88:	4313      	orrs	r3, r2
 80f1e8a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80f1e8e:	e003      	b.n	80f1e98 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1e90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1e94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80f1e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1ea0:	2100      	movs	r1, #0
 80f1ea2:	6139      	str	r1, [r7, #16]
 80f1ea4:	f003 0304 	and.w	r3, r3, #4
 80f1ea8:	617b      	str	r3, [r7, #20]
 80f1eaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80f1eae:	460b      	mov	r3, r1
 80f1eb0:	4313      	orrs	r3, r2
 80f1eb2:	d03a      	beq.n	80f1f2a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80f1eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1eb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80f1ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f1ec0:	d00e      	beq.n	80f1ee0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80f1ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80f1ec6:	d815      	bhi.n	80f1ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80f1ec8:	2b00      	cmp	r3, #0
 80f1eca:	d017      	beq.n	80f1efc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80f1ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80f1ed0:	d110      	bne.n	80f1ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1ed2:	4b4b      	ldr	r3, [pc, #300]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1ed6:	4a4a      	ldr	r2, [pc, #296]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1edc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80f1ede:	e00e      	b.n	80f1efe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80f1ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1ee4:	3308      	adds	r3, #8
 80f1ee6:	4618      	mov	r0, r3
 80f1ee8:	f000 f88c 	bl	80f2004 <RCCEx_PLL2_Config>
 80f1eec:	4603      	mov	r3, r0
 80f1eee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80f1ef2:	e004      	b.n	80f1efe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80f1ef4:	2301      	movs	r3, #1
 80f1ef6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1efa:	e000      	b.n	80f1efe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80f1efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1f02:	2b00      	cmp	r3, #0
 80f1f04:	d10d      	bne.n	80f1f22 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80f1f06:	4b3e      	ldr	r3, [pc, #248]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f1f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80f1f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1f14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80f1f18:	4939      	ldr	r1, [pc, #228]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1f1a:	4313      	orrs	r3, r2
 80f1f1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80f1f20:	e003      	b.n	80f1f2a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1f22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1f26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80f1f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1f32:	2100      	movs	r1, #0
 80f1f34:	60b9      	str	r1, [r7, #8]
 80f1f36:	f003 0310 	and.w	r3, r3, #16
 80f1f3a:	60fb      	str	r3, [r7, #12]
 80f1f3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80f1f40:	460b      	mov	r3, r1
 80f1f42:	4313      	orrs	r3, r2
 80f1f44:	d038      	beq.n	80f1fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80f1f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1f4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80f1f4e:	2b30      	cmp	r3, #48	@ 0x30
 80f1f50:	d01b      	beq.n	80f1f8a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80f1f52:	2b30      	cmp	r3, #48	@ 0x30
 80f1f54:	d815      	bhi.n	80f1f82 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80f1f56:	2b10      	cmp	r3, #16
 80f1f58:	d002      	beq.n	80f1f60 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80f1f5a:	2b20      	cmp	r3, #32
 80f1f5c:	d007      	beq.n	80f1f6e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80f1f5e:	e010      	b.n	80f1f82 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80f1f60:	4b27      	ldr	r3, [pc, #156]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f1f64:	4a26      	ldr	r2, [pc, #152]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80f1f6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80f1f6c:	e00e      	b.n	80f1f8c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80f1f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1f72:	3330      	adds	r3, #48	@ 0x30
 80f1f74:	4618      	mov	r0, r3
 80f1f76:	f000 f8dd 	bl	80f2134 <RCCEx_PLL3_Config>
 80f1f7a:	4603      	mov	r3, r0
 80f1f7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80f1f80:	e004      	b.n	80f1f8c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80f1f82:	2301      	movs	r3, #1
 80f1f84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80f1f88:	e000      	b.n	80f1f8c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80f1f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 80f1f8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1f90:	2b00      	cmp	r3, #0
 80f1f92:	d10d      	bne.n	80f1fb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80f1f94:	4b1a      	ldr	r3, [pc, #104]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1f96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80f1f9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80f1f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1fa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80f1fa6:	4916      	ldr	r1, [pc, #88]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1fa8:	4313      	orrs	r3, r2
 80f1faa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80f1fae:	e003      	b.n	80f1fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80f1fb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80f1fb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80f1fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80f1fc0:	2100      	movs	r1, #0
 80f1fc2:	6039      	str	r1, [r7, #0]
 80f1fc4:	f003 0308 	and.w	r3, r3, #8
 80f1fc8:	607b      	str	r3, [r7, #4]
 80f1fca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80f1fce:	460b      	mov	r3, r1
 80f1fd0:	4313      	orrs	r3, r2
 80f1fd2:	d00c      	beq.n	80f1fee <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80f1fd4:	4b0a      	ldr	r3, [pc, #40]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80f1fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80f1fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80f1fe2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80f1fe6:	4906      	ldr	r1, [pc, #24]	@ (80f2000 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80f1fe8:	4313      	orrs	r3, r2
 80f1fea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80f1fee:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80f1ff2:	4618      	mov	r0, r3
 80f1ff4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80f1ff8:	46bd      	mov	sp, r7
 80f1ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80f1ffe:	bf00      	nop
 80f2000:	44020c00 	.word	0x44020c00

080f2004 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80f2004:	b580      	push	{r7, lr}
 80f2006:	b084      	sub	sp, #16
 80f2008:	af00      	add	r7, sp, #0
 80f200a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80f200c:	4b48      	ldr	r3, [pc, #288]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f200e:	681b      	ldr	r3, [r3, #0]
 80f2010:	4a47      	ldr	r2, [pc, #284]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f2012:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80f2016:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80f2018:	f7f8 fb9c 	bl	80ea754 <HAL_GetTick>
 80f201c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80f201e:	e008      	b.n	80f2032 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80f2020:	f7f8 fb98 	bl	80ea754 <HAL_GetTick>
 80f2024:	4602      	mov	r2, r0
 80f2026:	68fb      	ldr	r3, [r7, #12]
 80f2028:	1ad3      	subs	r3, r2, r3
 80f202a:	2b02      	cmp	r3, #2
 80f202c:	d901      	bls.n	80f2032 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80f202e:	2303      	movs	r3, #3
 80f2030:	e07a      	b.n	80f2128 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80f2032:	4b3f      	ldr	r3, [pc, #252]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f2034:	681b      	ldr	r3, [r3, #0]
 80f2036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80f203a:	2b00      	cmp	r3, #0
 80f203c:	d1f0      	bne.n	80f2020 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80f203e:	4b3c      	ldr	r3, [pc, #240]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f2040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f2042:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80f2046:	f023 0303 	bic.w	r3, r3, #3
 80f204a:	687a      	ldr	r2, [r7, #4]
 80f204c:	6811      	ldr	r1, [r2, #0]
 80f204e:	687a      	ldr	r2, [r7, #4]
 80f2050:	6852      	ldr	r2, [r2, #4]
 80f2052:	0212      	lsls	r2, r2, #8
 80f2054:	430a      	orrs	r2, r1
 80f2056:	4936      	ldr	r1, [pc, #216]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f2058:	4313      	orrs	r3, r2
 80f205a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80f205c:	687b      	ldr	r3, [r7, #4]
 80f205e:	689b      	ldr	r3, [r3, #8]
 80f2060:	3b01      	subs	r3, #1
 80f2062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80f2066:	687b      	ldr	r3, [r7, #4]
 80f2068:	68db      	ldr	r3, [r3, #12]
 80f206a:	3b01      	subs	r3, #1
 80f206c:	025b      	lsls	r3, r3, #9
 80f206e:	b29b      	uxth	r3, r3
 80f2070:	431a      	orrs	r2, r3
 80f2072:	687b      	ldr	r3, [r7, #4]
 80f2074:	691b      	ldr	r3, [r3, #16]
 80f2076:	3b01      	subs	r3, #1
 80f2078:	041b      	lsls	r3, r3, #16
 80f207a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80f207e:	431a      	orrs	r2, r3
 80f2080:	687b      	ldr	r3, [r7, #4]
 80f2082:	695b      	ldr	r3, [r3, #20]
 80f2084:	3b01      	subs	r3, #1
 80f2086:	061b      	lsls	r3, r3, #24
 80f2088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80f208c:	4928      	ldr	r1, [pc, #160]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f208e:	4313      	orrs	r3, r2
 80f2090:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80f2092:	4b27      	ldr	r3, [pc, #156]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f2094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f2096:	f023 020c 	bic.w	r2, r3, #12
 80f209a:	687b      	ldr	r3, [r7, #4]
 80f209c:	699b      	ldr	r3, [r3, #24]
 80f209e:	4924      	ldr	r1, [pc, #144]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20a0:	4313      	orrs	r3, r2
 80f20a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80f20a4:	4b22      	ldr	r3, [pc, #136]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f20a8:	f023 0220 	bic.w	r2, r3, #32
 80f20ac:	687b      	ldr	r3, [r7, #4]
 80f20ae:	69db      	ldr	r3, [r3, #28]
 80f20b0:	491f      	ldr	r1, [pc, #124]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20b2:	4313      	orrs	r3, r2
 80f20b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80f20b6:	4b1e      	ldr	r3, [pc, #120]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80f20ba:	687b      	ldr	r3, [r7, #4]
 80f20bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f20be:	491c      	ldr	r1, [pc, #112]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20c0:	4313      	orrs	r3, r2
 80f20c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80f20c4:	4b1a      	ldr	r3, [pc, #104]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f20c8:	4a19      	ldr	r2, [pc, #100]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20ca:	f023 0310 	bic.w	r3, r3, #16
 80f20ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80f20d0:	4b17      	ldr	r3, [pc, #92]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80f20d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80f20d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80f20dc:	687a      	ldr	r2, [r7, #4]
 80f20de:	6a12      	ldr	r2, [r2, #32]
 80f20e0:	00d2      	lsls	r2, r2, #3
 80f20e2:	4913      	ldr	r1, [pc, #76]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20e4:	4313      	orrs	r3, r2
 80f20e6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80f20e8:	4b11      	ldr	r3, [pc, #68]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f20ec:	4a10      	ldr	r2, [pc, #64]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20ee:	f043 0310 	orr.w	r3, r3, #16
 80f20f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80f20f4:	4b0e      	ldr	r3, [pc, #56]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20f6:	681b      	ldr	r3, [r3, #0]
 80f20f8:	4a0d      	ldr	r2, [pc, #52]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f20fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80f20fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80f2100:	f7f8 fb28 	bl	80ea754 <HAL_GetTick>
 80f2104:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80f2106:	e008      	b.n	80f211a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80f2108:	f7f8 fb24 	bl	80ea754 <HAL_GetTick>
 80f210c:	4602      	mov	r2, r0
 80f210e:	68fb      	ldr	r3, [r7, #12]
 80f2110:	1ad3      	subs	r3, r2, r3
 80f2112:	2b02      	cmp	r3, #2
 80f2114:	d901      	bls.n	80f211a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80f2116:	2303      	movs	r3, #3
 80f2118:	e006      	b.n	80f2128 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80f211a:	4b05      	ldr	r3, [pc, #20]	@ (80f2130 <RCCEx_PLL2_Config+0x12c>)
 80f211c:	681b      	ldr	r3, [r3, #0]
 80f211e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80f2122:	2b00      	cmp	r3, #0
 80f2124:	d0f0      	beq.n	80f2108 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80f2126:	2300      	movs	r3, #0

}
 80f2128:	4618      	mov	r0, r3
 80f212a:	3710      	adds	r7, #16
 80f212c:	46bd      	mov	sp, r7
 80f212e:	bd80      	pop	{r7, pc}
 80f2130:	44020c00 	.word	0x44020c00

080f2134 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80f2134:	b580      	push	{r7, lr}
 80f2136:	b084      	sub	sp, #16
 80f2138:	af00      	add	r7, sp, #0
 80f213a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80f213c:	4b48      	ldr	r3, [pc, #288]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f213e:	681b      	ldr	r3, [r3, #0]
 80f2140:	4a47      	ldr	r2, [pc, #284]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80f2146:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80f2148:	f7f8 fb04 	bl	80ea754 <HAL_GetTick>
 80f214c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80f214e:	e008      	b.n	80f2162 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80f2150:	f7f8 fb00 	bl	80ea754 <HAL_GetTick>
 80f2154:	4602      	mov	r2, r0
 80f2156:	68fb      	ldr	r3, [r7, #12]
 80f2158:	1ad3      	subs	r3, r2, r3
 80f215a:	2b02      	cmp	r3, #2
 80f215c:	d901      	bls.n	80f2162 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80f215e:	2303      	movs	r3, #3
 80f2160:	e07a      	b.n	80f2258 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80f2162:	4b3f      	ldr	r3, [pc, #252]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2164:	681b      	ldr	r3, [r3, #0]
 80f2166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80f216a:	2b00      	cmp	r3, #0
 80f216c:	d1f0      	bne.n	80f2150 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80f216e:	4b3c      	ldr	r3, [pc, #240]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f2172:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80f2176:	f023 0303 	bic.w	r3, r3, #3
 80f217a:	687a      	ldr	r2, [r7, #4]
 80f217c:	6811      	ldr	r1, [r2, #0]
 80f217e:	687a      	ldr	r2, [r7, #4]
 80f2180:	6852      	ldr	r2, [r2, #4]
 80f2182:	0212      	lsls	r2, r2, #8
 80f2184:	430a      	orrs	r2, r1
 80f2186:	4936      	ldr	r1, [pc, #216]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2188:	4313      	orrs	r3, r2
 80f218a:	630b      	str	r3, [r1, #48]	@ 0x30
 80f218c:	687b      	ldr	r3, [r7, #4]
 80f218e:	689b      	ldr	r3, [r3, #8]
 80f2190:	3b01      	subs	r3, #1
 80f2192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80f2196:	687b      	ldr	r3, [r7, #4]
 80f2198:	68db      	ldr	r3, [r3, #12]
 80f219a:	3b01      	subs	r3, #1
 80f219c:	025b      	lsls	r3, r3, #9
 80f219e:	b29b      	uxth	r3, r3
 80f21a0:	431a      	orrs	r2, r3
 80f21a2:	687b      	ldr	r3, [r7, #4]
 80f21a4:	691b      	ldr	r3, [r3, #16]
 80f21a6:	3b01      	subs	r3, #1
 80f21a8:	041b      	lsls	r3, r3, #16
 80f21aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80f21ae:	431a      	orrs	r2, r3
 80f21b0:	687b      	ldr	r3, [r7, #4]
 80f21b2:	695b      	ldr	r3, [r3, #20]
 80f21b4:	3b01      	subs	r3, #1
 80f21b6:	061b      	lsls	r3, r3, #24
 80f21b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80f21bc:	4928      	ldr	r1, [pc, #160]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21be:	4313      	orrs	r3, r2
 80f21c0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80f21c2:	4b27      	ldr	r3, [pc, #156]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f21c6:	f023 020c 	bic.w	r2, r3, #12
 80f21ca:	687b      	ldr	r3, [r7, #4]
 80f21cc:	699b      	ldr	r3, [r3, #24]
 80f21ce:	4924      	ldr	r1, [pc, #144]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21d0:	4313      	orrs	r3, r2
 80f21d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80f21d4:	4b22      	ldr	r3, [pc, #136]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f21d8:	f023 0220 	bic.w	r2, r3, #32
 80f21dc:	687b      	ldr	r3, [r7, #4]
 80f21de:	69db      	ldr	r3, [r3, #28]
 80f21e0:	491f      	ldr	r1, [pc, #124]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21e2:	4313      	orrs	r3, r2
 80f21e4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80f21e6:	4b1e      	ldr	r3, [pc, #120]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80f21ea:	687b      	ldr	r3, [r7, #4]
 80f21ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f21ee:	491c      	ldr	r1, [pc, #112]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21f0:	4313      	orrs	r3, r2
 80f21f2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80f21f4:	4b1a      	ldr	r3, [pc, #104]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f21f8:	4a19      	ldr	r2, [pc, #100]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f21fa:	f023 0310 	bic.w	r3, r3, #16
 80f21fe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80f2200:	4b17      	ldr	r3, [pc, #92]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80f2204:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80f2208:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80f220c:	687a      	ldr	r2, [r7, #4]
 80f220e:	6a12      	ldr	r2, [r2, #32]
 80f2210:	00d2      	lsls	r2, r2, #3
 80f2212:	4913      	ldr	r1, [pc, #76]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2214:	4313      	orrs	r3, r2
 80f2216:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80f2218:	4b11      	ldr	r3, [pc, #68]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f221c:	4a10      	ldr	r2, [pc, #64]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f221e:	f043 0310 	orr.w	r3, r3, #16
 80f2222:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80f2224:	4b0e      	ldr	r3, [pc, #56]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f2226:	681b      	ldr	r3, [r3, #0]
 80f2228:	4a0d      	ldr	r2, [pc, #52]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f222a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80f222e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80f2230:	f7f8 fa90 	bl	80ea754 <HAL_GetTick>
 80f2234:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80f2236:	e008      	b.n	80f224a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80f2238:	f7f8 fa8c 	bl	80ea754 <HAL_GetTick>
 80f223c:	4602      	mov	r2, r0
 80f223e:	68fb      	ldr	r3, [r7, #12]
 80f2240:	1ad3      	subs	r3, r2, r3
 80f2242:	2b02      	cmp	r3, #2
 80f2244:	d901      	bls.n	80f224a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80f2246:	2303      	movs	r3, #3
 80f2248:	e006      	b.n	80f2258 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80f224a:	4b05      	ldr	r3, [pc, #20]	@ (80f2260 <RCCEx_PLL3_Config+0x12c>)
 80f224c:	681b      	ldr	r3, [r3, #0]
 80f224e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80f2252:	2b00      	cmp	r3, #0
 80f2254:	d0f0      	beq.n	80f2238 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80f2256:	2300      	movs	r3, #0
}
 80f2258:	4618      	mov	r0, r3
 80f225a:	3710      	adds	r7, #16
 80f225c:	46bd      	mov	sp, r7
 80f225e:	bd80      	pop	{r7, pc}
 80f2260:	44020c00 	.word	0x44020c00

080f2264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80f2264:	b580      	push	{r7, lr}
 80f2266:	b084      	sub	sp, #16
 80f2268:	af00      	add	r7, sp, #0
 80f226a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80f226c:	687b      	ldr	r3, [r7, #4]
 80f226e:	2b00      	cmp	r3, #0
 80f2270:	d101      	bne.n	80f2276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80f2272:	2301      	movs	r3, #1
 80f2274:	e162      	b.n	80f253c <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80f2276:	687b      	ldr	r3, [r7, #4]
 80f2278:	681b      	ldr	r3, [r3, #0]
 80f227a:	4a70      	ldr	r2, [pc, #448]	@ (80f243c <HAL_SPI_Init+0x1d8>)
 80f227c:	4293      	cmp	r3, r2
 80f227e:	d018      	beq.n	80f22b2 <HAL_SPI_Init+0x4e>
 80f2280:	687b      	ldr	r3, [r7, #4]
 80f2282:	681b      	ldr	r3, [r3, #0]
 80f2284:	4a6e      	ldr	r2, [pc, #440]	@ (80f2440 <HAL_SPI_Init+0x1dc>)
 80f2286:	4293      	cmp	r3, r2
 80f2288:	d013      	beq.n	80f22b2 <HAL_SPI_Init+0x4e>
 80f228a:	687b      	ldr	r3, [r7, #4]
 80f228c:	681b      	ldr	r3, [r3, #0]
 80f228e:	4a6d      	ldr	r2, [pc, #436]	@ (80f2444 <HAL_SPI_Init+0x1e0>)
 80f2290:	4293      	cmp	r3, r2
 80f2292:	d00e      	beq.n	80f22b2 <HAL_SPI_Init+0x4e>
 80f2294:	687b      	ldr	r3, [r7, #4]
 80f2296:	681b      	ldr	r3, [r3, #0]
 80f2298:	4a6b      	ldr	r2, [pc, #428]	@ (80f2448 <HAL_SPI_Init+0x1e4>)
 80f229a:	4293      	cmp	r3, r2
 80f229c:	d009      	beq.n	80f22b2 <HAL_SPI_Init+0x4e>
 80f229e:	687b      	ldr	r3, [r7, #4]
 80f22a0:	681b      	ldr	r3, [r3, #0]
 80f22a2:	4a6a      	ldr	r2, [pc, #424]	@ (80f244c <HAL_SPI_Init+0x1e8>)
 80f22a4:	4293      	cmp	r3, r2
 80f22a6:	d004      	beq.n	80f22b2 <HAL_SPI_Init+0x4e>
 80f22a8:	687b      	ldr	r3, [r7, #4]
 80f22aa:	681b      	ldr	r3, [r3, #0]
 80f22ac:	4a68      	ldr	r2, [pc, #416]	@ (80f2450 <HAL_SPI_Init+0x1ec>)
 80f22ae:	4293      	cmp	r3, r2
 80f22b0:	e000      	b.n	80f22b4 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80f22b2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80f22b4:	687b      	ldr	r3, [r7, #4]
 80f22b6:	2200      	movs	r2, #0
 80f22b8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80f22ba:	687b      	ldr	r3, [r7, #4]
 80f22bc:	681b      	ldr	r3, [r3, #0]
 80f22be:	4a5f      	ldr	r2, [pc, #380]	@ (80f243c <HAL_SPI_Init+0x1d8>)
 80f22c0:	4293      	cmp	r3, r2
 80f22c2:	d018      	beq.n	80f22f6 <HAL_SPI_Init+0x92>
 80f22c4:	687b      	ldr	r3, [r7, #4]
 80f22c6:	681b      	ldr	r3, [r3, #0]
 80f22c8:	4a5d      	ldr	r2, [pc, #372]	@ (80f2440 <HAL_SPI_Init+0x1dc>)
 80f22ca:	4293      	cmp	r3, r2
 80f22cc:	d013      	beq.n	80f22f6 <HAL_SPI_Init+0x92>
 80f22ce:	687b      	ldr	r3, [r7, #4]
 80f22d0:	681b      	ldr	r3, [r3, #0]
 80f22d2:	4a5c      	ldr	r2, [pc, #368]	@ (80f2444 <HAL_SPI_Init+0x1e0>)
 80f22d4:	4293      	cmp	r3, r2
 80f22d6:	d00e      	beq.n	80f22f6 <HAL_SPI_Init+0x92>
 80f22d8:	687b      	ldr	r3, [r7, #4]
 80f22da:	681b      	ldr	r3, [r3, #0]
 80f22dc:	4a5a      	ldr	r2, [pc, #360]	@ (80f2448 <HAL_SPI_Init+0x1e4>)
 80f22de:	4293      	cmp	r3, r2
 80f22e0:	d009      	beq.n	80f22f6 <HAL_SPI_Init+0x92>
 80f22e2:	687b      	ldr	r3, [r7, #4]
 80f22e4:	681b      	ldr	r3, [r3, #0]
 80f22e6:	4a59      	ldr	r2, [pc, #356]	@ (80f244c <HAL_SPI_Init+0x1e8>)
 80f22e8:	4293      	cmp	r3, r2
 80f22ea:	d004      	beq.n	80f22f6 <HAL_SPI_Init+0x92>
 80f22ec:	687b      	ldr	r3, [r7, #4]
 80f22ee:	681b      	ldr	r3, [r3, #0]
 80f22f0:	4a57      	ldr	r2, [pc, #348]	@ (80f2450 <HAL_SPI_Init+0x1ec>)
 80f22f2:	4293      	cmp	r3, r2
 80f22f4:	d105      	bne.n	80f2302 <HAL_SPI_Init+0x9e>
 80f22f6:	687b      	ldr	r3, [r7, #4]
 80f22f8:	68db      	ldr	r3, [r3, #12]
 80f22fa:	2b0f      	cmp	r3, #15
 80f22fc:	d901      	bls.n	80f2302 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 80f22fe:	2301      	movs	r3, #1
 80f2300:	e11c      	b.n	80f253c <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80f2302:	6878      	ldr	r0, [r7, #4]
 80f2304:	f000 f91e 	bl	80f2544 <SPI_GetPacketSize>
 80f2308:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80f230a:	687b      	ldr	r3, [r7, #4]
 80f230c:	681b      	ldr	r3, [r3, #0]
 80f230e:	4a4b      	ldr	r2, [pc, #300]	@ (80f243c <HAL_SPI_Init+0x1d8>)
 80f2310:	4293      	cmp	r3, r2
 80f2312:	d018      	beq.n	80f2346 <HAL_SPI_Init+0xe2>
 80f2314:	687b      	ldr	r3, [r7, #4]
 80f2316:	681b      	ldr	r3, [r3, #0]
 80f2318:	4a49      	ldr	r2, [pc, #292]	@ (80f2440 <HAL_SPI_Init+0x1dc>)
 80f231a:	4293      	cmp	r3, r2
 80f231c:	d013      	beq.n	80f2346 <HAL_SPI_Init+0xe2>
 80f231e:	687b      	ldr	r3, [r7, #4]
 80f2320:	681b      	ldr	r3, [r3, #0]
 80f2322:	4a48      	ldr	r2, [pc, #288]	@ (80f2444 <HAL_SPI_Init+0x1e0>)
 80f2324:	4293      	cmp	r3, r2
 80f2326:	d00e      	beq.n	80f2346 <HAL_SPI_Init+0xe2>
 80f2328:	687b      	ldr	r3, [r7, #4]
 80f232a:	681b      	ldr	r3, [r3, #0]
 80f232c:	4a46      	ldr	r2, [pc, #280]	@ (80f2448 <HAL_SPI_Init+0x1e4>)
 80f232e:	4293      	cmp	r3, r2
 80f2330:	d009      	beq.n	80f2346 <HAL_SPI_Init+0xe2>
 80f2332:	687b      	ldr	r3, [r7, #4]
 80f2334:	681b      	ldr	r3, [r3, #0]
 80f2336:	4a45      	ldr	r2, [pc, #276]	@ (80f244c <HAL_SPI_Init+0x1e8>)
 80f2338:	4293      	cmp	r3, r2
 80f233a:	d004      	beq.n	80f2346 <HAL_SPI_Init+0xe2>
 80f233c:	687b      	ldr	r3, [r7, #4]
 80f233e:	681b      	ldr	r3, [r3, #0]
 80f2340:	4a43      	ldr	r2, [pc, #268]	@ (80f2450 <HAL_SPI_Init+0x1ec>)
 80f2342:	4293      	cmp	r3, r2
 80f2344:	d102      	bne.n	80f234c <HAL_SPI_Init+0xe8>
 80f2346:	68fb      	ldr	r3, [r7, #12]
 80f2348:	2b08      	cmp	r3, #8
 80f234a:	d820      	bhi.n	80f238e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80f234c:	687b      	ldr	r3, [r7, #4]
 80f234e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80f2350:	4a40      	ldr	r2, [pc, #256]	@ (80f2454 <HAL_SPI_Init+0x1f0>)
 80f2352:	4293      	cmp	r3, r2
 80f2354:	d018      	beq.n	80f2388 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80f2356:	687b      	ldr	r3, [r7, #4]
 80f2358:	681b      	ldr	r3, [r3, #0]
 80f235a:	4a3f      	ldr	r2, [pc, #252]	@ (80f2458 <HAL_SPI_Init+0x1f4>)
 80f235c:	4293      	cmp	r3, r2
 80f235e:	d013      	beq.n	80f2388 <HAL_SPI_Init+0x124>
 80f2360:	687b      	ldr	r3, [r7, #4]
 80f2362:	681b      	ldr	r3, [r3, #0]
 80f2364:	4a3d      	ldr	r2, [pc, #244]	@ (80f245c <HAL_SPI_Init+0x1f8>)
 80f2366:	4293      	cmp	r3, r2
 80f2368:	d00e      	beq.n	80f2388 <HAL_SPI_Init+0x124>
 80f236a:	687b      	ldr	r3, [r7, #4]
 80f236c:	681b      	ldr	r3, [r3, #0]
 80f236e:	4a3c      	ldr	r2, [pc, #240]	@ (80f2460 <HAL_SPI_Init+0x1fc>)
 80f2370:	4293      	cmp	r3, r2
 80f2372:	d009      	beq.n	80f2388 <HAL_SPI_Init+0x124>
 80f2374:	687b      	ldr	r3, [r7, #4]
 80f2376:	681b      	ldr	r3, [r3, #0]
 80f2378:	4a3a      	ldr	r2, [pc, #232]	@ (80f2464 <HAL_SPI_Init+0x200>)
 80f237a:	4293      	cmp	r3, r2
 80f237c:	d004      	beq.n	80f2388 <HAL_SPI_Init+0x124>
 80f237e:	687b      	ldr	r3, [r7, #4]
 80f2380:	681b      	ldr	r3, [r3, #0]
 80f2382:	4a39      	ldr	r2, [pc, #228]	@ (80f2468 <HAL_SPI_Init+0x204>)
 80f2384:	4293      	cmp	r3, r2
 80f2386:	d104      	bne.n	80f2392 <HAL_SPI_Init+0x12e>
 80f2388:	68fb      	ldr	r3, [r7, #12]
 80f238a:	2b10      	cmp	r3, #16
 80f238c:	d901      	bls.n	80f2392 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 80f238e:	2301      	movs	r3, #1
 80f2390:	e0d4      	b.n	80f253c <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80f2392:	687b      	ldr	r3, [r7, #4]
 80f2394:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80f2398:	b2db      	uxtb	r3, r3
 80f239a:	2b00      	cmp	r3, #0
 80f239c:	d106      	bne.n	80f23ac <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80f239e:	687b      	ldr	r3, [r7, #4]
 80f23a0:	2200      	movs	r2, #0
 80f23a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80f23a6:	6878      	ldr	r0, [r7, #4]
 80f23a8:	f7f6 ffd0 	bl	80e934c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80f23ac:	687b      	ldr	r3, [r7, #4]
 80f23ae:	2202      	movs	r2, #2
 80f23b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80f23b4:	687b      	ldr	r3, [r7, #4]
 80f23b6:	681b      	ldr	r3, [r3, #0]
 80f23b8:	681a      	ldr	r2, [r3, #0]
 80f23ba:	687b      	ldr	r3, [r7, #4]
 80f23bc:	681b      	ldr	r3, [r3, #0]
 80f23be:	f022 0201 	bic.w	r2, r2, #1
 80f23c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80f23c4:	687b      	ldr	r3, [r7, #4]
 80f23c6:	681b      	ldr	r3, [r3, #0]
 80f23c8:	689b      	ldr	r3, [r3, #8]
 80f23ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80f23ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80f23d0:	687b      	ldr	r3, [r7, #4]
 80f23d2:	699b      	ldr	r3, [r3, #24]
 80f23d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80f23d8:	d119      	bne.n	80f240e <HAL_SPI_Init+0x1aa>
 80f23da:	687b      	ldr	r3, [r7, #4]
 80f23dc:	685b      	ldr	r3, [r3, #4]
 80f23de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80f23e2:	d103      	bne.n	80f23ec <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80f23e4:	687b      	ldr	r3, [r7, #4]
 80f23e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80f23e8:	2b00      	cmp	r3, #0
 80f23ea:	d008      	beq.n	80f23fe <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80f23ec:	687b      	ldr	r3, [r7, #4]
 80f23ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80f23f0:	2b00      	cmp	r3, #0
 80f23f2:	d10c      	bne.n	80f240e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80f23f4:	687b      	ldr	r3, [r7, #4]
 80f23f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80f23f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80f23fc:	d107      	bne.n	80f240e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80f23fe:	687b      	ldr	r3, [r7, #4]
 80f2400:	681b      	ldr	r3, [r3, #0]
 80f2402:	681a      	ldr	r2, [r3, #0]
 80f2404:	687b      	ldr	r3, [r7, #4]
 80f2406:	681b      	ldr	r3, [r3, #0]
 80f2408:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80f240c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80f240e:	687b      	ldr	r3, [r7, #4]
 80f2410:	685b      	ldr	r3, [r3, #4]
 80f2412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80f2416:	2b00      	cmp	r3, #0
 80f2418:	d028      	beq.n	80f246c <HAL_SPI_Init+0x208>
 80f241a:	687b      	ldr	r3, [r7, #4]
 80f241c:	68db      	ldr	r3, [r3, #12]
 80f241e:	2b06      	cmp	r3, #6
 80f2420:	d924      	bls.n	80f246c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80f2422:	687b      	ldr	r3, [r7, #4]
 80f2424:	681b      	ldr	r3, [r3, #0]
 80f2426:	681b      	ldr	r3, [r3, #0]
 80f2428:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80f242c:	687b      	ldr	r3, [r7, #4]
 80f242e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f2430:	687b      	ldr	r3, [r7, #4]
 80f2432:	681b      	ldr	r3, [r3, #0]
 80f2434:	430a      	orrs	r2, r1
 80f2436:	601a      	str	r2, [r3, #0]
 80f2438:	e020      	b.n	80f247c <HAL_SPI_Init+0x218>
 80f243a:	bf00      	nop
 80f243c:	40014c00 	.word	0x40014c00
 80f2440:	50014c00 	.word	0x50014c00
 80f2444:	44002000 	.word	0x44002000
 80f2448:	54002000 	.word	0x54002000
 80f244c:	40015000 	.word	0x40015000
 80f2450:	50015000 	.word	0x50015000
 80f2454:	40013000 	.word	0x40013000
 80f2458:	50013000 	.word	0x50013000
 80f245c:	40003800 	.word	0x40003800
 80f2460:	50003800 	.word	0x50003800
 80f2464:	40003c00 	.word	0x40003c00
 80f2468:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80f246c:	687b      	ldr	r3, [r7, #4]
 80f246e:	681b      	ldr	r3, [r3, #0]
 80f2470:	681a      	ldr	r2, [r3, #0]
 80f2472:	687b      	ldr	r3, [r7, #4]
 80f2474:	681b      	ldr	r3, [r3, #0]
 80f2476:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80f247a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80f247c:	687b      	ldr	r3, [r7, #4]
 80f247e:	69da      	ldr	r2, [r3, #28]
 80f2480:	687b      	ldr	r3, [r7, #4]
 80f2482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f2484:	431a      	orrs	r2, r3
 80f2486:	68bb      	ldr	r3, [r7, #8]
 80f2488:	431a      	orrs	r2, r3
 80f248a:	687b      	ldr	r3, [r7, #4]
 80f248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f248e:	ea42 0103 	orr.w	r1, r2, r3
 80f2492:	687b      	ldr	r3, [r7, #4]
 80f2494:	68da      	ldr	r2, [r3, #12]
 80f2496:	687b      	ldr	r3, [r7, #4]
 80f2498:	681b      	ldr	r3, [r3, #0]
 80f249a:	430a      	orrs	r2, r1
 80f249c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80f249e:	687b      	ldr	r3, [r7, #4]
 80f24a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80f24a2:	687b      	ldr	r3, [r7, #4]
 80f24a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f24a6:	431a      	orrs	r2, r3
 80f24a8:	687b      	ldr	r3, [r7, #4]
 80f24aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f24ac:	431a      	orrs	r2, r3
 80f24ae:	687b      	ldr	r3, [r7, #4]
 80f24b0:	699b      	ldr	r3, [r3, #24]
 80f24b2:	431a      	orrs	r2, r3
 80f24b4:	687b      	ldr	r3, [r7, #4]
 80f24b6:	691b      	ldr	r3, [r3, #16]
 80f24b8:	431a      	orrs	r2, r3
 80f24ba:	687b      	ldr	r3, [r7, #4]
 80f24bc:	695b      	ldr	r3, [r3, #20]
 80f24be:	431a      	orrs	r2, r3
 80f24c0:	687b      	ldr	r3, [r7, #4]
 80f24c2:	6a1b      	ldr	r3, [r3, #32]
 80f24c4:	431a      	orrs	r2, r3
 80f24c6:	687b      	ldr	r3, [r7, #4]
 80f24c8:	685b      	ldr	r3, [r3, #4]
 80f24ca:	431a      	orrs	r2, r3
 80f24cc:	687b      	ldr	r3, [r7, #4]
 80f24ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f24d0:	431a      	orrs	r2, r3
 80f24d2:	687b      	ldr	r3, [r7, #4]
 80f24d4:	689b      	ldr	r3, [r3, #8]
 80f24d6:	431a      	orrs	r2, r3
 80f24d8:	687b      	ldr	r3, [r7, #4]
 80f24da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80f24dc:	431a      	orrs	r2, r3
 80f24de:	687b      	ldr	r3, [r7, #4]
 80f24e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80f24e2:	431a      	orrs	r2, r3
 80f24e4:	687b      	ldr	r3, [r7, #4]
 80f24e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80f24e8:	ea42 0103 	orr.w	r1, r2, r3
 80f24ec:	687b      	ldr	r3, [r7, #4]
 80f24ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80f24f0:	687b      	ldr	r3, [r7, #4]
 80f24f2:	681b      	ldr	r3, [r3, #0]
 80f24f4:	430a      	orrs	r2, r1
 80f24f6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80f24f8:	687b      	ldr	r3, [r7, #4]
 80f24fa:	681b      	ldr	r3, [r3, #0]
 80f24fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f24fe:	687b      	ldr	r3, [r7, #4]
 80f2500:	681b      	ldr	r3, [r3, #0]
 80f2502:	f022 0201 	bic.w	r2, r2, #1
 80f2506:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80f2508:	687b      	ldr	r3, [r7, #4]
 80f250a:	685b      	ldr	r3, [r3, #4]
 80f250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80f2510:	2b00      	cmp	r3, #0
 80f2512:	d00a      	beq.n	80f252a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80f2514:	687b      	ldr	r3, [r7, #4]
 80f2516:	681b      	ldr	r3, [r3, #0]
 80f2518:	68db      	ldr	r3, [r3, #12]
 80f251a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80f251e:	687b      	ldr	r3, [r7, #4]
 80f2520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80f2522:	687b      	ldr	r3, [r7, #4]
 80f2524:	681b      	ldr	r3, [r3, #0]
 80f2526:	430a      	orrs	r2, r1
 80f2528:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80f252a:	687b      	ldr	r3, [r7, #4]
 80f252c:	2200      	movs	r2, #0
 80f252e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80f2532:	687b      	ldr	r3, [r7, #4]
 80f2534:	2201      	movs	r2, #1
 80f2536:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80f253a:	2300      	movs	r3, #0
}
 80f253c:	4618      	mov	r0, r3
 80f253e:	3710      	adds	r7, #16
 80f2540:	46bd      	mov	sp, r7
 80f2542:	bd80      	pop	{r7, pc}

080f2544 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80f2544:	b480      	push	{r7}
 80f2546:	b085      	sub	sp, #20
 80f2548:	af00      	add	r7, sp, #0
 80f254a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80f254c:	687b      	ldr	r3, [r7, #4]
 80f254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f2550:	095b      	lsrs	r3, r3, #5
 80f2552:	3301      	adds	r3, #1
 80f2554:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80f2556:	687b      	ldr	r3, [r7, #4]
 80f2558:	68db      	ldr	r3, [r3, #12]
 80f255a:	3301      	adds	r3, #1
 80f255c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80f255e:	68bb      	ldr	r3, [r7, #8]
 80f2560:	3307      	adds	r3, #7
 80f2562:	08db      	lsrs	r3, r3, #3
 80f2564:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80f2566:	68bb      	ldr	r3, [r7, #8]
 80f2568:	68fa      	ldr	r2, [r7, #12]
 80f256a:	fb02 f303 	mul.w	r3, r2, r3
}
 80f256e:	4618      	mov	r0, r3
 80f2570:	3714      	adds	r7, #20
 80f2572:	46bd      	mov	sp, r7
 80f2574:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f2578:	4770      	bx	lr

080f257a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80f257a:	b580      	push	{r7, lr}
 80f257c:	b082      	sub	sp, #8
 80f257e:	af00      	add	r7, sp, #0
 80f2580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80f2582:	687b      	ldr	r3, [r7, #4]
 80f2584:	2b00      	cmp	r3, #0
 80f2586:	d101      	bne.n	80f258c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80f2588:	2301      	movs	r3, #1
 80f258a:	e049      	b.n	80f2620 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80f258c:	687b      	ldr	r3, [r7, #4]
 80f258e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80f2592:	b2db      	uxtb	r3, r3
 80f2594:	2b00      	cmp	r3, #0
 80f2596:	d106      	bne.n	80f25a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80f2598:	687b      	ldr	r3, [r7, #4]
 80f259a:	2200      	movs	r2, #0
 80f259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80f25a0:	6878      	ldr	r0, [r7, #4]
 80f25a2:	f7f7 fdb3 	bl	80ea10c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80f25a6:	687b      	ldr	r3, [r7, #4]
 80f25a8:	2202      	movs	r2, #2
 80f25aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80f25ae:	687b      	ldr	r3, [r7, #4]
 80f25b0:	681a      	ldr	r2, [r3, #0]
 80f25b2:	687b      	ldr	r3, [r7, #4]
 80f25b4:	3304      	adds	r3, #4
 80f25b6:	4619      	mov	r1, r3
 80f25b8:	4610      	mov	r0, r2
 80f25ba:	f000 fe59 	bl	80f3270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80f25be:	687b      	ldr	r3, [r7, #4]
 80f25c0:	2201      	movs	r2, #1
 80f25c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f25c6:	687b      	ldr	r3, [r7, #4]
 80f25c8:	2201      	movs	r2, #1
 80f25ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80f25ce:	687b      	ldr	r3, [r7, #4]
 80f25d0:	2201      	movs	r2, #1
 80f25d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80f25d6:	687b      	ldr	r3, [r7, #4]
 80f25d8:	2201      	movs	r2, #1
 80f25da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80f25de:	687b      	ldr	r3, [r7, #4]
 80f25e0:	2201      	movs	r2, #1
 80f25e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80f25e6:	687b      	ldr	r3, [r7, #4]
 80f25e8:	2201      	movs	r2, #1
 80f25ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80f25ee:	687b      	ldr	r3, [r7, #4]
 80f25f0:	2201      	movs	r2, #1
 80f25f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f25f6:	687b      	ldr	r3, [r7, #4]
 80f25f8:	2201      	movs	r2, #1
 80f25fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80f25fe:	687b      	ldr	r3, [r7, #4]
 80f2600:	2201      	movs	r2, #1
 80f2602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80f2606:	687b      	ldr	r3, [r7, #4]
 80f2608:	2201      	movs	r2, #1
 80f260a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80f260e:	687b      	ldr	r3, [r7, #4]
 80f2610:	2201      	movs	r2, #1
 80f2612:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80f2616:	687b      	ldr	r3, [r7, #4]
 80f2618:	2201      	movs	r2, #1
 80f261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80f261e:	2300      	movs	r3, #0
}
 80f2620:	4618      	mov	r0, r3
 80f2622:	3708      	adds	r7, #8
 80f2624:	46bd      	mov	sp, r7
 80f2626:	bd80      	pop	{r7, pc}

080f2628 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80f2628:	b580      	push	{r7, lr}
 80f262a:	b082      	sub	sp, #8
 80f262c:	af00      	add	r7, sp, #0
 80f262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80f2630:	687b      	ldr	r3, [r7, #4]
 80f2632:	2b00      	cmp	r3, #0
 80f2634:	d101      	bne.n	80f263a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80f2636:	2301      	movs	r3, #1
 80f2638:	e049      	b.n	80f26ce <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80f263a:	687b      	ldr	r3, [r7, #4]
 80f263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80f2640:	b2db      	uxtb	r3, r3
 80f2642:	2b00      	cmp	r3, #0
 80f2644:	d106      	bne.n	80f2654 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80f2646:	687b      	ldr	r3, [r7, #4]
 80f2648:	2200      	movs	r2, #0
 80f264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80f264e:	6878      	ldr	r0, [r7, #4]
 80f2650:	f000 f841 	bl	80f26d6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80f2654:	687b      	ldr	r3, [r7, #4]
 80f2656:	2202      	movs	r2, #2
 80f2658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80f265c:	687b      	ldr	r3, [r7, #4]
 80f265e:	681a      	ldr	r2, [r3, #0]
 80f2660:	687b      	ldr	r3, [r7, #4]
 80f2662:	3304      	adds	r3, #4
 80f2664:	4619      	mov	r1, r3
 80f2666:	4610      	mov	r0, r2
 80f2668:	f000 fe02 	bl	80f3270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80f266c:	687b      	ldr	r3, [r7, #4]
 80f266e:	2201      	movs	r2, #1
 80f2670:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f2674:	687b      	ldr	r3, [r7, #4]
 80f2676:	2201      	movs	r2, #1
 80f2678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80f267c:	687b      	ldr	r3, [r7, #4]
 80f267e:	2201      	movs	r2, #1
 80f2680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80f2684:	687b      	ldr	r3, [r7, #4]
 80f2686:	2201      	movs	r2, #1
 80f2688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80f268c:	687b      	ldr	r3, [r7, #4]
 80f268e:	2201      	movs	r2, #1
 80f2690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80f2694:	687b      	ldr	r3, [r7, #4]
 80f2696:	2201      	movs	r2, #1
 80f2698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80f269c:	687b      	ldr	r3, [r7, #4]
 80f269e:	2201      	movs	r2, #1
 80f26a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f26a4:	687b      	ldr	r3, [r7, #4]
 80f26a6:	2201      	movs	r2, #1
 80f26a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80f26ac:	687b      	ldr	r3, [r7, #4]
 80f26ae:	2201      	movs	r2, #1
 80f26b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80f26b4:	687b      	ldr	r3, [r7, #4]
 80f26b6:	2201      	movs	r2, #1
 80f26b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80f26bc:	687b      	ldr	r3, [r7, #4]
 80f26be:	2201      	movs	r2, #1
 80f26c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80f26c4:	687b      	ldr	r3, [r7, #4]
 80f26c6:	2201      	movs	r2, #1
 80f26c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80f26cc:	2300      	movs	r3, #0
}
 80f26ce:	4618      	mov	r0, r3
 80f26d0:	3708      	adds	r7, #8
 80f26d2:	46bd      	mov	sp, r7
 80f26d4:	bd80      	pop	{r7, pc}

080f26d6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80f26d6:	b480      	push	{r7}
 80f26d8:	b083      	sub	sp, #12
 80f26da:	af00      	add	r7, sp, #0
 80f26dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80f26de:	bf00      	nop
 80f26e0:	370c      	adds	r7, #12
 80f26e2:	46bd      	mov	sp, r7
 80f26e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f26e8:	4770      	bx	lr

080f26ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80f26ea:	b580      	push	{r7, lr}
 80f26ec:	b082      	sub	sp, #8
 80f26ee:	af00      	add	r7, sp, #0
 80f26f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80f26f2:	687b      	ldr	r3, [r7, #4]
 80f26f4:	2b00      	cmp	r3, #0
 80f26f6:	d101      	bne.n	80f26fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80f26f8:	2301      	movs	r3, #1
 80f26fa:	e049      	b.n	80f2790 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80f26fc:	687b      	ldr	r3, [r7, #4]
 80f26fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80f2702:	b2db      	uxtb	r3, r3
 80f2704:	2b00      	cmp	r3, #0
 80f2706:	d106      	bne.n	80f2716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80f2708:	687b      	ldr	r3, [r7, #4]
 80f270a:	2200      	movs	r2, #0
 80f270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80f2710:	6878      	ldr	r0, [r7, #4]
 80f2712:	f000 f841 	bl	80f2798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80f2716:	687b      	ldr	r3, [r7, #4]
 80f2718:	2202      	movs	r2, #2
 80f271a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80f271e:	687b      	ldr	r3, [r7, #4]
 80f2720:	681a      	ldr	r2, [r3, #0]
 80f2722:	687b      	ldr	r3, [r7, #4]
 80f2724:	3304      	adds	r3, #4
 80f2726:	4619      	mov	r1, r3
 80f2728:	4610      	mov	r0, r2
 80f272a:	f000 fda1 	bl	80f3270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80f272e:	687b      	ldr	r3, [r7, #4]
 80f2730:	2201      	movs	r2, #1
 80f2732:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f2736:	687b      	ldr	r3, [r7, #4]
 80f2738:	2201      	movs	r2, #1
 80f273a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80f273e:	687b      	ldr	r3, [r7, #4]
 80f2740:	2201      	movs	r2, #1
 80f2742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80f2746:	687b      	ldr	r3, [r7, #4]
 80f2748:	2201      	movs	r2, #1
 80f274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80f274e:	687b      	ldr	r3, [r7, #4]
 80f2750:	2201      	movs	r2, #1
 80f2752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80f2756:	687b      	ldr	r3, [r7, #4]
 80f2758:	2201      	movs	r2, #1
 80f275a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80f275e:	687b      	ldr	r3, [r7, #4]
 80f2760:	2201      	movs	r2, #1
 80f2762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f2766:	687b      	ldr	r3, [r7, #4]
 80f2768:	2201      	movs	r2, #1
 80f276a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80f276e:	687b      	ldr	r3, [r7, #4]
 80f2770:	2201      	movs	r2, #1
 80f2772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80f2776:	687b      	ldr	r3, [r7, #4]
 80f2778:	2201      	movs	r2, #1
 80f277a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80f277e:	687b      	ldr	r3, [r7, #4]
 80f2780:	2201      	movs	r2, #1
 80f2782:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80f2786:	687b      	ldr	r3, [r7, #4]
 80f2788:	2201      	movs	r2, #1
 80f278a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80f278e:	2300      	movs	r3, #0
}
 80f2790:	4618      	mov	r0, r3
 80f2792:	3708      	adds	r7, #8
 80f2794:	46bd      	mov	sp, r7
 80f2796:	bd80      	pop	{r7, pc}

080f2798 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80f2798:	b480      	push	{r7}
 80f279a:	b083      	sub	sp, #12
 80f279c:	af00      	add	r7, sp, #0
 80f279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80f27a0:	bf00      	nop
 80f27a2:	370c      	adds	r7, #12
 80f27a4:	46bd      	mov	sp, r7
 80f27a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f27aa:	4770      	bx	lr

080f27ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80f27ac:	b580      	push	{r7, lr}
 80f27ae:	b082      	sub	sp, #8
 80f27b0:	af00      	add	r7, sp, #0
 80f27b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80f27b4:	687b      	ldr	r3, [r7, #4]
 80f27b6:	2b00      	cmp	r3, #0
 80f27b8:	d101      	bne.n	80f27be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80f27ba:	2301      	movs	r3, #1
 80f27bc:	e049      	b.n	80f2852 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80f27be:	687b      	ldr	r3, [r7, #4]
 80f27c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80f27c4:	b2db      	uxtb	r3, r3
 80f27c6:	2b00      	cmp	r3, #0
 80f27c8:	d106      	bne.n	80f27d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80f27ca:	687b      	ldr	r3, [r7, #4]
 80f27cc:	2200      	movs	r2, #0
 80f27ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80f27d2:	6878      	ldr	r0, [r7, #4]
 80f27d4:	f7f7 fd6c 	bl	80ea2b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80f27d8:	687b      	ldr	r3, [r7, #4]
 80f27da:	2202      	movs	r2, #2
 80f27dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80f27e0:	687b      	ldr	r3, [r7, #4]
 80f27e2:	681a      	ldr	r2, [r3, #0]
 80f27e4:	687b      	ldr	r3, [r7, #4]
 80f27e6:	3304      	adds	r3, #4
 80f27e8:	4619      	mov	r1, r3
 80f27ea:	4610      	mov	r0, r2
 80f27ec:	f000 fd40 	bl	80f3270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80f27f0:	687b      	ldr	r3, [r7, #4]
 80f27f2:	2201      	movs	r2, #1
 80f27f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f27f8:	687b      	ldr	r3, [r7, #4]
 80f27fa:	2201      	movs	r2, #1
 80f27fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80f2800:	687b      	ldr	r3, [r7, #4]
 80f2802:	2201      	movs	r2, #1
 80f2804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80f2808:	687b      	ldr	r3, [r7, #4]
 80f280a:	2201      	movs	r2, #1
 80f280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80f2810:	687b      	ldr	r3, [r7, #4]
 80f2812:	2201      	movs	r2, #1
 80f2814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80f2818:	687b      	ldr	r3, [r7, #4]
 80f281a:	2201      	movs	r2, #1
 80f281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80f2820:	687b      	ldr	r3, [r7, #4]
 80f2822:	2201      	movs	r2, #1
 80f2824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80f2828:	687b      	ldr	r3, [r7, #4]
 80f282a:	2201      	movs	r2, #1
 80f282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80f2830:	687b      	ldr	r3, [r7, #4]
 80f2832:	2201      	movs	r2, #1
 80f2834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80f2838:	687b      	ldr	r3, [r7, #4]
 80f283a:	2201      	movs	r2, #1
 80f283c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80f2840:	687b      	ldr	r3, [r7, #4]
 80f2842:	2201      	movs	r2, #1
 80f2844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80f2848:	687b      	ldr	r3, [r7, #4]
 80f284a:	2201      	movs	r2, #1
 80f284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80f2850:	2300      	movs	r3, #0
}
 80f2852:	4618      	mov	r0, r3
 80f2854:	3708      	adds	r7, #8
 80f2856:	46bd      	mov	sp, r7
 80f2858:	bd80      	pop	{r7, pc}

080f285a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80f285a:	b580      	push	{r7, lr}
 80f285c:	b084      	sub	sp, #16
 80f285e:	af00      	add	r7, sp, #0
 80f2860:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80f2862:	687b      	ldr	r3, [r7, #4]
 80f2864:	681b      	ldr	r3, [r3, #0]
 80f2866:	68db      	ldr	r3, [r3, #12]
 80f2868:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80f286a:	687b      	ldr	r3, [r7, #4]
 80f286c:	681b      	ldr	r3, [r3, #0]
 80f286e:	691b      	ldr	r3, [r3, #16]
 80f2870:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80f2872:	68bb      	ldr	r3, [r7, #8]
 80f2874:	f003 0302 	and.w	r3, r3, #2
 80f2878:	2b00      	cmp	r3, #0
 80f287a:	d020      	beq.n	80f28be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80f287c:	68fb      	ldr	r3, [r7, #12]
 80f287e:	f003 0302 	and.w	r3, r3, #2
 80f2882:	2b00      	cmp	r3, #0
 80f2884:	d01b      	beq.n	80f28be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80f2886:	687b      	ldr	r3, [r7, #4]
 80f2888:	681b      	ldr	r3, [r3, #0]
 80f288a:	f06f 0202 	mvn.w	r2, #2
 80f288e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80f2890:	687b      	ldr	r3, [r7, #4]
 80f2892:	2201      	movs	r2, #1
 80f2894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80f2896:	687b      	ldr	r3, [r7, #4]
 80f2898:	681b      	ldr	r3, [r3, #0]
 80f289a:	699b      	ldr	r3, [r3, #24]
 80f289c:	f003 0303 	and.w	r3, r3, #3
 80f28a0:	2b00      	cmp	r3, #0
 80f28a2:	d003      	beq.n	80f28ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80f28a4:	6878      	ldr	r0, [r7, #4]
 80f28a6:	f000 fcc5 	bl	80f3234 <HAL_TIM_IC_CaptureCallback>
 80f28aa:	e005      	b.n	80f28b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80f28ac:	6878      	ldr	r0, [r7, #4]
 80f28ae:	f000 fcb7 	bl	80f3220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80f28b2:	6878      	ldr	r0, [r7, #4]
 80f28b4:	f000 fcc8 	bl	80f3248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80f28b8:	687b      	ldr	r3, [r7, #4]
 80f28ba:	2200      	movs	r2, #0
 80f28bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80f28be:	68bb      	ldr	r3, [r7, #8]
 80f28c0:	f003 0304 	and.w	r3, r3, #4
 80f28c4:	2b00      	cmp	r3, #0
 80f28c6:	d020      	beq.n	80f290a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80f28c8:	68fb      	ldr	r3, [r7, #12]
 80f28ca:	f003 0304 	and.w	r3, r3, #4
 80f28ce:	2b00      	cmp	r3, #0
 80f28d0:	d01b      	beq.n	80f290a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80f28d2:	687b      	ldr	r3, [r7, #4]
 80f28d4:	681b      	ldr	r3, [r3, #0]
 80f28d6:	f06f 0204 	mvn.w	r2, #4
 80f28da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80f28dc:	687b      	ldr	r3, [r7, #4]
 80f28de:	2202      	movs	r2, #2
 80f28e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80f28e2:	687b      	ldr	r3, [r7, #4]
 80f28e4:	681b      	ldr	r3, [r3, #0]
 80f28e6:	699b      	ldr	r3, [r3, #24]
 80f28e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80f28ec:	2b00      	cmp	r3, #0
 80f28ee:	d003      	beq.n	80f28f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80f28f0:	6878      	ldr	r0, [r7, #4]
 80f28f2:	f000 fc9f 	bl	80f3234 <HAL_TIM_IC_CaptureCallback>
 80f28f6:	e005      	b.n	80f2904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80f28f8:	6878      	ldr	r0, [r7, #4]
 80f28fa:	f000 fc91 	bl	80f3220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80f28fe:	6878      	ldr	r0, [r7, #4]
 80f2900:	f000 fca2 	bl	80f3248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80f2904:	687b      	ldr	r3, [r7, #4]
 80f2906:	2200      	movs	r2, #0
 80f2908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80f290a:	68bb      	ldr	r3, [r7, #8]
 80f290c:	f003 0308 	and.w	r3, r3, #8
 80f2910:	2b00      	cmp	r3, #0
 80f2912:	d020      	beq.n	80f2956 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80f2914:	68fb      	ldr	r3, [r7, #12]
 80f2916:	f003 0308 	and.w	r3, r3, #8
 80f291a:	2b00      	cmp	r3, #0
 80f291c:	d01b      	beq.n	80f2956 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80f291e:	687b      	ldr	r3, [r7, #4]
 80f2920:	681b      	ldr	r3, [r3, #0]
 80f2922:	f06f 0208 	mvn.w	r2, #8
 80f2926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80f2928:	687b      	ldr	r3, [r7, #4]
 80f292a:	2204      	movs	r2, #4
 80f292c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80f292e:	687b      	ldr	r3, [r7, #4]
 80f2930:	681b      	ldr	r3, [r3, #0]
 80f2932:	69db      	ldr	r3, [r3, #28]
 80f2934:	f003 0303 	and.w	r3, r3, #3
 80f2938:	2b00      	cmp	r3, #0
 80f293a:	d003      	beq.n	80f2944 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80f293c:	6878      	ldr	r0, [r7, #4]
 80f293e:	f000 fc79 	bl	80f3234 <HAL_TIM_IC_CaptureCallback>
 80f2942:	e005      	b.n	80f2950 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80f2944:	6878      	ldr	r0, [r7, #4]
 80f2946:	f000 fc6b 	bl	80f3220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80f294a:	6878      	ldr	r0, [r7, #4]
 80f294c:	f000 fc7c 	bl	80f3248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80f2950:	687b      	ldr	r3, [r7, #4]
 80f2952:	2200      	movs	r2, #0
 80f2954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80f2956:	68bb      	ldr	r3, [r7, #8]
 80f2958:	f003 0310 	and.w	r3, r3, #16
 80f295c:	2b00      	cmp	r3, #0
 80f295e:	d020      	beq.n	80f29a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80f2960:	68fb      	ldr	r3, [r7, #12]
 80f2962:	f003 0310 	and.w	r3, r3, #16
 80f2966:	2b00      	cmp	r3, #0
 80f2968:	d01b      	beq.n	80f29a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80f296a:	687b      	ldr	r3, [r7, #4]
 80f296c:	681b      	ldr	r3, [r3, #0]
 80f296e:	f06f 0210 	mvn.w	r2, #16
 80f2972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80f2974:	687b      	ldr	r3, [r7, #4]
 80f2976:	2208      	movs	r2, #8
 80f2978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80f297a:	687b      	ldr	r3, [r7, #4]
 80f297c:	681b      	ldr	r3, [r3, #0]
 80f297e:	69db      	ldr	r3, [r3, #28]
 80f2980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80f2984:	2b00      	cmp	r3, #0
 80f2986:	d003      	beq.n	80f2990 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80f2988:	6878      	ldr	r0, [r7, #4]
 80f298a:	f000 fc53 	bl	80f3234 <HAL_TIM_IC_CaptureCallback>
 80f298e:	e005      	b.n	80f299c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80f2990:	6878      	ldr	r0, [r7, #4]
 80f2992:	f000 fc45 	bl	80f3220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80f2996:	6878      	ldr	r0, [r7, #4]
 80f2998:	f000 fc56 	bl	80f3248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80f299c:	687b      	ldr	r3, [r7, #4]
 80f299e:	2200      	movs	r2, #0
 80f29a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80f29a2:	68bb      	ldr	r3, [r7, #8]
 80f29a4:	f003 0301 	and.w	r3, r3, #1
 80f29a8:	2b00      	cmp	r3, #0
 80f29aa:	d00c      	beq.n	80f29c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80f29ac:	68fb      	ldr	r3, [r7, #12]
 80f29ae:	f003 0301 	and.w	r3, r3, #1
 80f29b2:	2b00      	cmp	r3, #0
 80f29b4:	d007      	beq.n	80f29c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80f29b6:	687b      	ldr	r3, [r7, #4]
 80f29b8:	681b      	ldr	r3, [r3, #0]
 80f29ba:	f06f 0201 	mvn.w	r2, #1
 80f29be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80f29c0:	6878      	ldr	r0, [r7, #4]
 80f29c2:	f000 fc23 	bl	80f320c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80f29c6:	68bb      	ldr	r3, [r7, #8]
 80f29c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80f29cc:	2b00      	cmp	r3, #0
 80f29ce:	d104      	bne.n	80f29da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80f29d0:	68bb      	ldr	r3, [r7, #8]
 80f29d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80f29d6:	2b00      	cmp	r3, #0
 80f29d8:	d00c      	beq.n	80f29f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80f29da:	68fb      	ldr	r3, [r7, #12]
 80f29dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80f29e0:	2b00      	cmp	r3, #0
 80f29e2:	d007      	beq.n	80f29f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80f29e4:	687b      	ldr	r3, [r7, #4]
 80f29e6:	681b      	ldr	r3, [r3, #0]
 80f29e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80f29ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80f29ee:	6878      	ldr	r0, [r7, #4]
 80f29f0:	f001 fd8e 	bl	80f4510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80f29f4:	68bb      	ldr	r3, [r7, #8]
 80f29f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80f29fa:	2b00      	cmp	r3, #0
 80f29fc:	d00c      	beq.n	80f2a18 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80f29fe:	68fb      	ldr	r3, [r7, #12]
 80f2a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80f2a04:	2b00      	cmp	r3, #0
 80f2a06:	d007      	beq.n	80f2a18 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80f2a08:	687b      	ldr	r3, [r7, #4]
 80f2a0a:	681b      	ldr	r3, [r3, #0]
 80f2a0c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80f2a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80f2a12:	6878      	ldr	r0, [r7, #4]
 80f2a14:	f001 fd86 	bl	80f4524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80f2a18:	68bb      	ldr	r3, [r7, #8]
 80f2a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80f2a1e:	2b00      	cmp	r3, #0
 80f2a20:	d00c      	beq.n	80f2a3c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80f2a22:	68fb      	ldr	r3, [r7, #12]
 80f2a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80f2a28:	2b00      	cmp	r3, #0
 80f2a2a:	d007      	beq.n	80f2a3c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80f2a2c:	687b      	ldr	r3, [r7, #4]
 80f2a2e:	681b      	ldr	r3, [r3, #0]
 80f2a30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80f2a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80f2a36:	6878      	ldr	r0, [r7, #4]
 80f2a38:	f000 fc10 	bl	80f325c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80f2a3c:	68bb      	ldr	r3, [r7, #8]
 80f2a3e:	f003 0320 	and.w	r3, r3, #32
 80f2a42:	2b00      	cmp	r3, #0
 80f2a44:	d00c      	beq.n	80f2a60 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80f2a46:	68fb      	ldr	r3, [r7, #12]
 80f2a48:	f003 0320 	and.w	r3, r3, #32
 80f2a4c:	2b00      	cmp	r3, #0
 80f2a4e:	d007      	beq.n	80f2a60 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80f2a50:	687b      	ldr	r3, [r7, #4]
 80f2a52:	681b      	ldr	r3, [r3, #0]
 80f2a54:	f06f 0220 	mvn.w	r2, #32
 80f2a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80f2a5a:	6878      	ldr	r0, [r7, #4]
 80f2a5c:	f001 fd4e 	bl	80f44fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80f2a60:	68bb      	ldr	r3, [r7, #8]
 80f2a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80f2a66:	2b00      	cmp	r3, #0
 80f2a68:	d00c      	beq.n	80f2a84 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80f2a6a:	68fb      	ldr	r3, [r7, #12]
 80f2a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80f2a70:	2b00      	cmp	r3, #0
 80f2a72:	d007      	beq.n	80f2a84 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80f2a74:	687b      	ldr	r3, [r7, #4]
 80f2a76:	681b      	ldr	r3, [r3, #0]
 80f2a78:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80f2a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80f2a7e:	6878      	ldr	r0, [r7, #4]
 80f2a80:	f001 fd5a 	bl	80f4538 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80f2a84:	68bb      	ldr	r3, [r7, #8]
 80f2a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80f2a8a:	2b00      	cmp	r3, #0
 80f2a8c:	d00c      	beq.n	80f2aa8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80f2a8e:	68fb      	ldr	r3, [r7, #12]
 80f2a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80f2a94:	2b00      	cmp	r3, #0
 80f2a96:	d007      	beq.n	80f2aa8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80f2a98:	687b      	ldr	r3, [r7, #4]
 80f2a9a:	681b      	ldr	r3, [r3, #0]
 80f2a9c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80f2aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80f2aa2:	6878      	ldr	r0, [r7, #4]
 80f2aa4:	f001 fd52 	bl	80f454c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80f2aa8:	68bb      	ldr	r3, [r7, #8]
 80f2aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80f2aae:	2b00      	cmp	r3, #0
 80f2ab0:	d00c      	beq.n	80f2acc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80f2ab2:	68fb      	ldr	r3, [r7, #12]
 80f2ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80f2ab8:	2b00      	cmp	r3, #0
 80f2aba:	d007      	beq.n	80f2acc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80f2abc:	687b      	ldr	r3, [r7, #4]
 80f2abe:	681b      	ldr	r3, [r3, #0]
 80f2ac0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80f2ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80f2ac6:	6878      	ldr	r0, [r7, #4]
 80f2ac8:	f001 fd4a 	bl	80f4560 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80f2acc:	68bb      	ldr	r3, [r7, #8]
 80f2ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80f2ad2:	2b00      	cmp	r3, #0
 80f2ad4:	d00c      	beq.n	80f2af0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80f2ad6:	68fb      	ldr	r3, [r7, #12]
 80f2ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80f2adc:	2b00      	cmp	r3, #0
 80f2ade:	d007      	beq.n	80f2af0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80f2ae0:	687b      	ldr	r3, [r7, #4]
 80f2ae2:	681b      	ldr	r3, [r3, #0]
 80f2ae4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80f2ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80f2aea:	6878      	ldr	r0, [r7, #4]
 80f2aec:	f001 fd42 	bl	80f4574 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80f2af0:	bf00      	nop
 80f2af2:	3710      	adds	r7, #16
 80f2af4:	46bd      	mov	sp, r7
 80f2af6:	bd80      	pop	{r7, pc}

080f2af8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80f2af8:	b580      	push	{r7, lr}
 80f2afa:	b086      	sub	sp, #24
 80f2afc:	af00      	add	r7, sp, #0
 80f2afe:	60f8      	str	r0, [r7, #12]
 80f2b00:	60b9      	str	r1, [r7, #8]
 80f2b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80f2b04:	2300      	movs	r3, #0
 80f2b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80f2b08:	68fb      	ldr	r3, [r7, #12]
 80f2b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f2b0e:	2b01      	cmp	r3, #1
 80f2b10:	d101      	bne.n	80f2b16 <HAL_TIM_OC_ConfigChannel+0x1e>
 80f2b12:	2302      	movs	r3, #2
 80f2b14:	e066      	b.n	80f2be4 <HAL_TIM_OC_ConfigChannel+0xec>
 80f2b16:	68fb      	ldr	r3, [r7, #12]
 80f2b18:	2201      	movs	r2, #1
 80f2b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80f2b1e:	687b      	ldr	r3, [r7, #4]
 80f2b20:	2b14      	cmp	r3, #20
 80f2b22:	d857      	bhi.n	80f2bd4 <HAL_TIM_OC_ConfigChannel+0xdc>
 80f2b24:	a201      	add	r2, pc, #4	@ (adr r2, 80f2b2c <HAL_TIM_OC_ConfigChannel+0x34>)
 80f2b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f2b2a:	bf00      	nop
 80f2b2c:	080f2b81 	.word	0x080f2b81
 80f2b30:	080f2bd5 	.word	0x080f2bd5
 80f2b34:	080f2bd5 	.word	0x080f2bd5
 80f2b38:	080f2bd5 	.word	0x080f2bd5
 80f2b3c:	080f2b8f 	.word	0x080f2b8f
 80f2b40:	080f2bd5 	.word	0x080f2bd5
 80f2b44:	080f2bd5 	.word	0x080f2bd5
 80f2b48:	080f2bd5 	.word	0x080f2bd5
 80f2b4c:	080f2b9d 	.word	0x080f2b9d
 80f2b50:	080f2bd5 	.word	0x080f2bd5
 80f2b54:	080f2bd5 	.word	0x080f2bd5
 80f2b58:	080f2bd5 	.word	0x080f2bd5
 80f2b5c:	080f2bab 	.word	0x080f2bab
 80f2b60:	080f2bd5 	.word	0x080f2bd5
 80f2b64:	080f2bd5 	.word	0x080f2bd5
 80f2b68:	080f2bd5 	.word	0x080f2bd5
 80f2b6c:	080f2bb9 	.word	0x080f2bb9
 80f2b70:	080f2bd5 	.word	0x080f2bd5
 80f2b74:	080f2bd5 	.word	0x080f2bd5
 80f2b78:	080f2bd5 	.word	0x080f2bd5
 80f2b7c:	080f2bc7 	.word	0x080f2bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80f2b80:	68fb      	ldr	r3, [r7, #12]
 80f2b82:	681b      	ldr	r3, [r3, #0]
 80f2b84:	68b9      	ldr	r1, [r7, #8]
 80f2b86:	4618      	mov	r0, r3
 80f2b88:	f000 fc9c 	bl	80f34c4 <TIM_OC1_SetConfig>
      break;
 80f2b8c:	e025      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80f2b8e:	68fb      	ldr	r3, [r7, #12]
 80f2b90:	681b      	ldr	r3, [r3, #0]
 80f2b92:	68b9      	ldr	r1, [r7, #8]
 80f2b94:	4618      	mov	r0, r3
 80f2b96:	f000 fd57 	bl	80f3648 <TIM_OC2_SetConfig>
      break;
 80f2b9a:	e01e      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80f2b9c:	68fb      	ldr	r3, [r7, #12]
 80f2b9e:	681b      	ldr	r3, [r3, #0]
 80f2ba0:	68b9      	ldr	r1, [r7, #8]
 80f2ba2:	4618      	mov	r0, r3
 80f2ba4:	f000 fe00 	bl	80f37a8 <TIM_OC3_SetConfig>
      break;
 80f2ba8:	e017      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80f2baa:	68fb      	ldr	r3, [r7, #12]
 80f2bac:	681b      	ldr	r3, [r3, #0]
 80f2bae:	68b9      	ldr	r1, [r7, #8]
 80f2bb0:	4618      	mov	r0, r3
 80f2bb2:	f000 fea7 	bl	80f3904 <TIM_OC4_SetConfig>
      break;
 80f2bb6:	e010      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80f2bb8:	68fb      	ldr	r3, [r7, #12]
 80f2bba:	681b      	ldr	r3, [r3, #0]
 80f2bbc:	68b9      	ldr	r1, [r7, #8]
 80f2bbe:	4618      	mov	r0, r3
 80f2bc0:	f000 ff50 	bl	80f3a64 <TIM_OC5_SetConfig>
      break;
 80f2bc4:	e009      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80f2bc6:	68fb      	ldr	r3, [r7, #12]
 80f2bc8:	681b      	ldr	r3, [r3, #0]
 80f2bca:	68b9      	ldr	r1, [r7, #8]
 80f2bcc:	4618      	mov	r0, r3
 80f2bce:	f000 ffcb 	bl	80f3b68 <TIM_OC6_SetConfig>
      break;
 80f2bd2:	e002      	b.n	80f2bda <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80f2bd4:	2301      	movs	r3, #1
 80f2bd6:	75fb      	strb	r3, [r7, #23]
      break;
 80f2bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80f2bda:	68fb      	ldr	r3, [r7, #12]
 80f2bdc:	2200      	movs	r2, #0
 80f2bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80f2be2:	7dfb      	ldrb	r3, [r7, #23]
}
 80f2be4:	4618      	mov	r0, r3
 80f2be6:	3718      	adds	r7, #24
 80f2be8:	46bd      	mov	sp, r7
 80f2bea:	bd80      	pop	{r7, pc}

080f2bec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80f2bec:	b580      	push	{r7, lr}
 80f2bee:	b086      	sub	sp, #24
 80f2bf0:	af00      	add	r7, sp, #0
 80f2bf2:	60f8      	str	r0, [r7, #12]
 80f2bf4:	60b9      	str	r1, [r7, #8]
 80f2bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80f2bf8:	2300      	movs	r3, #0
 80f2bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80f2bfc:	68fb      	ldr	r3, [r7, #12]
 80f2bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f2c02:	2b01      	cmp	r3, #1
 80f2c04:	d101      	bne.n	80f2c0a <HAL_TIM_IC_ConfigChannel+0x1e>
 80f2c06:	2302      	movs	r3, #2
 80f2c08:	e088      	b.n	80f2d1c <HAL_TIM_IC_ConfigChannel+0x130>
 80f2c0a:	68fb      	ldr	r3, [r7, #12]
 80f2c0c:	2201      	movs	r2, #1
 80f2c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80f2c12:	687b      	ldr	r3, [r7, #4]
 80f2c14:	2b00      	cmp	r3, #0
 80f2c16:	d11b      	bne.n	80f2c50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80f2c18:	68fb      	ldr	r3, [r7, #12]
 80f2c1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80f2c1c:	68bb      	ldr	r3, [r7, #8]
 80f2c1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80f2c20:	68bb      	ldr	r3, [r7, #8]
 80f2c22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80f2c24:	68bb      	ldr	r3, [r7, #8]
 80f2c26:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80f2c28:	f001 f90a 	bl	80f3e40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80f2c2c:	68fb      	ldr	r3, [r7, #12]
 80f2c2e:	681b      	ldr	r3, [r3, #0]
 80f2c30:	699a      	ldr	r2, [r3, #24]
 80f2c32:	68fb      	ldr	r3, [r7, #12]
 80f2c34:	681b      	ldr	r3, [r3, #0]
 80f2c36:	f022 020c 	bic.w	r2, r2, #12
 80f2c3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80f2c3c:	68fb      	ldr	r3, [r7, #12]
 80f2c3e:	681b      	ldr	r3, [r3, #0]
 80f2c40:	6999      	ldr	r1, [r3, #24]
 80f2c42:	68bb      	ldr	r3, [r7, #8]
 80f2c44:	689a      	ldr	r2, [r3, #8]
 80f2c46:	68fb      	ldr	r3, [r7, #12]
 80f2c48:	681b      	ldr	r3, [r3, #0]
 80f2c4a:	430a      	orrs	r2, r1
 80f2c4c:	619a      	str	r2, [r3, #24]
 80f2c4e:	e060      	b.n	80f2d12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80f2c50:	687b      	ldr	r3, [r7, #4]
 80f2c52:	2b04      	cmp	r3, #4
 80f2c54:	d11c      	bne.n	80f2c90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80f2c56:	68fb      	ldr	r3, [r7, #12]
 80f2c58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80f2c5a:	68bb      	ldr	r3, [r7, #8]
 80f2c5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80f2c5e:	68bb      	ldr	r3, [r7, #8]
 80f2c60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80f2c62:	68bb      	ldr	r3, [r7, #8]
 80f2c64:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80f2c66:	f001 f9bc 	bl	80f3fe2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80f2c6a:	68fb      	ldr	r3, [r7, #12]
 80f2c6c:	681b      	ldr	r3, [r3, #0]
 80f2c6e:	699a      	ldr	r2, [r3, #24]
 80f2c70:	68fb      	ldr	r3, [r7, #12]
 80f2c72:	681b      	ldr	r3, [r3, #0]
 80f2c74:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80f2c78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80f2c7a:	68fb      	ldr	r3, [r7, #12]
 80f2c7c:	681b      	ldr	r3, [r3, #0]
 80f2c7e:	6999      	ldr	r1, [r3, #24]
 80f2c80:	68bb      	ldr	r3, [r7, #8]
 80f2c82:	689b      	ldr	r3, [r3, #8]
 80f2c84:	021a      	lsls	r2, r3, #8
 80f2c86:	68fb      	ldr	r3, [r7, #12]
 80f2c88:	681b      	ldr	r3, [r3, #0]
 80f2c8a:	430a      	orrs	r2, r1
 80f2c8c:	619a      	str	r2, [r3, #24]
 80f2c8e:	e040      	b.n	80f2d12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80f2c90:	687b      	ldr	r3, [r7, #4]
 80f2c92:	2b08      	cmp	r3, #8
 80f2c94:	d11b      	bne.n	80f2cce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80f2c96:	68fb      	ldr	r3, [r7, #12]
 80f2c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80f2c9a:	68bb      	ldr	r3, [r7, #8]
 80f2c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80f2c9e:	68bb      	ldr	r3, [r7, #8]
 80f2ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80f2ca2:	68bb      	ldr	r3, [r7, #8]
 80f2ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80f2ca6:	f001 fa09 	bl	80f40bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80f2caa:	68fb      	ldr	r3, [r7, #12]
 80f2cac:	681b      	ldr	r3, [r3, #0]
 80f2cae:	69da      	ldr	r2, [r3, #28]
 80f2cb0:	68fb      	ldr	r3, [r7, #12]
 80f2cb2:	681b      	ldr	r3, [r3, #0]
 80f2cb4:	f022 020c 	bic.w	r2, r2, #12
 80f2cb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80f2cba:	68fb      	ldr	r3, [r7, #12]
 80f2cbc:	681b      	ldr	r3, [r3, #0]
 80f2cbe:	69d9      	ldr	r1, [r3, #28]
 80f2cc0:	68bb      	ldr	r3, [r7, #8]
 80f2cc2:	689a      	ldr	r2, [r3, #8]
 80f2cc4:	68fb      	ldr	r3, [r7, #12]
 80f2cc6:	681b      	ldr	r3, [r3, #0]
 80f2cc8:	430a      	orrs	r2, r1
 80f2cca:	61da      	str	r2, [r3, #28]
 80f2ccc:	e021      	b.n	80f2d12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80f2cce:	687b      	ldr	r3, [r7, #4]
 80f2cd0:	2b0c      	cmp	r3, #12
 80f2cd2:	d11c      	bne.n	80f2d0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80f2cd4:	68fb      	ldr	r3, [r7, #12]
 80f2cd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80f2cd8:	68bb      	ldr	r3, [r7, #8]
 80f2cda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80f2cdc:	68bb      	ldr	r3, [r7, #8]
 80f2cde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80f2ce0:	68bb      	ldr	r3, [r7, #8]
 80f2ce2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80f2ce4:	f001 fa26 	bl	80f4134 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80f2ce8:	68fb      	ldr	r3, [r7, #12]
 80f2cea:	681b      	ldr	r3, [r3, #0]
 80f2cec:	69da      	ldr	r2, [r3, #28]
 80f2cee:	68fb      	ldr	r3, [r7, #12]
 80f2cf0:	681b      	ldr	r3, [r3, #0]
 80f2cf2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80f2cf6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80f2cf8:	68fb      	ldr	r3, [r7, #12]
 80f2cfa:	681b      	ldr	r3, [r3, #0]
 80f2cfc:	69d9      	ldr	r1, [r3, #28]
 80f2cfe:	68bb      	ldr	r3, [r7, #8]
 80f2d00:	689b      	ldr	r3, [r3, #8]
 80f2d02:	021a      	lsls	r2, r3, #8
 80f2d04:	68fb      	ldr	r3, [r7, #12]
 80f2d06:	681b      	ldr	r3, [r3, #0]
 80f2d08:	430a      	orrs	r2, r1
 80f2d0a:	61da      	str	r2, [r3, #28]
 80f2d0c:	e001      	b.n	80f2d12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80f2d0e:	2301      	movs	r3, #1
 80f2d10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80f2d12:	68fb      	ldr	r3, [r7, #12]
 80f2d14:	2200      	movs	r2, #0
 80f2d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80f2d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 80f2d1c:	4618      	mov	r0, r3
 80f2d1e:	3718      	adds	r7, #24
 80f2d20:	46bd      	mov	sp, r7
 80f2d22:	bd80      	pop	{r7, pc}

080f2d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80f2d24:	b580      	push	{r7, lr}
 80f2d26:	b086      	sub	sp, #24
 80f2d28:	af00      	add	r7, sp, #0
 80f2d2a:	60f8      	str	r0, [r7, #12]
 80f2d2c:	60b9      	str	r1, [r7, #8]
 80f2d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80f2d30:	2300      	movs	r3, #0
 80f2d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80f2d34:	68fb      	ldr	r3, [r7, #12]
 80f2d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f2d3a:	2b01      	cmp	r3, #1
 80f2d3c:	d101      	bne.n	80f2d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80f2d3e:	2302      	movs	r3, #2
 80f2d40:	e0ff      	b.n	80f2f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80f2d42:	68fb      	ldr	r3, [r7, #12]
 80f2d44:	2201      	movs	r2, #1
 80f2d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80f2d4a:	687b      	ldr	r3, [r7, #4]
 80f2d4c:	2b14      	cmp	r3, #20
 80f2d4e:	f200 80f0 	bhi.w	80f2f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80f2d52:	a201      	add	r2, pc, #4	@ (adr r2, 80f2d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80f2d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f2d58:	080f2dad 	.word	0x080f2dad
 80f2d5c:	080f2f33 	.word	0x080f2f33
 80f2d60:	080f2f33 	.word	0x080f2f33
 80f2d64:	080f2f33 	.word	0x080f2f33
 80f2d68:	080f2ded 	.word	0x080f2ded
 80f2d6c:	080f2f33 	.word	0x080f2f33
 80f2d70:	080f2f33 	.word	0x080f2f33
 80f2d74:	080f2f33 	.word	0x080f2f33
 80f2d78:	080f2e2f 	.word	0x080f2e2f
 80f2d7c:	080f2f33 	.word	0x080f2f33
 80f2d80:	080f2f33 	.word	0x080f2f33
 80f2d84:	080f2f33 	.word	0x080f2f33
 80f2d88:	080f2e6f 	.word	0x080f2e6f
 80f2d8c:	080f2f33 	.word	0x080f2f33
 80f2d90:	080f2f33 	.word	0x080f2f33
 80f2d94:	080f2f33 	.word	0x080f2f33
 80f2d98:	080f2eb1 	.word	0x080f2eb1
 80f2d9c:	080f2f33 	.word	0x080f2f33
 80f2da0:	080f2f33 	.word	0x080f2f33
 80f2da4:	080f2f33 	.word	0x080f2f33
 80f2da8:	080f2ef1 	.word	0x080f2ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80f2dac:	68fb      	ldr	r3, [r7, #12]
 80f2dae:	681b      	ldr	r3, [r3, #0]
 80f2db0:	68b9      	ldr	r1, [r7, #8]
 80f2db2:	4618      	mov	r0, r3
 80f2db4:	f000 fb86 	bl	80f34c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80f2db8:	68fb      	ldr	r3, [r7, #12]
 80f2dba:	681b      	ldr	r3, [r3, #0]
 80f2dbc:	699a      	ldr	r2, [r3, #24]
 80f2dbe:	68fb      	ldr	r3, [r7, #12]
 80f2dc0:	681b      	ldr	r3, [r3, #0]
 80f2dc2:	f042 0208 	orr.w	r2, r2, #8
 80f2dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80f2dc8:	68fb      	ldr	r3, [r7, #12]
 80f2dca:	681b      	ldr	r3, [r3, #0]
 80f2dcc:	699a      	ldr	r2, [r3, #24]
 80f2dce:	68fb      	ldr	r3, [r7, #12]
 80f2dd0:	681b      	ldr	r3, [r3, #0]
 80f2dd2:	f022 0204 	bic.w	r2, r2, #4
 80f2dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80f2dd8:	68fb      	ldr	r3, [r7, #12]
 80f2dda:	681b      	ldr	r3, [r3, #0]
 80f2ddc:	6999      	ldr	r1, [r3, #24]
 80f2dde:	68bb      	ldr	r3, [r7, #8]
 80f2de0:	691a      	ldr	r2, [r3, #16]
 80f2de2:	68fb      	ldr	r3, [r7, #12]
 80f2de4:	681b      	ldr	r3, [r3, #0]
 80f2de6:	430a      	orrs	r2, r1
 80f2de8:	619a      	str	r2, [r3, #24]
      break;
 80f2dea:	e0a5      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80f2dec:	68fb      	ldr	r3, [r7, #12]
 80f2dee:	681b      	ldr	r3, [r3, #0]
 80f2df0:	68b9      	ldr	r1, [r7, #8]
 80f2df2:	4618      	mov	r0, r3
 80f2df4:	f000 fc28 	bl	80f3648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80f2df8:	68fb      	ldr	r3, [r7, #12]
 80f2dfa:	681b      	ldr	r3, [r3, #0]
 80f2dfc:	699a      	ldr	r2, [r3, #24]
 80f2dfe:	68fb      	ldr	r3, [r7, #12]
 80f2e00:	681b      	ldr	r3, [r3, #0]
 80f2e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80f2e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80f2e08:	68fb      	ldr	r3, [r7, #12]
 80f2e0a:	681b      	ldr	r3, [r3, #0]
 80f2e0c:	699a      	ldr	r2, [r3, #24]
 80f2e0e:	68fb      	ldr	r3, [r7, #12]
 80f2e10:	681b      	ldr	r3, [r3, #0]
 80f2e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80f2e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80f2e18:	68fb      	ldr	r3, [r7, #12]
 80f2e1a:	681b      	ldr	r3, [r3, #0]
 80f2e1c:	6999      	ldr	r1, [r3, #24]
 80f2e1e:	68bb      	ldr	r3, [r7, #8]
 80f2e20:	691b      	ldr	r3, [r3, #16]
 80f2e22:	021a      	lsls	r2, r3, #8
 80f2e24:	68fb      	ldr	r3, [r7, #12]
 80f2e26:	681b      	ldr	r3, [r3, #0]
 80f2e28:	430a      	orrs	r2, r1
 80f2e2a:	619a      	str	r2, [r3, #24]
      break;
 80f2e2c:	e084      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80f2e2e:	68fb      	ldr	r3, [r7, #12]
 80f2e30:	681b      	ldr	r3, [r3, #0]
 80f2e32:	68b9      	ldr	r1, [r7, #8]
 80f2e34:	4618      	mov	r0, r3
 80f2e36:	f000 fcb7 	bl	80f37a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80f2e3a:	68fb      	ldr	r3, [r7, #12]
 80f2e3c:	681b      	ldr	r3, [r3, #0]
 80f2e3e:	69da      	ldr	r2, [r3, #28]
 80f2e40:	68fb      	ldr	r3, [r7, #12]
 80f2e42:	681b      	ldr	r3, [r3, #0]
 80f2e44:	f042 0208 	orr.w	r2, r2, #8
 80f2e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80f2e4a:	68fb      	ldr	r3, [r7, #12]
 80f2e4c:	681b      	ldr	r3, [r3, #0]
 80f2e4e:	69da      	ldr	r2, [r3, #28]
 80f2e50:	68fb      	ldr	r3, [r7, #12]
 80f2e52:	681b      	ldr	r3, [r3, #0]
 80f2e54:	f022 0204 	bic.w	r2, r2, #4
 80f2e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80f2e5a:	68fb      	ldr	r3, [r7, #12]
 80f2e5c:	681b      	ldr	r3, [r3, #0]
 80f2e5e:	69d9      	ldr	r1, [r3, #28]
 80f2e60:	68bb      	ldr	r3, [r7, #8]
 80f2e62:	691a      	ldr	r2, [r3, #16]
 80f2e64:	68fb      	ldr	r3, [r7, #12]
 80f2e66:	681b      	ldr	r3, [r3, #0]
 80f2e68:	430a      	orrs	r2, r1
 80f2e6a:	61da      	str	r2, [r3, #28]
      break;
 80f2e6c:	e064      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80f2e6e:	68fb      	ldr	r3, [r7, #12]
 80f2e70:	681b      	ldr	r3, [r3, #0]
 80f2e72:	68b9      	ldr	r1, [r7, #8]
 80f2e74:	4618      	mov	r0, r3
 80f2e76:	f000 fd45 	bl	80f3904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80f2e7a:	68fb      	ldr	r3, [r7, #12]
 80f2e7c:	681b      	ldr	r3, [r3, #0]
 80f2e7e:	69da      	ldr	r2, [r3, #28]
 80f2e80:	68fb      	ldr	r3, [r7, #12]
 80f2e82:	681b      	ldr	r3, [r3, #0]
 80f2e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80f2e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80f2e8a:	68fb      	ldr	r3, [r7, #12]
 80f2e8c:	681b      	ldr	r3, [r3, #0]
 80f2e8e:	69da      	ldr	r2, [r3, #28]
 80f2e90:	68fb      	ldr	r3, [r7, #12]
 80f2e92:	681b      	ldr	r3, [r3, #0]
 80f2e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80f2e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80f2e9a:	68fb      	ldr	r3, [r7, #12]
 80f2e9c:	681b      	ldr	r3, [r3, #0]
 80f2e9e:	69d9      	ldr	r1, [r3, #28]
 80f2ea0:	68bb      	ldr	r3, [r7, #8]
 80f2ea2:	691b      	ldr	r3, [r3, #16]
 80f2ea4:	021a      	lsls	r2, r3, #8
 80f2ea6:	68fb      	ldr	r3, [r7, #12]
 80f2ea8:	681b      	ldr	r3, [r3, #0]
 80f2eaa:	430a      	orrs	r2, r1
 80f2eac:	61da      	str	r2, [r3, #28]
      break;
 80f2eae:	e043      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80f2eb0:	68fb      	ldr	r3, [r7, #12]
 80f2eb2:	681b      	ldr	r3, [r3, #0]
 80f2eb4:	68b9      	ldr	r1, [r7, #8]
 80f2eb6:	4618      	mov	r0, r3
 80f2eb8:	f000 fdd4 	bl	80f3a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80f2ebc:	68fb      	ldr	r3, [r7, #12]
 80f2ebe:	681b      	ldr	r3, [r3, #0]
 80f2ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f2ec2:	68fb      	ldr	r3, [r7, #12]
 80f2ec4:	681b      	ldr	r3, [r3, #0]
 80f2ec6:	f042 0208 	orr.w	r2, r2, #8
 80f2eca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80f2ecc:	68fb      	ldr	r3, [r7, #12]
 80f2ece:	681b      	ldr	r3, [r3, #0]
 80f2ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f2ed2:	68fb      	ldr	r3, [r7, #12]
 80f2ed4:	681b      	ldr	r3, [r3, #0]
 80f2ed6:	f022 0204 	bic.w	r2, r2, #4
 80f2eda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80f2edc:	68fb      	ldr	r3, [r7, #12]
 80f2ede:	681b      	ldr	r3, [r3, #0]
 80f2ee0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80f2ee2:	68bb      	ldr	r3, [r7, #8]
 80f2ee4:	691a      	ldr	r2, [r3, #16]
 80f2ee6:	68fb      	ldr	r3, [r7, #12]
 80f2ee8:	681b      	ldr	r3, [r3, #0]
 80f2eea:	430a      	orrs	r2, r1
 80f2eec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80f2eee:	e023      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80f2ef0:	68fb      	ldr	r3, [r7, #12]
 80f2ef2:	681b      	ldr	r3, [r3, #0]
 80f2ef4:	68b9      	ldr	r1, [r7, #8]
 80f2ef6:	4618      	mov	r0, r3
 80f2ef8:	f000 fe36 	bl	80f3b68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80f2efc:	68fb      	ldr	r3, [r7, #12]
 80f2efe:	681b      	ldr	r3, [r3, #0]
 80f2f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f2f02:	68fb      	ldr	r3, [r7, #12]
 80f2f04:	681b      	ldr	r3, [r3, #0]
 80f2f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80f2f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80f2f0c:	68fb      	ldr	r3, [r7, #12]
 80f2f0e:	681b      	ldr	r3, [r3, #0]
 80f2f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f2f12:	68fb      	ldr	r3, [r7, #12]
 80f2f14:	681b      	ldr	r3, [r3, #0]
 80f2f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80f2f1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80f2f1c:	68fb      	ldr	r3, [r7, #12]
 80f2f1e:	681b      	ldr	r3, [r3, #0]
 80f2f20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80f2f22:	68bb      	ldr	r3, [r7, #8]
 80f2f24:	691b      	ldr	r3, [r3, #16]
 80f2f26:	021a      	lsls	r2, r3, #8
 80f2f28:	68fb      	ldr	r3, [r7, #12]
 80f2f2a:	681b      	ldr	r3, [r3, #0]
 80f2f2c:	430a      	orrs	r2, r1
 80f2f2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80f2f30:	e002      	b.n	80f2f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80f2f32:	2301      	movs	r3, #1
 80f2f34:	75fb      	strb	r3, [r7, #23]
      break;
 80f2f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80f2f38:	68fb      	ldr	r3, [r7, #12]
 80f2f3a:	2200      	movs	r2, #0
 80f2f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80f2f40:	7dfb      	ldrb	r3, [r7, #23]
}
 80f2f42:	4618      	mov	r0, r3
 80f2f44:	3718      	adds	r7, #24
 80f2f46:	46bd      	mov	sp, r7
 80f2f48:	bd80      	pop	{r7, pc}
 80f2f4a:	bf00      	nop

080f2f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80f2f4c:	b580      	push	{r7, lr}
 80f2f4e:	b084      	sub	sp, #16
 80f2f50:	af00      	add	r7, sp, #0
 80f2f52:	6078      	str	r0, [r7, #4]
 80f2f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80f2f56:	2300      	movs	r3, #0
 80f2f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80f2f5a:	687b      	ldr	r3, [r7, #4]
 80f2f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f2f60:	2b01      	cmp	r3, #1
 80f2f62:	d101      	bne.n	80f2f68 <HAL_TIM_ConfigClockSource+0x1c>
 80f2f64:	2302      	movs	r3, #2
 80f2f66:	e0fe      	b.n	80f3166 <HAL_TIM_ConfigClockSource+0x21a>
 80f2f68:	687b      	ldr	r3, [r7, #4]
 80f2f6a:	2201      	movs	r2, #1
 80f2f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80f2f70:	687b      	ldr	r3, [r7, #4]
 80f2f72:	2202      	movs	r2, #2
 80f2f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80f2f78:	687b      	ldr	r3, [r7, #4]
 80f2f7a:	681b      	ldr	r3, [r3, #0]
 80f2f7c:	689b      	ldr	r3, [r3, #8]
 80f2f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80f2f80:	68bb      	ldr	r3, [r7, #8]
 80f2f82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80f2f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80f2f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80f2f8c:	68bb      	ldr	r3, [r7, #8]
 80f2f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80f2f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80f2f94:	687b      	ldr	r3, [r7, #4]
 80f2f96:	681b      	ldr	r3, [r3, #0]
 80f2f98:	68ba      	ldr	r2, [r7, #8]
 80f2f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80f2f9c:	683b      	ldr	r3, [r7, #0]
 80f2f9e:	681b      	ldr	r3, [r3, #0]
 80f2fa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f2fa4:	f000 80c9 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f2fac:	f200 80ce 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f2fb0:	4a6f      	ldr	r2, [pc, #444]	@ (80f3170 <HAL_TIM_ConfigClockSource+0x224>)
 80f2fb2:	4293      	cmp	r3, r2
 80f2fb4:	f000 80c1 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2fb8:	4a6d      	ldr	r2, [pc, #436]	@ (80f3170 <HAL_TIM_ConfigClockSource+0x224>)
 80f2fba:	4293      	cmp	r3, r2
 80f2fbc:	f200 80c6 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f2fc0:	4a6c      	ldr	r2, [pc, #432]	@ (80f3174 <HAL_TIM_ConfigClockSource+0x228>)
 80f2fc2:	4293      	cmp	r3, r2
 80f2fc4:	f000 80b9 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2fc8:	4a6a      	ldr	r2, [pc, #424]	@ (80f3174 <HAL_TIM_ConfigClockSource+0x228>)
 80f2fca:	4293      	cmp	r3, r2
 80f2fcc:	f200 80be 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f2fd0:	4a69      	ldr	r2, [pc, #420]	@ (80f3178 <HAL_TIM_ConfigClockSource+0x22c>)
 80f2fd2:	4293      	cmp	r3, r2
 80f2fd4:	f000 80b1 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2fd8:	4a67      	ldr	r2, [pc, #412]	@ (80f3178 <HAL_TIM_ConfigClockSource+0x22c>)
 80f2fda:	4293      	cmp	r3, r2
 80f2fdc:	f200 80b6 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f2fe0:	4a66      	ldr	r2, [pc, #408]	@ (80f317c <HAL_TIM_ConfigClockSource+0x230>)
 80f2fe2:	4293      	cmp	r3, r2
 80f2fe4:	f000 80a9 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2fe8:	4a64      	ldr	r2, [pc, #400]	@ (80f317c <HAL_TIM_ConfigClockSource+0x230>)
 80f2fea:	4293      	cmp	r3, r2
 80f2fec:	f200 80ae 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f2ff0:	4a63      	ldr	r2, [pc, #396]	@ (80f3180 <HAL_TIM_ConfigClockSource+0x234>)
 80f2ff2:	4293      	cmp	r3, r2
 80f2ff4:	f000 80a1 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f2ff8:	4a61      	ldr	r2, [pc, #388]	@ (80f3180 <HAL_TIM_ConfigClockSource+0x234>)
 80f2ffa:	4293      	cmp	r3, r2
 80f2ffc:	f200 80a6 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3000:	4a60      	ldr	r2, [pc, #384]	@ (80f3184 <HAL_TIM_ConfigClockSource+0x238>)
 80f3002:	4293      	cmp	r3, r2
 80f3004:	f000 8099 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3008:	4a5e      	ldr	r2, [pc, #376]	@ (80f3184 <HAL_TIM_ConfigClockSource+0x238>)
 80f300a:	4293      	cmp	r3, r2
 80f300c:	f200 809e 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3010:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80f3014:	f000 8091 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3018:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80f301c:	f200 8096 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f3024:	f000 8089 	beq.w	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f302c:	f200 808e 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f3034:	d03e      	beq.n	80f30b4 <HAL_TIM_ConfigClockSource+0x168>
 80f3036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80f303a:	f200 8087 	bhi.w	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f303e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80f3042:	f000 8086 	beq.w	80f3152 <HAL_TIM_ConfigClockSource+0x206>
 80f3046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80f304a:	d87f      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f304c:	2b70      	cmp	r3, #112	@ 0x70
 80f304e:	d01a      	beq.n	80f3086 <HAL_TIM_ConfigClockSource+0x13a>
 80f3050:	2b70      	cmp	r3, #112	@ 0x70
 80f3052:	d87b      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3054:	2b60      	cmp	r3, #96	@ 0x60
 80f3056:	d050      	beq.n	80f30fa <HAL_TIM_ConfigClockSource+0x1ae>
 80f3058:	2b60      	cmp	r3, #96	@ 0x60
 80f305a:	d877      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f305c:	2b50      	cmp	r3, #80	@ 0x50
 80f305e:	d03c      	beq.n	80f30da <HAL_TIM_ConfigClockSource+0x18e>
 80f3060:	2b50      	cmp	r3, #80	@ 0x50
 80f3062:	d873      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3064:	2b40      	cmp	r3, #64	@ 0x40
 80f3066:	d058      	beq.n	80f311a <HAL_TIM_ConfigClockSource+0x1ce>
 80f3068:	2b40      	cmp	r3, #64	@ 0x40
 80f306a:	d86f      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f306c:	2b30      	cmp	r3, #48	@ 0x30
 80f306e:	d064      	beq.n	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3070:	2b30      	cmp	r3, #48	@ 0x30
 80f3072:	d86b      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f3074:	2b20      	cmp	r3, #32
 80f3076:	d060      	beq.n	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3078:	2b20      	cmp	r3, #32
 80f307a:	d867      	bhi.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
 80f307c:	2b00      	cmp	r3, #0
 80f307e:	d05c      	beq.n	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3080:	2b10      	cmp	r3, #16
 80f3082:	d05a      	beq.n	80f313a <HAL_TIM_ConfigClockSource+0x1ee>
 80f3084:	e062      	b.n	80f314c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80f3086:	687b      	ldr	r3, [r7, #4]
 80f3088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80f308a:	683b      	ldr	r3, [r7, #0]
 80f308c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80f308e:	683b      	ldr	r3, [r7, #0]
 80f3090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80f3092:	683b      	ldr	r3, [r7, #0]
 80f3094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80f3096:	f001 f8a7 	bl	80f41e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80f309a:	687b      	ldr	r3, [r7, #4]
 80f309c:	681b      	ldr	r3, [r3, #0]
 80f309e:	689b      	ldr	r3, [r3, #8]
 80f30a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80f30a2:	68bb      	ldr	r3, [r7, #8]
 80f30a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80f30a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80f30aa:	687b      	ldr	r3, [r7, #4]
 80f30ac:	681b      	ldr	r3, [r3, #0]
 80f30ae:	68ba      	ldr	r2, [r7, #8]
 80f30b0:	609a      	str	r2, [r3, #8]
      break;
 80f30b2:	e04f      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80f30b4:	687b      	ldr	r3, [r7, #4]
 80f30b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80f30b8:	683b      	ldr	r3, [r7, #0]
 80f30ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80f30bc:	683b      	ldr	r3, [r7, #0]
 80f30be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80f30c0:	683b      	ldr	r3, [r7, #0]
 80f30c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80f30c4:	f001 f890 	bl	80f41e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80f30c8:	687b      	ldr	r3, [r7, #4]
 80f30ca:	681b      	ldr	r3, [r3, #0]
 80f30cc:	689a      	ldr	r2, [r3, #8]
 80f30ce:	687b      	ldr	r3, [r7, #4]
 80f30d0:	681b      	ldr	r3, [r3, #0]
 80f30d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80f30d6:	609a      	str	r2, [r3, #8]
      break;
 80f30d8:	e03c      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80f30da:	687b      	ldr	r3, [r7, #4]
 80f30dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80f30de:	683b      	ldr	r3, [r7, #0]
 80f30e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80f30e2:	683b      	ldr	r3, [r7, #0]
 80f30e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80f30e6:	461a      	mov	r2, r3
 80f30e8:	f000 ff4c 	bl	80f3f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80f30ec:	687b      	ldr	r3, [r7, #4]
 80f30ee:	681b      	ldr	r3, [r3, #0]
 80f30f0:	2150      	movs	r1, #80	@ 0x50
 80f30f2:	4618      	mov	r0, r3
 80f30f4:	f001 f85b 	bl	80f41ae <TIM_ITRx_SetConfig>
      break;
 80f30f8:	e02c      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80f30fa:	687b      	ldr	r3, [r7, #4]
 80f30fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80f30fe:	683b      	ldr	r3, [r7, #0]
 80f3100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80f3102:	683b      	ldr	r3, [r7, #0]
 80f3104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80f3106:	461a      	mov	r2, r3
 80f3108:	f000 ffa8 	bl	80f405c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80f310c:	687b      	ldr	r3, [r7, #4]
 80f310e:	681b      	ldr	r3, [r3, #0]
 80f3110:	2160      	movs	r1, #96	@ 0x60
 80f3112:	4618      	mov	r0, r3
 80f3114:	f001 f84b 	bl	80f41ae <TIM_ITRx_SetConfig>
      break;
 80f3118:	e01c      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80f311a:	687b      	ldr	r3, [r7, #4]
 80f311c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80f311e:	683b      	ldr	r3, [r7, #0]
 80f3120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80f3122:	683b      	ldr	r3, [r7, #0]
 80f3124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80f3126:	461a      	mov	r2, r3
 80f3128:	f000 ff2c 	bl	80f3f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80f312c:	687b      	ldr	r3, [r7, #4]
 80f312e:	681b      	ldr	r3, [r3, #0]
 80f3130:	2140      	movs	r1, #64	@ 0x40
 80f3132:	4618      	mov	r0, r3
 80f3134:	f001 f83b 	bl	80f41ae <TIM_ITRx_SetConfig>
      break;
 80f3138:	e00c      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80f313a:	687b      	ldr	r3, [r7, #4]
 80f313c:	681a      	ldr	r2, [r3, #0]
 80f313e:	683b      	ldr	r3, [r7, #0]
 80f3140:	681b      	ldr	r3, [r3, #0]
 80f3142:	4619      	mov	r1, r3
 80f3144:	4610      	mov	r0, r2
 80f3146:	f001 f832 	bl	80f41ae <TIM_ITRx_SetConfig>
      break;
 80f314a:	e003      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80f314c:	2301      	movs	r3, #1
 80f314e:	73fb      	strb	r3, [r7, #15]
      break;
 80f3150:	e000      	b.n	80f3154 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80f3152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80f3154:	687b      	ldr	r3, [r7, #4]
 80f3156:	2201      	movs	r2, #1
 80f3158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80f315c:	687b      	ldr	r3, [r7, #4]
 80f315e:	2200      	movs	r2, #0
 80f3160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80f3164:	7bfb      	ldrb	r3, [r7, #15]
}
 80f3166:	4618      	mov	r0, r3
 80f3168:	3710      	adds	r7, #16
 80f316a:	46bd      	mov	sp, r7
 80f316c:	bd80      	pop	{r7, pc}
 80f316e:	bf00      	nop
 80f3170:	00100070 	.word	0x00100070
 80f3174:	00100060 	.word	0x00100060
 80f3178:	00100050 	.word	0x00100050
 80f317c:	00100040 	.word	0x00100040
 80f3180:	00100030 	.word	0x00100030
 80f3184:	00100020 	.word	0x00100020

080f3188 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80f3188:	b580      	push	{r7, lr}
 80f318a:	b082      	sub	sp, #8
 80f318c:	af00      	add	r7, sp, #0
 80f318e:	6078      	str	r0, [r7, #4]
 80f3190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80f3192:	687b      	ldr	r3, [r7, #4]
 80f3194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f3198:	2b01      	cmp	r3, #1
 80f319a:	d101      	bne.n	80f31a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80f319c:	2302      	movs	r3, #2
 80f319e:	e031      	b.n	80f3204 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80f31a0:	687b      	ldr	r3, [r7, #4]
 80f31a2:	2201      	movs	r2, #1
 80f31a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80f31a8:	687b      	ldr	r3, [r7, #4]
 80f31aa:	2202      	movs	r2, #2
 80f31ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80f31b0:	6839      	ldr	r1, [r7, #0]
 80f31b2:	6878      	ldr	r0, [r7, #4]
 80f31b4:	f000 fd5c 	bl	80f3c70 <TIM_SlaveTimer_SetConfig>
 80f31b8:	4603      	mov	r3, r0
 80f31ba:	2b00      	cmp	r3, #0
 80f31bc:	d009      	beq.n	80f31d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80f31be:	687b      	ldr	r3, [r7, #4]
 80f31c0:	2201      	movs	r2, #1
 80f31c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80f31c6:	687b      	ldr	r3, [r7, #4]
 80f31c8:	2200      	movs	r2, #0
 80f31ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80f31ce:	2301      	movs	r3, #1
 80f31d0:	e018      	b.n	80f3204 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80f31d2:	687b      	ldr	r3, [r7, #4]
 80f31d4:	681b      	ldr	r3, [r3, #0]
 80f31d6:	68da      	ldr	r2, [r3, #12]
 80f31d8:	687b      	ldr	r3, [r7, #4]
 80f31da:	681b      	ldr	r3, [r3, #0]
 80f31dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80f31e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80f31e2:	687b      	ldr	r3, [r7, #4]
 80f31e4:	681b      	ldr	r3, [r3, #0]
 80f31e6:	68da      	ldr	r2, [r3, #12]
 80f31e8:	687b      	ldr	r3, [r7, #4]
 80f31ea:	681b      	ldr	r3, [r3, #0]
 80f31ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80f31f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80f31f2:	687b      	ldr	r3, [r7, #4]
 80f31f4:	2201      	movs	r2, #1
 80f31f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80f31fa:	687b      	ldr	r3, [r7, #4]
 80f31fc:	2200      	movs	r2, #0
 80f31fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80f3202:	2300      	movs	r3, #0
}
 80f3204:	4618      	mov	r0, r3
 80f3206:	3708      	adds	r7, #8
 80f3208:	46bd      	mov	sp, r7
 80f320a:	bd80      	pop	{r7, pc}

080f320c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80f320c:	b480      	push	{r7}
 80f320e:	b083      	sub	sp, #12
 80f3210:	af00      	add	r7, sp, #0
 80f3212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80f3214:	bf00      	nop
 80f3216:	370c      	adds	r7, #12
 80f3218:	46bd      	mov	sp, r7
 80f321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f321e:	4770      	bx	lr

080f3220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80f3220:	b480      	push	{r7}
 80f3222:	b083      	sub	sp, #12
 80f3224:	af00      	add	r7, sp, #0
 80f3226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80f3228:	bf00      	nop
 80f322a:	370c      	adds	r7, #12
 80f322c:	46bd      	mov	sp, r7
 80f322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3232:	4770      	bx	lr

080f3234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80f3234:	b480      	push	{r7}
 80f3236:	b083      	sub	sp, #12
 80f3238:	af00      	add	r7, sp, #0
 80f323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80f323c:	bf00      	nop
 80f323e:	370c      	adds	r7, #12
 80f3240:	46bd      	mov	sp, r7
 80f3242:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3246:	4770      	bx	lr

080f3248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80f3248:	b480      	push	{r7}
 80f324a:	b083      	sub	sp, #12
 80f324c:	af00      	add	r7, sp, #0
 80f324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80f3250:	bf00      	nop
 80f3252:	370c      	adds	r7, #12
 80f3254:	46bd      	mov	sp, r7
 80f3256:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f325a:	4770      	bx	lr

080f325c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80f325c:	b480      	push	{r7}
 80f325e:	b083      	sub	sp, #12
 80f3260:	af00      	add	r7, sp, #0
 80f3262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80f3264:	bf00      	nop
 80f3266:	370c      	adds	r7, #12
 80f3268:	46bd      	mov	sp, r7
 80f326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f326e:	4770      	bx	lr

080f3270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80f3270:	b480      	push	{r7}
 80f3272:	b085      	sub	sp, #20
 80f3274:	af00      	add	r7, sp, #0
 80f3276:	6078      	str	r0, [r7, #4]
 80f3278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80f327a:	687b      	ldr	r3, [r7, #4]
 80f327c:	681b      	ldr	r3, [r3, #0]
 80f327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80f3280:	687b      	ldr	r3, [r7, #4]
 80f3282:	4a7a      	ldr	r2, [pc, #488]	@ (80f346c <TIM_Base_SetConfig+0x1fc>)
 80f3284:	4293      	cmp	r3, r2
 80f3286:	d02b      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f3288:	687b      	ldr	r3, [r7, #4]
 80f328a:	4a79      	ldr	r2, [pc, #484]	@ (80f3470 <TIM_Base_SetConfig+0x200>)
 80f328c:	4293      	cmp	r3, r2
 80f328e:	d027      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f3290:	687b      	ldr	r3, [r7, #4]
 80f3292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f3296:	d023      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f3298:	687b      	ldr	r3, [r7, #4]
 80f329a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f329e:	d01f      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32a0:	687b      	ldr	r3, [r7, #4]
 80f32a2:	4a74      	ldr	r2, [pc, #464]	@ (80f3474 <TIM_Base_SetConfig+0x204>)
 80f32a4:	4293      	cmp	r3, r2
 80f32a6:	d01b      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32a8:	687b      	ldr	r3, [r7, #4]
 80f32aa:	4a73      	ldr	r2, [pc, #460]	@ (80f3478 <TIM_Base_SetConfig+0x208>)
 80f32ac:	4293      	cmp	r3, r2
 80f32ae:	d017      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32b0:	687b      	ldr	r3, [r7, #4]
 80f32b2:	4a72      	ldr	r2, [pc, #456]	@ (80f347c <TIM_Base_SetConfig+0x20c>)
 80f32b4:	4293      	cmp	r3, r2
 80f32b6:	d013      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32b8:	687b      	ldr	r3, [r7, #4]
 80f32ba:	4a71      	ldr	r2, [pc, #452]	@ (80f3480 <TIM_Base_SetConfig+0x210>)
 80f32bc:	4293      	cmp	r3, r2
 80f32be:	d00f      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32c0:	687b      	ldr	r3, [r7, #4]
 80f32c2:	4a70      	ldr	r2, [pc, #448]	@ (80f3484 <TIM_Base_SetConfig+0x214>)
 80f32c4:	4293      	cmp	r3, r2
 80f32c6:	d00b      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32c8:	687b      	ldr	r3, [r7, #4]
 80f32ca:	4a6f      	ldr	r2, [pc, #444]	@ (80f3488 <TIM_Base_SetConfig+0x218>)
 80f32cc:	4293      	cmp	r3, r2
 80f32ce:	d007      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32d0:	687b      	ldr	r3, [r7, #4]
 80f32d2:	4a6e      	ldr	r2, [pc, #440]	@ (80f348c <TIM_Base_SetConfig+0x21c>)
 80f32d4:	4293      	cmp	r3, r2
 80f32d6:	d003      	beq.n	80f32e0 <TIM_Base_SetConfig+0x70>
 80f32d8:	687b      	ldr	r3, [r7, #4]
 80f32da:	4a6d      	ldr	r2, [pc, #436]	@ (80f3490 <TIM_Base_SetConfig+0x220>)
 80f32dc:	4293      	cmp	r3, r2
 80f32de:	d108      	bne.n	80f32f2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80f32e0:	68fb      	ldr	r3, [r7, #12]
 80f32e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f32e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80f32e8:	683b      	ldr	r3, [r7, #0]
 80f32ea:	685b      	ldr	r3, [r3, #4]
 80f32ec:	68fa      	ldr	r2, [r7, #12]
 80f32ee:	4313      	orrs	r3, r2
 80f32f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80f32f2:	687b      	ldr	r3, [r7, #4]
 80f32f4:	4a5d      	ldr	r2, [pc, #372]	@ (80f346c <TIM_Base_SetConfig+0x1fc>)
 80f32f6:	4293      	cmp	r3, r2
 80f32f8:	d05b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f32fa:	687b      	ldr	r3, [r7, #4]
 80f32fc:	4a5c      	ldr	r2, [pc, #368]	@ (80f3470 <TIM_Base_SetConfig+0x200>)
 80f32fe:	4293      	cmp	r3, r2
 80f3300:	d057      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3302:	687b      	ldr	r3, [r7, #4]
 80f3304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f3308:	d053      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f330a:	687b      	ldr	r3, [r7, #4]
 80f330c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f3310:	d04f      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3312:	687b      	ldr	r3, [r7, #4]
 80f3314:	4a57      	ldr	r2, [pc, #348]	@ (80f3474 <TIM_Base_SetConfig+0x204>)
 80f3316:	4293      	cmp	r3, r2
 80f3318:	d04b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f331a:	687b      	ldr	r3, [r7, #4]
 80f331c:	4a56      	ldr	r2, [pc, #344]	@ (80f3478 <TIM_Base_SetConfig+0x208>)
 80f331e:	4293      	cmp	r3, r2
 80f3320:	d047      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3322:	687b      	ldr	r3, [r7, #4]
 80f3324:	4a55      	ldr	r2, [pc, #340]	@ (80f347c <TIM_Base_SetConfig+0x20c>)
 80f3326:	4293      	cmp	r3, r2
 80f3328:	d043      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f332a:	687b      	ldr	r3, [r7, #4]
 80f332c:	4a54      	ldr	r2, [pc, #336]	@ (80f3480 <TIM_Base_SetConfig+0x210>)
 80f332e:	4293      	cmp	r3, r2
 80f3330:	d03f      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3332:	687b      	ldr	r3, [r7, #4]
 80f3334:	4a53      	ldr	r2, [pc, #332]	@ (80f3484 <TIM_Base_SetConfig+0x214>)
 80f3336:	4293      	cmp	r3, r2
 80f3338:	d03b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f333a:	687b      	ldr	r3, [r7, #4]
 80f333c:	4a52      	ldr	r2, [pc, #328]	@ (80f3488 <TIM_Base_SetConfig+0x218>)
 80f333e:	4293      	cmp	r3, r2
 80f3340:	d037      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3342:	687b      	ldr	r3, [r7, #4]
 80f3344:	4a51      	ldr	r2, [pc, #324]	@ (80f348c <TIM_Base_SetConfig+0x21c>)
 80f3346:	4293      	cmp	r3, r2
 80f3348:	d033      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f334a:	687b      	ldr	r3, [r7, #4]
 80f334c:	4a50      	ldr	r2, [pc, #320]	@ (80f3490 <TIM_Base_SetConfig+0x220>)
 80f334e:	4293      	cmp	r3, r2
 80f3350:	d02f      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3352:	687b      	ldr	r3, [r7, #4]
 80f3354:	4a4f      	ldr	r2, [pc, #316]	@ (80f3494 <TIM_Base_SetConfig+0x224>)
 80f3356:	4293      	cmp	r3, r2
 80f3358:	d02b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f335a:	687b      	ldr	r3, [r7, #4]
 80f335c:	4a4e      	ldr	r2, [pc, #312]	@ (80f3498 <TIM_Base_SetConfig+0x228>)
 80f335e:	4293      	cmp	r3, r2
 80f3360:	d027      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3362:	687b      	ldr	r3, [r7, #4]
 80f3364:	4a4d      	ldr	r2, [pc, #308]	@ (80f349c <TIM_Base_SetConfig+0x22c>)
 80f3366:	4293      	cmp	r3, r2
 80f3368:	d023      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f336a:	687b      	ldr	r3, [r7, #4]
 80f336c:	4a4c      	ldr	r2, [pc, #304]	@ (80f34a0 <TIM_Base_SetConfig+0x230>)
 80f336e:	4293      	cmp	r3, r2
 80f3370:	d01f      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3372:	687b      	ldr	r3, [r7, #4]
 80f3374:	4a4b      	ldr	r2, [pc, #300]	@ (80f34a4 <TIM_Base_SetConfig+0x234>)
 80f3376:	4293      	cmp	r3, r2
 80f3378:	d01b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f337a:	687b      	ldr	r3, [r7, #4]
 80f337c:	4a4a      	ldr	r2, [pc, #296]	@ (80f34a8 <TIM_Base_SetConfig+0x238>)
 80f337e:	4293      	cmp	r3, r2
 80f3380:	d017      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3382:	687b      	ldr	r3, [r7, #4]
 80f3384:	4a49      	ldr	r2, [pc, #292]	@ (80f34ac <TIM_Base_SetConfig+0x23c>)
 80f3386:	4293      	cmp	r3, r2
 80f3388:	d013      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f338a:	687b      	ldr	r3, [r7, #4]
 80f338c:	4a48      	ldr	r2, [pc, #288]	@ (80f34b0 <TIM_Base_SetConfig+0x240>)
 80f338e:	4293      	cmp	r3, r2
 80f3390:	d00f      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f3392:	687b      	ldr	r3, [r7, #4]
 80f3394:	4a47      	ldr	r2, [pc, #284]	@ (80f34b4 <TIM_Base_SetConfig+0x244>)
 80f3396:	4293      	cmp	r3, r2
 80f3398:	d00b      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f339a:	687b      	ldr	r3, [r7, #4]
 80f339c:	4a46      	ldr	r2, [pc, #280]	@ (80f34b8 <TIM_Base_SetConfig+0x248>)
 80f339e:	4293      	cmp	r3, r2
 80f33a0:	d007      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f33a2:	687b      	ldr	r3, [r7, #4]
 80f33a4:	4a45      	ldr	r2, [pc, #276]	@ (80f34bc <TIM_Base_SetConfig+0x24c>)
 80f33a6:	4293      	cmp	r3, r2
 80f33a8:	d003      	beq.n	80f33b2 <TIM_Base_SetConfig+0x142>
 80f33aa:	687b      	ldr	r3, [r7, #4]
 80f33ac:	4a44      	ldr	r2, [pc, #272]	@ (80f34c0 <TIM_Base_SetConfig+0x250>)
 80f33ae:	4293      	cmp	r3, r2
 80f33b0:	d108      	bne.n	80f33c4 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80f33b2:	68fb      	ldr	r3, [r7, #12]
 80f33b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f33b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80f33ba:	683b      	ldr	r3, [r7, #0]
 80f33bc:	68db      	ldr	r3, [r3, #12]
 80f33be:	68fa      	ldr	r2, [r7, #12]
 80f33c0:	4313      	orrs	r3, r2
 80f33c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80f33c4:	68fb      	ldr	r3, [r7, #12]
 80f33c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80f33ca:	683b      	ldr	r3, [r7, #0]
 80f33cc:	695b      	ldr	r3, [r3, #20]
 80f33ce:	4313      	orrs	r3, r2
 80f33d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80f33d2:	687b      	ldr	r3, [r7, #4]
 80f33d4:	68fa      	ldr	r2, [r7, #12]
 80f33d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80f33d8:	683b      	ldr	r3, [r7, #0]
 80f33da:	689a      	ldr	r2, [r3, #8]
 80f33dc:	687b      	ldr	r3, [r7, #4]
 80f33de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80f33e0:	683b      	ldr	r3, [r7, #0]
 80f33e2:	681a      	ldr	r2, [r3, #0]
 80f33e4:	687b      	ldr	r3, [r7, #4]
 80f33e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80f33e8:	687b      	ldr	r3, [r7, #4]
 80f33ea:	4a20      	ldr	r2, [pc, #128]	@ (80f346c <TIM_Base_SetConfig+0x1fc>)
 80f33ec:	4293      	cmp	r3, r2
 80f33ee:	d023      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f33f0:	687b      	ldr	r3, [r7, #4]
 80f33f2:	4a1f      	ldr	r2, [pc, #124]	@ (80f3470 <TIM_Base_SetConfig+0x200>)
 80f33f4:	4293      	cmp	r3, r2
 80f33f6:	d01f      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f33f8:	687b      	ldr	r3, [r7, #4]
 80f33fa:	4a24      	ldr	r2, [pc, #144]	@ (80f348c <TIM_Base_SetConfig+0x21c>)
 80f33fc:	4293      	cmp	r3, r2
 80f33fe:	d01b      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3400:	687b      	ldr	r3, [r7, #4]
 80f3402:	4a23      	ldr	r2, [pc, #140]	@ (80f3490 <TIM_Base_SetConfig+0x220>)
 80f3404:	4293      	cmp	r3, r2
 80f3406:	d017      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3408:	687b      	ldr	r3, [r7, #4]
 80f340a:	4a28      	ldr	r2, [pc, #160]	@ (80f34ac <TIM_Base_SetConfig+0x23c>)
 80f340c:	4293      	cmp	r3, r2
 80f340e:	d013      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3410:	687b      	ldr	r3, [r7, #4]
 80f3412:	4a27      	ldr	r2, [pc, #156]	@ (80f34b0 <TIM_Base_SetConfig+0x240>)
 80f3414:	4293      	cmp	r3, r2
 80f3416:	d00f      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3418:	687b      	ldr	r3, [r7, #4]
 80f341a:	4a26      	ldr	r2, [pc, #152]	@ (80f34b4 <TIM_Base_SetConfig+0x244>)
 80f341c:	4293      	cmp	r3, r2
 80f341e:	d00b      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3420:	687b      	ldr	r3, [r7, #4]
 80f3422:	4a25      	ldr	r2, [pc, #148]	@ (80f34b8 <TIM_Base_SetConfig+0x248>)
 80f3424:	4293      	cmp	r3, r2
 80f3426:	d007      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3428:	687b      	ldr	r3, [r7, #4]
 80f342a:	4a24      	ldr	r2, [pc, #144]	@ (80f34bc <TIM_Base_SetConfig+0x24c>)
 80f342c:	4293      	cmp	r3, r2
 80f342e:	d003      	beq.n	80f3438 <TIM_Base_SetConfig+0x1c8>
 80f3430:	687b      	ldr	r3, [r7, #4]
 80f3432:	4a23      	ldr	r2, [pc, #140]	@ (80f34c0 <TIM_Base_SetConfig+0x250>)
 80f3434:	4293      	cmp	r3, r2
 80f3436:	d103      	bne.n	80f3440 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80f3438:	683b      	ldr	r3, [r7, #0]
 80f343a:	691a      	ldr	r2, [r3, #16]
 80f343c:	687b      	ldr	r3, [r7, #4]
 80f343e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80f3440:	687b      	ldr	r3, [r7, #4]
 80f3442:	2201      	movs	r2, #1
 80f3444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80f3446:	687b      	ldr	r3, [r7, #4]
 80f3448:	691b      	ldr	r3, [r3, #16]
 80f344a:	f003 0301 	and.w	r3, r3, #1
 80f344e:	2b01      	cmp	r3, #1
 80f3450:	d105      	bne.n	80f345e <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80f3452:	687b      	ldr	r3, [r7, #4]
 80f3454:	691b      	ldr	r3, [r3, #16]
 80f3456:	f023 0201 	bic.w	r2, r3, #1
 80f345a:	687b      	ldr	r3, [r7, #4]
 80f345c:	611a      	str	r2, [r3, #16]
  }
}
 80f345e:	bf00      	nop
 80f3460:	3714      	adds	r7, #20
 80f3462:	46bd      	mov	sp, r7
 80f3464:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3468:	4770      	bx	lr
 80f346a:	bf00      	nop
 80f346c:	40012c00 	.word	0x40012c00
 80f3470:	50012c00 	.word	0x50012c00
 80f3474:	40000400 	.word	0x40000400
 80f3478:	50000400 	.word	0x50000400
 80f347c:	40000800 	.word	0x40000800
 80f3480:	50000800 	.word	0x50000800
 80f3484:	40000c00 	.word	0x40000c00
 80f3488:	50000c00 	.word	0x50000c00
 80f348c:	40013400 	.word	0x40013400
 80f3490:	50013400 	.word	0x50013400
 80f3494:	40001800 	.word	0x40001800
 80f3498:	50001800 	.word	0x50001800
 80f349c:	40001c00 	.word	0x40001c00
 80f34a0:	50001c00 	.word	0x50001c00
 80f34a4:	40002000 	.word	0x40002000
 80f34a8:	50002000 	.word	0x50002000
 80f34ac:	40014000 	.word	0x40014000
 80f34b0:	50014000 	.word	0x50014000
 80f34b4:	40014400 	.word	0x40014400
 80f34b8:	50014400 	.word	0x50014400
 80f34bc:	40014800 	.word	0x40014800
 80f34c0:	50014800 	.word	0x50014800

080f34c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80f34c4:	b480      	push	{r7}
 80f34c6:	b087      	sub	sp, #28
 80f34c8:	af00      	add	r7, sp, #0
 80f34ca:	6078      	str	r0, [r7, #4]
 80f34cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f34ce:	687b      	ldr	r3, [r7, #4]
 80f34d0:	6a1b      	ldr	r3, [r3, #32]
 80f34d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80f34d4:	687b      	ldr	r3, [r7, #4]
 80f34d6:	6a1b      	ldr	r3, [r3, #32]
 80f34d8:	f023 0201 	bic.w	r2, r3, #1
 80f34dc:	687b      	ldr	r3, [r7, #4]
 80f34de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f34e0:	687b      	ldr	r3, [r7, #4]
 80f34e2:	685b      	ldr	r3, [r3, #4]
 80f34e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80f34e6:	687b      	ldr	r3, [r7, #4]
 80f34e8:	699b      	ldr	r3, [r3, #24]
 80f34ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80f34ec:	68fb      	ldr	r3, [r7, #12]
 80f34ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f34f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f34f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80f34f8:	68fb      	ldr	r3, [r7, #12]
 80f34fa:	f023 0303 	bic.w	r3, r3, #3
 80f34fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80f3500:	683b      	ldr	r3, [r7, #0]
 80f3502:	681b      	ldr	r3, [r3, #0]
 80f3504:	68fa      	ldr	r2, [r7, #12]
 80f3506:	4313      	orrs	r3, r2
 80f3508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80f350a:	697b      	ldr	r3, [r7, #20]
 80f350c:	f023 0302 	bic.w	r3, r3, #2
 80f3510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80f3512:	683b      	ldr	r3, [r7, #0]
 80f3514:	689b      	ldr	r3, [r3, #8]
 80f3516:	697a      	ldr	r2, [r7, #20]
 80f3518:	4313      	orrs	r3, r2
 80f351a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80f351c:	687b      	ldr	r3, [r7, #4]
 80f351e:	4a40      	ldr	r2, [pc, #256]	@ (80f3620 <TIM_OC1_SetConfig+0x15c>)
 80f3520:	4293      	cmp	r3, r2
 80f3522:	d023      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f3524:	687b      	ldr	r3, [r7, #4]
 80f3526:	4a3f      	ldr	r2, [pc, #252]	@ (80f3624 <TIM_OC1_SetConfig+0x160>)
 80f3528:	4293      	cmp	r3, r2
 80f352a:	d01f      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f352c:	687b      	ldr	r3, [r7, #4]
 80f352e:	4a3e      	ldr	r2, [pc, #248]	@ (80f3628 <TIM_OC1_SetConfig+0x164>)
 80f3530:	4293      	cmp	r3, r2
 80f3532:	d01b      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f3534:	687b      	ldr	r3, [r7, #4]
 80f3536:	4a3d      	ldr	r2, [pc, #244]	@ (80f362c <TIM_OC1_SetConfig+0x168>)
 80f3538:	4293      	cmp	r3, r2
 80f353a:	d017      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f353c:	687b      	ldr	r3, [r7, #4]
 80f353e:	4a3c      	ldr	r2, [pc, #240]	@ (80f3630 <TIM_OC1_SetConfig+0x16c>)
 80f3540:	4293      	cmp	r3, r2
 80f3542:	d013      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f3544:	687b      	ldr	r3, [r7, #4]
 80f3546:	4a3b      	ldr	r2, [pc, #236]	@ (80f3634 <TIM_OC1_SetConfig+0x170>)
 80f3548:	4293      	cmp	r3, r2
 80f354a:	d00f      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f354c:	687b      	ldr	r3, [r7, #4]
 80f354e:	4a3a      	ldr	r2, [pc, #232]	@ (80f3638 <TIM_OC1_SetConfig+0x174>)
 80f3550:	4293      	cmp	r3, r2
 80f3552:	d00b      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f3554:	687b      	ldr	r3, [r7, #4]
 80f3556:	4a39      	ldr	r2, [pc, #228]	@ (80f363c <TIM_OC1_SetConfig+0x178>)
 80f3558:	4293      	cmp	r3, r2
 80f355a:	d007      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f355c:	687b      	ldr	r3, [r7, #4]
 80f355e:	4a38      	ldr	r2, [pc, #224]	@ (80f3640 <TIM_OC1_SetConfig+0x17c>)
 80f3560:	4293      	cmp	r3, r2
 80f3562:	d003      	beq.n	80f356c <TIM_OC1_SetConfig+0xa8>
 80f3564:	687b      	ldr	r3, [r7, #4]
 80f3566:	4a37      	ldr	r2, [pc, #220]	@ (80f3644 <TIM_OC1_SetConfig+0x180>)
 80f3568:	4293      	cmp	r3, r2
 80f356a:	d10c      	bne.n	80f3586 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80f356c:	697b      	ldr	r3, [r7, #20]
 80f356e:	f023 0308 	bic.w	r3, r3, #8
 80f3572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80f3574:	683b      	ldr	r3, [r7, #0]
 80f3576:	68db      	ldr	r3, [r3, #12]
 80f3578:	697a      	ldr	r2, [r7, #20]
 80f357a:	4313      	orrs	r3, r2
 80f357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80f357e:	697b      	ldr	r3, [r7, #20]
 80f3580:	f023 0304 	bic.w	r3, r3, #4
 80f3584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f3586:	687b      	ldr	r3, [r7, #4]
 80f3588:	4a25      	ldr	r2, [pc, #148]	@ (80f3620 <TIM_OC1_SetConfig+0x15c>)
 80f358a:	4293      	cmp	r3, r2
 80f358c:	d023      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f358e:	687b      	ldr	r3, [r7, #4]
 80f3590:	4a24      	ldr	r2, [pc, #144]	@ (80f3624 <TIM_OC1_SetConfig+0x160>)
 80f3592:	4293      	cmp	r3, r2
 80f3594:	d01f      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f3596:	687b      	ldr	r3, [r7, #4]
 80f3598:	4a23      	ldr	r2, [pc, #140]	@ (80f3628 <TIM_OC1_SetConfig+0x164>)
 80f359a:	4293      	cmp	r3, r2
 80f359c:	d01b      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f359e:	687b      	ldr	r3, [r7, #4]
 80f35a0:	4a22      	ldr	r2, [pc, #136]	@ (80f362c <TIM_OC1_SetConfig+0x168>)
 80f35a2:	4293      	cmp	r3, r2
 80f35a4:	d017      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35a6:	687b      	ldr	r3, [r7, #4]
 80f35a8:	4a21      	ldr	r2, [pc, #132]	@ (80f3630 <TIM_OC1_SetConfig+0x16c>)
 80f35aa:	4293      	cmp	r3, r2
 80f35ac:	d013      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35ae:	687b      	ldr	r3, [r7, #4]
 80f35b0:	4a20      	ldr	r2, [pc, #128]	@ (80f3634 <TIM_OC1_SetConfig+0x170>)
 80f35b2:	4293      	cmp	r3, r2
 80f35b4:	d00f      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35b6:	687b      	ldr	r3, [r7, #4]
 80f35b8:	4a1f      	ldr	r2, [pc, #124]	@ (80f3638 <TIM_OC1_SetConfig+0x174>)
 80f35ba:	4293      	cmp	r3, r2
 80f35bc:	d00b      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35be:	687b      	ldr	r3, [r7, #4]
 80f35c0:	4a1e      	ldr	r2, [pc, #120]	@ (80f363c <TIM_OC1_SetConfig+0x178>)
 80f35c2:	4293      	cmp	r3, r2
 80f35c4:	d007      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35c6:	687b      	ldr	r3, [r7, #4]
 80f35c8:	4a1d      	ldr	r2, [pc, #116]	@ (80f3640 <TIM_OC1_SetConfig+0x17c>)
 80f35ca:	4293      	cmp	r3, r2
 80f35cc:	d003      	beq.n	80f35d6 <TIM_OC1_SetConfig+0x112>
 80f35ce:	687b      	ldr	r3, [r7, #4]
 80f35d0:	4a1c      	ldr	r2, [pc, #112]	@ (80f3644 <TIM_OC1_SetConfig+0x180>)
 80f35d2:	4293      	cmp	r3, r2
 80f35d4:	d111      	bne.n	80f35fa <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80f35d6:	693b      	ldr	r3, [r7, #16]
 80f35d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80f35dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80f35de:	693b      	ldr	r3, [r7, #16]
 80f35e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80f35e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80f35e6:	683b      	ldr	r3, [r7, #0]
 80f35e8:	695b      	ldr	r3, [r3, #20]
 80f35ea:	693a      	ldr	r2, [r7, #16]
 80f35ec:	4313      	orrs	r3, r2
 80f35ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80f35f0:	683b      	ldr	r3, [r7, #0]
 80f35f2:	699b      	ldr	r3, [r3, #24]
 80f35f4:	693a      	ldr	r2, [r7, #16]
 80f35f6:	4313      	orrs	r3, r2
 80f35f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f35fa:	687b      	ldr	r3, [r7, #4]
 80f35fc:	693a      	ldr	r2, [r7, #16]
 80f35fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80f3600:	687b      	ldr	r3, [r7, #4]
 80f3602:	68fa      	ldr	r2, [r7, #12]
 80f3604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80f3606:	683b      	ldr	r3, [r7, #0]
 80f3608:	685a      	ldr	r2, [r3, #4]
 80f360a:	687b      	ldr	r3, [r7, #4]
 80f360c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f360e:	687b      	ldr	r3, [r7, #4]
 80f3610:	697a      	ldr	r2, [r7, #20]
 80f3612:	621a      	str	r2, [r3, #32]
}
 80f3614:	bf00      	nop
 80f3616:	371c      	adds	r7, #28
 80f3618:	46bd      	mov	sp, r7
 80f361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f361e:	4770      	bx	lr
 80f3620:	40012c00 	.word	0x40012c00
 80f3624:	50012c00 	.word	0x50012c00
 80f3628:	40013400 	.word	0x40013400
 80f362c:	50013400 	.word	0x50013400
 80f3630:	40014000 	.word	0x40014000
 80f3634:	50014000 	.word	0x50014000
 80f3638:	40014400 	.word	0x40014400
 80f363c:	50014400 	.word	0x50014400
 80f3640:	40014800 	.word	0x40014800
 80f3644:	50014800 	.word	0x50014800

080f3648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80f3648:	b480      	push	{r7}
 80f364a:	b087      	sub	sp, #28
 80f364c:	af00      	add	r7, sp, #0
 80f364e:	6078      	str	r0, [r7, #4]
 80f3650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f3652:	687b      	ldr	r3, [r7, #4]
 80f3654:	6a1b      	ldr	r3, [r3, #32]
 80f3656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80f3658:	687b      	ldr	r3, [r7, #4]
 80f365a:	6a1b      	ldr	r3, [r3, #32]
 80f365c:	f023 0210 	bic.w	r2, r3, #16
 80f3660:	687b      	ldr	r3, [r7, #4]
 80f3662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f3664:	687b      	ldr	r3, [r7, #4]
 80f3666:	685b      	ldr	r3, [r3, #4]
 80f3668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80f366a:	687b      	ldr	r3, [r7, #4]
 80f366c:	699b      	ldr	r3, [r3, #24]
 80f366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80f3670:	68fb      	ldr	r3, [r7, #12]
 80f3672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80f3676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80f367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80f367c:	68fb      	ldr	r3, [r7, #12]
 80f367e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f3682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80f3684:	683b      	ldr	r3, [r7, #0]
 80f3686:	681b      	ldr	r3, [r3, #0]
 80f3688:	021b      	lsls	r3, r3, #8
 80f368a:	68fa      	ldr	r2, [r7, #12]
 80f368c:	4313      	orrs	r3, r2
 80f368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80f3690:	697b      	ldr	r3, [r7, #20]
 80f3692:	f023 0320 	bic.w	r3, r3, #32
 80f3696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80f3698:	683b      	ldr	r3, [r7, #0]
 80f369a:	689b      	ldr	r3, [r3, #8]
 80f369c:	011b      	lsls	r3, r3, #4
 80f369e:	697a      	ldr	r2, [r7, #20]
 80f36a0:	4313      	orrs	r3, r2
 80f36a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80f36a4:	687b      	ldr	r3, [r7, #4]
 80f36a6:	4a36      	ldr	r2, [pc, #216]	@ (80f3780 <TIM_OC2_SetConfig+0x138>)
 80f36a8:	4293      	cmp	r3, r2
 80f36aa:	d00b      	beq.n	80f36c4 <TIM_OC2_SetConfig+0x7c>
 80f36ac:	687b      	ldr	r3, [r7, #4]
 80f36ae:	4a35      	ldr	r2, [pc, #212]	@ (80f3784 <TIM_OC2_SetConfig+0x13c>)
 80f36b0:	4293      	cmp	r3, r2
 80f36b2:	d007      	beq.n	80f36c4 <TIM_OC2_SetConfig+0x7c>
 80f36b4:	687b      	ldr	r3, [r7, #4]
 80f36b6:	4a34      	ldr	r2, [pc, #208]	@ (80f3788 <TIM_OC2_SetConfig+0x140>)
 80f36b8:	4293      	cmp	r3, r2
 80f36ba:	d003      	beq.n	80f36c4 <TIM_OC2_SetConfig+0x7c>
 80f36bc:	687b      	ldr	r3, [r7, #4]
 80f36be:	4a33      	ldr	r2, [pc, #204]	@ (80f378c <TIM_OC2_SetConfig+0x144>)
 80f36c0:	4293      	cmp	r3, r2
 80f36c2:	d10d      	bne.n	80f36e0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80f36c4:	697b      	ldr	r3, [r7, #20]
 80f36c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80f36ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80f36cc:	683b      	ldr	r3, [r7, #0]
 80f36ce:	68db      	ldr	r3, [r3, #12]
 80f36d0:	011b      	lsls	r3, r3, #4
 80f36d2:	697a      	ldr	r2, [r7, #20]
 80f36d4:	4313      	orrs	r3, r2
 80f36d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80f36d8:	697b      	ldr	r3, [r7, #20]
 80f36da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80f36de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f36e0:	687b      	ldr	r3, [r7, #4]
 80f36e2:	4a27      	ldr	r2, [pc, #156]	@ (80f3780 <TIM_OC2_SetConfig+0x138>)
 80f36e4:	4293      	cmp	r3, r2
 80f36e6:	d023      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f36e8:	687b      	ldr	r3, [r7, #4]
 80f36ea:	4a26      	ldr	r2, [pc, #152]	@ (80f3784 <TIM_OC2_SetConfig+0x13c>)
 80f36ec:	4293      	cmp	r3, r2
 80f36ee:	d01f      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f36f0:	687b      	ldr	r3, [r7, #4]
 80f36f2:	4a25      	ldr	r2, [pc, #148]	@ (80f3788 <TIM_OC2_SetConfig+0x140>)
 80f36f4:	4293      	cmp	r3, r2
 80f36f6:	d01b      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f36f8:	687b      	ldr	r3, [r7, #4]
 80f36fa:	4a24      	ldr	r2, [pc, #144]	@ (80f378c <TIM_OC2_SetConfig+0x144>)
 80f36fc:	4293      	cmp	r3, r2
 80f36fe:	d017      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3700:	687b      	ldr	r3, [r7, #4]
 80f3702:	4a23      	ldr	r2, [pc, #140]	@ (80f3790 <TIM_OC2_SetConfig+0x148>)
 80f3704:	4293      	cmp	r3, r2
 80f3706:	d013      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3708:	687b      	ldr	r3, [r7, #4]
 80f370a:	4a22      	ldr	r2, [pc, #136]	@ (80f3794 <TIM_OC2_SetConfig+0x14c>)
 80f370c:	4293      	cmp	r3, r2
 80f370e:	d00f      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3710:	687b      	ldr	r3, [r7, #4]
 80f3712:	4a21      	ldr	r2, [pc, #132]	@ (80f3798 <TIM_OC2_SetConfig+0x150>)
 80f3714:	4293      	cmp	r3, r2
 80f3716:	d00b      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3718:	687b      	ldr	r3, [r7, #4]
 80f371a:	4a20      	ldr	r2, [pc, #128]	@ (80f379c <TIM_OC2_SetConfig+0x154>)
 80f371c:	4293      	cmp	r3, r2
 80f371e:	d007      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3720:	687b      	ldr	r3, [r7, #4]
 80f3722:	4a1f      	ldr	r2, [pc, #124]	@ (80f37a0 <TIM_OC2_SetConfig+0x158>)
 80f3724:	4293      	cmp	r3, r2
 80f3726:	d003      	beq.n	80f3730 <TIM_OC2_SetConfig+0xe8>
 80f3728:	687b      	ldr	r3, [r7, #4]
 80f372a:	4a1e      	ldr	r2, [pc, #120]	@ (80f37a4 <TIM_OC2_SetConfig+0x15c>)
 80f372c:	4293      	cmp	r3, r2
 80f372e:	d113      	bne.n	80f3758 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80f3730:	693b      	ldr	r3, [r7, #16]
 80f3732:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80f3736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80f3738:	693b      	ldr	r3, [r7, #16]
 80f373a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80f373e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80f3740:	683b      	ldr	r3, [r7, #0]
 80f3742:	695b      	ldr	r3, [r3, #20]
 80f3744:	009b      	lsls	r3, r3, #2
 80f3746:	693a      	ldr	r2, [r7, #16]
 80f3748:	4313      	orrs	r3, r2
 80f374a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80f374c:	683b      	ldr	r3, [r7, #0]
 80f374e:	699b      	ldr	r3, [r3, #24]
 80f3750:	009b      	lsls	r3, r3, #2
 80f3752:	693a      	ldr	r2, [r7, #16]
 80f3754:	4313      	orrs	r3, r2
 80f3756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f3758:	687b      	ldr	r3, [r7, #4]
 80f375a:	693a      	ldr	r2, [r7, #16]
 80f375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80f375e:	687b      	ldr	r3, [r7, #4]
 80f3760:	68fa      	ldr	r2, [r7, #12]
 80f3762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80f3764:	683b      	ldr	r3, [r7, #0]
 80f3766:	685a      	ldr	r2, [r3, #4]
 80f3768:	687b      	ldr	r3, [r7, #4]
 80f376a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f376c:	687b      	ldr	r3, [r7, #4]
 80f376e:	697a      	ldr	r2, [r7, #20]
 80f3770:	621a      	str	r2, [r3, #32]
}
 80f3772:	bf00      	nop
 80f3774:	371c      	adds	r7, #28
 80f3776:	46bd      	mov	sp, r7
 80f3778:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f377c:	4770      	bx	lr
 80f377e:	bf00      	nop
 80f3780:	40012c00 	.word	0x40012c00
 80f3784:	50012c00 	.word	0x50012c00
 80f3788:	40013400 	.word	0x40013400
 80f378c:	50013400 	.word	0x50013400
 80f3790:	40014000 	.word	0x40014000
 80f3794:	50014000 	.word	0x50014000
 80f3798:	40014400 	.word	0x40014400
 80f379c:	50014400 	.word	0x50014400
 80f37a0:	40014800 	.word	0x40014800
 80f37a4:	50014800 	.word	0x50014800

080f37a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80f37a8:	b480      	push	{r7}
 80f37aa:	b087      	sub	sp, #28
 80f37ac:	af00      	add	r7, sp, #0
 80f37ae:	6078      	str	r0, [r7, #4]
 80f37b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f37b2:	687b      	ldr	r3, [r7, #4]
 80f37b4:	6a1b      	ldr	r3, [r3, #32]
 80f37b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80f37b8:	687b      	ldr	r3, [r7, #4]
 80f37ba:	6a1b      	ldr	r3, [r3, #32]
 80f37bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80f37c0:	687b      	ldr	r3, [r7, #4]
 80f37c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f37c4:	687b      	ldr	r3, [r7, #4]
 80f37c6:	685b      	ldr	r3, [r3, #4]
 80f37c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80f37ca:	687b      	ldr	r3, [r7, #4]
 80f37cc:	69db      	ldr	r3, [r3, #28]
 80f37ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80f37d0:	68fb      	ldr	r3, [r7, #12]
 80f37d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f37d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f37da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80f37dc:	68fb      	ldr	r3, [r7, #12]
 80f37de:	f023 0303 	bic.w	r3, r3, #3
 80f37e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80f37e4:	683b      	ldr	r3, [r7, #0]
 80f37e6:	681b      	ldr	r3, [r3, #0]
 80f37e8:	68fa      	ldr	r2, [r7, #12]
 80f37ea:	4313      	orrs	r3, r2
 80f37ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80f37ee:	697b      	ldr	r3, [r7, #20]
 80f37f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80f37f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80f37f6:	683b      	ldr	r3, [r7, #0]
 80f37f8:	689b      	ldr	r3, [r3, #8]
 80f37fa:	021b      	lsls	r3, r3, #8
 80f37fc:	697a      	ldr	r2, [r7, #20]
 80f37fe:	4313      	orrs	r3, r2
 80f3800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80f3802:	687b      	ldr	r3, [r7, #4]
 80f3804:	4a35      	ldr	r2, [pc, #212]	@ (80f38dc <TIM_OC3_SetConfig+0x134>)
 80f3806:	4293      	cmp	r3, r2
 80f3808:	d00b      	beq.n	80f3822 <TIM_OC3_SetConfig+0x7a>
 80f380a:	687b      	ldr	r3, [r7, #4]
 80f380c:	4a34      	ldr	r2, [pc, #208]	@ (80f38e0 <TIM_OC3_SetConfig+0x138>)
 80f380e:	4293      	cmp	r3, r2
 80f3810:	d007      	beq.n	80f3822 <TIM_OC3_SetConfig+0x7a>
 80f3812:	687b      	ldr	r3, [r7, #4]
 80f3814:	4a33      	ldr	r2, [pc, #204]	@ (80f38e4 <TIM_OC3_SetConfig+0x13c>)
 80f3816:	4293      	cmp	r3, r2
 80f3818:	d003      	beq.n	80f3822 <TIM_OC3_SetConfig+0x7a>
 80f381a:	687b      	ldr	r3, [r7, #4]
 80f381c:	4a32      	ldr	r2, [pc, #200]	@ (80f38e8 <TIM_OC3_SetConfig+0x140>)
 80f381e:	4293      	cmp	r3, r2
 80f3820:	d10d      	bne.n	80f383e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80f3822:	697b      	ldr	r3, [r7, #20]
 80f3824:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80f3828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80f382a:	683b      	ldr	r3, [r7, #0]
 80f382c:	68db      	ldr	r3, [r3, #12]
 80f382e:	021b      	lsls	r3, r3, #8
 80f3830:	697a      	ldr	r2, [r7, #20]
 80f3832:	4313      	orrs	r3, r2
 80f3834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80f3836:	697b      	ldr	r3, [r7, #20]
 80f3838:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80f383c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f383e:	687b      	ldr	r3, [r7, #4]
 80f3840:	4a26      	ldr	r2, [pc, #152]	@ (80f38dc <TIM_OC3_SetConfig+0x134>)
 80f3842:	4293      	cmp	r3, r2
 80f3844:	d023      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f3846:	687b      	ldr	r3, [r7, #4]
 80f3848:	4a25      	ldr	r2, [pc, #148]	@ (80f38e0 <TIM_OC3_SetConfig+0x138>)
 80f384a:	4293      	cmp	r3, r2
 80f384c:	d01f      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f384e:	687b      	ldr	r3, [r7, #4]
 80f3850:	4a24      	ldr	r2, [pc, #144]	@ (80f38e4 <TIM_OC3_SetConfig+0x13c>)
 80f3852:	4293      	cmp	r3, r2
 80f3854:	d01b      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f3856:	687b      	ldr	r3, [r7, #4]
 80f3858:	4a23      	ldr	r2, [pc, #140]	@ (80f38e8 <TIM_OC3_SetConfig+0x140>)
 80f385a:	4293      	cmp	r3, r2
 80f385c:	d017      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f385e:	687b      	ldr	r3, [r7, #4]
 80f3860:	4a22      	ldr	r2, [pc, #136]	@ (80f38ec <TIM_OC3_SetConfig+0x144>)
 80f3862:	4293      	cmp	r3, r2
 80f3864:	d013      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f3866:	687b      	ldr	r3, [r7, #4]
 80f3868:	4a21      	ldr	r2, [pc, #132]	@ (80f38f0 <TIM_OC3_SetConfig+0x148>)
 80f386a:	4293      	cmp	r3, r2
 80f386c:	d00f      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f386e:	687b      	ldr	r3, [r7, #4]
 80f3870:	4a20      	ldr	r2, [pc, #128]	@ (80f38f4 <TIM_OC3_SetConfig+0x14c>)
 80f3872:	4293      	cmp	r3, r2
 80f3874:	d00b      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f3876:	687b      	ldr	r3, [r7, #4]
 80f3878:	4a1f      	ldr	r2, [pc, #124]	@ (80f38f8 <TIM_OC3_SetConfig+0x150>)
 80f387a:	4293      	cmp	r3, r2
 80f387c:	d007      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f387e:	687b      	ldr	r3, [r7, #4]
 80f3880:	4a1e      	ldr	r2, [pc, #120]	@ (80f38fc <TIM_OC3_SetConfig+0x154>)
 80f3882:	4293      	cmp	r3, r2
 80f3884:	d003      	beq.n	80f388e <TIM_OC3_SetConfig+0xe6>
 80f3886:	687b      	ldr	r3, [r7, #4]
 80f3888:	4a1d      	ldr	r2, [pc, #116]	@ (80f3900 <TIM_OC3_SetConfig+0x158>)
 80f388a:	4293      	cmp	r3, r2
 80f388c:	d113      	bne.n	80f38b6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80f388e:	693b      	ldr	r3, [r7, #16]
 80f3890:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80f3894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80f3896:	693b      	ldr	r3, [r7, #16]
 80f3898:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80f389c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80f389e:	683b      	ldr	r3, [r7, #0]
 80f38a0:	695b      	ldr	r3, [r3, #20]
 80f38a2:	011b      	lsls	r3, r3, #4
 80f38a4:	693a      	ldr	r2, [r7, #16]
 80f38a6:	4313      	orrs	r3, r2
 80f38a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80f38aa:	683b      	ldr	r3, [r7, #0]
 80f38ac:	699b      	ldr	r3, [r3, #24]
 80f38ae:	011b      	lsls	r3, r3, #4
 80f38b0:	693a      	ldr	r2, [r7, #16]
 80f38b2:	4313      	orrs	r3, r2
 80f38b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f38b6:	687b      	ldr	r3, [r7, #4]
 80f38b8:	693a      	ldr	r2, [r7, #16]
 80f38ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80f38bc:	687b      	ldr	r3, [r7, #4]
 80f38be:	68fa      	ldr	r2, [r7, #12]
 80f38c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80f38c2:	683b      	ldr	r3, [r7, #0]
 80f38c4:	685a      	ldr	r2, [r3, #4]
 80f38c6:	687b      	ldr	r3, [r7, #4]
 80f38c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f38ca:	687b      	ldr	r3, [r7, #4]
 80f38cc:	697a      	ldr	r2, [r7, #20]
 80f38ce:	621a      	str	r2, [r3, #32]
}
 80f38d0:	bf00      	nop
 80f38d2:	371c      	adds	r7, #28
 80f38d4:	46bd      	mov	sp, r7
 80f38d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f38da:	4770      	bx	lr
 80f38dc:	40012c00 	.word	0x40012c00
 80f38e0:	50012c00 	.word	0x50012c00
 80f38e4:	40013400 	.word	0x40013400
 80f38e8:	50013400 	.word	0x50013400
 80f38ec:	40014000 	.word	0x40014000
 80f38f0:	50014000 	.word	0x50014000
 80f38f4:	40014400 	.word	0x40014400
 80f38f8:	50014400 	.word	0x50014400
 80f38fc:	40014800 	.word	0x40014800
 80f3900:	50014800 	.word	0x50014800

080f3904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80f3904:	b480      	push	{r7}
 80f3906:	b087      	sub	sp, #28
 80f3908:	af00      	add	r7, sp, #0
 80f390a:	6078      	str	r0, [r7, #4]
 80f390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f390e:	687b      	ldr	r3, [r7, #4]
 80f3910:	6a1b      	ldr	r3, [r3, #32]
 80f3912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80f3914:	687b      	ldr	r3, [r7, #4]
 80f3916:	6a1b      	ldr	r3, [r3, #32]
 80f3918:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80f391c:	687b      	ldr	r3, [r7, #4]
 80f391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f3920:	687b      	ldr	r3, [r7, #4]
 80f3922:	685b      	ldr	r3, [r3, #4]
 80f3924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80f3926:	687b      	ldr	r3, [r7, #4]
 80f3928:	69db      	ldr	r3, [r3, #28]
 80f392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80f392c:	68fb      	ldr	r3, [r7, #12]
 80f392e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80f3932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80f3936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80f3938:	68fb      	ldr	r3, [r7, #12]
 80f393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80f3940:	683b      	ldr	r3, [r7, #0]
 80f3942:	681b      	ldr	r3, [r3, #0]
 80f3944:	021b      	lsls	r3, r3, #8
 80f3946:	68fa      	ldr	r2, [r7, #12]
 80f3948:	4313      	orrs	r3, r2
 80f394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80f394c:	697b      	ldr	r3, [r7, #20]
 80f394e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80f3952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80f3954:	683b      	ldr	r3, [r7, #0]
 80f3956:	689b      	ldr	r3, [r3, #8]
 80f3958:	031b      	lsls	r3, r3, #12
 80f395a:	697a      	ldr	r2, [r7, #20]
 80f395c:	4313      	orrs	r3, r2
 80f395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80f3960:	687b      	ldr	r3, [r7, #4]
 80f3962:	4a36      	ldr	r2, [pc, #216]	@ (80f3a3c <TIM_OC4_SetConfig+0x138>)
 80f3964:	4293      	cmp	r3, r2
 80f3966:	d00b      	beq.n	80f3980 <TIM_OC4_SetConfig+0x7c>
 80f3968:	687b      	ldr	r3, [r7, #4]
 80f396a:	4a35      	ldr	r2, [pc, #212]	@ (80f3a40 <TIM_OC4_SetConfig+0x13c>)
 80f396c:	4293      	cmp	r3, r2
 80f396e:	d007      	beq.n	80f3980 <TIM_OC4_SetConfig+0x7c>
 80f3970:	687b      	ldr	r3, [r7, #4]
 80f3972:	4a34      	ldr	r2, [pc, #208]	@ (80f3a44 <TIM_OC4_SetConfig+0x140>)
 80f3974:	4293      	cmp	r3, r2
 80f3976:	d003      	beq.n	80f3980 <TIM_OC4_SetConfig+0x7c>
 80f3978:	687b      	ldr	r3, [r7, #4]
 80f397a:	4a33      	ldr	r2, [pc, #204]	@ (80f3a48 <TIM_OC4_SetConfig+0x144>)
 80f397c:	4293      	cmp	r3, r2
 80f397e:	d10d      	bne.n	80f399c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80f3980:	697b      	ldr	r3, [r7, #20]
 80f3982:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80f3986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80f3988:	683b      	ldr	r3, [r7, #0]
 80f398a:	68db      	ldr	r3, [r3, #12]
 80f398c:	031b      	lsls	r3, r3, #12
 80f398e:	697a      	ldr	r2, [r7, #20]
 80f3990:	4313      	orrs	r3, r2
 80f3992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80f3994:	697b      	ldr	r3, [r7, #20]
 80f3996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80f399a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f399c:	687b      	ldr	r3, [r7, #4]
 80f399e:	4a27      	ldr	r2, [pc, #156]	@ (80f3a3c <TIM_OC4_SetConfig+0x138>)
 80f39a0:	4293      	cmp	r3, r2
 80f39a2:	d023      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39a4:	687b      	ldr	r3, [r7, #4]
 80f39a6:	4a26      	ldr	r2, [pc, #152]	@ (80f3a40 <TIM_OC4_SetConfig+0x13c>)
 80f39a8:	4293      	cmp	r3, r2
 80f39aa:	d01f      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39ac:	687b      	ldr	r3, [r7, #4]
 80f39ae:	4a25      	ldr	r2, [pc, #148]	@ (80f3a44 <TIM_OC4_SetConfig+0x140>)
 80f39b0:	4293      	cmp	r3, r2
 80f39b2:	d01b      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39b4:	687b      	ldr	r3, [r7, #4]
 80f39b6:	4a24      	ldr	r2, [pc, #144]	@ (80f3a48 <TIM_OC4_SetConfig+0x144>)
 80f39b8:	4293      	cmp	r3, r2
 80f39ba:	d017      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39bc:	687b      	ldr	r3, [r7, #4]
 80f39be:	4a23      	ldr	r2, [pc, #140]	@ (80f3a4c <TIM_OC4_SetConfig+0x148>)
 80f39c0:	4293      	cmp	r3, r2
 80f39c2:	d013      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39c4:	687b      	ldr	r3, [r7, #4]
 80f39c6:	4a22      	ldr	r2, [pc, #136]	@ (80f3a50 <TIM_OC4_SetConfig+0x14c>)
 80f39c8:	4293      	cmp	r3, r2
 80f39ca:	d00f      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39cc:	687b      	ldr	r3, [r7, #4]
 80f39ce:	4a21      	ldr	r2, [pc, #132]	@ (80f3a54 <TIM_OC4_SetConfig+0x150>)
 80f39d0:	4293      	cmp	r3, r2
 80f39d2:	d00b      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39d4:	687b      	ldr	r3, [r7, #4]
 80f39d6:	4a20      	ldr	r2, [pc, #128]	@ (80f3a58 <TIM_OC4_SetConfig+0x154>)
 80f39d8:	4293      	cmp	r3, r2
 80f39da:	d007      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39dc:	687b      	ldr	r3, [r7, #4]
 80f39de:	4a1f      	ldr	r2, [pc, #124]	@ (80f3a5c <TIM_OC4_SetConfig+0x158>)
 80f39e0:	4293      	cmp	r3, r2
 80f39e2:	d003      	beq.n	80f39ec <TIM_OC4_SetConfig+0xe8>
 80f39e4:	687b      	ldr	r3, [r7, #4]
 80f39e6:	4a1e      	ldr	r2, [pc, #120]	@ (80f3a60 <TIM_OC4_SetConfig+0x15c>)
 80f39e8:	4293      	cmp	r3, r2
 80f39ea:	d113      	bne.n	80f3a14 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80f39ec:	693b      	ldr	r3, [r7, #16]
 80f39ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80f39f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80f39f4:	693b      	ldr	r3, [r7, #16]
 80f39f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80f39fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80f39fc:	683b      	ldr	r3, [r7, #0]
 80f39fe:	695b      	ldr	r3, [r3, #20]
 80f3a00:	019b      	lsls	r3, r3, #6
 80f3a02:	693a      	ldr	r2, [r7, #16]
 80f3a04:	4313      	orrs	r3, r2
 80f3a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80f3a08:	683b      	ldr	r3, [r7, #0]
 80f3a0a:	699b      	ldr	r3, [r3, #24]
 80f3a0c:	019b      	lsls	r3, r3, #6
 80f3a0e:	693a      	ldr	r2, [r7, #16]
 80f3a10:	4313      	orrs	r3, r2
 80f3a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f3a14:	687b      	ldr	r3, [r7, #4]
 80f3a16:	693a      	ldr	r2, [r7, #16]
 80f3a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80f3a1a:	687b      	ldr	r3, [r7, #4]
 80f3a1c:	68fa      	ldr	r2, [r7, #12]
 80f3a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80f3a20:	683b      	ldr	r3, [r7, #0]
 80f3a22:	685a      	ldr	r2, [r3, #4]
 80f3a24:	687b      	ldr	r3, [r7, #4]
 80f3a26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f3a28:	687b      	ldr	r3, [r7, #4]
 80f3a2a:	697a      	ldr	r2, [r7, #20]
 80f3a2c:	621a      	str	r2, [r3, #32]
}
 80f3a2e:	bf00      	nop
 80f3a30:	371c      	adds	r7, #28
 80f3a32:	46bd      	mov	sp, r7
 80f3a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3a38:	4770      	bx	lr
 80f3a3a:	bf00      	nop
 80f3a3c:	40012c00 	.word	0x40012c00
 80f3a40:	50012c00 	.word	0x50012c00
 80f3a44:	40013400 	.word	0x40013400
 80f3a48:	50013400 	.word	0x50013400
 80f3a4c:	40014000 	.word	0x40014000
 80f3a50:	50014000 	.word	0x50014000
 80f3a54:	40014400 	.word	0x40014400
 80f3a58:	50014400 	.word	0x50014400
 80f3a5c:	40014800 	.word	0x40014800
 80f3a60:	50014800 	.word	0x50014800

080f3a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80f3a64:	b480      	push	{r7}
 80f3a66:	b087      	sub	sp, #28
 80f3a68:	af00      	add	r7, sp, #0
 80f3a6a:	6078      	str	r0, [r7, #4]
 80f3a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f3a6e:	687b      	ldr	r3, [r7, #4]
 80f3a70:	6a1b      	ldr	r3, [r3, #32]
 80f3a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80f3a74:	687b      	ldr	r3, [r7, #4]
 80f3a76:	6a1b      	ldr	r3, [r3, #32]
 80f3a78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80f3a7c:	687b      	ldr	r3, [r7, #4]
 80f3a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f3a80:	687b      	ldr	r3, [r7, #4]
 80f3a82:	685b      	ldr	r3, [r3, #4]
 80f3a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80f3a86:	687b      	ldr	r3, [r7, #4]
 80f3a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80f3a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80f3a8c:	68fb      	ldr	r3, [r7, #12]
 80f3a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f3a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f3a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80f3a98:	683b      	ldr	r3, [r7, #0]
 80f3a9a:	681b      	ldr	r3, [r3, #0]
 80f3a9c:	68fa      	ldr	r2, [r7, #12]
 80f3a9e:	4313      	orrs	r3, r2
 80f3aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80f3aa2:	693b      	ldr	r3, [r7, #16]
 80f3aa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80f3aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80f3aaa:	683b      	ldr	r3, [r7, #0]
 80f3aac:	689b      	ldr	r3, [r3, #8]
 80f3aae:	041b      	lsls	r3, r3, #16
 80f3ab0:	693a      	ldr	r2, [r7, #16]
 80f3ab2:	4313      	orrs	r3, r2
 80f3ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f3ab6:	687b      	ldr	r3, [r7, #4]
 80f3ab8:	4a21      	ldr	r2, [pc, #132]	@ (80f3b40 <TIM_OC5_SetConfig+0xdc>)
 80f3aba:	4293      	cmp	r3, r2
 80f3abc:	d023      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3abe:	687b      	ldr	r3, [r7, #4]
 80f3ac0:	4a20      	ldr	r2, [pc, #128]	@ (80f3b44 <TIM_OC5_SetConfig+0xe0>)
 80f3ac2:	4293      	cmp	r3, r2
 80f3ac4:	d01f      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3ac6:	687b      	ldr	r3, [r7, #4]
 80f3ac8:	4a1f      	ldr	r2, [pc, #124]	@ (80f3b48 <TIM_OC5_SetConfig+0xe4>)
 80f3aca:	4293      	cmp	r3, r2
 80f3acc:	d01b      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3ace:	687b      	ldr	r3, [r7, #4]
 80f3ad0:	4a1e      	ldr	r2, [pc, #120]	@ (80f3b4c <TIM_OC5_SetConfig+0xe8>)
 80f3ad2:	4293      	cmp	r3, r2
 80f3ad4:	d017      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3ad6:	687b      	ldr	r3, [r7, #4]
 80f3ad8:	4a1d      	ldr	r2, [pc, #116]	@ (80f3b50 <TIM_OC5_SetConfig+0xec>)
 80f3ada:	4293      	cmp	r3, r2
 80f3adc:	d013      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3ade:	687b      	ldr	r3, [r7, #4]
 80f3ae0:	4a1c      	ldr	r2, [pc, #112]	@ (80f3b54 <TIM_OC5_SetConfig+0xf0>)
 80f3ae2:	4293      	cmp	r3, r2
 80f3ae4:	d00f      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3ae6:	687b      	ldr	r3, [r7, #4]
 80f3ae8:	4a1b      	ldr	r2, [pc, #108]	@ (80f3b58 <TIM_OC5_SetConfig+0xf4>)
 80f3aea:	4293      	cmp	r3, r2
 80f3aec:	d00b      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3aee:	687b      	ldr	r3, [r7, #4]
 80f3af0:	4a1a      	ldr	r2, [pc, #104]	@ (80f3b5c <TIM_OC5_SetConfig+0xf8>)
 80f3af2:	4293      	cmp	r3, r2
 80f3af4:	d007      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3af6:	687b      	ldr	r3, [r7, #4]
 80f3af8:	4a19      	ldr	r2, [pc, #100]	@ (80f3b60 <TIM_OC5_SetConfig+0xfc>)
 80f3afa:	4293      	cmp	r3, r2
 80f3afc:	d003      	beq.n	80f3b06 <TIM_OC5_SetConfig+0xa2>
 80f3afe:	687b      	ldr	r3, [r7, #4]
 80f3b00:	4a18      	ldr	r2, [pc, #96]	@ (80f3b64 <TIM_OC5_SetConfig+0x100>)
 80f3b02:	4293      	cmp	r3, r2
 80f3b04:	d109      	bne.n	80f3b1a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80f3b06:	697b      	ldr	r3, [r7, #20]
 80f3b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f3b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80f3b0e:	683b      	ldr	r3, [r7, #0]
 80f3b10:	695b      	ldr	r3, [r3, #20]
 80f3b12:	021b      	lsls	r3, r3, #8
 80f3b14:	697a      	ldr	r2, [r7, #20]
 80f3b16:	4313      	orrs	r3, r2
 80f3b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f3b1a:	687b      	ldr	r3, [r7, #4]
 80f3b1c:	697a      	ldr	r2, [r7, #20]
 80f3b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80f3b20:	687b      	ldr	r3, [r7, #4]
 80f3b22:	68fa      	ldr	r2, [r7, #12]
 80f3b24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80f3b26:	683b      	ldr	r3, [r7, #0]
 80f3b28:	685a      	ldr	r2, [r3, #4]
 80f3b2a:	687b      	ldr	r3, [r7, #4]
 80f3b2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f3b2e:	687b      	ldr	r3, [r7, #4]
 80f3b30:	693a      	ldr	r2, [r7, #16]
 80f3b32:	621a      	str	r2, [r3, #32]
}
 80f3b34:	bf00      	nop
 80f3b36:	371c      	adds	r7, #28
 80f3b38:	46bd      	mov	sp, r7
 80f3b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3b3e:	4770      	bx	lr
 80f3b40:	40012c00 	.word	0x40012c00
 80f3b44:	50012c00 	.word	0x50012c00
 80f3b48:	40013400 	.word	0x40013400
 80f3b4c:	50013400 	.word	0x50013400
 80f3b50:	40014000 	.word	0x40014000
 80f3b54:	50014000 	.word	0x50014000
 80f3b58:	40014400 	.word	0x40014400
 80f3b5c:	50014400 	.word	0x50014400
 80f3b60:	40014800 	.word	0x40014800
 80f3b64:	50014800 	.word	0x50014800

080f3b68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80f3b68:	b480      	push	{r7}
 80f3b6a:	b087      	sub	sp, #28
 80f3b6c:	af00      	add	r7, sp, #0
 80f3b6e:	6078      	str	r0, [r7, #4]
 80f3b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80f3b72:	687b      	ldr	r3, [r7, #4]
 80f3b74:	6a1b      	ldr	r3, [r3, #32]
 80f3b76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80f3b78:	687b      	ldr	r3, [r7, #4]
 80f3b7a:	6a1b      	ldr	r3, [r3, #32]
 80f3b7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80f3b80:	687b      	ldr	r3, [r7, #4]
 80f3b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80f3b84:	687b      	ldr	r3, [r7, #4]
 80f3b86:	685b      	ldr	r3, [r3, #4]
 80f3b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80f3b8a:	687b      	ldr	r3, [r7, #4]
 80f3b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80f3b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80f3b90:	68fb      	ldr	r3, [r7, #12]
 80f3b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80f3b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80f3b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80f3b9c:	683b      	ldr	r3, [r7, #0]
 80f3b9e:	681b      	ldr	r3, [r3, #0]
 80f3ba0:	021b      	lsls	r3, r3, #8
 80f3ba2:	68fa      	ldr	r2, [r7, #12]
 80f3ba4:	4313      	orrs	r3, r2
 80f3ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80f3ba8:	693b      	ldr	r3, [r7, #16]
 80f3baa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80f3bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80f3bb0:	683b      	ldr	r3, [r7, #0]
 80f3bb2:	689b      	ldr	r3, [r3, #8]
 80f3bb4:	051b      	lsls	r3, r3, #20
 80f3bb6:	693a      	ldr	r2, [r7, #16]
 80f3bb8:	4313      	orrs	r3, r2
 80f3bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80f3bbc:	687b      	ldr	r3, [r7, #4]
 80f3bbe:	4a22      	ldr	r2, [pc, #136]	@ (80f3c48 <TIM_OC6_SetConfig+0xe0>)
 80f3bc0:	4293      	cmp	r3, r2
 80f3bc2:	d023      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bc4:	687b      	ldr	r3, [r7, #4]
 80f3bc6:	4a21      	ldr	r2, [pc, #132]	@ (80f3c4c <TIM_OC6_SetConfig+0xe4>)
 80f3bc8:	4293      	cmp	r3, r2
 80f3bca:	d01f      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bcc:	687b      	ldr	r3, [r7, #4]
 80f3bce:	4a20      	ldr	r2, [pc, #128]	@ (80f3c50 <TIM_OC6_SetConfig+0xe8>)
 80f3bd0:	4293      	cmp	r3, r2
 80f3bd2:	d01b      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bd4:	687b      	ldr	r3, [r7, #4]
 80f3bd6:	4a1f      	ldr	r2, [pc, #124]	@ (80f3c54 <TIM_OC6_SetConfig+0xec>)
 80f3bd8:	4293      	cmp	r3, r2
 80f3bda:	d017      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bdc:	687b      	ldr	r3, [r7, #4]
 80f3bde:	4a1e      	ldr	r2, [pc, #120]	@ (80f3c58 <TIM_OC6_SetConfig+0xf0>)
 80f3be0:	4293      	cmp	r3, r2
 80f3be2:	d013      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3be4:	687b      	ldr	r3, [r7, #4]
 80f3be6:	4a1d      	ldr	r2, [pc, #116]	@ (80f3c5c <TIM_OC6_SetConfig+0xf4>)
 80f3be8:	4293      	cmp	r3, r2
 80f3bea:	d00f      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bec:	687b      	ldr	r3, [r7, #4]
 80f3bee:	4a1c      	ldr	r2, [pc, #112]	@ (80f3c60 <TIM_OC6_SetConfig+0xf8>)
 80f3bf0:	4293      	cmp	r3, r2
 80f3bf2:	d00b      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bf4:	687b      	ldr	r3, [r7, #4]
 80f3bf6:	4a1b      	ldr	r2, [pc, #108]	@ (80f3c64 <TIM_OC6_SetConfig+0xfc>)
 80f3bf8:	4293      	cmp	r3, r2
 80f3bfa:	d007      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3bfc:	687b      	ldr	r3, [r7, #4]
 80f3bfe:	4a1a      	ldr	r2, [pc, #104]	@ (80f3c68 <TIM_OC6_SetConfig+0x100>)
 80f3c00:	4293      	cmp	r3, r2
 80f3c02:	d003      	beq.n	80f3c0c <TIM_OC6_SetConfig+0xa4>
 80f3c04:	687b      	ldr	r3, [r7, #4]
 80f3c06:	4a19      	ldr	r2, [pc, #100]	@ (80f3c6c <TIM_OC6_SetConfig+0x104>)
 80f3c08:	4293      	cmp	r3, r2
 80f3c0a:	d109      	bne.n	80f3c20 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80f3c0c:	697b      	ldr	r3, [r7, #20]
 80f3c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80f3c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80f3c14:	683b      	ldr	r3, [r7, #0]
 80f3c16:	695b      	ldr	r3, [r3, #20]
 80f3c18:	029b      	lsls	r3, r3, #10
 80f3c1a:	697a      	ldr	r2, [r7, #20]
 80f3c1c:	4313      	orrs	r3, r2
 80f3c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80f3c20:	687b      	ldr	r3, [r7, #4]
 80f3c22:	697a      	ldr	r2, [r7, #20]
 80f3c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80f3c26:	687b      	ldr	r3, [r7, #4]
 80f3c28:	68fa      	ldr	r2, [r7, #12]
 80f3c2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80f3c2c:	683b      	ldr	r3, [r7, #0]
 80f3c2e:	685a      	ldr	r2, [r3, #4]
 80f3c30:	687b      	ldr	r3, [r7, #4]
 80f3c32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80f3c34:	687b      	ldr	r3, [r7, #4]
 80f3c36:	693a      	ldr	r2, [r7, #16]
 80f3c38:	621a      	str	r2, [r3, #32]
}
 80f3c3a:	bf00      	nop
 80f3c3c:	371c      	adds	r7, #28
 80f3c3e:	46bd      	mov	sp, r7
 80f3c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3c44:	4770      	bx	lr
 80f3c46:	bf00      	nop
 80f3c48:	40012c00 	.word	0x40012c00
 80f3c4c:	50012c00 	.word	0x50012c00
 80f3c50:	40013400 	.word	0x40013400
 80f3c54:	50013400 	.word	0x50013400
 80f3c58:	40014000 	.word	0x40014000
 80f3c5c:	50014000 	.word	0x50014000
 80f3c60:	40014400 	.word	0x40014400
 80f3c64:	50014400 	.word	0x50014400
 80f3c68:	40014800 	.word	0x40014800
 80f3c6c:	50014800 	.word	0x50014800

080f3c70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80f3c70:	b580      	push	{r7, lr}
 80f3c72:	b086      	sub	sp, #24
 80f3c74:	af00      	add	r7, sp, #0
 80f3c76:	6078      	str	r0, [r7, #4]
 80f3c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80f3c7a:	2300      	movs	r3, #0
 80f3c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80f3c7e:	687b      	ldr	r3, [r7, #4]
 80f3c80:	681b      	ldr	r3, [r3, #0]
 80f3c82:	689b      	ldr	r3, [r3, #8]
 80f3c84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80f3c86:	693b      	ldr	r3, [r7, #16]
 80f3c88:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80f3c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f3c90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80f3c92:	683b      	ldr	r3, [r7, #0]
 80f3c94:	685b      	ldr	r3, [r3, #4]
 80f3c96:	693a      	ldr	r2, [r7, #16]
 80f3c98:	4313      	orrs	r3, r2
 80f3c9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80f3c9c:	693b      	ldr	r3, [r7, #16]
 80f3c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80f3ca2:	f023 0307 	bic.w	r3, r3, #7
 80f3ca6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80f3ca8:	683b      	ldr	r3, [r7, #0]
 80f3caa:	681b      	ldr	r3, [r3, #0]
 80f3cac:	693a      	ldr	r2, [r7, #16]
 80f3cae:	4313      	orrs	r3, r2
 80f3cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80f3cb2:	687b      	ldr	r3, [r7, #4]
 80f3cb4:	681b      	ldr	r3, [r3, #0]
 80f3cb6:	693a      	ldr	r2, [r7, #16]
 80f3cb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80f3cba:	683b      	ldr	r3, [r7, #0]
 80f3cbc:	685b      	ldr	r3, [r3, #4]
 80f3cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f3cc2:	f000 80aa 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80f3cca:	f200 80a3 	bhi.w	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3cce:	4a56      	ldr	r2, [pc, #344]	@ (80f3e28 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80f3cd0:	4293      	cmp	r3, r2
 80f3cd2:	f000 80a2 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3cd6:	4a54      	ldr	r2, [pc, #336]	@ (80f3e28 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80f3cd8:	4293      	cmp	r3, r2
 80f3cda:	f200 809b 	bhi.w	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3cde:	4a53      	ldr	r2, [pc, #332]	@ (80f3e2c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80f3ce0:	4293      	cmp	r3, r2
 80f3ce2:	f000 809a 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3ce6:	4a51      	ldr	r2, [pc, #324]	@ (80f3e2c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80f3ce8:	4293      	cmp	r3, r2
 80f3cea:	f200 8093 	bhi.w	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3cee:	4a50      	ldr	r2, [pc, #320]	@ (80f3e30 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80f3cf0:	4293      	cmp	r3, r2
 80f3cf2:	f000 8092 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3cf6:	4a4e      	ldr	r2, [pc, #312]	@ (80f3e30 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80f3cf8:	4293      	cmp	r3, r2
 80f3cfa:	f200 808b 	bhi.w	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3cfe:	4a4d      	ldr	r2, [pc, #308]	@ (80f3e34 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80f3d00:	4293      	cmp	r3, r2
 80f3d02:	f000 808a 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d06:	4a4b      	ldr	r2, [pc, #300]	@ (80f3e34 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80f3d08:	4293      	cmp	r3, r2
 80f3d0a:	f200 8083 	bhi.w	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d0e:	4a4a      	ldr	r2, [pc, #296]	@ (80f3e38 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80f3d10:	4293      	cmp	r3, r2
 80f3d12:	f000 8082 	beq.w	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d16:	4a48      	ldr	r2, [pc, #288]	@ (80f3e38 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80f3d18:	4293      	cmp	r3, r2
 80f3d1a:	d87b      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d1c:	4a47      	ldr	r2, [pc, #284]	@ (80f3e3c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80f3d1e:	4293      	cmp	r3, r2
 80f3d20:	d07b      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d22:	4a46      	ldr	r2, [pc, #280]	@ (80f3e3c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80f3d24:	4293      	cmp	r3, r2
 80f3d26:	d875      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80f3d2c:	d075      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d2e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80f3d32:	d86f      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f3d38:	d06f      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80f3d3e:	d869      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d40:	2b70      	cmp	r3, #112	@ 0x70
 80f3d42:	d01a      	beq.n	80f3d7a <TIM_SlaveTimer_SetConfig+0x10a>
 80f3d44:	2b70      	cmp	r3, #112	@ 0x70
 80f3d46:	d865      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d48:	2b60      	cmp	r3, #96	@ 0x60
 80f3d4a:	d059      	beq.n	80f3e00 <TIM_SlaveTimer_SetConfig+0x190>
 80f3d4c:	2b60      	cmp	r3, #96	@ 0x60
 80f3d4e:	d861      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d50:	2b50      	cmp	r3, #80	@ 0x50
 80f3d52:	d04b      	beq.n	80f3dec <TIM_SlaveTimer_SetConfig+0x17c>
 80f3d54:	2b50      	cmp	r3, #80	@ 0x50
 80f3d56:	d85d      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d58:	2b40      	cmp	r3, #64	@ 0x40
 80f3d5a:	d019      	beq.n	80f3d90 <TIM_SlaveTimer_SetConfig+0x120>
 80f3d5c:	2b40      	cmp	r3, #64	@ 0x40
 80f3d5e:	d859      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d60:	2b30      	cmp	r3, #48	@ 0x30
 80f3d62:	d05a      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d64:	2b30      	cmp	r3, #48	@ 0x30
 80f3d66:	d855      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d68:	2b20      	cmp	r3, #32
 80f3d6a:	d056      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d6c:	2b20      	cmp	r3, #32
 80f3d6e:	d851      	bhi.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
 80f3d70:	2b00      	cmp	r3, #0
 80f3d72:	d052      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d74:	2b10      	cmp	r3, #16
 80f3d76:	d050      	beq.n	80f3e1a <TIM_SlaveTimer_SetConfig+0x1aa>
 80f3d78:	e04c      	b.n	80f3e14 <TIM_SlaveTimer_SetConfig+0x1a4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80f3d7a:	687b      	ldr	r3, [r7, #4]
 80f3d7c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80f3d7e:	683b      	ldr	r3, [r7, #0]
 80f3d80:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80f3d82:	683b      	ldr	r3, [r7, #0]
 80f3d84:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80f3d86:	683b      	ldr	r3, [r7, #0]
 80f3d88:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80f3d8a:	f000 fa2d 	bl	80f41e8 <TIM_ETR_SetConfig>
      break;
 80f3d8e:	e045      	b.n	80f3e1c <TIM_SlaveTimer_SetConfig+0x1ac>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80f3d90:	683b      	ldr	r3, [r7, #0]
 80f3d92:	681b      	ldr	r3, [r3, #0]
 80f3d94:	2b05      	cmp	r3, #5
 80f3d96:	d004      	beq.n	80f3da2 <TIM_SlaveTimer_SetConfig+0x132>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80f3d98:	683b      	ldr	r3, [r7, #0]
 80f3d9a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80f3d9c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80f3da0:	d101      	bne.n	80f3da6 <TIM_SlaveTimer_SetConfig+0x136>
      {
        return HAL_ERROR;
 80f3da2:	2301      	movs	r3, #1
 80f3da4:	e03b      	b.n	80f3e1e <TIM_SlaveTimer_SetConfig+0x1ae>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80f3da6:	687b      	ldr	r3, [r7, #4]
 80f3da8:	681b      	ldr	r3, [r3, #0]
 80f3daa:	6a1b      	ldr	r3, [r3, #32]
 80f3dac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80f3dae:	687b      	ldr	r3, [r7, #4]
 80f3db0:	681b      	ldr	r3, [r3, #0]
 80f3db2:	6a1a      	ldr	r2, [r3, #32]
 80f3db4:	687b      	ldr	r3, [r7, #4]
 80f3db6:	681b      	ldr	r3, [r3, #0]
 80f3db8:	f022 0201 	bic.w	r2, r2, #1
 80f3dbc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80f3dbe:	687b      	ldr	r3, [r7, #4]
 80f3dc0:	681b      	ldr	r3, [r3, #0]
 80f3dc2:	699b      	ldr	r3, [r3, #24]
 80f3dc4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80f3dc6:	68bb      	ldr	r3, [r7, #8]
 80f3dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80f3dcc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80f3dce:	683b      	ldr	r3, [r7, #0]
 80f3dd0:	691b      	ldr	r3, [r3, #16]
 80f3dd2:	011b      	lsls	r3, r3, #4
 80f3dd4:	68ba      	ldr	r2, [r7, #8]
 80f3dd6:	4313      	orrs	r3, r2
 80f3dd8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80f3dda:	687b      	ldr	r3, [r7, #4]
 80f3ddc:	681b      	ldr	r3, [r3, #0]
 80f3dde:	68ba      	ldr	r2, [r7, #8]
 80f3de0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80f3de2:	687b      	ldr	r3, [r7, #4]
 80f3de4:	681b      	ldr	r3, [r3, #0]
 80f3de6:	68fa      	ldr	r2, [r7, #12]
 80f3de8:	621a      	str	r2, [r3, #32]
      break;
 80f3dea:	e017      	b.n	80f3e1c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80f3dec:	687b      	ldr	r3, [r7, #4]
 80f3dee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80f3df0:	683b      	ldr	r3, [r7, #0]
 80f3df2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80f3df4:	683b      	ldr	r3, [r7, #0]
 80f3df6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80f3df8:	461a      	mov	r2, r3
 80f3dfa:	f000 f8c3 	bl	80f3f84 <TIM_TI1_ConfigInputStage>
      break;
 80f3dfe:	e00d      	b.n	80f3e1c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80f3e00:	687b      	ldr	r3, [r7, #4]
 80f3e02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80f3e04:	683b      	ldr	r3, [r7, #0]
 80f3e06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80f3e08:	683b      	ldr	r3, [r7, #0]
 80f3e0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80f3e0c:	461a      	mov	r2, r3
 80f3e0e:	f000 f925 	bl	80f405c <TIM_TI2_ConfigInputStage>
      break;
 80f3e12:	e003      	b.n	80f3e1c <TIM_SlaveTimer_SetConfig+0x1ac>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80f3e14:	2301      	movs	r3, #1
 80f3e16:	75fb      	strb	r3, [r7, #23]
      break;
 80f3e18:	e000      	b.n	80f3e1c <TIM_SlaveTimer_SetConfig+0x1ac>
      break;
 80f3e1a:	bf00      	nop
  }

  return status;
 80f3e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 80f3e1e:	4618      	mov	r0, r3
 80f3e20:	3718      	adds	r7, #24
 80f3e22:	46bd      	mov	sp, r7
 80f3e24:	bd80      	pop	{r7, pc}
 80f3e26:	bf00      	nop
 80f3e28:	00100070 	.word	0x00100070
 80f3e2c:	00100060 	.word	0x00100060
 80f3e30:	00100050 	.word	0x00100050
 80f3e34:	00100040 	.word	0x00100040
 80f3e38:	00100030 	.word	0x00100030
 80f3e3c:	00100020 	.word	0x00100020

080f3e40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80f3e40:	b480      	push	{r7}
 80f3e42:	b087      	sub	sp, #28
 80f3e44:	af00      	add	r7, sp, #0
 80f3e46:	60f8      	str	r0, [r7, #12]
 80f3e48:	60b9      	str	r1, [r7, #8]
 80f3e4a:	607a      	str	r2, [r7, #4]
 80f3e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80f3e4e:	68fb      	ldr	r3, [r7, #12]
 80f3e50:	6a1b      	ldr	r3, [r3, #32]
 80f3e52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80f3e54:	68fb      	ldr	r3, [r7, #12]
 80f3e56:	6a1b      	ldr	r3, [r3, #32]
 80f3e58:	f023 0201 	bic.w	r2, r3, #1
 80f3e5c:	68fb      	ldr	r3, [r7, #12]
 80f3e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80f3e60:	68fb      	ldr	r3, [r7, #12]
 80f3e62:	699b      	ldr	r3, [r3, #24]
 80f3e64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80f3e66:	68fb      	ldr	r3, [r7, #12]
 80f3e68:	4a38      	ldr	r2, [pc, #224]	@ (80f3f4c <TIM_TI1_SetConfig+0x10c>)
 80f3e6a:	4293      	cmp	r3, r2
 80f3e6c:	d03b      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e6e:	68fb      	ldr	r3, [r7, #12]
 80f3e70:	4a37      	ldr	r2, [pc, #220]	@ (80f3f50 <TIM_TI1_SetConfig+0x110>)
 80f3e72:	4293      	cmp	r3, r2
 80f3e74:	d037      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e76:	68fb      	ldr	r3, [r7, #12]
 80f3e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f3e7c:	d033      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e7e:	68fb      	ldr	r3, [r7, #12]
 80f3e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f3e84:	d02f      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e86:	68fb      	ldr	r3, [r7, #12]
 80f3e88:	4a32      	ldr	r2, [pc, #200]	@ (80f3f54 <TIM_TI1_SetConfig+0x114>)
 80f3e8a:	4293      	cmp	r3, r2
 80f3e8c:	d02b      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e8e:	68fb      	ldr	r3, [r7, #12]
 80f3e90:	4a31      	ldr	r2, [pc, #196]	@ (80f3f58 <TIM_TI1_SetConfig+0x118>)
 80f3e92:	4293      	cmp	r3, r2
 80f3e94:	d027      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e96:	68fb      	ldr	r3, [r7, #12]
 80f3e98:	4a30      	ldr	r2, [pc, #192]	@ (80f3f5c <TIM_TI1_SetConfig+0x11c>)
 80f3e9a:	4293      	cmp	r3, r2
 80f3e9c:	d023      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3e9e:	68fb      	ldr	r3, [r7, #12]
 80f3ea0:	4a2f      	ldr	r2, [pc, #188]	@ (80f3f60 <TIM_TI1_SetConfig+0x120>)
 80f3ea2:	4293      	cmp	r3, r2
 80f3ea4:	d01f      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ea6:	68fb      	ldr	r3, [r7, #12]
 80f3ea8:	4a2e      	ldr	r2, [pc, #184]	@ (80f3f64 <TIM_TI1_SetConfig+0x124>)
 80f3eaa:	4293      	cmp	r3, r2
 80f3eac:	d01b      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3eae:	68fb      	ldr	r3, [r7, #12]
 80f3eb0:	4a2d      	ldr	r2, [pc, #180]	@ (80f3f68 <TIM_TI1_SetConfig+0x128>)
 80f3eb2:	4293      	cmp	r3, r2
 80f3eb4:	d017      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3eb6:	68fb      	ldr	r3, [r7, #12]
 80f3eb8:	4a2c      	ldr	r2, [pc, #176]	@ (80f3f6c <TIM_TI1_SetConfig+0x12c>)
 80f3eba:	4293      	cmp	r3, r2
 80f3ebc:	d013      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ebe:	68fb      	ldr	r3, [r7, #12]
 80f3ec0:	4a2b      	ldr	r2, [pc, #172]	@ (80f3f70 <TIM_TI1_SetConfig+0x130>)
 80f3ec2:	4293      	cmp	r3, r2
 80f3ec4:	d00f      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ec6:	68fb      	ldr	r3, [r7, #12]
 80f3ec8:	4a2a      	ldr	r2, [pc, #168]	@ (80f3f74 <TIM_TI1_SetConfig+0x134>)
 80f3eca:	4293      	cmp	r3, r2
 80f3ecc:	d00b      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ece:	68fb      	ldr	r3, [r7, #12]
 80f3ed0:	4a29      	ldr	r2, [pc, #164]	@ (80f3f78 <TIM_TI1_SetConfig+0x138>)
 80f3ed2:	4293      	cmp	r3, r2
 80f3ed4:	d007      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ed6:	68fb      	ldr	r3, [r7, #12]
 80f3ed8:	4a28      	ldr	r2, [pc, #160]	@ (80f3f7c <TIM_TI1_SetConfig+0x13c>)
 80f3eda:	4293      	cmp	r3, r2
 80f3edc:	d003      	beq.n	80f3ee6 <TIM_TI1_SetConfig+0xa6>
 80f3ede:	68fb      	ldr	r3, [r7, #12]
 80f3ee0:	4a27      	ldr	r2, [pc, #156]	@ (80f3f80 <TIM_TI1_SetConfig+0x140>)
 80f3ee2:	4293      	cmp	r3, r2
 80f3ee4:	d101      	bne.n	80f3eea <TIM_TI1_SetConfig+0xaa>
 80f3ee6:	2301      	movs	r3, #1
 80f3ee8:	e000      	b.n	80f3eec <TIM_TI1_SetConfig+0xac>
 80f3eea:	2300      	movs	r3, #0
 80f3eec:	2b00      	cmp	r3, #0
 80f3eee:	d008      	beq.n	80f3f02 <TIM_TI1_SetConfig+0xc2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80f3ef0:	697b      	ldr	r3, [r7, #20]
 80f3ef2:	f023 0303 	bic.w	r3, r3, #3
 80f3ef6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80f3ef8:	697a      	ldr	r2, [r7, #20]
 80f3efa:	687b      	ldr	r3, [r7, #4]
 80f3efc:	4313      	orrs	r3, r2
 80f3efe:	617b      	str	r3, [r7, #20]
 80f3f00:	e003      	b.n	80f3f0a <TIM_TI1_SetConfig+0xca>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80f3f02:	697b      	ldr	r3, [r7, #20]
 80f3f04:	f043 0301 	orr.w	r3, r3, #1
 80f3f08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80f3f0a:	697b      	ldr	r3, [r7, #20]
 80f3f0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80f3f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80f3f12:	683b      	ldr	r3, [r7, #0]
 80f3f14:	011b      	lsls	r3, r3, #4
 80f3f16:	b2db      	uxtb	r3, r3
 80f3f18:	697a      	ldr	r2, [r7, #20]
 80f3f1a:	4313      	orrs	r3, r2
 80f3f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80f3f1e:	693b      	ldr	r3, [r7, #16]
 80f3f20:	f023 030a 	bic.w	r3, r3, #10
 80f3f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80f3f26:	68bb      	ldr	r3, [r7, #8]
 80f3f28:	f003 030a 	and.w	r3, r3, #10
 80f3f2c:	693a      	ldr	r2, [r7, #16]
 80f3f2e:	4313      	orrs	r3, r2
 80f3f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80f3f32:	68fb      	ldr	r3, [r7, #12]
 80f3f34:	697a      	ldr	r2, [r7, #20]
 80f3f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80f3f38:	68fb      	ldr	r3, [r7, #12]
 80f3f3a:	693a      	ldr	r2, [r7, #16]
 80f3f3c:	621a      	str	r2, [r3, #32]
}
 80f3f3e:	bf00      	nop
 80f3f40:	371c      	adds	r7, #28
 80f3f42:	46bd      	mov	sp, r7
 80f3f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3f48:	4770      	bx	lr
 80f3f4a:	bf00      	nop
 80f3f4c:	40012c00 	.word	0x40012c00
 80f3f50:	50012c00 	.word	0x50012c00
 80f3f54:	40000400 	.word	0x40000400
 80f3f58:	50000400 	.word	0x50000400
 80f3f5c:	40000800 	.word	0x40000800
 80f3f60:	50000800 	.word	0x50000800
 80f3f64:	40000c00 	.word	0x40000c00
 80f3f68:	50000c00 	.word	0x50000c00
 80f3f6c:	40013400 	.word	0x40013400
 80f3f70:	50013400 	.word	0x50013400
 80f3f74:	40001800 	.word	0x40001800
 80f3f78:	50001800 	.word	0x50001800
 80f3f7c:	40014000 	.word	0x40014000
 80f3f80:	50014000 	.word	0x50014000

080f3f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80f3f84:	b480      	push	{r7}
 80f3f86:	b087      	sub	sp, #28
 80f3f88:	af00      	add	r7, sp, #0
 80f3f8a:	60f8      	str	r0, [r7, #12]
 80f3f8c:	60b9      	str	r1, [r7, #8]
 80f3f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80f3f90:	68fb      	ldr	r3, [r7, #12]
 80f3f92:	6a1b      	ldr	r3, [r3, #32]
 80f3f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80f3f96:	68fb      	ldr	r3, [r7, #12]
 80f3f98:	6a1b      	ldr	r3, [r3, #32]
 80f3f9a:	f023 0201 	bic.w	r2, r3, #1
 80f3f9e:	68fb      	ldr	r3, [r7, #12]
 80f3fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80f3fa2:	68fb      	ldr	r3, [r7, #12]
 80f3fa4:	699b      	ldr	r3, [r3, #24]
 80f3fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80f3fa8:	693b      	ldr	r3, [r7, #16]
 80f3faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80f3fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80f3fb0:	687b      	ldr	r3, [r7, #4]
 80f3fb2:	011b      	lsls	r3, r3, #4
 80f3fb4:	693a      	ldr	r2, [r7, #16]
 80f3fb6:	4313      	orrs	r3, r2
 80f3fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80f3fba:	697b      	ldr	r3, [r7, #20]
 80f3fbc:	f023 030a 	bic.w	r3, r3, #10
 80f3fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80f3fc2:	697a      	ldr	r2, [r7, #20]
 80f3fc4:	68bb      	ldr	r3, [r7, #8]
 80f3fc6:	4313      	orrs	r3, r2
 80f3fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80f3fca:	68fb      	ldr	r3, [r7, #12]
 80f3fcc:	693a      	ldr	r2, [r7, #16]
 80f3fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80f3fd0:	68fb      	ldr	r3, [r7, #12]
 80f3fd2:	697a      	ldr	r2, [r7, #20]
 80f3fd4:	621a      	str	r2, [r3, #32]
}
 80f3fd6:	bf00      	nop
 80f3fd8:	371c      	adds	r7, #28
 80f3fda:	46bd      	mov	sp, r7
 80f3fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f3fe0:	4770      	bx	lr

080f3fe2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80f3fe2:	b480      	push	{r7}
 80f3fe4:	b087      	sub	sp, #28
 80f3fe6:	af00      	add	r7, sp, #0
 80f3fe8:	60f8      	str	r0, [r7, #12]
 80f3fea:	60b9      	str	r1, [r7, #8]
 80f3fec:	607a      	str	r2, [r7, #4]
 80f3fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80f3ff0:	68fb      	ldr	r3, [r7, #12]
 80f3ff2:	6a1b      	ldr	r3, [r3, #32]
 80f3ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80f3ff6:	68fb      	ldr	r3, [r7, #12]
 80f3ff8:	6a1b      	ldr	r3, [r3, #32]
 80f3ffa:	f023 0210 	bic.w	r2, r3, #16
 80f3ffe:	68fb      	ldr	r3, [r7, #12]
 80f4000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80f4002:	68fb      	ldr	r3, [r7, #12]
 80f4004:	699b      	ldr	r3, [r3, #24]
 80f4006:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80f4008:	693b      	ldr	r3, [r7, #16]
 80f400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80f4010:	687b      	ldr	r3, [r7, #4]
 80f4012:	021b      	lsls	r3, r3, #8
 80f4014:	693a      	ldr	r2, [r7, #16]
 80f4016:	4313      	orrs	r3, r2
 80f4018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80f401a:	693b      	ldr	r3, [r7, #16]
 80f401c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80f4020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80f4022:	683b      	ldr	r3, [r7, #0]
 80f4024:	031b      	lsls	r3, r3, #12
 80f4026:	b29b      	uxth	r3, r3
 80f4028:	693a      	ldr	r2, [r7, #16]
 80f402a:	4313      	orrs	r3, r2
 80f402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80f402e:	697b      	ldr	r3, [r7, #20]
 80f4030:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80f4034:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80f4036:	68bb      	ldr	r3, [r7, #8]
 80f4038:	011b      	lsls	r3, r3, #4
 80f403a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80f403e:	697a      	ldr	r2, [r7, #20]
 80f4040:	4313      	orrs	r3, r2
 80f4042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80f4044:	68fb      	ldr	r3, [r7, #12]
 80f4046:	693a      	ldr	r2, [r7, #16]
 80f4048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80f404a:	68fb      	ldr	r3, [r7, #12]
 80f404c:	697a      	ldr	r2, [r7, #20]
 80f404e:	621a      	str	r2, [r3, #32]
}
 80f4050:	bf00      	nop
 80f4052:	371c      	adds	r7, #28
 80f4054:	46bd      	mov	sp, r7
 80f4056:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f405a:	4770      	bx	lr

080f405c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80f405c:	b480      	push	{r7}
 80f405e:	b087      	sub	sp, #28
 80f4060:	af00      	add	r7, sp, #0
 80f4062:	60f8      	str	r0, [r7, #12]
 80f4064:	60b9      	str	r1, [r7, #8]
 80f4066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80f4068:	68fb      	ldr	r3, [r7, #12]
 80f406a:	6a1b      	ldr	r3, [r3, #32]
 80f406c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80f406e:	68fb      	ldr	r3, [r7, #12]
 80f4070:	6a1b      	ldr	r3, [r3, #32]
 80f4072:	f023 0210 	bic.w	r2, r3, #16
 80f4076:	68fb      	ldr	r3, [r7, #12]
 80f4078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80f407a:	68fb      	ldr	r3, [r7, #12]
 80f407c:	699b      	ldr	r3, [r3, #24]
 80f407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80f4080:	693b      	ldr	r3, [r7, #16]
 80f4082:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80f4086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80f4088:	687b      	ldr	r3, [r7, #4]
 80f408a:	031b      	lsls	r3, r3, #12
 80f408c:	693a      	ldr	r2, [r7, #16]
 80f408e:	4313      	orrs	r3, r2
 80f4090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80f4092:	697b      	ldr	r3, [r7, #20]
 80f4094:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80f4098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80f409a:	68bb      	ldr	r3, [r7, #8]
 80f409c:	011b      	lsls	r3, r3, #4
 80f409e:	697a      	ldr	r2, [r7, #20]
 80f40a0:	4313      	orrs	r3, r2
 80f40a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80f40a4:	68fb      	ldr	r3, [r7, #12]
 80f40a6:	693a      	ldr	r2, [r7, #16]
 80f40a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80f40aa:	68fb      	ldr	r3, [r7, #12]
 80f40ac:	697a      	ldr	r2, [r7, #20]
 80f40ae:	621a      	str	r2, [r3, #32]
}
 80f40b0:	bf00      	nop
 80f40b2:	371c      	adds	r7, #28
 80f40b4:	46bd      	mov	sp, r7
 80f40b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f40ba:	4770      	bx	lr

080f40bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80f40bc:	b480      	push	{r7}
 80f40be:	b087      	sub	sp, #28
 80f40c0:	af00      	add	r7, sp, #0
 80f40c2:	60f8      	str	r0, [r7, #12]
 80f40c4:	60b9      	str	r1, [r7, #8]
 80f40c6:	607a      	str	r2, [r7, #4]
 80f40c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80f40ca:	68fb      	ldr	r3, [r7, #12]
 80f40cc:	6a1b      	ldr	r3, [r3, #32]
 80f40ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80f40d0:	68fb      	ldr	r3, [r7, #12]
 80f40d2:	6a1b      	ldr	r3, [r3, #32]
 80f40d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80f40d8:	68fb      	ldr	r3, [r7, #12]
 80f40da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80f40dc:	68fb      	ldr	r3, [r7, #12]
 80f40de:	69db      	ldr	r3, [r3, #28]
 80f40e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80f40e2:	693b      	ldr	r3, [r7, #16]
 80f40e4:	f023 0303 	bic.w	r3, r3, #3
 80f40e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80f40ea:	693a      	ldr	r2, [r7, #16]
 80f40ec:	687b      	ldr	r3, [r7, #4]
 80f40ee:	4313      	orrs	r3, r2
 80f40f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80f40f2:	693b      	ldr	r3, [r7, #16]
 80f40f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80f40f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80f40fa:	683b      	ldr	r3, [r7, #0]
 80f40fc:	011b      	lsls	r3, r3, #4
 80f40fe:	b2db      	uxtb	r3, r3
 80f4100:	693a      	ldr	r2, [r7, #16]
 80f4102:	4313      	orrs	r3, r2
 80f4104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80f4106:	697b      	ldr	r3, [r7, #20]
 80f4108:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80f410c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80f410e:	68bb      	ldr	r3, [r7, #8]
 80f4110:	021b      	lsls	r3, r3, #8
 80f4112:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80f4116:	697a      	ldr	r2, [r7, #20]
 80f4118:	4313      	orrs	r3, r2
 80f411a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80f411c:	68fb      	ldr	r3, [r7, #12]
 80f411e:	693a      	ldr	r2, [r7, #16]
 80f4120:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80f4122:	68fb      	ldr	r3, [r7, #12]
 80f4124:	697a      	ldr	r2, [r7, #20]
 80f4126:	621a      	str	r2, [r3, #32]
}
 80f4128:	bf00      	nop
 80f412a:	371c      	adds	r7, #28
 80f412c:	46bd      	mov	sp, r7
 80f412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4132:	4770      	bx	lr

080f4134 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80f4134:	b480      	push	{r7}
 80f4136:	b087      	sub	sp, #28
 80f4138:	af00      	add	r7, sp, #0
 80f413a:	60f8      	str	r0, [r7, #12]
 80f413c:	60b9      	str	r1, [r7, #8]
 80f413e:	607a      	str	r2, [r7, #4]
 80f4140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80f4142:	68fb      	ldr	r3, [r7, #12]
 80f4144:	6a1b      	ldr	r3, [r3, #32]
 80f4146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80f4148:	68fb      	ldr	r3, [r7, #12]
 80f414a:	6a1b      	ldr	r3, [r3, #32]
 80f414c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80f4150:	68fb      	ldr	r3, [r7, #12]
 80f4152:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80f4154:	68fb      	ldr	r3, [r7, #12]
 80f4156:	69db      	ldr	r3, [r3, #28]
 80f4158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80f415a:	693b      	ldr	r3, [r7, #16]
 80f415c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80f4160:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80f4162:	687b      	ldr	r3, [r7, #4]
 80f4164:	021b      	lsls	r3, r3, #8
 80f4166:	693a      	ldr	r2, [r7, #16]
 80f4168:	4313      	orrs	r3, r2
 80f416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80f416c:	693b      	ldr	r3, [r7, #16]
 80f416e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80f4172:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80f4174:	683b      	ldr	r3, [r7, #0]
 80f4176:	031b      	lsls	r3, r3, #12
 80f4178:	b29b      	uxth	r3, r3
 80f417a:	693a      	ldr	r2, [r7, #16]
 80f417c:	4313      	orrs	r3, r2
 80f417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80f4180:	697b      	ldr	r3, [r7, #20]
 80f4182:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80f4186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80f4188:	68bb      	ldr	r3, [r7, #8]
 80f418a:	031b      	lsls	r3, r3, #12
 80f418c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80f4190:	697a      	ldr	r2, [r7, #20]
 80f4192:	4313      	orrs	r3, r2
 80f4194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80f4196:	68fb      	ldr	r3, [r7, #12]
 80f4198:	693a      	ldr	r2, [r7, #16]
 80f419a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80f419c:	68fb      	ldr	r3, [r7, #12]
 80f419e:	697a      	ldr	r2, [r7, #20]
 80f41a0:	621a      	str	r2, [r3, #32]
}
 80f41a2:	bf00      	nop
 80f41a4:	371c      	adds	r7, #28
 80f41a6:	46bd      	mov	sp, r7
 80f41a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f41ac:	4770      	bx	lr

080f41ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80f41ae:	b480      	push	{r7}
 80f41b0:	b085      	sub	sp, #20
 80f41b2:	af00      	add	r7, sp, #0
 80f41b4:	6078      	str	r0, [r7, #4]
 80f41b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80f41b8:	687b      	ldr	r3, [r7, #4]
 80f41ba:	689b      	ldr	r3, [r3, #8]
 80f41bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80f41be:	68fb      	ldr	r3, [r7, #12]
 80f41c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80f41c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f41c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80f41ca:	683a      	ldr	r2, [r7, #0]
 80f41cc:	68fb      	ldr	r3, [r7, #12]
 80f41ce:	4313      	orrs	r3, r2
 80f41d0:	f043 0307 	orr.w	r3, r3, #7
 80f41d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80f41d6:	687b      	ldr	r3, [r7, #4]
 80f41d8:	68fa      	ldr	r2, [r7, #12]
 80f41da:	609a      	str	r2, [r3, #8]
}
 80f41dc:	bf00      	nop
 80f41de:	3714      	adds	r7, #20
 80f41e0:	46bd      	mov	sp, r7
 80f41e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f41e6:	4770      	bx	lr

080f41e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80f41e8:	b480      	push	{r7}
 80f41ea:	b087      	sub	sp, #28
 80f41ec:	af00      	add	r7, sp, #0
 80f41ee:	60f8      	str	r0, [r7, #12]
 80f41f0:	60b9      	str	r1, [r7, #8]
 80f41f2:	607a      	str	r2, [r7, #4]
 80f41f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80f41f6:	68fb      	ldr	r3, [r7, #12]
 80f41f8:	689b      	ldr	r3, [r3, #8]
 80f41fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80f41fc:	697b      	ldr	r3, [r7, #20]
 80f41fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80f4202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80f4204:	683b      	ldr	r3, [r7, #0]
 80f4206:	021a      	lsls	r2, r3, #8
 80f4208:	687b      	ldr	r3, [r7, #4]
 80f420a:	431a      	orrs	r2, r3
 80f420c:	68bb      	ldr	r3, [r7, #8]
 80f420e:	4313      	orrs	r3, r2
 80f4210:	697a      	ldr	r2, [r7, #20]
 80f4212:	4313      	orrs	r3, r2
 80f4214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80f4216:	68fb      	ldr	r3, [r7, #12]
 80f4218:	697a      	ldr	r2, [r7, #20]
 80f421a:	609a      	str	r2, [r3, #8]
}
 80f421c:	bf00      	nop
 80f421e:	371c      	adds	r7, #28
 80f4220:	46bd      	mov	sp, r7
 80f4222:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4226:	4770      	bx	lr

080f4228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80f4228:	b480      	push	{r7}
 80f422a:	b085      	sub	sp, #20
 80f422c:	af00      	add	r7, sp, #0
 80f422e:	6078      	str	r0, [r7, #4]
 80f4230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80f4232:	687b      	ldr	r3, [r7, #4]
 80f4234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f4238:	2b01      	cmp	r3, #1
 80f423a:	d101      	bne.n	80f4240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80f423c:	2302      	movs	r3, #2
 80f423e:	e0a1      	b.n	80f4384 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80f4240:	687b      	ldr	r3, [r7, #4]
 80f4242:	2201      	movs	r2, #1
 80f4244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80f4248:	687b      	ldr	r3, [r7, #4]
 80f424a:	2202      	movs	r2, #2
 80f424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80f4250:	687b      	ldr	r3, [r7, #4]
 80f4252:	681b      	ldr	r3, [r3, #0]
 80f4254:	685b      	ldr	r3, [r3, #4]
 80f4256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80f4258:	687b      	ldr	r3, [r7, #4]
 80f425a:	681b      	ldr	r3, [r3, #0]
 80f425c:	689b      	ldr	r3, [r3, #8]
 80f425e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80f4260:	687b      	ldr	r3, [r7, #4]
 80f4262:	681b      	ldr	r3, [r3, #0]
 80f4264:	4a4a      	ldr	r2, [pc, #296]	@ (80f4390 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80f4266:	4293      	cmp	r3, r2
 80f4268:	d00e      	beq.n	80f4288 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80f426a:	687b      	ldr	r3, [r7, #4]
 80f426c:	681b      	ldr	r3, [r3, #0]
 80f426e:	4a49      	ldr	r2, [pc, #292]	@ (80f4394 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80f4270:	4293      	cmp	r3, r2
 80f4272:	d009      	beq.n	80f4288 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80f4274:	687b      	ldr	r3, [r7, #4]
 80f4276:	681b      	ldr	r3, [r3, #0]
 80f4278:	4a47      	ldr	r2, [pc, #284]	@ (80f4398 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80f427a:	4293      	cmp	r3, r2
 80f427c:	d004      	beq.n	80f4288 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80f427e:	687b      	ldr	r3, [r7, #4]
 80f4280:	681b      	ldr	r3, [r3, #0]
 80f4282:	4a46      	ldr	r2, [pc, #280]	@ (80f439c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80f4284:	4293      	cmp	r3, r2
 80f4286:	d108      	bne.n	80f429a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80f4288:	68fb      	ldr	r3, [r7, #12]
 80f428a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80f428e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80f4290:	683b      	ldr	r3, [r7, #0]
 80f4292:	685b      	ldr	r3, [r3, #4]
 80f4294:	68fa      	ldr	r2, [r7, #12]
 80f4296:	4313      	orrs	r3, r2
 80f4298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80f429a:	68fb      	ldr	r3, [r7, #12]
 80f429c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80f42a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80f42a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80f42a6:	683b      	ldr	r3, [r7, #0]
 80f42a8:	681b      	ldr	r3, [r3, #0]
 80f42aa:	68fa      	ldr	r2, [r7, #12]
 80f42ac:	4313      	orrs	r3, r2
 80f42ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80f42b0:	687b      	ldr	r3, [r7, #4]
 80f42b2:	681b      	ldr	r3, [r3, #0]
 80f42b4:	68fa      	ldr	r2, [r7, #12]
 80f42b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80f42b8:	687b      	ldr	r3, [r7, #4]
 80f42ba:	681b      	ldr	r3, [r3, #0]
 80f42bc:	4a34      	ldr	r2, [pc, #208]	@ (80f4390 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80f42be:	4293      	cmp	r3, r2
 80f42c0:	d04a      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42c2:	687b      	ldr	r3, [r7, #4]
 80f42c4:	681b      	ldr	r3, [r3, #0]
 80f42c6:	4a33      	ldr	r2, [pc, #204]	@ (80f4394 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80f42c8:	4293      	cmp	r3, r2
 80f42ca:	d045      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42cc:	687b      	ldr	r3, [r7, #4]
 80f42ce:	681b      	ldr	r3, [r3, #0]
 80f42d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f42d4:	d040      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42d6:	687b      	ldr	r3, [r7, #4]
 80f42d8:	681b      	ldr	r3, [r3, #0]
 80f42da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80f42de:	d03b      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42e0:	687b      	ldr	r3, [r7, #4]
 80f42e2:	681b      	ldr	r3, [r3, #0]
 80f42e4:	4a2e      	ldr	r2, [pc, #184]	@ (80f43a0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80f42e6:	4293      	cmp	r3, r2
 80f42e8:	d036      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42ea:	687b      	ldr	r3, [r7, #4]
 80f42ec:	681b      	ldr	r3, [r3, #0]
 80f42ee:	4a2d      	ldr	r2, [pc, #180]	@ (80f43a4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80f42f0:	4293      	cmp	r3, r2
 80f42f2:	d031      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42f4:	687b      	ldr	r3, [r7, #4]
 80f42f6:	681b      	ldr	r3, [r3, #0]
 80f42f8:	4a2b      	ldr	r2, [pc, #172]	@ (80f43a8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80f42fa:	4293      	cmp	r3, r2
 80f42fc:	d02c      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f42fe:	687b      	ldr	r3, [r7, #4]
 80f4300:	681b      	ldr	r3, [r3, #0]
 80f4302:	4a2a      	ldr	r2, [pc, #168]	@ (80f43ac <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80f4304:	4293      	cmp	r3, r2
 80f4306:	d027      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f4308:	687b      	ldr	r3, [r7, #4]
 80f430a:	681b      	ldr	r3, [r3, #0]
 80f430c:	4a28      	ldr	r2, [pc, #160]	@ (80f43b0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80f430e:	4293      	cmp	r3, r2
 80f4310:	d022      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f4312:	687b      	ldr	r3, [r7, #4]
 80f4314:	681b      	ldr	r3, [r3, #0]
 80f4316:	4a27      	ldr	r2, [pc, #156]	@ (80f43b4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80f4318:	4293      	cmp	r3, r2
 80f431a:	d01d      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f431c:	687b      	ldr	r3, [r7, #4]
 80f431e:	681b      	ldr	r3, [r3, #0]
 80f4320:	4a1d      	ldr	r2, [pc, #116]	@ (80f4398 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80f4322:	4293      	cmp	r3, r2
 80f4324:	d018      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f4326:	687b      	ldr	r3, [r7, #4]
 80f4328:	681b      	ldr	r3, [r3, #0]
 80f432a:	4a1c      	ldr	r2, [pc, #112]	@ (80f439c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80f432c:	4293      	cmp	r3, r2
 80f432e:	d013      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f4330:	687b      	ldr	r3, [r7, #4]
 80f4332:	681b      	ldr	r3, [r3, #0]
 80f4334:	4a20      	ldr	r2, [pc, #128]	@ (80f43b8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80f4336:	4293      	cmp	r3, r2
 80f4338:	d00e      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f433a:	687b      	ldr	r3, [r7, #4]
 80f433c:	681b      	ldr	r3, [r3, #0]
 80f433e:	4a1f      	ldr	r2, [pc, #124]	@ (80f43bc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80f4340:	4293      	cmp	r3, r2
 80f4342:	d009      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f4344:	687b      	ldr	r3, [r7, #4]
 80f4346:	681b      	ldr	r3, [r3, #0]
 80f4348:	4a1d      	ldr	r2, [pc, #116]	@ (80f43c0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80f434a:	4293      	cmp	r3, r2
 80f434c:	d004      	beq.n	80f4358 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80f434e:	687b      	ldr	r3, [r7, #4]
 80f4350:	681b      	ldr	r3, [r3, #0]
 80f4352:	4a1c      	ldr	r2, [pc, #112]	@ (80f43c4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80f4354:	4293      	cmp	r3, r2
 80f4356:	d10c      	bne.n	80f4372 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80f4358:	68bb      	ldr	r3, [r7, #8]
 80f435a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80f435e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80f4360:	683b      	ldr	r3, [r7, #0]
 80f4362:	689b      	ldr	r3, [r3, #8]
 80f4364:	68ba      	ldr	r2, [r7, #8]
 80f4366:	4313      	orrs	r3, r2
 80f4368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80f436a:	687b      	ldr	r3, [r7, #4]
 80f436c:	681b      	ldr	r3, [r3, #0]
 80f436e:	68ba      	ldr	r2, [r7, #8]
 80f4370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80f4372:	687b      	ldr	r3, [r7, #4]
 80f4374:	2201      	movs	r2, #1
 80f4376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80f437a:	687b      	ldr	r3, [r7, #4]
 80f437c:	2200      	movs	r2, #0
 80f437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80f4382:	2300      	movs	r3, #0
}
 80f4384:	4618      	mov	r0, r3
 80f4386:	3714      	adds	r7, #20
 80f4388:	46bd      	mov	sp, r7
 80f438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f438e:	4770      	bx	lr
 80f4390:	40012c00 	.word	0x40012c00
 80f4394:	50012c00 	.word	0x50012c00
 80f4398:	40013400 	.word	0x40013400
 80f439c:	50013400 	.word	0x50013400
 80f43a0:	40000400 	.word	0x40000400
 80f43a4:	50000400 	.word	0x50000400
 80f43a8:	40000800 	.word	0x40000800
 80f43ac:	50000800 	.word	0x50000800
 80f43b0:	40000c00 	.word	0x40000c00
 80f43b4:	50000c00 	.word	0x50000c00
 80f43b8:	40001800 	.word	0x40001800
 80f43bc:	50001800 	.word	0x50001800
 80f43c0:	40014000 	.word	0x40014000
 80f43c4:	50014000 	.word	0x50014000

080f43c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80f43c8:	b480      	push	{r7}
 80f43ca:	b085      	sub	sp, #20
 80f43cc:	af00      	add	r7, sp, #0
 80f43ce:	6078      	str	r0, [r7, #4]
 80f43d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80f43d2:	2300      	movs	r3, #0
 80f43d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80f43d6:	687b      	ldr	r3, [r7, #4]
 80f43d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f43dc:	2b01      	cmp	r3, #1
 80f43de:	d101      	bne.n	80f43e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80f43e0:	2302      	movs	r3, #2
 80f43e2:	e07d      	b.n	80f44e0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 80f43e4:	687b      	ldr	r3, [r7, #4]
 80f43e6:	2201      	movs	r2, #1
 80f43e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80f43ec:	68fb      	ldr	r3, [r7, #12]
 80f43ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80f43f2:	683b      	ldr	r3, [r7, #0]
 80f43f4:	68db      	ldr	r3, [r3, #12]
 80f43f6:	4313      	orrs	r3, r2
 80f43f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80f43fa:	68fb      	ldr	r3, [r7, #12]
 80f43fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80f4400:	683b      	ldr	r3, [r7, #0]
 80f4402:	689b      	ldr	r3, [r3, #8]
 80f4404:	4313      	orrs	r3, r2
 80f4406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80f4408:	68fb      	ldr	r3, [r7, #12]
 80f440a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80f440e:	683b      	ldr	r3, [r7, #0]
 80f4410:	685b      	ldr	r3, [r3, #4]
 80f4412:	4313      	orrs	r3, r2
 80f4414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80f4416:	68fb      	ldr	r3, [r7, #12]
 80f4418:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80f441c:	683b      	ldr	r3, [r7, #0]
 80f441e:	681b      	ldr	r3, [r3, #0]
 80f4420:	4313      	orrs	r3, r2
 80f4422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80f4424:	68fb      	ldr	r3, [r7, #12]
 80f4426:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80f442a:	683b      	ldr	r3, [r7, #0]
 80f442c:	691b      	ldr	r3, [r3, #16]
 80f442e:	4313      	orrs	r3, r2
 80f4430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80f4432:	68fb      	ldr	r3, [r7, #12]
 80f4434:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80f4438:	683b      	ldr	r3, [r7, #0]
 80f443a:	695b      	ldr	r3, [r3, #20]
 80f443c:	4313      	orrs	r3, r2
 80f443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80f4440:	68fb      	ldr	r3, [r7, #12]
 80f4442:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80f4446:	683b      	ldr	r3, [r7, #0]
 80f4448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f444a:	4313      	orrs	r3, r2
 80f444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80f444e:	68fb      	ldr	r3, [r7, #12]
 80f4450:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80f4454:	683b      	ldr	r3, [r7, #0]
 80f4456:	699b      	ldr	r3, [r3, #24]
 80f4458:	041b      	lsls	r3, r3, #16
 80f445a:	4313      	orrs	r3, r2
 80f445c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80f445e:	68fb      	ldr	r3, [r7, #12]
 80f4460:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80f4464:	683b      	ldr	r3, [r7, #0]
 80f4466:	69db      	ldr	r3, [r3, #28]
 80f4468:	4313      	orrs	r3, r2
 80f446a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80f446c:	687b      	ldr	r3, [r7, #4]
 80f446e:	681b      	ldr	r3, [r3, #0]
 80f4470:	4a1e      	ldr	r2, [pc, #120]	@ (80f44ec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80f4472:	4293      	cmp	r3, r2
 80f4474:	d00e      	beq.n	80f4494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80f4476:	687b      	ldr	r3, [r7, #4]
 80f4478:	681b      	ldr	r3, [r3, #0]
 80f447a:	4a1d      	ldr	r2, [pc, #116]	@ (80f44f0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80f447c:	4293      	cmp	r3, r2
 80f447e:	d009      	beq.n	80f4494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80f4480:	687b      	ldr	r3, [r7, #4]
 80f4482:	681b      	ldr	r3, [r3, #0]
 80f4484:	4a1b      	ldr	r2, [pc, #108]	@ (80f44f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80f4486:	4293      	cmp	r3, r2
 80f4488:	d004      	beq.n	80f4494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80f448a:	687b      	ldr	r3, [r7, #4]
 80f448c:	681b      	ldr	r3, [r3, #0]
 80f448e:	4a1a      	ldr	r2, [pc, #104]	@ (80f44f8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80f4490:	4293      	cmp	r3, r2
 80f4492:	d11c      	bne.n	80f44ce <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80f4494:	68fb      	ldr	r3, [r7, #12]
 80f4496:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80f449a:	683b      	ldr	r3, [r7, #0]
 80f449c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f449e:	051b      	lsls	r3, r3, #20
 80f44a0:	4313      	orrs	r3, r2
 80f44a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80f44a4:	68fb      	ldr	r3, [r7, #12]
 80f44a6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80f44aa:	683b      	ldr	r3, [r7, #0]
 80f44ac:	6a1b      	ldr	r3, [r3, #32]
 80f44ae:	4313      	orrs	r3, r2
 80f44b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80f44b2:	68fb      	ldr	r3, [r7, #12]
 80f44b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80f44b8:	683b      	ldr	r3, [r7, #0]
 80f44ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f44bc:	4313      	orrs	r3, r2
 80f44be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80f44c0:	68fb      	ldr	r3, [r7, #12]
 80f44c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80f44c6:	683b      	ldr	r3, [r7, #0]
 80f44c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f44ca:	4313      	orrs	r3, r2
 80f44cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80f44ce:	687b      	ldr	r3, [r7, #4]
 80f44d0:	681b      	ldr	r3, [r3, #0]
 80f44d2:	68fa      	ldr	r2, [r7, #12]
 80f44d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80f44d6:	687b      	ldr	r3, [r7, #4]
 80f44d8:	2200      	movs	r2, #0
 80f44da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80f44de:	2300      	movs	r3, #0
}
 80f44e0:	4618      	mov	r0, r3
 80f44e2:	3714      	adds	r7, #20
 80f44e4:	46bd      	mov	sp, r7
 80f44e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f44ea:	4770      	bx	lr
 80f44ec:	40012c00 	.word	0x40012c00
 80f44f0:	50012c00 	.word	0x50012c00
 80f44f4:	40013400 	.word	0x40013400
 80f44f8:	50013400 	.word	0x50013400

080f44fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80f44fc:	b480      	push	{r7}
 80f44fe:	b083      	sub	sp, #12
 80f4500:	af00      	add	r7, sp, #0
 80f4502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80f4504:	bf00      	nop
 80f4506:	370c      	adds	r7, #12
 80f4508:	46bd      	mov	sp, r7
 80f450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f450e:	4770      	bx	lr

080f4510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80f4510:	b480      	push	{r7}
 80f4512:	b083      	sub	sp, #12
 80f4514:	af00      	add	r7, sp, #0
 80f4516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80f4518:	bf00      	nop
 80f451a:	370c      	adds	r7, #12
 80f451c:	46bd      	mov	sp, r7
 80f451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4522:	4770      	bx	lr

080f4524 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80f4524:	b480      	push	{r7}
 80f4526:	b083      	sub	sp, #12
 80f4528:	af00      	add	r7, sp, #0
 80f452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80f452c:	bf00      	nop
 80f452e:	370c      	adds	r7, #12
 80f4530:	46bd      	mov	sp, r7
 80f4532:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4536:	4770      	bx	lr

080f4538 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80f4538:	b480      	push	{r7}
 80f453a:	b083      	sub	sp, #12
 80f453c:	af00      	add	r7, sp, #0
 80f453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80f4540:	bf00      	nop
 80f4542:	370c      	adds	r7, #12
 80f4544:	46bd      	mov	sp, r7
 80f4546:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f454a:	4770      	bx	lr

080f454c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80f454c:	b480      	push	{r7}
 80f454e:	b083      	sub	sp, #12
 80f4550:	af00      	add	r7, sp, #0
 80f4552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80f4554:	bf00      	nop
 80f4556:	370c      	adds	r7, #12
 80f4558:	46bd      	mov	sp, r7
 80f455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f455e:	4770      	bx	lr

080f4560 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80f4560:	b480      	push	{r7}
 80f4562:	b083      	sub	sp, #12
 80f4564:	af00      	add	r7, sp, #0
 80f4566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80f4568:	bf00      	nop
 80f456a:	370c      	adds	r7, #12
 80f456c:	46bd      	mov	sp, r7
 80f456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4572:	4770      	bx	lr

080f4574 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80f4574:	b480      	push	{r7}
 80f4576:	b083      	sub	sp, #12
 80f4578:	af00      	add	r7, sp, #0
 80f457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80f457c:	bf00      	nop
 80f457e:	370c      	adds	r7, #12
 80f4580:	46bd      	mov	sp, r7
 80f4582:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4586:	4770      	bx	lr

080f4588 <can_message_handler_init>:
#define FDCAN_PERIPHERAL 1

/* Forward declaration */
static void can_message_handler_ECU_status_periodic(uint8_t ecu_id, uint8_t status, uint8_t boot_version);

void can_message_handler_init(void) {
 80f4588:	b5b0      	push	{r4, r5, r7, lr}
 80f458a:	b09a      	sub	sp, #104	@ 0x68
 80f458c:	af04      	add	r7, sp, #16
    can_filter_message_t can_filter_message = {0};
 80f458e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80f4592:	2200      	movs	r2, #0
 80f4594:	601a      	str	r2, [r3, #0]
 80f4596:	605a      	str	r2, [r3, #4]
 80f4598:	609a      	str	r2, [r3, #8]
 80f459a:	60da      	str	r2, [r3, #12]
 80f459c:	611a      	str	r2, [r3, #16]
 80f459e:	615a      	str	r2, [r3, #20]

    can_general_filter_t can_general_filter = (can_general_filter_t){
 80f45a0:	4b18      	ldr	r3, [pc, #96]	@ (80f4604 <can_message_handler_init+0x7c>)
 80f45a2:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80f45a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80f45a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .non_matching_std = SF_FDCAN_REJECT,
      .non_matching_ext = SF_FDCAN_REJECT,
      .reject_remote_std = 	SF_FDCAN_REJECT_REMOTE,
      .reject_remote_ext = 	SF_FDCAN_REJECT_REMOTE,
  };
  can_activate_notification_t can_activate_notification = (can_activate_notification_t){
 80f45ac:	2302      	movs	r3, #2
 80f45ae:	61fb      	str	r3, [r7, #28]
      .rx_fifo0_interrupts = SF_FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
  };

//   Configure the low-level filtering on the CAN peripheral
  can_filter_message = (can_filter_message_t){
 80f45b0:	4b15      	ldr	r3, [pc, #84]	@ (80f4608 <can_message_handler_init+0x80>)
 80f45b2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80f45b6:	461d      	mov	r5, r3
 80f45b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80f45ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80f45bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80f45c0:	e884 0003 	stmia.w	r4, {r0, r1}
      .filter_id1 = CAN_MSG_RECV_REQUEST_RUN_MODE_ID,
      .filter_id2 = CAN_MSG_RECV_DATABURST_COMPLETE_MESSAGE_ID,
  };

//   Configure CAN ID filtering
  sf_can_configure_filters(FDCAN_PERIPHERAL, can_filter_message);
 80f45c4:	466c      	mov	r4, sp
 80f45c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80f45ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80f45ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80f45d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80f45d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80f45d8:	2001      	movs	r0, #1
 80f45da:	f004 fddd 	bl	80f9198 <sf_can_configure_filters>

  // Configure general CAN ID filtering (non-specified messages)
  sf_can_configure_general_filter(FDCAN_PERIPHERAL, can_general_filter);
 80f45de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f45e0:	9300      	str	r3, [sp, #0]
 80f45e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80f45e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80f45e8:	2001      	movs	r0, #1
 80f45ea:	f004 fe69 	bl	80f92c0 <sf_can_configure_general_filter>

  // Activate RX FIFO0 new message notification
  sf_can_activate_notification(FDCAN_PERIPHERAL, can_activate_notification);
 80f45ee:	69f9      	ldr	r1, [r7, #28]
 80f45f0:	2001      	movs	r0, #1
 80f45f2:	f004 fec7 	bl	80f9384 <sf_can_activate_notification>

  // Start CAN peripheral
  sf_can_start(FDCAN_PERIPHERAL);
 80f45f6:	2001      	movs	r0, #1
 80f45f8:	f004 fef8 	bl	80f93ec <sf_can_start>
}
 80f45fc:	bf00      	nop
 80f45fe:	3758      	adds	r7, #88	@ 0x58
 80f4600:	46bd      	mov	sp, r7
 80f4602:	bdb0      	pop	{r4, r5, r7, pc}
 80f4604:	080fab54 	.word	0x080fab54
 80f4608:	080fab64 	.word	0x080fab64

080f460c <can_message_handler_process_frame>:
 *
 * @param[in] can_msg Pointer to the received CAN message frame.
 ****************************************************************************
 */
void can_message_handler_process_frame(const can_message_rx_t *frame, uint8_t ecu_id)
{
 80f460c:	b580      	push	{r7, lr}
 80f460e:	b088      	sub	sp, #32
 80f4610:	af02      	add	r7, sp, #8
 80f4612:	6078      	str	r0, [r7, #4]
 80f4614:	460b      	mov	r3, r1
 80f4616:	70fb      	strb	r3, [r7, #3]
    if (ecu_id != frame->data[CAN_MSG_ECU_CODE_BYTE_INDEX] || frame->identifier_type==SF_FDCAN_STANDARD_ID){
 80f4618:	687b      	ldr	r3, [r7, #4]
 80f461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f461c:	781b      	ldrb	r3, [r3, #0]
 80f461e:	78fa      	ldrb	r2, [r7, #3]
 80f4620:	429a      	cmp	r2, r3
 80f4622:	d170      	bne.n	80f4706 <can_message_handler_process_frame+0xfa>
 80f4624:	687b      	ldr	r3, [r7, #4]
 80f4626:	685b      	ldr	r3, [r3, #4]
 80f4628:	2b00      	cmp	r3, #0
 80f462a:	d06c      	beq.n	80f4706 <can_message_handler_process_frame+0xfa>
        return;
    }

    switch (frame->identifier) {
 80f462c:	687b      	ldr	r3, [r7, #4]
 80f462e:	681b      	ldr	r3, [r3, #0]
 80f4630:	4a39      	ldr	r2, [pc, #228]	@ (80f4718 <can_message_handler_process_frame+0x10c>)
 80f4632:	4293      	cmp	r3, r2
 80f4634:	d019      	beq.n	80f466a <can_message_handler_process_frame+0x5e>
 80f4636:	f5b3 3ff8 	cmp.w	r3, #126976	@ 0x1f000
 80f463a:	d966      	bls.n	80f470a <can_message_handler_process_frame+0xfe>
 80f463c:	4a37      	ldr	r2, [pc, #220]	@ (80f471c <can_message_handler_process_frame+0x110>)
 80f463e:	4293      	cmp	r3, r2
 80f4640:	d863      	bhi.n	80f470a <can_message_handler_process_frame+0xfe>
 80f4642:	4a37      	ldr	r2, [pc, #220]	@ (80f4720 <can_message_handler_process_frame+0x114>)
 80f4644:	4293      	cmp	r3, r2
 80f4646:	d360      	bcc.n	80f470a <can_message_handler_process_frame+0xfe>
 80f4648:	f5a3 33f8 	sub.w	r3, r3, #126976	@ 0x1f000
 80f464c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80f4650:	2275      	movs	r2, #117	@ 0x75
 80f4652:	fa22 f303 	lsr.w	r3, r2, r3
 80f4656:	f003 0301 	and.w	r3, r3, #1
 80f465a:	2b00      	cmp	r3, #0
 80f465c:	bf14      	ite	ne
 80f465e:	2301      	movne	r3, #1
 80f4660:	2300      	moveq	r3, #0
 80f4662:	b2db      	uxtb	r3, r3
 80f4664:	2b00      	cmp	r3, #0
 80f4666:	d112      	bne.n	80f468e <can_message_handler_process_frame+0x82>
            bootloader_rx_message_received((uint32_t) get_1ms_counter(), type, ecu_id, relevant_data_pointer, size);
            break;
        }

        default:
            break;
 80f4668:	e04f      	b.n	80f470a <can_message_handler_process_frame+0xfe>
            uint8_t request_mode = frame->data[1];
 80f466a:	687b      	ldr	r3, [r7, #4]
 80f466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f466e:	785b      	ldrb	r3, [r3, #1]
 80f4670:	737b      	strb	r3, [r7, #13]
            if (request_mode == BOOTLOADER_RUN_REQUEST_MODE_APPLICATION) {
 80f4672:	7b7b      	ldrb	r3, [r7, #13]
 80f4674:	2b01      	cmp	r3, #1
 80f4676:	d103      	bne.n	80f4680 <can_message_handler_process_frame+0x74>
                bootloader_start_app(true);
 80f4678:	2001      	movs	r0, #1
 80f467a:	f000 fe93 	bl	80f53a4 <bootloader_start_app>
            break;
 80f467e:	e046      	b.n	80f470e <can_message_handler_process_frame+0x102>
            } else if (request_mode == BOOTLOADER_RUN_REQUEST_MODE_BOOTLOADER) {
 80f4680:	7b7b      	ldrb	r3, [r7, #13]
 80f4682:	2b00      	cmp	r3, #0
 80f4684:	d143      	bne.n	80f470e <can_message_handler_process_frame+0x102>
                bootloader_stay(true);
 80f4686:	2001      	movs	r0, #1
 80f4688:	f000 fe9e 	bl	80f53c8 <bootloader_stay>
            break;
 80f468c:	e03f      	b.n	80f470e <can_message_handler_process_frame+0x102>
            data_comm_msg_type_t type = 0;
 80f468e:	2300      	movs	r3, #0
 80f4690:	75fb      	strb	r3, [r7, #23]
            const uint8_t *relevant_data_pointer = &(frame->data[1]);
 80f4692:	687b      	ldr	r3, [r7, #4]
 80f4694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f4696:	3301      	adds	r3, #1
 80f4698:	613b      	str	r3, [r7, #16]
            uint16_t size = frame->data_length - CAN_MSG_ECU_CODE_SIZE;
 80f469a:	687b      	ldr	r3, [r7, #4]
 80f469c:	68db      	ldr	r3, [r3, #12]
 80f469e:	b29b      	uxth	r3, r3
 80f46a0:	3b01      	subs	r3, #1
 80f46a2:	81fb      	strh	r3, [r7, #14]
            if (frame->identifier == CAN_MSG_RECV_PREPARE_REQUEST_ID) {
 80f46a4:	687b      	ldr	r3, [r7, #4]
 80f46a6:	681b      	ldr	r3, [r3, #0]
 80f46a8:	4a1d      	ldr	r2, [pc, #116]	@ (80f4720 <can_message_handler_process_frame+0x114>)
 80f46aa:	4293      	cmp	r3, r2
 80f46ac:	d102      	bne.n	80f46b4 <can_message_handler_process_frame+0xa8>
                type = DATA_COMM_MSG_TYPE_PREPARE_REQUEST;
 80f46ae:	2300      	movs	r3, #0
 80f46b0:	75fb      	strb	r3, [r7, #23]
 80f46b2:	e01e      	b.n	80f46f2 <can_message_handler_process_frame+0xe6>
            } else if (frame->identifier == CAN_MSG_RECV_INFO_MESSAGE_ID) {
 80f46b4:	687b      	ldr	r3, [r7, #4]
 80f46b6:	681b      	ldr	r3, [r3, #0]
 80f46b8:	4a1a      	ldr	r2, [pc, #104]	@ (80f4724 <can_message_handler_process_frame+0x118>)
 80f46ba:	4293      	cmp	r3, r2
 80f46bc:	d102      	bne.n	80f46c4 <can_message_handler_process_frame+0xb8>
                type = DATA_COMM_MSG_TYPE_INFO;
 80f46be:	2302      	movs	r3, #2
 80f46c0:	75fb      	strb	r3, [r7, #23]
 80f46c2:	e016      	b.n	80f46f2 <can_message_handler_process_frame+0xe6>
            } else if (frame->identifier == CAN_MSG_RECV_BURST_CRC_ID) {
 80f46c4:	687b      	ldr	r3, [r7, #4]
 80f46c6:	681b      	ldr	r3, [r3, #0]
 80f46c8:	4a17      	ldr	r2, [pc, #92]	@ (80f4728 <can_message_handler_process_frame+0x11c>)
 80f46ca:	4293      	cmp	r3, r2
 80f46cc:	d102      	bne.n	80f46d4 <can_message_handler_process_frame+0xc8>
                type = DATA_COMM_MSG_TYPE_BURST_CRC;
 80f46ce:	2304      	movs	r3, #4
 80f46d0:	75fb      	strb	r3, [r7, #23]
 80f46d2:	e00e      	b.n	80f46f2 <can_message_handler_process_frame+0xe6>
            } else if (frame->identifier == CAN_MSG_RECV_BURST_DATA_ID) {
 80f46d4:	687b      	ldr	r3, [r7, #4]
 80f46d6:	681b      	ldr	r3, [r3, #0]
 80f46d8:	4a14      	ldr	r2, [pc, #80]	@ (80f472c <can_message_handler_process_frame+0x120>)
 80f46da:	4293      	cmp	r3, r2
 80f46dc:	d102      	bne.n	80f46e4 <can_message_handler_process_frame+0xd8>
                type = DATA_COMM_MSG_TYPE_BURST_PACKET;
 80f46de:	2305      	movs	r3, #5
 80f46e0:	75fb      	strb	r3, [r7, #23]
 80f46e2:	e006      	b.n	80f46f2 <can_message_handler_process_frame+0xe6>
            } else if (frame->identifier == CAN_MSG_RECV_DATABURST_COMPLETE_MESSAGE_ID) {
 80f46e4:	687b      	ldr	r3, [r7, #4]
 80f46e6:	681b      	ldr	r3, [r3, #0]
 80f46e8:	4a0c      	ldr	r2, [pc, #48]	@ (80f471c <can_message_handler_process_frame+0x110>)
 80f46ea:	4293      	cmp	r3, r2
 80f46ec:	d101      	bne.n	80f46f2 <can_message_handler_process_frame+0xe6>
                type = DATA_COMM_MSG_TYPE_BURST_COMPLETION;
 80f46ee:	2306      	movs	r3, #6
 80f46f0:	75fb      	strb	r3, [r7, #23]
            bootloader_rx_message_received((uint32_t) get_1ms_counter(), type, ecu_id, relevant_data_pointer, size);
 80f46f2:	f005 fa45 	bl	80f9b80 <get_1ms_counter>
 80f46f6:	78fa      	ldrb	r2, [r7, #3]
 80f46f8:	7df9      	ldrb	r1, [r7, #23]
 80f46fa:	89fb      	ldrh	r3, [r7, #14]
 80f46fc:	9300      	str	r3, [sp, #0]
 80f46fe:	693b      	ldr	r3, [r7, #16]
 80f4700:	f000 fe36 	bl	80f5370 <bootloader_rx_message_received>
            break;
 80f4704:	e004      	b.n	80f4710 <can_message_handler_process_frame+0x104>
        return;
 80f4706:	bf00      	nop
 80f4708:	e002      	b.n	80f4710 <can_message_handler_process_frame+0x104>
            break;
 80f470a:	bf00      	nop
 80f470c:	e000      	b.n	80f4710 <can_message_handler_process_frame+0x104>
            break;
 80f470e:	bf00      	nop
    }
}
 80f4710:	3718      	adds	r7, #24
 80f4712:	46bd      	mov	sp, r7
 80f4714:	bd80      	pop	{r7, pc}
 80f4716:	bf00      	nop
 80f4718:	0001f001 	.word	0x0001f001
 80f471c:	0001f106 	.word	0x0001f106
 80f4720:	0001f100 	.word	0x0001f100
 80f4724:	0001f102 	.word	0x0001f102
 80f4728:	0001f104 	.word	0x0001f104
 80f472c:	0001f105 	.word	0x0001f105

080f4730 <can_message_handler_ECU_status_periodic>:

static void can_message_handler_ECU_status_periodic(uint8_t ecu_id, uint8_t app_status, uint8_t boot_version)
{
 80f4730:	b5b0      	push	{r4, r5, r7, lr}
 80f4732:	b09a      	sub	sp, #104	@ 0x68
 80f4734:	af0a      	add	r7, sp, #40	@ 0x28
 80f4736:	4603      	mov	r3, r0
 80f4738:	71fb      	strb	r3, [r7, #7]
 80f473a:	460b      	mov	r3, r1
 80f473c:	71bb      	strb	r3, [r7, #6]
 80f473e:	4613      	mov	r3, r2
 80f4740:	717b      	strb	r3, [r7, #5]
    static uint32_t last_send_ms = 0U;
    uint32_t now = get_1ms_counter();
 80f4742:	f005 fa1d 	bl	80f9b80 <get_1ms_counter>
 80f4746:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if ((now - last_send_ms) >= CAN_MSG_SEND_ECU_STATUS_PERIOD_MS)
 80f4748:	4b26      	ldr	r3, [pc, #152]	@ (80f47e4 <can_message_handler_ECU_status_periodic+0xb4>)
 80f474a:	681b      	ldr	r3, [r3, #0]
 80f474c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80f474e:	1ad3      	subs	r3, r2, r3
 80f4750:	2b63      	cmp	r3, #99	@ 0x63
 80f4752:	d943      	bls.n	80f47dc <can_message_handler_ECU_status_periodic+0xac>
    {
        last_send_ms = now;
 80f4754:	4a23      	ldr	r2, [pc, #140]	@ (80f47e4 <can_message_handler_ECU_status_periodic+0xb4>)
 80f4756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f4758:	6013      	str	r3, [r2, #0]

        can_message_tx_t status_frame = {0};
 80f475a:	f107 0308 	add.w	r3, r7, #8
 80f475e:	2230      	movs	r2, #48	@ 0x30
 80f4760:	2100      	movs	r1, #0
 80f4762:	4618      	mov	r0, r3
 80f4764:	f005 fb59 	bl	80f9e1a <memset>

        status_frame.identifier = CAN_MSG_SEND_ECU_STATUS_PERIODIC_ID;
 80f4768:	f44f 33f8 	mov.w	r3, #126976	@ 0x1f000
 80f476c:	60bb      	str	r3, [r7, #8]
        status_frame.data_length = CAN_MSG_SEND_ECU_STATUS_RESPONSE_LENGTH;
 80f476e:	2308      	movs	r3, #8
 80f4770:	617b      	str	r3, [r7, #20]
        status_frame.identifier_type = SF_FDCAN_EXTENDED_ID;
 80f4772:	2301      	movs	r3, #1
 80f4774:	60fb      	str	r3, [r7, #12]
        status_frame.tx_frame_type = SF_FDCAN_DATA_FRAME;
 80f4776:	2300      	movs	r3, #0
 80f4778:	613b      	str	r3, [r7, #16]

        status_frame.data[CAN_MSG_ECU_CODE_BYTE_INDEX] = ecu_id;
 80f477a:	79fb      	ldrb	r3, [r7, #7]
 80f477c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        status_frame.data[CAN_MSG_ECU_STATUS_BYTE_INDEX] = 0x00;
 80f4780:	2300      	movs	r3, #0
 80f4782:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        status_frame.data[CAN_MSG_ECU_STATE_BYTE_INDEX] = app_status;
 80f4786:	79bb      	ldrb	r3, [r7, #6]
 80f4788:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        uint32_t fw_version = bootloader_get_installed_fw_version();
 80f478c:	f000 fe2e 	bl	80f53ec <bootloader_get_installed_fw_version>
 80f4790:	63b8      	str	r0, [r7, #56]	@ 0x38
        status_frame.data[CAN_MSG_ECU_INSTALLED_FW_VERSION_BYTE_0] = (uint8_t)(fw_version & 0xFF);
 80f4792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f4794:	b2db      	uxtb	r3, r3
 80f4796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        status_frame.data[CAN_MSG_ECU_INSTALLED_FW_VERSION_BYTE_1] = (uint8_t)((fw_version >> 8) & 0xFF);
 80f479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f479c:	0a1b      	lsrs	r3, r3, #8
 80f479e:	b2db      	uxtb	r3, r3
 80f47a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        status_frame.data[CAN_MSG_ECU_INSTALLED_FW_VERSION_BYTE_2] = (uint8_t)((fw_version >> 16) & 0xFF);
 80f47a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f47a6:	0c1b      	lsrs	r3, r3, #16
 80f47a8:	b2db      	uxtb	r3, r3
 80f47aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        status_frame.data[CAN_MSG_ECU_INSTALLED_FW_VERSION_BYTE_3] = (uint8_t)((fw_version >> 24) & 0xFF);
 80f47ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f47b0:	0e1b      	lsrs	r3, r3, #24
 80f47b2:	b2db      	uxtb	r3, r3
 80f47b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        status_frame.data[CAN_MSG_BOOT_VERSION_BYTE_INDEX] = boot_version;
 80f47b8:	797b      	ldrb	r3, [r7, #5]
 80f47ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        sf_can_send_message(FDCAN_PERIPHERAL, status_frame);
 80f47be:	466d      	mov	r5, sp
 80f47c0:	f107 0414 	add.w	r4, r7, #20
 80f47c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80f47c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80f47c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80f47ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80f47cc:	6823      	ldr	r3, [r4, #0]
 80f47ce:	602b      	str	r3, [r5, #0]
 80f47d0:	f107 0308 	add.w	r3, r7, #8
 80f47d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80f47d6:	2001      	movs	r0, #1
 80f47d8:	f004 fc36 	bl	80f9048 <sf_can_send_message>
    }
}
 80f47dc:	bf00      	nop
 80f47de:	3740      	adds	r7, #64	@ 0x40
 80f47e0:	46bd      	mov	sp, r7
 80f47e2:	bdb0      	pop	{r4, r5, r7, pc}
 80f47e4:	20002718 	.word	0x20002718

080f47e8 <can_message_handler_task>:

void can_message_handler_task(uint8_t ecu_id, uint8_t app_status, uint8_t boot_version)
{
 80f47e8:	b580      	push	{r7, lr}
 80f47ea:	b090      	sub	sp, #64	@ 0x40
 80f47ec:	af00      	add	r7, sp, #0
 80f47ee:	4603      	mov	r3, r0
 80f47f0:	71fb      	strb	r3, [r7, #7]
 80f47f2:	460b      	mov	r3, r1
 80f47f4:	71bb      	strb	r3, [r7, #6]
 80f47f6:	4613      	mov	r3, r2
 80f47f8:	717b      	strb	r3, [r7, #5]
    can_message_rx_t new_msg;
    uint8_t can_msg_rcv_data[MAX_DATA_LENGTH];
    new_msg.data = &can_msg_rcv_data[0];
 80f47fa:	f107 030c 	add.w	r3, r7, #12
 80f47fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get lastest message received */
    while(sf_can_get_last_rx_filtered_message(&new_msg) == CAN_STATUS_OK) {
 80f4800:	e006      	b.n	80f4810 <can_message_handler_task+0x28>
        can_message_handler_process_frame(&new_msg, ecu_id);
 80f4802:	79fa      	ldrb	r2, [r7, #7]
 80f4804:	f107 0314 	add.w	r3, r7, #20
 80f4808:	4611      	mov	r1, r2
 80f480a:	4618      	mov	r0, r3
 80f480c:	f7ff fefe 	bl	80f460c <can_message_handler_process_frame>
    while(sf_can_get_last_rx_filtered_message(&new_msg) == CAN_STATUS_OK) {
 80f4810:	f107 0314 	add.w	r3, r7, #20
 80f4814:	4618      	mov	r0, r3
 80f4816:	f004 fe6f 	bl	80f94f8 <sf_can_get_last_rx_filtered_message>
 80f481a:	4603      	mov	r3, r0
 80f481c:	2b00      	cmp	r3, #0
 80f481e:	d0f0      	beq.n	80f4802 <can_message_handler_task+0x1a>
    }

    can_message_handler_ECU_status_periodic(ecu_id, app_status, boot_version);
 80f4820:	797a      	ldrb	r2, [r7, #5]
 80f4822:	79b9      	ldrb	r1, [r7, #6]
 80f4824:	79fb      	ldrb	r3, [r7, #7]
 80f4826:	4618      	mov	r0, r3
 80f4828:	f7ff ff82 	bl	80f4730 <can_message_handler_ECU_status_periodic>
}
 80f482c:	bf00      	nop
 80f482e:	3740      	adds	r7, #64	@ 0x40
 80f4830:	46bd      	mov	sp, r7
 80f4832:	bd80      	pop	{r7, pc}

080f4834 <decrypt_chunk>:
static data_comm_rx_write_result_t data_comm_write_func(uint32_t address, const uint8_t* data, uint32_t size, bool last, void*context);
static data_comm_rx_finish_result_t data_comm_finish_callback(uint8_t status, uint8_t* finish_error, void*context);
//static int data_comm_log_func(int level, const char *format, ...);


static void decrypt_chunk(uint32_t *buffer, int size, const btea_key_t *key) {
 80f4834:	b580      	push	{r7, lr}
 80f4836:	b086      	sub	sp, #24
 80f4838:	af00      	add	r7, sp, #0
 80f483a:	60f8      	str	r0, [r7, #12]
 80f483c:	60b9      	str	r1, [r7, #8]
 80f483e:	607a      	str	r2, [r7, #4]
    int n = size / sizeof(uint32_t);
 80f4840:	68bb      	ldr	r3, [r7, #8]
 80f4842:	089b      	lsrs	r3, r3, #2
 80f4844:	617b      	str	r3, [r7, #20]
    btea(buffer, -n, key);
 80f4846:	697b      	ldr	r3, [r7, #20]
 80f4848:	425b      	negs	r3, r3
 80f484a:	687a      	ldr	r2, [r7, #4]
 80f484c:	4619      	mov	r1, r3
 80f484e:	68f8      	ldr	r0, [r7, #12]
 80f4850:	f000 fe8e 	bl	80f5570 <btea>
}
 80f4854:	bf00      	nop
 80f4856:	3718      	adds	r7, #24
 80f4858:	46bd      	mov	sp, r7
 80f485a:	bd80      	pop	{r7, pc}

080f485c <clear_info>:

static void clear_info() {
 80f485c:	b580      	push	{r7, lr}
 80f485e:	af00      	add	r7, sp, #0
    if (!bootloader.info_cleared) {
 80f4860:	4b14      	ldr	r3, [pc, #80]	@ (80f48b4 <clear_info+0x58>)
 80f4862:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 80f4866:	f083 0301 	eor.w	r3, r3, #1
 80f486a:	b2db      	uxtb	r3, r3
 80f486c:	2b00      	cmp	r3, #0
 80f486e:	d01e      	beq.n	80f48ae <clear_info+0x52>
        //Set the app to not found and not verified since we have just write to it
        bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4870:	4a10      	ldr	r2, [pc, #64]	@ (80f48b4 <clear_info+0x58>)
 80f4872:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4876:	f023 030c 	bic.w	r3, r3, #12
 80f487a:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
        bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f487e:	4a0d      	ldr	r2, [pc, #52]	@ (80f48b4 <clear_info+0x58>)
 80f4880:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4884:	f023 0303 	bic.w	r3, r3, #3
 80f4888:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
        memset(&bootloader.upgrade_info,0xFF,sizeof(bootloader.upgrade_info));
 80f488c:	2228      	movs	r2, #40	@ 0x28
 80f488e:	21ff      	movs	r1, #255	@ 0xff
 80f4890:	4809      	ldr	r0, [pc, #36]	@ (80f48b8 <clear_info+0x5c>)
 80f4892:	f005 fac2 	bl	80f9e1a <memset>
        bootloader.config->mem_write_func( bootloader.sections.upgrade_info.address, (uint8_t*)&bootloader.upgrade_info,sizeof(bootloader.upgrade_info));
 80f4896:	4b07      	ldr	r3, [pc, #28]	@ (80f48b4 <clear_info+0x58>)
 80f4898:	681b      	ldr	r3, [r3, #0]
 80f489a:	69db      	ldr	r3, [r3, #28]
 80f489c:	4a05      	ldr	r2, [pc, #20]	@ (80f48b4 <clear_info+0x58>)
 80f489e:	6950      	ldr	r0, [r2, #20]
 80f48a0:	2228      	movs	r2, #40	@ 0x28
 80f48a2:	4905      	ldr	r1, [pc, #20]	@ (80f48b8 <clear_info+0x5c>)
 80f48a4:	4798      	blx	r3
        bootloader.info_cleared=true;
 80f48a6:	4b03      	ldr	r3, [pc, #12]	@ (80f48b4 <clear_info+0x58>)
 80f48a8:	2201      	movs	r2, #1
 80f48aa:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    }
}
 80f48ae:	bf00      	nop
 80f48b0:	bd80      	pop	{r7, pc}
 80f48b2:	bf00      	nop
 80f48b4:	20002720 	.word	0x20002720
 80f48b8:	2000285c 	.word	0x2000285c

080f48bc <data_comm_write_func>:

static data_comm_rx_write_result_t data_comm_write_func(uint32_t address, const uint8_t* data, uint32_t size, bool last, void*context) {
 80f48bc:	b580      	push	{r7, lr}
 80f48be:	b090      	sub	sp, #64	@ 0x40
 80f48c0:	af00      	add	r7, sp, #0
 80f48c2:	60f8      	str	r0, [r7, #12]
 80f48c4:	60b9      	str	r1, [r7, #8]
 80f48c6:	607a      	str	r2, [r7, #4]
 80f48c8:	70fb      	strb	r3, [r7, #3]

	(void)context;

    uint32_t index=0;
 80f48ca:	2300      	movs	r3, #0
 80f48cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t remaining=size;
 80f48ce:	687b      	ldr	r3, [r7, #4]
 80f48d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (address<sizeof(fw_header_t)) {
 80f48d2:	68fb      	ldr	r3, [r7, #12]
 80f48d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80f48d6:	f200 80c6 	bhi.w	80f4a66 <data_comm_write_func+0x1aa>
        LOG_I("%s Doing header: %d\n",__FUNCTION__, address);

        //Doing still header
        uint32_t to_copy=size;
 80f48da:	687b      	ldr	r3, [r7, #4]
 80f48dc:	637b      	str	r3, [r7, #52]	@ 0x34
        bool header_complete=false;
 80f48de:	2300      	movs	r3, #0
 80f48e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if ((address+to_copy)>=sizeof(fw_header_t)) {
 80f48e4:	68fa      	ldr	r2, [r7, #12]
 80f48e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f48e8:	4413      	add	r3, r2
 80f48ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80f48ec:	d90a      	bls.n	80f4904 <data_comm_write_func+0x48>
            //part is for header and part is outside => the header is complete
            header_complete=true;
 80f48ee:	2301      	movs	r3, #1
 80f48f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            bootloader.btea_index=0;
 80f48f4:	4b94      	ldr	r3, [pc, #592]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f48f6:	2200      	movs	r2, #0
 80f48f8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
            LOG_I("%s header complete: %d\n",__FUNCTION__, address+to_copy);

            //copy only the part of the header
            to_copy = sizeof(fw_header_t)-address;
 80f48fc:	68fb      	ldr	r3, [r7, #12]
 80f48fe:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80f4902:	637b      	str	r3, [r7, #52]	@ 0x34
        }


        uint8_t* ptr = (uint8_t*)&bootloader.header;
 80f4904:	4b91      	ldr	r3, [pc, #580]	@ (80f4b4c <data_comm_write_func+0x290>)
 80f4906:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy(&ptr[address],data,to_copy);
 80f4908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80f490a:	68fb      	ldr	r3, [r7, #12]
 80f490c:	4413      	add	r3, r2
 80f490e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80f4910:	68b9      	ldr	r1, [r7, #8]
 80f4912:	4618      	mov	r0, r3
 80f4914:	f005 fafd 	bl	80f9f12 <memcpy>
        index+=to_copy;
 80f4918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80f491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f491c:	4413      	add	r3, r2
 80f491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        remaining-=to_copy;
 80f4920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80f4922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f4924:	1ad3      	subs	r3, r2, r3
 80f4926:	63bb      	str	r3, [r7, #56]	@ 0x38

        if (header_complete) {
 80f4928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80f492c:	2b00      	cmp	r3, #0
 80f492e:	f000 809a 	beq.w	80f4a66 <data_comm_write_func+0x1aa>

            //header is complete
            int verified = fw_verification_process_header(&bootloader.header,bootloader.config->public_key);
 80f4932:	4b85      	ldr	r3, [pc, #532]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4934:	681b      	ldr	r3, [r3, #0]
 80f4936:	681b      	ldr	r3, [r3, #0]
 80f4938:	4619      	mov	r1, r3
 80f493a:	4884      	ldr	r0, [pc, #528]	@ (80f4b4c <data_comm_write_func+0x290>)
 80f493c:	f000 fd62 	bl	80f5404 <fw_verification_process_header>
 80f4940:	6238      	str	r0, [r7, #32]
            if (verified!=0) {
 80f4942:	6a3b      	ldr	r3, [r7, #32]
 80f4944:	2b00      	cmp	r3, #0
 80f4946:	d001      	beq.n	80f494c <data_comm_write_func+0x90>
                LOG_E("Header verification failed");
                return DATA_COMM_RX_WRITE_ERROR_REPEAT_FROM_BEGGINING;
 80f4948:	2302      	movs	r3, #2
 80f494a:	e0f8      	b.n	80f4b3e <data_comm_write_func+0x282>
            }
            if (bootloader.header.fw_info.fw_size > bootloader.sections.upgrade.size) {
 80f494c:	4b7e      	ldr	r3, [pc, #504]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f494e:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 80f4952:	4b7d      	ldr	r3, [pc, #500]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4954:	6a1b      	ldr	r3, [r3, #32]
 80f4956:	429a      	cmp	r2, r3
 80f4958:	f240 8085 	bls.w	80f4a66 <data_comm_write_func+0x1aa>
                LOG_E("FW size is too big");
                return DATA_COMM_RX_WRITE_ERROR_ABORT;
 80f495c:	2303      	movs	r3, #3
 80f495e:	e0ee      	b.n	80f4b3e <data_comm_write_func+0x282>
    LOG_I("%s Processing rest: %d\n",__FUNCTION__, remaining);

    while (remaining>0) {


        uint32_t to_copy=remaining;
 80f4960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f4962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        //unencrypt and copy and calcu
        uint32_t btea_remaining = to_copy;
 80f4964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f4966:	62bb      	str	r3, [r7, #40]	@ 0x28
        LOG_I("%s Btea remaining %d\n",__FUNCTION__, btea_remaining);

        while(btea_remaining>0) {
 80f4968:	e072      	b.n	80f4a50 <data_comm_write_func+0x194>
            LOG_I("%s Btea remaining %d\n",__FUNCTION__, btea_remaining);

            uint32_t btea_to_copy = btea_remaining;
 80f496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f496c:	617b      	str	r3, [r7, #20]
            if ((bootloader.btea_index + btea_to_copy) > bootloader.config->btea_chunk_size) {
 80f496e:	4b76      	ldr	r3, [pc, #472]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4970:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80f4974:	697b      	ldr	r3, [r7, #20]
 80f4976:	441a      	add	r2, r3
 80f4978:	4b73      	ldr	r3, [pc, #460]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f497a:	681b      	ldr	r3, [r3, #0]
 80f497c:	691b      	ldr	r3, [r3, #16]
 80f497e:	429a      	cmp	r2, r3
 80f4980:	d907      	bls.n	80f4992 <data_comm_write_func+0xd6>
                //copy this much will fill more than the btea chunk, so copy only to fill it exactly
                to_copy = bootloader.config->btea_chunk_size - bootloader.btea_index;
 80f4982:	4b71      	ldr	r3, [pc, #452]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4984:	681b      	ldr	r3, [r3, #0]
 80f4986:	691a      	ldr	r2, [r3, #16]
 80f4988:	4b6f      	ldr	r3, [pc, #444]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f498a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f498e:	1ad3      	subs	r3, r2, r3
 80f4990:	62fb      	str	r3, [r7, #44]	@ 0x2c

            }
            //copy the data to the btea buffer
            LOG_I("%s Copy %d to btea buffer[%d]\n",__FUNCTION__, index,bootloader.btea_index);

            memcpy(&bootloader.config->btea_buffer[bootloader.btea_index],&data[index],btea_to_copy);
 80f4992:	4b6d      	ldr	r3, [pc, #436]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4994:	681b      	ldr	r3, [r3, #0]
 80f4996:	68da      	ldr	r2, [r3, #12]
 80f4998:	4b6b      	ldr	r3, [pc, #428]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f499a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f499e:	18d0      	adds	r0, r2, r3
 80f49a0:	68ba      	ldr	r2, [r7, #8]
 80f49a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f49a4:	4413      	add	r3, r2
 80f49a6:	697a      	ldr	r2, [r7, #20]
 80f49a8:	4619      	mov	r1, r3
 80f49aa:	f005 fab2 	bl	80f9f12 <memcpy>
            //now there are less remaining
            btea_remaining-=btea_to_copy;
 80f49ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80f49b0:	697b      	ldr	r3, [r7, #20]
 80f49b2:	1ad3      	subs	r3, r2, r3
 80f49b4:	62bb      	str	r3, [r7, #40]	@ 0x28
            //update the btea pointer
            bootloader.btea_index+=btea_to_copy;
 80f49b6:	4b64      	ldr	r3, [pc, #400]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49b8:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80f49bc:	697b      	ldr	r3, [r7, #20]
 80f49be:	4413      	add	r3, r2
 80f49c0:	4a61      	ldr	r2, [pc, #388]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49c2:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
            //check if the btea buffer is full
            if (bootloader.btea_index==bootloader.config->btea_chunk_size) {
 80f49c6:	4b60      	ldr	r3, [pc, #384]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49c8:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80f49cc:	4b5e      	ldr	r3, [pc, #376]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49ce:	681b      	ldr	r3, [r3, #0]
 80f49d0:	691b      	ldr	r3, [r3, #16]
 80f49d2:	429a      	cmp	r2, r3
 80f49d4:	d13c      	bne.n	80f4a50 <data_comm_write_func+0x194>
                //buffer full
                clear_info();
 80f49d6:	f7ff ff41 	bl	80f485c <clear_info>
                //Decrypt chunk
                decrypt_chunk((uint32_t *)bootloader.config->btea_buffer,bootloader.config->btea_chunk_size,bootloader.config->btea_key);
 80f49da:	4b5b      	ldr	r3, [pc, #364]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49dc:	681b      	ldr	r3, [r3, #0]
 80f49de:	68d8      	ldr	r0, [r3, #12]
 80f49e0:	4b59      	ldr	r3, [pc, #356]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49e2:	681b      	ldr	r3, [r3, #0]
 80f49e4:	691b      	ldr	r3, [r3, #16]
 80f49e6:	4619      	mov	r1, r3
 80f49e8:	4b57      	ldr	r3, [pc, #348]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49ea:	681b      	ldr	r3, [r3, #0]
 80f49ec:	689b      	ldr	r3, [r3, #8]
 80f49ee:	461a      	mov	r2, r3
 80f49f0:	f7ff ff20 	bl	80f4834 <decrypt_chunk>
                //Write the chunk to the flash
                LOG_I("%s Writing decrypted buffer to %08x %d\n",__FUNCTION__, bootloader.config->upgrade_start_address + bootloader.fw_index);

                int result = bootloader.config->mem_write_func( bootloader.sections.upgrade.address + bootloader.fw_index, bootloader.config->btea_buffer, bootloader.config->btea_chunk_size);
 80f49f4:	4b54      	ldr	r3, [pc, #336]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49f6:	681b      	ldr	r3, [r3, #0]
 80f49f8:	69db      	ldr	r3, [r3, #28]
 80f49fa:	4a53      	ldr	r2, [pc, #332]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f49fc:	69d1      	ldr	r1, [r2, #28]
 80f49fe:	4a52      	ldr	r2, [pc, #328]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a00:	f8d2 2268 	ldr.w	r2, [r2, #616]	@ 0x268
 80f4a04:	1888      	adds	r0, r1, r2
 80f4a06:	4a50      	ldr	r2, [pc, #320]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a08:	6812      	ldr	r2, [r2, #0]
 80f4a0a:	68d1      	ldr	r1, [r2, #12]
 80f4a0c:	4a4e      	ldr	r2, [pc, #312]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a0e:	6812      	ldr	r2, [r2, #0]
 80f4a10:	6912      	ldr	r2, [r2, #16]
 80f4a12:	4798      	blx	r3
 80f4a14:	6138      	str	r0, [r7, #16]
                if (result!=0) {
 80f4a16:	693b      	ldr	r3, [r7, #16]
 80f4a18:	2b00      	cmp	r3, #0
 80f4a1a:	d001      	beq.n	80f4a20 <data_comm_write_func+0x164>
                    return DATA_COMM_RX_WRITE_ERROR_REPEAT_FROM_BEGGINING;
 80f4a1c:	2302      	movs	r3, #2
 80f4a1e:	e08e      	b.n	80f4b3e <data_comm_write_func+0x282>
                }
                //Update the pointer of the firmware
                bootloader.fw_index+=bootloader.config->btea_chunk_size;
 80f4a20:	4b49      	ldr	r3, [pc, #292]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a22:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80f4a26:	4b48      	ldr	r3, [pc, #288]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a28:	681b      	ldr	r3, [r3, #0]
 80f4a2a:	691b      	ldr	r3, [r3, #16]
 80f4a2c:	4413      	add	r3, r2
 80f4a2e:	4a46      	ldr	r2, [pc, #280]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a30:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
                //reset the pointer to the btea buffer
                bootloader.btea_index=0;
 80f4a34:	4b44      	ldr	r3, [pc, #272]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a36:	2200      	movs	r2, #0
 80f4a38:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
                //clear the btea buffer to be ready
                memset(bootloader.config->btea_buffer,0xFF,bootloader.config->btea_chunk_size);
 80f4a3c:	4b42      	ldr	r3, [pc, #264]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a3e:	681b      	ldr	r3, [r3, #0]
 80f4a40:	68d8      	ldr	r0, [r3, #12]
 80f4a42:	4b41      	ldr	r3, [pc, #260]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a44:	681b      	ldr	r3, [r3, #0]
 80f4a46:	691b      	ldr	r3, [r3, #16]
 80f4a48:	461a      	mov	r2, r3
 80f4a4a:	21ff      	movs	r1, #255	@ 0xff
 80f4a4c:	f005 f9e5 	bl	80f9e1a <memset>
        while(btea_remaining>0) {
 80f4a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f4a52:	2b00      	cmp	r3, #0
 80f4a54:	d189      	bne.n	80f496a <data_comm_write_func+0xae>
            }
        }
        index+=to_copy;
 80f4a56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80f4a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f4a5a:	4413      	add	r3, r2
 80f4a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        remaining-=to_copy;
 80f4a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80f4a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f4a62:	1ad3      	subs	r3, r2, r3
 80f4a64:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (remaining>0) {
 80f4a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f4a68:	2b00      	cmp	r3, #0
 80f4a6a:	f47f af79 	bne.w	80f4960 <data_comm_write_func+0xa4>
    }
    //If it's the last message, then decrypt the chunk and write
    if (last && bootloader.btea_index>0) {
 80f4a6e:	78fb      	ldrb	r3, [r7, #3]
 80f4a70:	2b00      	cmp	r3, #0
 80f4a72:	d063      	beq.n	80f4b3c <data_comm_write_func+0x280>
 80f4a74:	4b34      	ldr	r3, [pc, #208]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a76:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f4a7a:	2b00      	cmp	r3, #0
 80f4a7c:	d05e      	beq.n	80f4b3c <data_comm_write_func+0x280>
        clear_info();
 80f4a7e:	f7ff feed 	bl	80f485c <clear_info>
        decrypt_chunk((uint32_t *)bootloader.config->btea_buffer,bootloader.btea_index,bootloader.config->btea_key);
 80f4a82:	4b31      	ldr	r3, [pc, #196]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a84:	681b      	ldr	r3, [r3, #0]
 80f4a86:	68d8      	ldr	r0, [r3, #12]
 80f4a88:	4b2f      	ldr	r3, [pc, #188]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a8a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f4a8e:	4619      	mov	r1, r3
 80f4a90:	4b2d      	ldr	r3, [pc, #180]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a92:	681b      	ldr	r3, [r3, #0]
 80f4a94:	689b      	ldr	r3, [r3, #8]
 80f4a96:	461a      	mov	r2, r3
 80f4a98:	f7ff fecc 	bl	80f4834 <decrypt_chunk>
        uint32_t padding = bootloader.config->padding.num_bytes - (bootloader.btea_index % bootloader.config->padding.num_bytes);
 80f4a9c:	4b2a      	ldr	r3, [pc, #168]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4a9e:	681b      	ldr	r3, [r3, #0]
 80f4aa0:	6999      	ldr	r1, [r3, #24]
 80f4aa2:	4b29      	ldr	r3, [pc, #164]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4aa4:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f4aa8:	4a27      	ldr	r2, [pc, #156]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4aaa:	6812      	ldr	r2, [r2, #0]
 80f4aac:	6992      	ldr	r2, [r2, #24]
 80f4aae:	fbb3 f0f2 	udiv	r0, r3, r2
 80f4ab2:	fb00 f202 	mul.w	r2, r0, r2
 80f4ab6:	1a9b      	subs	r3, r3, r2
 80f4ab8:	1acb      	subs	r3, r1, r3
 80f4aba:	61fb      	str	r3, [r7, #28]

        if (padding!=0) {
 80f4abc:	69fb      	ldr	r3, [r7, #28]
 80f4abe:	2b00      	cmp	r3, #0
 80f4ac0:	d015      	beq.n	80f4aee <data_comm_write_func+0x232>
            memset(&bootloader.config->btea_buffer[bootloader.btea_index], bootloader.config->padding.padding_byte,padding);
 80f4ac2:	4b21      	ldr	r3, [pc, #132]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4ac4:	681b      	ldr	r3, [r3, #0]
 80f4ac6:	68da      	ldr	r2, [r3, #12]
 80f4ac8:	4b1f      	ldr	r3, [pc, #124]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4aca:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f4ace:	18d0      	adds	r0, r2, r3
 80f4ad0:	4b1d      	ldr	r3, [pc, #116]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4ad2:	681b      	ldr	r3, [r3, #0]
 80f4ad4:	7d1b      	ldrb	r3, [r3, #20]
 80f4ad6:	69fa      	ldr	r2, [r7, #28]
 80f4ad8:	4619      	mov	r1, r3
 80f4ada:	f005 f99e 	bl	80f9e1a <memset>
            bootloader.btea_index+=padding;
 80f4ade:	4b1a      	ldr	r3, [pc, #104]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4ae0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80f4ae4:	69fb      	ldr	r3, [r7, #28]
 80f4ae6:	4413      	add	r3, r2
 80f4ae8:	4a17      	ldr	r2, [pc, #92]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4aea:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
        }
        bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4aee:	4a16      	ldr	r2, [pc, #88]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4af0:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4af4:	f023 030c 	bic.w	r3, r3, #12
 80f4af8:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101

        int result = bootloader.config->mem_write_func( bootloader.sections.upgrade.address + bootloader.fw_index, bootloader.config->btea_buffer, bootloader.btea_index);
 80f4afc:	4b12      	ldr	r3, [pc, #72]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4afe:	681b      	ldr	r3, [r3, #0]
 80f4b00:	69db      	ldr	r3, [r3, #28]
 80f4b02:	4a11      	ldr	r2, [pc, #68]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b04:	69d1      	ldr	r1, [r2, #28]
 80f4b06:	4a10      	ldr	r2, [pc, #64]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b08:	f8d2 2268 	ldr.w	r2, [r2, #616]	@ 0x268
 80f4b0c:	1888      	adds	r0, r1, r2
 80f4b0e:	4a0e      	ldr	r2, [pc, #56]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b10:	6812      	ldr	r2, [r2, #0]
 80f4b12:	68d1      	ldr	r1, [r2, #12]
 80f4b14:	4a0c      	ldr	r2, [pc, #48]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b16:	f8d2 226c 	ldr.w	r2, [r2, #620]	@ 0x26c
 80f4b1a:	4798      	blx	r3
 80f4b1c:	61b8      	str	r0, [r7, #24]
        if (result!=0) {
 80f4b1e:	69bb      	ldr	r3, [r7, #24]
 80f4b20:	2b00      	cmp	r3, #0
 80f4b22:	d001      	beq.n	80f4b28 <data_comm_write_func+0x26c>
            return DATA_COMM_RX_WRITE_ERROR_ABORT;
 80f4b24:	2303      	movs	r3, #3
 80f4b26:	e00a      	b.n	80f4b3e <data_comm_write_func+0x282>
        }
        //Set the app to not found and not verified since we have just write to it


        bootloader.fw_index+=bootloader.btea_index;
 80f4b28:	4b07      	ldr	r3, [pc, #28]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b2a:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80f4b2e:	4b06      	ldr	r3, [pc, #24]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b30:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80f4b34:	4413      	add	r3, r2
 80f4b36:	4a04      	ldr	r2, [pc, #16]	@ (80f4b48 <data_comm_write_func+0x28c>)
 80f4b38:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
    }

    return DATA_COMM_RX_WRITE_SUCCESS;
 80f4b3c:	2300      	movs	r3, #0



}
 80f4b3e:	4618      	mov	r0, r3
 80f4b40:	3740      	adds	r7, #64	@ 0x40
 80f4b42:	46bd      	mov	sp, r7
 80f4b44:	bd80      	pop	{r7, pc}
 80f4b46:	bf00      	nop
 80f4b48:	20002720 	.word	0x20002720
 80f4b4c:	20002884 	.word	0x20002884

080f4b50 <data_comm_finish_callback>:
static data_comm_rx_finish_result_t data_comm_finish_callback(uint8_t status, uint8_t* finish_error, void*context) {
 80f4b50:	b5b0      	push	{r4, r5, r7, lr}
 80f4b52:	b08a      	sub	sp, #40	@ 0x28
 80f4b54:	af00      	add	r7, sp, #0
 80f4b56:	4603      	mov	r3, r0
 80f4b58:	60b9      	str	r1, [r7, #8]
 80f4b5a:	607a      	str	r2, [r7, #4]
 80f4b5c:	73fb      	strb	r3, [r7, #15]

	(void)context;
    if (status!=DATA_COMM_STATUS_OK) {
 80f4b5e:	7bfb      	ldrb	r3, [r7, #15]
 80f4b60:	2b00      	cmp	r3, #0
 80f4b62:	d007      	beq.n	80f4b74 <data_comm_finish_callback+0x24>
        //There was an error
        if (finish_error) {
 80f4b64:	68bb      	ldr	r3, [r7, #8]
 80f4b66:	2b00      	cmp	r3, #0
 80f4b68:	d002      	beq.n	80f4b70 <data_comm_finish_callback+0x20>
            *finish_error=status;
 80f4b6a:	68bb      	ldr	r3, [r7, #8]
 80f4b6c:	7bfa      	ldrb	r2, [r7, #15]
 80f4b6e:	701a      	strb	r2, [r3, #0]
        }
        return DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f4b70:	2302      	movs	r3, #2
 80f4b72:	e0b6      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
    }


    int result =  fw_verification_process_init(&bootloader.fw, &bootloader.header, bootloader.config->public_key);
 80f4b74:	4b5d      	ldr	r3, [pc, #372]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4b76:	681b      	ldr	r3, [r3, #0]
 80f4b78:	681b      	ldr	r3, [r3, #0]
 80f4b7a:	461a      	mov	r2, r3
 80f4b7c:	495c      	ldr	r1, [pc, #368]	@ (80f4cf0 <data_comm_finish_callback+0x1a0>)
 80f4b7e:	485d      	ldr	r0, [pc, #372]	@ (80f4cf4 <data_comm_finish_callback+0x1a4>)
 80f4b80:	f000 fc7b 	bl	80f547a <fw_verification_process_init>
 80f4b84:	61b8      	str	r0, [r7, #24]
    if (result!=0) {
 80f4b86:	69bb      	ldr	r3, [r7, #24]
 80f4b88:	2b00      	cmp	r3, #0
 80f4b8a:	d007      	beq.n	80f4b9c <data_comm_finish_callback+0x4c>
        if (finish_error) {
 80f4b8c:	68bb      	ldr	r3, [r7, #8]
 80f4b8e:	2b00      	cmp	r3, #0
 80f4b90:	d002      	beq.n	80f4b98 <data_comm_finish_callback+0x48>
            *finish_error=BOOTLOADER_ERROR_HEADER_VERIFICATION_FAILED;
 80f4b92:	68bb      	ldr	r3, [r7, #8]
 80f4b94:	2281      	movs	r2, #129	@ 0x81
 80f4b96:	701a      	strb	r2, [r3, #0]
        }

        //Error, probably header is wrong
        return DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f4b98:	2302      	movs	r3, #2
 80f4b9a:	e0a2      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
    }



    /* Get CRC */
    uint32_t output_crc = bootloader.config->crc32_func(bootloader.sections.upgrade.address,
 80f4b9c:	4b53      	ldr	r3, [pc, #332]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4b9e:	681b      	ldr	r3, [r3, #0]
 80f4ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f4ba2:	4a52      	ldr	r2, [pc, #328]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4ba4:	69d2      	ldr	r2, [r2, #28]
 80f4ba6:	4951      	ldr	r1, [pc, #324]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4ba8:	f8d1 1184 	ldr.w	r1, [r1, #388]	@ 0x184
 80f4bac:	4610      	mov	r0, r2
 80f4bae:	4798      	blx	r3
 80f4bb0:	6178      	str	r0, [r7, #20]
                                                        bootloader.header.fw_info.fw_size);

    if (output_crc!=bootloader.header.fw_info.fw_crc) {
 80f4bb2:	4b4e      	ldr	r3, [pc, #312]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bb4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80f4bb8:	697a      	ldr	r2, [r7, #20]
 80f4bba:	429a      	cmp	r2, r3
 80f4bbc:	d007      	beq.n	80f4bce <data_comm_finish_callback+0x7e>
        //CRC Fail
        if (finish_error) {
 80f4bbe:	68bb      	ldr	r3, [r7, #8]
 80f4bc0:	2b00      	cmp	r3, #0
 80f4bc2:	d002      	beq.n	80f4bca <data_comm_finish_callback+0x7a>
            *finish_error=BOOTLOADER_ERROR_CRC_MISMATCH;
 80f4bc4:	68bb      	ldr	r3, [r7, #8]
 80f4bc6:	2282      	movs	r2, #130	@ 0x82
 80f4bc8:	701a      	strb	r2, [r3, #0]
        }
        LOG_E("%s CRC mismatch %08x != %08x", __FUNCTION__,output_crc,bootloader.header.fw_info.fw_crc);
        return DATA_COMM_RX_FINISH_ERROR_RETRY;
 80f4bca:	2301      	movs	r3, #1
 80f4bcc:	e089      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
    }

    uint32_t remaining = bootloader.header.fw_info.fw_size;
 80f4bce:	4b47      	ldr	r3, [pc, #284]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bd0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80f4bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t address = bootloader.sections.upgrade.address;
 80f4bd6:	4b45      	ldr	r3, [pc, #276]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bd8:	69db      	ldr	r3, [r3, #28]
 80f4bda:	623b      	str	r3, [r7, #32]
    while (remaining>0) {
 80f4bdc:	e077      	b.n	80f4cce <data_comm_finish_callback+0x17e>
        uint32_t to_read = remaining;
 80f4bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f4be0:	61fb      	str	r3, [r7, #28]
        if (to_read>=bootloader.config->btea_chunk_size) {
 80f4be2:	4b42      	ldr	r3, [pc, #264]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4be4:	681b      	ldr	r3, [r3, #0]
 80f4be6:	691b      	ldr	r3, [r3, #16]
 80f4be8:	69fa      	ldr	r2, [r7, #28]
 80f4bea:	429a      	cmp	r2, r3
 80f4bec:	d303      	bcc.n	80f4bf6 <data_comm_finish_callback+0xa6>
            to_read=bootloader.config->btea_chunk_size;
 80f4bee:	4b3f      	ldr	r3, [pc, #252]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bf0:	681b      	ldr	r3, [r3, #0]
 80f4bf2:	691b      	ldr	r3, [r3, #16]
 80f4bf4:	61fb      	str	r3, [r7, #28]
        }
        result = bootloader.config->mem_read_func(address, bootloader.config->btea_buffer, to_read);
 80f4bf6:	4b3d      	ldr	r3, [pc, #244]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bf8:	681b      	ldr	r3, [r3, #0]
 80f4bfa:	6a1b      	ldr	r3, [r3, #32]
 80f4bfc:	4a3b      	ldr	r2, [pc, #236]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4bfe:	6812      	ldr	r2, [r2, #0]
 80f4c00:	68d1      	ldr	r1, [r2, #12]
 80f4c02:	69fa      	ldr	r2, [r7, #28]
 80f4c04:	6a38      	ldr	r0, [r7, #32]
 80f4c06:	4798      	blx	r3
 80f4c08:	61b8      	str	r0, [r7, #24]
        if (result!=0) {
 80f4c0a:	69bb      	ldr	r3, [r7, #24]
 80f4c0c:	2b00      	cmp	r3, #0
 80f4c0e:	d007      	beq.n	80f4c20 <data_comm_finish_callback+0xd0>
            //Error reading file
            if (finish_error) {
 80f4c10:	68bb      	ldr	r3, [r7, #8]
 80f4c12:	2b00      	cmp	r3, #0
 80f4c14:	d002      	beq.n	80f4c1c <data_comm_finish_callback+0xcc>
                *finish_error=BOOTLOADER_ERROR_READ_ERROR;
 80f4c16:	68bb      	ldr	r3, [r7, #8]
 80f4c18:	2284      	movs	r2, #132	@ 0x84
 80f4c1a:	701a      	strb	r2, [r3, #0]
            }
            return DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f4c1c:	2302      	movs	r3, #2
 80f4c1e:	e060      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
        }
        result = fw_verification_process_binary(&bootloader.fw, bootloader.config->btea_buffer, to_read);
 80f4c20:	4b32      	ldr	r3, [pc, #200]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c22:	681b      	ldr	r3, [r3, #0]
 80f4c24:	68db      	ldr	r3, [r3, #12]
 80f4c26:	69fa      	ldr	r2, [r7, #28]
 80f4c28:	4619      	mov	r1, r3
 80f4c2a:	4832      	ldr	r0, [pc, #200]	@ (80f4cf4 <data_comm_finish_callback+0x1a4>)
 80f4c2c:	f000 fc4e 	bl	80f54cc <fw_verification_process_binary>
 80f4c30:	61b8      	str	r0, [r7, #24]
        remaining-=to_read;
 80f4c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80f4c34:	69fb      	ldr	r3, [r7, #28]
 80f4c36:	1ad3      	subs	r3, r2, r3
 80f4c38:	627b      	str	r3, [r7, #36]	@ 0x24
        address+=to_read;
 80f4c3a:	6a3a      	ldr	r2, [r7, #32]
 80f4c3c:	69fb      	ldr	r3, [r7, #28]
 80f4c3e:	4413      	add	r3, r2
 80f4c40:	623b      	str	r3, [r7, #32]

        if (result<0) {
 80f4c42:	69bb      	ldr	r3, [r7, #24]
 80f4c44:	2b00      	cmp	r3, #0
 80f4c46:	da07      	bge.n	80f4c58 <data_comm_finish_callback+0x108>
            if (finish_error) {
 80f4c48:	68bb      	ldr	r3, [r7, #8]
 80f4c4a:	2b00      	cmp	r3, #0
 80f4c4c:	d002      	beq.n	80f4c54 <data_comm_finish_callback+0x104>
                *finish_error=BOOTLOADER_ERROR_VERIFICATION_FAILED;
 80f4c4e:	68bb      	ldr	r3, [r7, #8]
 80f4c50:	2283      	movs	r2, #131	@ 0x83
 80f4c52:	701a      	strb	r2, [r3, #0]
            }
            return DATA_COMM_RX_FINISH_ERROR_RETRY;
 80f4c54:	2301      	movs	r3, #1
 80f4c56:	e044      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
        }
        if (result >0) {
 80f4c58:	69bb      	ldr	r3, [r7, #24]
 80f4c5a:	2b00      	cmp	r3, #0
 80f4c5c:	dd37      	ble.n	80f4cce <data_comm_finish_callback+0x17e>
            bootloader.upgrade_info.magic=bootloader.config->magic;
 80f4c5e:	4b23      	ldr	r3, [pc, #140]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c60:	681b      	ldr	r3, [r3, #0]
 80f4c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80f4c64:	4a21      	ldr	r2, [pc, #132]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c66:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
            bootloader.upgrade_info.info = bootloader.header.fw_info;
 80f4c6a:	4a20      	ldr	r2, [pc, #128]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c6c:	4b1f      	ldr	r3, [pc, #124]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c6e:	f502 74a0 	add.w	r4, r2, #320	@ 0x140
 80f4c72:	f503 75c2 	add.w	r5, r3, #388	@ 0x184
 80f4c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80f4c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80f4c7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80f4c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            bootloader.upgrade_info.crc = calc_crc32((uint8_t*)&bootloader.upgrade_info,sizeof(bootloader.upgrade_info)-sizeof(bootloader.upgrade_info.crc),0xDEADBEEF,0);
 80f4c82:	2300      	movs	r3, #0
 80f4c84:	4a1c      	ldr	r2, [pc, #112]	@ (80f4cf8 <data_comm_finish_callback+0x1a8>)
 80f4c86:	2124      	movs	r1, #36	@ 0x24
 80f4c88:	481c      	ldr	r0, [pc, #112]	@ (80f4cfc <data_comm_finish_callback+0x1ac>)
 80f4c8a:	f003 ff1e 	bl	80f8aca <calc_crc32>
 80f4c8e:	4603      	mov	r3, r0
 80f4c90:	4a16      	ldr	r2, [pc, #88]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c92:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
            result = bootloader.config->mem_write_func( bootloader.sections.upgrade_info.address, (uint8_t *)&bootloader.upgrade_info,sizeof(bootloader.upgrade_info));
 80f4c96:	4b15      	ldr	r3, [pc, #84]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c98:	681b      	ldr	r3, [r3, #0]
 80f4c9a:	69db      	ldr	r3, [r3, #28]
 80f4c9c:	4a13      	ldr	r2, [pc, #76]	@ (80f4cec <data_comm_finish_callback+0x19c>)
 80f4c9e:	6950      	ldr	r0, [r2, #20]
 80f4ca0:	2228      	movs	r2, #40	@ 0x28
 80f4ca2:	4916      	ldr	r1, [pc, #88]	@ (80f4cfc <data_comm_finish_callback+0x1ac>)
 80f4ca4:	4798      	blx	r3
 80f4ca6:	61b8      	str	r0, [r7, #24]
            if (result!=0) {
 80f4ca8:	69bb      	ldr	r3, [r7, #24]
 80f4caa:	2b00      	cmp	r3, #0
 80f4cac:	d007      	beq.n	80f4cbe <data_comm_finish_callback+0x16e>
                if (finish_error) {
 80f4cae:	68bb      	ldr	r3, [r7, #8]
 80f4cb0:	2b00      	cmp	r3, #0
 80f4cb2:	d002      	beq.n	80f4cba <data_comm_finish_callback+0x16a>
                    *finish_error=BOOTLOADER_ERROR_WRITE_ERROR;
 80f4cb4:	68bb      	ldr	r3, [r7, #8]
 80f4cb6:	2284      	movs	r2, #132	@ 0x84
 80f4cb8:	701a      	strb	r2, [r3, #0]
                }
                return DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f4cba:	2302      	movs	r3, #2
 80f4cbc:	e011      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
            }
            if (finish_error) {
 80f4cbe:	68bb      	ldr	r3, [r7, #8]
 80f4cc0:	2b00      	cmp	r3, #0
 80f4cc2:	d002      	beq.n	80f4cca <data_comm_finish_callback+0x17a>
                *finish_error=BOOTLOADER_STATUS_OK;
 80f4cc4:	68bb      	ldr	r3, [r7, #8]
 80f4cc6:	2200      	movs	r2, #0
 80f4cc8:	701a      	strb	r2, [r3, #0]
            }
            return DATA_COMM_RX_FINISH_SUCCESS;
 80f4cca:	2300      	movs	r3, #0
 80f4ccc:	e009      	b.n	80f4ce2 <data_comm_finish_callback+0x192>
    while (remaining>0) {
 80f4cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f4cd0:	2b00      	cmp	r3, #0
 80f4cd2:	d184      	bne.n	80f4bde <data_comm_finish_callback+0x8e>
        }
    }

    if (finish_error) {
 80f4cd4:	68bb      	ldr	r3, [r7, #8]
 80f4cd6:	2b00      	cmp	r3, #0
 80f4cd8:	d002      	beq.n	80f4ce0 <data_comm_finish_callback+0x190>
        *finish_error=BOOTLOADER_ERROR_UNKNOWN;
 80f4cda:	68bb      	ldr	r3, [r7, #8]
 80f4cdc:	22ff      	movs	r2, #255	@ 0xff
 80f4cde:	701a      	strb	r2, [r3, #0]
    }
    return DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f4ce0:	2302      	movs	r3, #2
}
 80f4ce2:	4618      	mov	r0, r3
 80f4ce4:	3728      	adds	r7, #40	@ 0x28
 80f4ce6:	46bd      	mov	sp, r7
 80f4ce8:	bdb0      	pop	{r4, r5, r7, pc}
 80f4cea:	bf00      	nop
 80f4cec:	20002720 	.word	0x20002720
 80f4cf0:	20002884 	.word	0x20002884
 80f4cf4:	20002908 	.word	0x20002908
 80f4cf8:	deadbeef 	.word	0xdeadbeef
 80f4cfc:	2000285c 	.word	0x2000285c

080f4d00 <bootloader_app_status>:

uint8_t bootloader_app_status() {
 80f4d00:	b480      	push	{r7}
 80f4d02:	b083      	sub	sp, #12
 80f4d04:	af00      	add	r7, sp, #0
    uint8_t status=bootloader.state & 0x0F;
 80f4d06:	4b14      	ldr	r3, [pc, #80]	@ (80f4d58 <bootloader_app_status+0x58>)
 80f4d08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80f4d0c:	f003 030f 	and.w	r3, r3, #15
 80f4d10:	71fb      	strb	r3, [r7, #7]
    status |= bootloader.upgrade_status<<4;
 80f4d12:	4b11      	ldr	r3, [pc, #68]	@ (80f4d58 <bootloader_app_status+0x58>)
 80f4d14:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f4d18:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80f4d1c:	b2db      	uxtb	r3, r3
 80f4d1e:	b25b      	sxtb	r3, r3
 80f4d20:	011b      	lsls	r3, r3, #4
 80f4d22:	b25a      	sxtb	r2, r3
 80f4d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f4d28:	4313      	orrs	r3, r2
 80f4d2a:	b25b      	sxtb	r3, r3
 80f4d2c:	71fb      	strb	r3, [r7, #7]
    status |= bootloader.app_status<<6;
 80f4d2e:	4b0a      	ldr	r3, [pc, #40]	@ (80f4d58 <bootloader_app_status+0x58>)
 80f4d30:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f4d34:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80f4d38:	b2db      	uxtb	r3, r3
 80f4d3a:	b25b      	sxtb	r3, r3
 80f4d3c:	019b      	lsls	r3, r3, #6
 80f4d3e:	b25a      	sxtb	r2, r3
 80f4d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f4d44:	4313      	orrs	r3, r2
 80f4d46:	b25b      	sxtb	r3, r3
 80f4d48:	71fb      	strb	r3, [r7, #7]
    return status;
 80f4d4a:	79fb      	ldrb	r3, [r7, #7]
}
 80f4d4c:	4618      	mov	r0, r3
 80f4d4e:	370c      	adds	r7, #12
 80f4d50:	46bd      	mov	sp, r7
 80f4d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f4d56:	4770      	bx	lr
 80f4d58:	20002720 	.word	0x20002720

080f4d5c <bootloader_init>:

void bootloader_init(const bootloader_config_t* bootloader_config, const bootloader_sections_t* sections){
 80f4d5c:	b580      	push	{r7, lr}
 80f4d5e:	b08c      	sub	sp, #48	@ 0x30
 80f4d60:	af00      	add	r7, sp, #0
 80f4d62:	6078      	str	r0, [r7, #4]
 80f4d64:	6039      	str	r1, [r7, #0]
    assert(bootloader_config);
 80f4d66:	687b      	ldr	r3, [r7, #4]
 80f4d68:	2b00      	cmp	r3, #0
 80f4d6a:	d106      	bne.n	80f4d7a <bootloader_init+0x1e>
 80f4d6c:	4b67      	ldr	r3, [pc, #412]	@ (80f4f0c <bootloader_init+0x1b0>)
 80f4d6e:	4a68      	ldr	r2, [pc, #416]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4d70:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 80f4d74:	4867      	ldr	r0, [pc, #412]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4d76:	f004 ff0b 	bl	80f9b90 <__assert_func>
    assert(sections);
 80f4d7a:	683b      	ldr	r3, [r7, #0]
 80f4d7c:	2b00      	cmp	r3, #0
 80f4d7e:	d106      	bne.n	80f4d8e <bootloader_init+0x32>
 80f4d80:	4b65      	ldr	r3, [pc, #404]	@ (80f4f18 <bootloader_init+0x1bc>)
 80f4d82:	4a63      	ldr	r2, [pc, #396]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4d84:	f240 1159 	movw	r1, #345	@ 0x159
 80f4d88:	4862      	ldr	r0, [pc, #392]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4d8a:	f004 ff01 	bl	80f9b90 <__assert_func>
    assert(sections->app_info.size >= sizeof(bootloader_installed_fw_t));
 80f4d8e:	683b      	ldr	r3, [r7, #0]
 80f4d90:	685b      	ldr	r3, [r3, #4]
 80f4d92:	2b27      	cmp	r3, #39	@ 0x27
 80f4d94:	d806      	bhi.n	80f4da4 <bootloader_init+0x48>
 80f4d96:	4b61      	ldr	r3, [pc, #388]	@ (80f4f1c <bootloader_init+0x1c0>)
 80f4d98:	4a5d      	ldr	r2, [pc, #372]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4d9a:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80f4d9e:	485d      	ldr	r0, [pc, #372]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4da0:	f004 fef6 	bl	80f9b90 <__assert_func>
    assert(sections->upgrade_info.size>= sizeof(bootloader_installed_fw_t) /* || sections->upgrade_info.size ==0 */);
 80f4da4:	683b      	ldr	r3, [r7, #0]
 80f4da6:	695b      	ldr	r3, [r3, #20]
 80f4da8:	2b27      	cmp	r3, #39	@ 0x27
 80f4daa:	d806      	bhi.n	80f4dba <bootloader_init+0x5e>
 80f4dac:	4b5c      	ldr	r3, [pc, #368]	@ (80f4f20 <bootloader_init+0x1c4>)
 80f4dae:	4a58      	ldr	r2, [pc, #352]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4db0:	f240 115b 	movw	r1, #347	@ 0x15b
 80f4db4:	4857      	ldr	r0, [pc, #348]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4db6:	f004 feeb 	bl	80f9b90 <__assert_func>
    assert(sections->upgrade_info.size <= sections->app_info.size);
 80f4dba:	683b      	ldr	r3, [r7, #0]
 80f4dbc:	695a      	ldr	r2, [r3, #20]
 80f4dbe:	683b      	ldr	r3, [r7, #0]
 80f4dc0:	685b      	ldr	r3, [r3, #4]
 80f4dc2:	429a      	cmp	r2, r3
 80f4dc4:	d906      	bls.n	80f4dd4 <bootloader_init+0x78>
 80f4dc6:	4b57      	ldr	r3, [pc, #348]	@ (80f4f24 <bootloader_init+0x1c8>)
 80f4dc8:	4a51      	ldr	r2, [pc, #324]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4dca:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80f4dce:	4851      	ldr	r0, [pc, #324]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4dd0:	f004 fede 	bl	80f9b90 <__assert_func>
    assert(sections->upgrade.size <= sections->app.size);
 80f4dd4:	683b      	ldr	r3, [r7, #0]
 80f4dd6:	69da      	ldr	r2, [r3, #28]
 80f4dd8:	683b      	ldr	r3, [r7, #0]
 80f4dda:	68db      	ldr	r3, [r3, #12]
 80f4ddc:	429a      	cmp	r2, r3
 80f4dde:	d906      	bls.n	80f4dee <bootloader_init+0x92>
 80f4de0:	4b51      	ldr	r3, [pc, #324]	@ (80f4f28 <bootloader_init+0x1cc>)
 80f4de2:	4a4b      	ldr	r2, [pc, #300]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4de4:	f240 115d 	movw	r1, #349	@ 0x15d
 80f4de8:	484a      	ldr	r0, [pc, #296]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4dea:	f004 fed1 	bl	80f9b90 <__assert_func>
    assert(sections->app.size >0);
 80f4dee:	683b      	ldr	r3, [r7, #0]
 80f4df0:	68db      	ldr	r3, [r3, #12]
 80f4df2:	2b00      	cmp	r3, #0
 80f4df4:	d106      	bne.n	80f4e04 <bootloader_init+0xa8>
 80f4df6:	4b4d      	ldr	r3, [pc, #308]	@ (80f4f2c <bootloader_init+0x1d0>)
 80f4df8:	4a45      	ldr	r2, [pc, #276]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4dfa:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80f4dfe:	4845      	ldr	r0, [pc, #276]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4e00:	f004 fec6 	bl	80f9b90 <__assert_func>
    assert(sections->upgrade.size >0);
 80f4e04:	683b      	ldr	r3, [r7, #0]
 80f4e06:	69db      	ldr	r3, [r3, #28]
 80f4e08:	2b00      	cmp	r3, #0
 80f4e0a:	d106      	bne.n	80f4e1a <bootloader_init+0xbe>
 80f4e0c:	4b48      	ldr	r3, [pc, #288]	@ (80f4f30 <bootloader_init+0x1d4>)
 80f4e0e:	4a40      	ldr	r2, [pc, #256]	@ (80f4f10 <bootloader_init+0x1b4>)
 80f4e10:	f240 115f 	movw	r1, #351	@ 0x15f
 80f4e14:	483f      	ldr	r0, [pc, #252]	@ (80f4f14 <bootloader_init+0x1b8>)
 80f4e16:	f004 febb 	bl	80f9b90 <__assert_func>

    bootloader.config = bootloader_config;
 80f4e1a:	4a46      	ldr	r2, [pc, #280]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e1c:	687b      	ldr	r3, [r7, #4]
 80f4e1e:	6013      	str	r3, [r2, #0]

    memcpy(&bootloader.sections,sections,sizeof(bootloader_sections_t));
 80f4e20:	2220      	movs	r2, #32
 80f4e22:	6839      	ldr	r1, [r7, #0]
 80f4e24:	4844      	ldr	r0, [pc, #272]	@ (80f4f38 <bootloader_init+0x1dc>)
 80f4e26:	f005 f874 	bl	80f9f12 <memcpy>

    bootloader.state = BOOT_STATE_INIT;
 80f4e2a:	4b42      	ldr	r3, [pc, #264]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e2c:	2200      	movs	r2, #0
 80f4e2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    memset(bootloader.rx_buffer, 0, sizeof(bootloader.rx_buffer));
 80f4e32:	2280      	movs	r2, #128	@ 0x80
 80f4e34:	2100      	movs	r1, #0
 80f4e36:	4841      	ldr	r0, [pc, #260]	@ (80f4f3c <bootloader_init+0x1e0>)
 80f4e38:	f004 ffef 	bl	80f9e1a <memset>

    bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4e3c:	4a3d      	ldr	r2, [pc, #244]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e3e:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4e42:	f023 030c 	bic.w	r3, r3, #12
 80f4e46:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
    bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4e4a:	4a3a      	ldr	r2, [pc, #232]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e4c:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4e50:	f023 0303 	bic.w	r3, r3, #3
 80f4e54:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
    bootloader.start_time=0;
 80f4e58:	4b36      	ldr	r3, [pc, #216]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e5a:	2200      	movs	r2, #0
 80f4e5c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    bootloader.stay_in_bootloader=false;
 80f4e60:	4b34      	ldr	r3, [pc, #208]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e62:	2200      	movs	r2, #0
 80f4e64:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110

    bootloader.copy_retries=0;
 80f4e68:	4b32      	ldr	r3, [pc, #200]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e6a:	2200      	movs	r2, #0
 80f4e6c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    bootloader.info_cleared = false;
 80f4e70:	4b30      	ldr	r3, [pc, #192]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e72:	2200      	movs	r2, #0
 80f4e74:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109

    bootloader.fw.bytes_processed = 0;
 80f4e78:	4b2e      	ldr	r3, [pc, #184]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e7a:	2200      	movs	r2, #0
 80f4e7c:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
    memset(&bootloader.fw.sha_ctx, 0, sizeof(bootloader.fw.sha_ctx));
 80f4e80:	2270      	movs	r2, #112	@ 0x70
 80f4e82:	2100      	movs	r1, #0
 80f4e84:	482e      	ldr	r0, [pc, #184]	@ (80f4f40 <bootloader_init+0x1e4>)
 80f4e86:	f004 ffc8 	bl	80f9e1a <memset>
    bootloader.fw.header = NULL;
 80f4e8a:	4b2a      	ldr	r3, [pc, #168]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e8c:	2200      	movs	r2, #0
 80f4e8e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

    bootloader.fw_index = 0;
 80f4e92:	4b28      	ldr	r3, [pc, #160]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e94:	2200      	movs	r2, #0
 80f4e96:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
    bootloader.btea_index = 0;
 80f4e9a:	4b26      	ldr	r3, [pc, #152]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4e9c:	2200      	movs	r2, #0
 80f4e9e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
    memset(bootloader.config->btea_buffer,0xFF,bootloader.config->btea_chunk_size);
 80f4ea2:	4b24      	ldr	r3, [pc, #144]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4ea4:	681b      	ldr	r3, [r3, #0]
 80f4ea6:	68d8      	ldr	r0, [r3, #12]
 80f4ea8:	4b22      	ldr	r3, [pc, #136]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4eaa:	681b      	ldr	r3, [r3, #0]
 80f4eac:	691b      	ldr	r3, [r3, #16]
 80f4eae:	461a      	mov	r2, r3
 80f4eb0:	21ff      	movs	r1, #255	@ 0xff
 80f4eb2:	f004 ffb2 	bl	80f9e1a <memset>
    data_comm_rx_settings_t data_comm_settings = {
 80f4eb6:	4b23      	ldr	r3, [pc, #140]	@ (80f4f44 <bootloader_init+0x1e8>)
 80f4eb8:	60fb      	str	r3, [r7, #12]
 80f4eba:	4b20      	ldr	r3, [pc, #128]	@ (80f4f3c <bootloader_init+0x1e0>)
 80f4ebc:	613b      	str	r3, [r7, #16]
 80f4ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80f4ec2:	82bb      	strh	r3, [r7, #20]
        .config = &data_comm_config,
        .buffer = bootloader.rx_buffer,
        .buffer_size = 512,
        .id = bootloader.config->device_id,
 80f4ec4:	4b1b      	ldr	r3, [pc, #108]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4ec6:	681b      	ldr	r3, [r3, #0]
 80f4ec8:	791b      	ldrb	r3, [r3, #4]
    data_comm_rx_settings_t data_comm_settings = {
 80f4eca:	75bb      	strb	r3, [r7, #22]
 80f4ecc:	f64d 63ad 	movw	r3, #57005	@ 0xdead
 80f4ed0:	833b      	strh	r3, [r7, #24]
 80f4ed2:	4b1d      	ldr	r3, [pc, #116]	@ (80f4f48 <bootloader_init+0x1ec>)
 80f4ed4:	61fb      	str	r3, [r7, #28]
        .crc_seed = 0xDEAD,
        .write_func = data_comm_write_func,
        .send_func = bootloader.config->send_msg_func,
 80f4ed6:	4b17      	ldr	r3, [pc, #92]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4ed8:	681b      	ldr	r3, [r3, #0]
 80f4eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    data_comm_rx_settings_t data_comm_settings = {
 80f4edc:	623b      	str	r3, [r7, #32]
 80f4ede:	4b1b      	ldr	r3, [pc, #108]	@ (80f4f4c <bootloader_init+0x1f0>)
 80f4ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        .finish_func = data_comm_finish_callback,
        .log_func = bootloader.config->log_func,
 80f4ee2:	4b14      	ldr	r3, [pc, #80]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4ee4:	681b      	ldr	r3, [r3, #0]
 80f4ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    data_comm_rx_settings_t data_comm_settings = {
 80f4ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80f4eea:	2300      	movs	r3, #0
 80f4eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .context = NULL
    };
    bootloader.receiving=false;
 80f4eee:	4b11      	ldr	r3, [pc, #68]	@ (80f4f34 <bootloader_init+0x1d8>)
 80f4ef0:	2200      	movs	r2, #0
 80f4ef2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
    data_comm_rx_init(&bootloader.data_comm,&data_comm_settings);
 80f4ef6:	f107 030c 	add.w	r3, r7, #12
 80f4efa:	4619      	mov	r1, r3
 80f4efc:	4814      	ldr	r0, [pc, #80]	@ (80f4f50 <bootloader_init+0x1f4>)
 80f4efe:	f001 f9ff 	bl	80f6300 <data_comm_rx_init>
}
 80f4f02:	bf00      	nop
 80f4f04:	3730      	adds	r7, #48	@ 0x30
 80f4f06:	46bd      	mov	sp, r7
 80f4f08:	bd80      	pop	{r7, pc}
 80f4f0a:	bf00      	nop
 80f4f0c:	080fab7c 	.word	0x080fab7c
 80f4f10:	080fae8c 	.word	0x080fae8c
 80f4f14:	080fab90 	.word	0x080fab90
 80f4f18:	080fabc0 	.word	0x080fabc0
 80f4f1c:	080fabcc 	.word	0x080fabcc
 80f4f20:	080fac0c 	.word	0x080fac0c
 80f4f24:	080fac4c 	.word	0x080fac4c
 80f4f28:	080fac84 	.word	0x080fac84
 80f4f2c:	080facb4 	.word	0x080facb4
 80f4f30:	080faccc 	.word	0x080faccc
 80f4f34:	20002720 	.word	0x20002720
 80f4f38:	20002724 	.word	0x20002724
 80f4f3c:	200027a1 	.word	0x200027a1
 80f4f40:	20002910 	.word	0x20002910
 80f4f44:	080fae5c 	.word	0x080fae5c
 80f4f48:	080f48bd 	.word	0x080f48bd
 80f4f4c:	080f4b51 	.word	0x080f4b51
 80f4f50:	20002744 	.word	0x20002744

080f4f54 <bootloader_tick>:


void bootloader_tick(uint32_t time_ms) {
 80f4f54:	b580      	push	{r7, lr}
 80f4f56:	b088      	sub	sp, #32
 80f4f58:	af00      	add	r7, sp, #0
 80f4f5a:	6078      	str	r0, [r7, #4]

    switch(bootloader.state) {
 80f4f5c:	4bb0      	ldr	r3, [pc, #704]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4f5e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80f4f62:	2b05      	cmp	r3, #5
 80f4f64:	f200 81f9 	bhi.w	80f535a <bootloader_tick+0x406>
 80f4f68:	a201      	add	r2, pc, #4	@ (adr r2, 80f4f70 <bootloader_tick+0x1c>)
 80f4f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f4f6e:	bf00      	nop
 80f4f70:	080f4f89 	.word	0x080f4f89
 80f4f74:	080f5091 	.word	0x080f5091
 80f4f78:	080f5231 	.word	0x080f5231
 80f4f7c:	080f527d 	.word	0x080f527d
 80f4f80:	080f52bb 	.word	0x080f52bb
 80f4f84:	080f5351 	.word	0x080f5351
        case BOOT_STATE_INIT: {
            bootloader.info_cleared=false;
 80f4f88:	4ba5      	ldr	r3, [pc, #660]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4f8a:	2200      	movs	r2, #0
 80f4f8c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
            bootloader.receiving=false;
 80f4f90:	4ba3      	ldr	r3, [pc, #652]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4f92:	2200      	movs	r2, #0
 80f4f94:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
            bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4f98:	4aa1      	ldr	r2, [pc, #644]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4f9a:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4f9e:	f023 0303 	bic.w	r3, r3, #3
 80f4fa2:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101


            //Read the installed firmware information
            memset(&bootloader.app_info,0,sizeof(bootloader.app_info));
 80f4fa6:	2228      	movs	r2, #40	@ 0x28
 80f4fa8:	2100      	movs	r1, #0
 80f4faa:	489e      	ldr	r0, [pc, #632]	@ (80f5224 <bootloader_tick+0x2d0>)
 80f4fac:	f004 ff35 	bl	80f9e1a <memset>
            bootloader.config->mem_read_func(bootloader.sections.app_info.address,(uint8_t*)&bootloader.app_info, sizeof(bootloader.app_info));
 80f4fb0:	4b9b      	ldr	r3, [pc, #620]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fb2:	681b      	ldr	r3, [r3, #0]
 80f4fb4:	6a1b      	ldr	r3, [r3, #32]
 80f4fb6:	4a9a      	ldr	r2, [pc, #616]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fb8:	6850      	ldr	r0, [r2, #4]
 80f4fba:	2228      	movs	r2, #40	@ 0x28
 80f4fbc:	4999      	ldr	r1, [pc, #612]	@ (80f5224 <bootloader_tick+0x2d0>)
 80f4fbe:	4798      	blx	r3
            uint32_t app_info_crc = calc_crc32((uint8_t*)&bootloader.app_info,sizeof(bootloader.app_info)-sizeof(bootloader.app_info.crc),0xDEADBEEF,0);
 80f4fc0:	2300      	movs	r3, #0
 80f4fc2:	4a99      	ldr	r2, [pc, #612]	@ (80f5228 <bootloader_tick+0x2d4>)
 80f4fc4:	2124      	movs	r1, #36	@ 0x24
 80f4fc6:	4897      	ldr	r0, [pc, #604]	@ (80f5224 <bootloader_tick+0x2d0>)
 80f4fc8:	f003 fd7f 	bl	80f8aca <calc_crc32>
 80f4fcc:	6138      	str	r0, [r7, #16]

            if( bootloader.app_info.magic == bootloader.config->magic && app_info_crc==bootloader.app_info.crc) {
 80f4fce:	4b94      	ldr	r3, [pc, #592]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fd0:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 80f4fd4:	4b92      	ldr	r3, [pc, #584]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fd6:	681b      	ldr	r3, [r3, #0]
 80f4fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80f4fda:	429a      	cmp	r2, r3
 80f4fdc:	d10d      	bne.n	80f4ffa <bootloader_tick+0xa6>
 80f4fde:	4b90      	ldr	r3, [pc, #576]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fe0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80f4fe4:	693a      	ldr	r2, [r7, #16]
 80f4fe6:	429a      	cmp	r2, r3
 80f4fe8:	d107      	bne.n	80f4ffa <bootloader_tick+0xa6>
                bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_FOUND;
 80f4fea:	4a8d      	ldr	r2, [pc, #564]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4fec:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f4ff0:	2101      	movs	r1, #1
 80f4ff2:	f361 0301 	bfi	r3, r1, #0, #2
 80f4ff6:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
            }




            bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f4ffa:	4a89      	ldr	r2, [pc, #548]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f4ffc:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5000:	f023 030c 	bic.w	r3, r3, #12
 80f5004:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
            memset(&bootloader.upgrade_info,0,sizeof(bootloader.upgrade_info));
 80f5008:	2228      	movs	r2, #40	@ 0x28
 80f500a:	2100      	movs	r1, #0
 80f500c:	4887      	ldr	r0, [pc, #540]	@ (80f522c <bootloader_tick+0x2d8>)
 80f500e:	f004 ff04 	bl	80f9e1a <memset>
            bootloader.config->mem_read_func(bootloader.sections.upgrade_info.address,(uint8_t*)&bootloader.upgrade_info, sizeof(bootloader.upgrade_info));
 80f5012:	4b83      	ldr	r3, [pc, #524]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5014:	681b      	ldr	r3, [r3, #0]
 80f5016:	6a1b      	ldr	r3, [r3, #32]
 80f5018:	4a81      	ldr	r2, [pc, #516]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f501a:	6950      	ldr	r0, [r2, #20]
 80f501c:	2228      	movs	r2, #40	@ 0x28
 80f501e:	4983      	ldr	r1, [pc, #524]	@ (80f522c <bootloader_tick+0x2d8>)
 80f5020:	4798      	blx	r3
            uint32_t upgrade_info_crc = calc_crc32((uint8_t*)&bootloader.upgrade_info,sizeof(bootloader.upgrade_info)-sizeof(bootloader.upgrade_info.crc),0xDEADBEEF,0);
 80f5022:	2300      	movs	r3, #0
 80f5024:	4a80      	ldr	r2, [pc, #512]	@ (80f5228 <bootloader_tick+0x2d4>)
 80f5026:	2124      	movs	r1, #36	@ 0x24
 80f5028:	4880      	ldr	r0, [pc, #512]	@ (80f522c <bootloader_tick+0x2d8>)
 80f502a:	f003 fd4e 	bl	80f8aca <calc_crc32>
 80f502e:	60f8      	str	r0, [r7, #12]

            if( bootloader.upgrade_info.magic == bootloader.config->magic && upgrade_info_crc==bootloader.upgrade_info.crc) {
 80f5030:	4b7b      	ldr	r3, [pc, #492]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5032:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80f5036:	4b7a      	ldr	r3, [pc, #488]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5038:	681b      	ldr	r3, [r3, #0]
 80f503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80f503c:	429a      	cmp	r2, r3
 80f503e:	d10d      	bne.n	80f505c <bootloader_tick+0x108>
 80f5040:	4b77      	ldr	r3, [pc, #476]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5042:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80f5046:	68fa      	ldr	r2, [r7, #12]
 80f5048:	429a      	cmp	r2, r3
 80f504a:	d107      	bne.n	80f505c <bootloader_tick+0x108>
                bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_FOUND;
 80f504c:	4a74      	ldr	r2, [pc, #464]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f504e:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5052:	2101      	movs	r1, #1
 80f5054:	f361 0383 	bfi	r3, r1, #2, #2
 80f5058:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
            }

            if (bootloader.upgrade_status==BOOTLOADER_INSTALLED_FW_STATUS_FOUND || bootloader.app_status==BOOTLOADER_INSTALLED_FW_STATUS_FOUND) {
 80f505c:	4b70      	ldr	r3, [pc, #448]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f505e:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f5062:	f003 030c 	and.w	r3, r3, #12
 80f5066:	b2db      	uxtb	r3, r3
 80f5068:	2b04      	cmp	r3, #4
 80f506a:	d007      	beq.n	80f507c <bootloader_tick+0x128>
 80f506c:	4b6c      	ldr	r3, [pc, #432]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f506e:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f5072:	f003 0303 	and.w	r3, r3, #3
 80f5076:	b2db      	uxtb	r3, r3
 80f5078:	2b01      	cmp	r3, #1
 80f507a:	d104      	bne.n	80f5086 <bootloader_tick+0x132>
                bootloader.state = BOOT_STATE_WAIT_APP_VERIFICATION;
 80f507c:	4b68      	ldr	r3, [pc, #416]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f507e:	2201      	movs	r2, #1
 80f5080:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            } else {
                bootloader.state = BOOT_STATE_START_DATA_COMM;
            }
            break;
 80f5084:	e169      	b.n	80f535a <bootloader_tick+0x406>
                bootloader.state = BOOT_STATE_START_DATA_COMM;
 80f5086:	4b66      	ldr	r3, [pc, #408]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5088:	2203      	movs	r2, #3
 80f508a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80f508e:	e164      	b.n	80f535a <bootloader_tick+0x406>
        }
        case BOOT_STATE_WAIT_APP_VERIFICATION: {
            // Calculate the CRC of the installed firmware
            /* Get CRC */
            if (bootloader.app_status==BOOTLOADER_INSTALLED_FW_STATUS_FOUND) {
 80f5090:	4b63      	ldr	r3, [pc, #396]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5092:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f5096:	f003 0303 	and.w	r3, r3, #3
 80f509a:	b2db      	uxtb	r3, r3
 80f509c:	2b01      	cmp	r3, #1
 80f509e:	d12f      	bne.n	80f5100 <bootloader_tick+0x1ac>
                if (bootloader.app_info.info.fw_size>bootloader.sections.app.size) {
 80f50a0:	4b5f      	ldr	r3, [pc, #380]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50a2:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80f50a6:	4b5e      	ldr	r3, [pc, #376]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50a8:	691b      	ldr	r3, [r3, #16]
 80f50aa:	429a      	cmp	r2, r3
 80f50ac:	d907      	bls.n	80f50be <bootloader_tick+0x16a>
                    bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_CORRUPTED;
 80f50ae:	4a5c      	ldr	r2, [pc, #368]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50b0:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f50b4:	f043 0303 	orr.w	r3, r3, #3
 80f50b8:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
 80f50bc:	e020      	b.n	80f5100 <bootloader_tick+0x1ac>
                } else {
                    uint32_t crc = bootloader.config->crc32_func(bootloader.sections.app.address,
 80f50be:	4b58      	ldr	r3, [pc, #352]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50c0:	681b      	ldr	r3, [r3, #0]
 80f50c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f50c4:	4a56      	ldr	r2, [pc, #344]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50c6:	68d2      	ldr	r2, [r2, #12]
 80f50c8:	4955      	ldr	r1, [pc, #340]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50ca:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 80f50ce:	4610      	mov	r0, r2
 80f50d0:	4798      	blx	r3
 80f50d2:	61b8      	str	r0, [r7, #24]
                                                        bootloader.app_info.info.fw_size);

                    /* Compare expected CRC with installed FW CRC */
                    if( bootloader.app_info.info.fw_crc == crc ) {
 80f50d4:	4b52      	ldr	r3, [pc, #328]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80f50da:	69ba      	ldr	r2, [r7, #24]
 80f50dc:	429a      	cmp	r2, r3
 80f50de:	d108      	bne.n	80f50f2 <bootloader_tick+0x19e>
                        bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED;
 80f50e0:	4a4f      	ldr	r2, [pc, #316]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50e2:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f50e6:	2102      	movs	r1, #2
 80f50e8:	f361 0301 	bfi	r3, r1, #0, #2
 80f50ec:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
 80f50f0:	e006      	b.n	80f5100 <bootloader_tick+0x1ac>
                    } else {
                        bootloader.app_status=BOOTLOADER_INSTALLED_FW_STATUS_CORRUPTED;
 80f50f2:	4a4b      	ldr	r2, [pc, #300]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f50f4:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f50f8:	f043 0303 	orr.w	r3, r3, #3
 80f50fc:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
                    }
                }
            }


            if (bootloader.upgrade_status==BOOTLOADER_INSTALLED_FW_STATUS_FOUND) {
 80f5100:	4b47      	ldr	r3, [pc, #284]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5102:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f5106:	f003 030c 	and.w	r3, r3, #12
 80f510a:	b2db      	uxtb	r3, r3
 80f510c:	2b04      	cmp	r3, #4
 80f510e:	d12f      	bne.n	80f5170 <bootloader_tick+0x21c>
                if (bootloader.upgrade_info.info.fw_size>bootloader.sections.upgrade.size) {
 80f5110:	4b43      	ldr	r3, [pc, #268]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5112:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80f5116:	4b42      	ldr	r3, [pc, #264]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5118:	6a1b      	ldr	r3, [r3, #32]
 80f511a:	429a      	cmp	r2, r3
 80f511c:	d907      	bls.n	80f512e <bootloader_tick+0x1da>
                    bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_CORRUPTED;
 80f511e:	4a40      	ldr	r2, [pc, #256]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5120:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5124:	f043 030c 	orr.w	r3, r3, #12
 80f5128:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
 80f512c:	e020      	b.n	80f5170 <bootloader_tick+0x21c>
                } else {
                    uint32_t crc = bootloader.config->crc32_func(bootloader.sections.upgrade.address,
 80f512e:	4b3c      	ldr	r3, [pc, #240]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5130:	681b      	ldr	r3, [r3, #0]
 80f5132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f5134:	4a3a      	ldr	r2, [pc, #232]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5136:	69d2      	ldr	r2, [r2, #28]
 80f5138:	4939      	ldr	r1, [pc, #228]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f513a:	f8d1 1140 	ldr.w	r1, [r1, #320]	@ 0x140
 80f513e:	4610      	mov	r0, r2
 80f5140:	4798      	blx	r3
 80f5142:	6178      	str	r0, [r7, #20]
                                                        bootloader.upgrade_info.info.fw_size);

                    /* Compare expected CRC with installed FW CRC */
                    if( bootloader.upgrade_info.info.fw_crc == crc ) {
 80f5144:	4b36      	ldr	r3, [pc, #216]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5146:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80f514a:	697a      	ldr	r2, [r7, #20]
 80f514c:	429a      	cmp	r2, r3
 80f514e:	d108      	bne.n	80f5162 <bootloader_tick+0x20e>
                        bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED;
 80f5150:	4a33      	ldr	r2, [pc, #204]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5152:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5156:	2102      	movs	r1, #2
 80f5158:	f361 0383 	bfi	r3, r1, #2, #2
 80f515c:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
 80f5160:	e006      	b.n	80f5170 <bootloader_tick+0x21c>
                    } else {
                        bootloader.upgrade_status=BOOTLOADER_INSTALLED_FW_STATUS_CORRUPTED;
 80f5162:	4a2f      	ldr	r2, [pc, #188]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5164:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5168:	f043 030c 	orr.w	r3, r3, #12
 80f516c:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
                    }
                }

            }
            bool need_to_copy=false;
 80f5170:	2300      	movs	r3, #0
 80f5172:	77fb      	strb	r3, [r7, #31]
            if (bootloader.upgrade_status == BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED && bootloader.app_status!=BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED) {
 80f5174:	4b2a      	ldr	r3, [pc, #168]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5176:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f517a:	f003 030c 	and.w	r3, r3, #12
 80f517e:	b2db      	uxtb	r3, r3
 80f5180:	2b08      	cmp	r3, #8
 80f5182:	d10a      	bne.n	80f519a <bootloader_tick+0x246>
 80f5184:	4b26      	ldr	r3, [pc, #152]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5186:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f518a:	f003 0303 	and.w	r3, r3, #3
 80f518e:	b2db      	uxtb	r3, r3
 80f5190:	2b02      	cmp	r3, #2
 80f5192:	d002      	beq.n	80f519a <bootloader_tick+0x246>
                //The app partition doesn't have a valid firmware but the upgrade partition yes
                need_to_copy=true;
 80f5194:	2301      	movs	r3, #1
 80f5196:	77fb      	strb	r3, [r7, #31]
 80f5198:	e019      	b.n	80f51ce <bootloader_tick+0x27a>
            } else if (bootloader.upgrade_status == BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED && bootloader.app_status == BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED) {
 80f519a:	4b21      	ldr	r3, [pc, #132]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f519c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f51a0:	f003 030c 	and.w	r3, r3, #12
 80f51a4:	b2db      	uxtb	r3, r3
 80f51a6:	2b08      	cmp	r3, #8
 80f51a8:	d111      	bne.n	80f51ce <bootloader_tick+0x27a>
 80f51aa:	4b1d      	ldr	r3, [pc, #116]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51ac:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f51b0:	f003 0303 	and.w	r3, r3, #3
 80f51b4:	b2db      	uxtb	r3, r3
 80f51b6:	2b02      	cmp	r3, #2
 80f51b8:	d109      	bne.n	80f51ce <bootloader_tick+0x27a>
                //Both partition have a valid firmware
                if (memcmp(&bootloader.app_info,&bootloader.upgrade_info, sizeof(bootloader_installed_fw_t))!=0) {
 80f51ba:	2228      	movs	r2, #40	@ 0x28
 80f51bc:	491b      	ldr	r1, [pc, #108]	@ (80f522c <bootloader_tick+0x2d8>)
 80f51be:	4819      	ldr	r0, [pc, #100]	@ (80f5224 <bootloader_tick+0x2d0>)
 80f51c0:	f004 fe1b 	bl	80f9dfa <memcmp>
 80f51c4:	4603      	mov	r3, r0
 80f51c6:	2b00      	cmp	r3, #0
 80f51c8:	d001      	beq.n	80f51ce <bootloader_tick+0x27a>
                    // the App has a different version from the upgrade, coyp the upgrade
                    need_to_copy=true;
 80f51ca:	2301      	movs	r3, #1
 80f51cc:	77fb      	strb	r3, [r7, #31]
                }
            }

            if (need_to_copy) {
 80f51ce:	7ffb      	ldrb	r3, [r7, #31]
 80f51d0:	2b00      	cmp	r3, #0
 80f51d2:	d01f      	beq.n	80f5214 <bootloader_tick+0x2c0>
                if (bootloader.copy_retries>=bootloader.config->max_copy_retries) {
 80f51d4:	4b12      	ldr	r3, [pc, #72]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80f51da:	4b11      	ldr	r3, [pc, #68]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51dc:	681b      	ldr	r3, [r3, #0]
 80f51de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f51e0:	429a      	cmp	r2, r3
 80f51e2:	d30b      	bcc.n	80f51fc <bootloader_tick+0x2a8>
                    //We've tried too many times, just go to DATA comm
                    bootloader.upgrade_status = BOOTLOADER_INSTALLED_FW_STATUS_CORRUPTED;
 80f51e4:	4a0e      	ldr	r2, [pc, #56]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51e6:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f51ea:	f043 030c 	orr.w	r3, r3, #12
 80f51ee:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101

                    bootloader.state=BOOT_STATE_START_DATA_COMM;
 80f51f2:	4b0b      	ldr	r3, [pc, #44]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51f4:	2203      	movs	r2, #3
 80f51f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                    bootloader.copy_retries++;
                }
            } else {
                bootloader.state = BOOT_STATE_START_DATA_COMM;
            }
            break;
 80f51fa:	e0ae      	b.n	80f535a <bootloader_tick+0x406>
                    bootloader.state = BOOT_STATE_COPY_UPGRADE;
 80f51fc:	4b08      	ldr	r3, [pc, #32]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f51fe:	2202      	movs	r2, #2
 80f5200:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                    bootloader.copy_retries++;
 80f5204:	4b06      	ldr	r3, [pc, #24]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5206:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80f520a:	3301      	adds	r3, #1
 80f520c:	4a04      	ldr	r2, [pc, #16]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f520e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
            break;
 80f5212:	e0a2      	b.n	80f535a <bootloader_tick+0x406>
                bootloader.state = BOOT_STATE_START_DATA_COMM;
 80f5214:	4b02      	ldr	r3, [pc, #8]	@ (80f5220 <bootloader_tick+0x2cc>)
 80f5216:	2203      	movs	r2, #3
 80f5218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80f521c:	e09d      	b.n	80f535a <bootloader_tick+0x406>
 80f521e:	bf00      	nop
 80f5220:	20002720 	.word	0x20002720
 80f5224:	20002834 	.word	0x20002834
 80f5228:	deadbeef 	.word	0xdeadbeef
 80f522c:	2000285c 	.word	0x2000285c
        }
        case BOOT_STATE_COPY_UPGRADE: {
            bootloader.upgrade_status = BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f5230:	4a4c      	ldr	r2, [pc, #304]	@ (80f5364 <bootloader_tick+0x410>)
 80f5232:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5236:	f023 030c 	bic.w	r3, r3, #12
 80f523a:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101
            bootloader.app_status = BOOTLOADER_INSTALLED_FW_STATUS_NOT_FOUND;
 80f523e:	4a49      	ldr	r2, [pc, #292]	@ (80f5364 <bootloader_tick+0x410>)
 80f5240:	f892 3101 	ldrb.w	r3, [r2, #257]	@ 0x101
 80f5244:	f023 0303 	bic.w	r3, r3, #3
 80f5248:	f882 3101 	strb.w	r3, [r2, #257]	@ 0x101

            bootloader.config->mem_copy_func(bootloader.sections.upgrade.address, bootloader.sections.app.address, bootloader.upgrade_info.info.fw_size);
 80f524c:	4b45      	ldr	r3, [pc, #276]	@ (80f5364 <bootloader_tick+0x410>)
 80f524e:	681b      	ldr	r3, [r3, #0]
 80f5250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f5252:	4a44      	ldr	r2, [pc, #272]	@ (80f5364 <bootloader_tick+0x410>)
 80f5254:	69d0      	ldr	r0, [r2, #28]
 80f5256:	4a43      	ldr	r2, [pc, #268]	@ (80f5364 <bootloader_tick+0x410>)
 80f5258:	68d1      	ldr	r1, [r2, #12]
 80f525a:	4a42      	ldr	r2, [pc, #264]	@ (80f5364 <bootloader_tick+0x410>)
 80f525c:	f8d2 2140 	ldr.w	r2, [r2, #320]	@ 0x140
 80f5260:	4798      	blx	r3
            //     memset(bootloader.config->btea_buffer,0x00,bootloader.config->btea_chunk_size);
            //     bootloader.config->mem_write_func(bootloader.sections.app.address + index, bootloader.config->btea_buffer, size_to_copy);
            //     index+=size_to_copy;
            //     remaining-=size_to_copy;
            // }
            bootloader.config->mem_write_func(bootloader.sections.app_info.address,&bootloader.upgrade_info,sizeof(bootloader.upgrade_info));
 80f5262:	4b40      	ldr	r3, [pc, #256]	@ (80f5364 <bootloader_tick+0x410>)
 80f5264:	681b      	ldr	r3, [r3, #0]
 80f5266:	69db      	ldr	r3, [r3, #28]
 80f5268:	4a3e      	ldr	r2, [pc, #248]	@ (80f5364 <bootloader_tick+0x410>)
 80f526a:	6850      	ldr	r0, [r2, #4]
 80f526c:	2228      	movs	r2, #40	@ 0x28
 80f526e:	493e      	ldr	r1, [pc, #248]	@ (80f5368 <bootloader_tick+0x414>)
 80f5270:	4798      	blx	r3
            bootloader.state=BOOT_STATE_INIT;
 80f5272:	4b3c      	ldr	r3, [pc, #240]	@ (80f5364 <bootloader_tick+0x410>)
 80f5274:	2200      	movs	r2, #0
 80f5276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80f527a:	e06e      	b.n	80f535a <bootloader_tick+0x406>
        }
        case BOOT_STATE_START_DATA_COMM:{
            bootloader.fw_index = 0;
 80f527c:	4b39      	ldr	r3, [pc, #228]	@ (80f5364 <bootloader_tick+0x410>)
 80f527e:	2200      	movs	r2, #0
 80f5280:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
            bootloader.btea_index = 0;
 80f5284:	4b37      	ldr	r3, [pc, #220]	@ (80f5364 <bootloader_tick+0x410>)
 80f5286:	2200      	movs	r2, #0
 80f5288:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
            memset(bootloader.config->btea_buffer,0xFF,bootloader.config->btea_chunk_size);
 80f528c:	4b35      	ldr	r3, [pc, #212]	@ (80f5364 <bootloader_tick+0x410>)
 80f528e:	681b      	ldr	r3, [r3, #0]
 80f5290:	68d8      	ldr	r0, [r3, #12]
 80f5292:	4b34      	ldr	r3, [pc, #208]	@ (80f5364 <bootloader_tick+0x410>)
 80f5294:	681b      	ldr	r3, [r3, #0]
 80f5296:	691b      	ldr	r3, [r3, #16]
 80f5298:	461a      	mov	r2, r3
 80f529a:	21ff      	movs	r1, #255	@ 0xff
 80f529c:	f004 fdbd 	bl	80f9e1a <memset>
            data_comm_rx_start(&bootloader.data_comm,time_ms);
 80f52a0:	6879      	ldr	r1, [r7, #4]
 80f52a2:	4832      	ldr	r0, [pc, #200]	@ (80f536c <bootloader_tick+0x418>)
 80f52a4:	f000 ffee 	bl	80f6284 <data_comm_rx_start>
            bootloader.state = BOOT_STATE_IDLE;
 80f52a8:	4b2e      	ldr	r3, [pc, #184]	@ (80f5364 <bootloader_tick+0x410>)
 80f52aa:	2204      	movs	r2, #4
 80f52ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            bootloader.start_time = time_ms;
 80f52b0:	4a2c      	ldr	r2, [pc, #176]	@ (80f5364 <bootloader_tick+0x410>)
 80f52b2:	687b      	ldr	r3, [r7, #4]
 80f52b4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            break;
 80f52b8:	e04f      	b.n	80f535a <bootloader_tick+0x406>
        }
        case BOOT_STATE_IDLE: {

            if( bootloader.app_status == BOOTLOADER_INSTALLED_FW_STATUS_VERIFIED) {
 80f52ba:	4b2a      	ldr	r3, [pc, #168]	@ (80f5364 <bootloader_tick+0x410>)
 80f52bc:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80f52c0:	f003 0303 	and.w	r3, r3, #3
 80f52c4:	b2db      	uxtb	r3, r3
 80f52c6:	2b02      	cmp	r3, #2
 80f52c8:	d128      	bne.n	80f531c <bootloader_tick+0x3c8>
                bool timeout=false;
 80f52ca:	2300      	movs	r3, #0
 80f52cc:	77bb      	strb	r3, [r7, #30]
                if (!bootloader.stay_in_bootloader && bootloader.config->jump_delay>0) {
 80f52ce:	4b25      	ldr	r3, [pc, #148]	@ (80f5364 <bootloader_tick+0x410>)
 80f52d0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80f52d4:	f083 0301 	eor.w	r3, r3, #1
 80f52d8:	b2db      	uxtb	r3, r3
 80f52da:	2b00      	cmp	r3, #0
 80f52dc:	d011      	beq.n	80f5302 <bootloader_tick+0x3ae>
 80f52de:	4b21      	ldr	r3, [pc, #132]	@ (80f5364 <bootloader_tick+0x410>)
 80f52e0:	681b      	ldr	r3, [r3, #0]
 80f52e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f52e4:	2b00      	cmp	r3, #0
 80f52e6:	d00c      	beq.n	80f5302 <bootloader_tick+0x3ae>
                    timeout = (time_ms-bootloader.start_time)>=bootloader.config->jump_delay;
 80f52e8:	4b1e      	ldr	r3, [pc, #120]	@ (80f5364 <bootloader_tick+0x410>)
 80f52ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80f52ee:	687a      	ldr	r2, [r7, #4]
 80f52f0:	1ad2      	subs	r2, r2, r3
 80f52f2:	4b1c      	ldr	r3, [pc, #112]	@ (80f5364 <bootloader_tick+0x410>)
 80f52f4:	681b      	ldr	r3, [r3, #0]
 80f52f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f52f8:	429a      	cmp	r2, r3
 80f52fa:	bf2c      	ite	cs
 80f52fc:	2301      	movcs	r3, #1
 80f52fe:	2300      	movcc	r3, #0
 80f5300:	77bb      	strb	r3, [r7, #30]
                }
                if (bootloader.jump_to_app || timeout) {
 80f5302:	4b18      	ldr	r3, [pc, #96]	@ (80f5364 <bootloader_tick+0x410>)
 80f5304:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80f5308:	2b00      	cmp	r3, #0
 80f530a:	d102      	bne.n	80f5312 <bootloader_tick+0x3be>
 80f530c:	7fbb      	ldrb	r3, [r7, #30]
 80f530e:	2b00      	cmp	r3, #0
 80f5310:	d004      	beq.n	80f531c <bootloader_tick+0x3c8>
                    bootloader.state=BOOT_STATE_GO_TO_APP;
 80f5312:	4b14      	ldr	r3, [pc, #80]	@ (80f5364 <bootloader_tick+0x410>)
 80f5314:	2205      	movs	r2, #5
 80f5316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                    break;
 80f531a:	e01e      	b.n	80f535a <bootloader_tick+0x406>
                }
            }
            data_comm_rx_tick(&bootloader.data_comm,time_ms);
 80f531c:	6879      	ldr	r1, [r7, #4]
 80f531e:	4813      	ldr	r0, [pc, #76]	@ (80f536c <bootloader_tick+0x418>)
 80f5320:	f000 fb46 	bl	80f59b0 <data_comm_rx_tick>
            if (!data_comm_rx_is_running(&bootloader.data_comm)) {
 80f5324:	4811      	ldr	r0, [pc, #68]	@ (80f536c <bootloader_tick+0x418>)
 80f5326:	f000 fb1b 	bl	80f5960 <data_comm_rx_is_running>
 80f532a:	4603      	mov	r3, r0
 80f532c:	f083 0301 	eor.w	r3, r3, #1
 80f5330:	b2db      	uxtb	r3, r3
 80f5332:	2b00      	cmp	r3, #0
 80f5334:	d003      	beq.n	80f533e <bootloader_tick+0x3ea>
                LOG_D("Bootloader Init");
                bootloader.state = BOOT_STATE_INIT;
 80f5336:	4b0b      	ldr	r3, [pc, #44]	@ (80f5364 <bootloader_tick+0x410>)
 80f5338:	2200      	movs	r2, #0
 80f533a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            }
            bootloader.receiving = data_comm_rx_is_receiving(&bootloader.data_comm);
 80f533e:	480b      	ldr	r0, [pc, #44]	@ (80f536c <bootloader_tick+0x418>)
 80f5340:	f000 fb24 	bl	80f598c <data_comm_rx_is_receiving>
 80f5344:	4603      	mov	r3, r0
 80f5346:	461a      	mov	r2, r3
 80f5348:	4b06      	ldr	r3, [pc, #24]	@ (80f5364 <bootloader_tick+0x410>)
 80f534a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
            break;
 80f534e:	e004      	b.n	80f535a <bootloader_tick+0x406>
        }
        case BOOT_STATE_GO_TO_APP:
            bootloader.config->jump_to_app_func();
 80f5350:	4b04      	ldr	r3, [pc, #16]	@ (80f5364 <bootloader_tick+0x410>)
 80f5352:	681b      	ldr	r3, [r3, #0]
 80f5354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f5356:	4798      	blx	r3
            break;
 80f5358:	bf00      	nop
    }
}
 80f535a:	bf00      	nop
 80f535c:	3720      	adds	r7, #32
 80f535e:	46bd      	mov	sp, r7
 80f5360:	bd80      	pop	{r7, pc}
 80f5362:	bf00      	nop
 80f5364:	20002720 	.word	0x20002720
 80f5368:	2000285c 	.word	0x2000285c
 80f536c:	20002744 	.word	0x20002744

080f5370 <bootloader_rx_message_received>:

void bootloader_rx_message_received(uint32_t time_ms, data_comm_msg_type_t type, uint8_t id, const uint8_t* data, uint16_t size){
 80f5370:	b580      	push	{r7, lr}
 80f5372:	b086      	sub	sp, #24
 80f5374:	af02      	add	r7, sp, #8
 80f5376:	60f8      	str	r0, [r7, #12]
 80f5378:	607b      	str	r3, [r7, #4]
 80f537a:	460b      	mov	r3, r1
 80f537c:	72fb      	strb	r3, [r7, #11]
 80f537e:	4613      	mov	r3, r2
 80f5380:	72bb      	strb	r3, [r7, #10]
    data_comm_rx_process_message( &(bootloader.data_comm), time_ms, type, id, data, size);
 80f5382:	7ab9      	ldrb	r1, [r7, #10]
 80f5384:	7afa      	ldrb	r2, [r7, #11]
 80f5386:	8b3b      	ldrh	r3, [r7, #24]
 80f5388:	9301      	str	r3, [sp, #4]
 80f538a:	687b      	ldr	r3, [r7, #4]
 80f538c:	9300      	str	r3, [sp, #0]
 80f538e:	460b      	mov	r3, r1
 80f5390:	68f9      	ldr	r1, [r7, #12]
 80f5392:	4803      	ldr	r0, [pc, #12]	@ (80f53a0 <bootloader_rx_message_received+0x30>)
 80f5394:	f000 fdf0 	bl	80f5f78 <data_comm_rx_process_message>
}
 80f5398:	bf00      	nop
 80f539a:	3710      	adds	r7, #16
 80f539c:	46bd      	mov	sp, r7
 80f539e:	bd80      	pop	{r7, pc}
 80f53a0:	20002744 	.word	0x20002744

080f53a4 <bootloader_start_app>:

void bootloader_start_app( bool jump )
{
 80f53a4:	b480      	push	{r7}
 80f53a6:	b083      	sub	sp, #12
 80f53a8:	af00      	add	r7, sp, #0
 80f53aa:	4603      	mov	r3, r0
 80f53ac:	71fb      	strb	r3, [r7, #7]
    // if (bootloader.app_found && bootloader.app_verified && bootloader.state == BOOT_STATE_IDLE) {
        bootloader.jump_to_app=jump;
 80f53ae:	4a05      	ldr	r2, [pc, #20]	@ (80f53c4 <bootloader_start_app+0x20>)
 80f53b0:	79fb      	ldrb	r3, [r7, #7]
 80f53b2:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    // }
    // return false;
}
 80f53b6:	bf00      	nop
 80f53b8:	370c      	adds	r7, #12
 80f53ba:	46bd      	mov	sp, r7
 80f53bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f53c0:	4770      	bx	lr
 80f53c2:	bf00      	nop
 80f53c4:	20002720 	.word	0x20002720

080f53c8 <bootloader_stay>:

void bootloader_stay(bool stay) {
 80f53c8:	b480      	push	{r7}
 80f53ca:	b083      	sub	sp, #12
 80f53cc:	af00      	add	r7, sp, #0
 80f53ce:	4603      	mov	r3, r0
 80f53d0:	71fb      	strb	r3, [r7, #7]
    bootloader.stay_in_bootloader=stay;
 80f53d2:	4a05      	ldr	r2, [pc, #20]	@ (80f53e8 <bootloader_stay+0x20>)
 80f53d4:	79fb      	ldrb	r3, [r7, #7]
 80f53d6:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
}
 80f53da:	bf00      	nop
 80f53dc:	370c      	adds	r7, #12
 80f53de:	46bd      	mov	sp, r7
 80f53e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f53e4:	4770      	bx	lr
 80f53e6:	bf00      	nop
 80f53e8:	20002720 	.word	0x20002720

080f53ec <bootloader_get_installed_fw_version>:

uint32_t bootloader_get_installed_fw_version(void)
{
 80f53ec:	b480      	push	{r7}
 80f53ee:	af00      	add	r7, sp, #0
    return bootloader.app_info.info.fw_version;
 80f53f0:	4b03      	ldr	r3, [pc, #12]	@ (80f5400 <bootloader_get_installed_fw_version+0x14>)
 80f53f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
}
 80f53f6:	4618      	mov	r0, r3
 80f53f8:	46bd      	mov	sp, r7
 80f53fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f53fe:	4770      	bx	lr
 80f5400:	20002720 	.word	0x20002720

080f5404 <fw_verification_process_header>:
#include "fw_verification.h"
// Firmware header structure


// Verify the firmware header's signature using the public key
int fw_verification_process_header(const fw_header_t* header, const public_key_t* public_key) {
 80f5404:	b580      	push	{r7, lr}
 80f5406:	b0aa      	sub	sp, #168	@ 0xa8
 80f5408:	af02      	add	r7, sp, #8
 80f540a:	6078      	str	r0, [r7, #4]
 80f540c:	6039      	str	r1, [r7, #0]

    if (header==NULL) {
 80f540e:	687b      	ldr	r3, [r7, #4]
 80f5410:	2b00      	cmp	r3, #0
 80f5412:	d102      	bne.n	80f541a <fw_verification_process_header+0x16>
        return -2;
 80f5414:	f06f 0301 	mvn.w	r3, #1
 80f5418:	e02b      	b.n	80f5472 <fw_verification_process_header+0x6e>
    }

    uint8_t header_hash[32];
    struct tc_sha256_state_struct sha_ctx;
    const struct uECC_Curve_t * curve = uECC_secp256r1();
 80f541a:	f002 fa1d 	bl	80f7858 <uECC_secp256r1>
 80f541e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    // Hash the header (excluding the signature fields)
    tc_sha256_init(&sha_ctx);
 80f5422:	f107 0308 	add.w	r3, r7, #8
 80f5426:	4618      	mov	r0, r3
 80f5428:	f002 ffc2 	bl	80f83b0 <tc_sha256_init>
    tc_sha256_update(&sha_ctx, (uint8_t *)header, sizeof(fw_header_t) - sizeof(header->signature));
 80f542c:	f107 0308 	add.w	r3, r7, #8
 80f5430:	2240      	movs	r2, #64	@ 0x40
 80f5432:	6879      	ldr	r1, [r7, #4]
 80f5434:	4618      	mov	r0, r3
 80f5436:	f002 fff7 	bl	80f8428 <tc_sha256_update>
    tc_sha256_final(header_hash, &sha_ctx);
 80f543a:	f107 0208 	add.w	r2, r7, #8
 80f543e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80f5442:	4611      	mov	r1, r2
 80f5444:	4618      	mov	r0, r3
 80f5446:	f003 f832 	bl	80f84ae <tc_sha256_final>

    // Verify the ECDSA signature
    if (uECC_verify(public_key->key, header_hash, sizeof(header_hash), header->signature,  curve)) {
 80f544a:	6838      	ldr	r0, [r7, #0]
 80f544c:	687b      	ldr	r3, [r7, #4]
 80f544e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80f5452:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80f5456:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80f545a:	9300      	str	r3, [sp, #0]
 80f545c:	4613      	mov	r3, r2
 80f545e:	2220      	movs	r2, #32
 80f5460:	f002 fcd4 	bl	80f7e0c <uECC_verify>
 80f5464:	4603      	mov	r3, r0
 80f5466:	2b00      	cmp	r3, #0
 80f5468:	d001      	beq.n	80f546e <fw_verification_process_header+0x6a>
        return 0;  // Signature valid
 80f546a:	2300      	movs	r3, #0
 80f546c:	e001      	b.n	80f5472 <fw_verification_process_header+0x6e>
    } else {
        return -1; // Signature invalid
 80f546e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80f5472:	4618      	mov	r0, r3
 80f5474:	37a0      	adds	r7, #160	@ 0xa0
 80f5476:	46bd      	mov	sp, r7
 80f5478:	bd80      	pop	{r7, pc}

080f547a <fw_verification_process_init>:

int fw_verification_process_init(fw_t* firmware, const fw_header_t* header, const public_key_t* public_key) {
 80f547a:	b580      	push	{r7, lr}
 80f547c:	b086      	sub	sp, #24
 80f547e:	af00      	add	r7, sp, #0
 80f5480:	60f8      	str	r0, [r7, #12]
 80f5482:	60b9      	str	r1, [r7, #8]
 80f5484:	607a      	str	r2, [r7, #4]
    if (firmware==NULL || header==NULL) {
 80f5486:	68fb      	ldr	r3, [r7, #12]
 80f5488:	2b00      	cmp	r3, #0
 80f548a:	d002      	beq.n	80f5492 <fw_verification_process_init+0x18>
 80f548c:	68bb      	ldr	r3, [r7, #8]
 80f548e:	2b00      	cmp	r3, #0
 80f5490:	d102      	bne.n	80f5498 <fw_verification_process_init+0x1e>
        return -2;
 80f5492:	f06f 0301 	mvn.w	r3, #1
 80f5496:	e015      	b.n	80f54c4 <fw_verification_process_init+0x4a>
    }
    int result = fw_verification_process_header(header,public_key);
 80f5498:	6879      	ldr	r1, [r7, #4]
 80f549a:	68b8      	ldr	r0, [r7, #8]
 80f549c:	f7ff ffb2 	bl	80f5404 <fw_verification_process_header>
 80f54a0:	6178      	str	r0, [r7, #20]
    if (result!=0) {
 80f54a2:	697b      	ldr	r3, [r7, #20]
 80f54a4:	2b00      	cmp	r3, #0
 80f54a6:	d001      	beq.n	80f54ac <fw_verification_process_init+0x32>
        return result;
 80f54a8:	697b      	ldr	r3, [r7, #20]
 80f54aa:	e00b      	b.n	80f54c4 <fw_verification_process_init+0x4a>
    }
    tc_sha256_init(&firmware->sha_ctx);
 80f54ac:	68fb      	ldr	r3, [r7, #12]
 80f54ae:	3308      	adds	r3, #8
 80f54b0:	4618      	mov	r0, r3
 80f54b2:	f002 ff7d 	bl	80f83b0 <tc_sha256_init>
    firmware->header=header;
 80f54b6:	68fb      	ldr	r3, [r7, #12]
 80f54b8:	68ba      	ldr	r2, [r7, #8]
 80f54ba:	679a      	str	r2, [r3, #120]	@ 0x78
    firmware->bytes_processed=0;
 80f54bc:	68fb      	ldr	r3, [r7, #12]
 80f54be:	2200      	movs	r2, #0
 80f54c0:	601a      	str	r2, [r3, #0]

    return 0;
 80f54c2:	2300      	movs	r3, #0
}
 80f54c4:	4618      	mov	r0, r3
 80f54c6:	3718      	adds	r7, #24
 80f54c8:	46bd      	mov	sp, r7
 80f54ca:	bd80      	pop	{r7, pc}

080f54cc <fw_verification_process_binary>:

// Process binary data in chunks
int fw_verification_process_binary(fw_t* firmware, uint8_t* data, uint32_t size) {
 80f54cc:	b580      	push	{r7, lr}
 80f54ce:	b08c      	sub	sp, #48	@ 0x30
 80f54d0:	af00      	add	r7, sp, #0
 80f54d2:	60f8      	str	r0, [r7, #12]
 80f54d4:	60b9      	str	r1, [r7, #8]
 80f54d6:	607a      	str	r2, [r7, #4]
    if (firmware==NULL || firmware->header==NULL || data==NULL) {
 80f54d8:	68fb      	ldr	r3, [r7, #12]
 80f54da:	2b00      	cmp	r3, #0
 80f54dc:	d006      	beq.n	80f54ec <fw_verification_process_binary+0x20>
 80f54de:	68fb      	ldr	r3, [r7, #12]
 80f54e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f54e2:	2b00      	cmp	r3, #0
 80f54e4:	d002      	beq.n	80f54ec <fw_verification_process_binary+0x20>
 80f54e6:	68bb      	ldr	r3, [r7, #8]
 80f54e8:	2b00      	cmp	r3, #0
 80f54ea:	d102      	bne.n	80f54f2 <fw_verification_process_binary+0x26>
        return -1;  // Null pointer error
 80f54ec:	f04f 33ff 	mov.w	r3, #4294967295
 80f54f0:	e03a      	b.n	80f5568 <fw_verification_process_binary+0x9c>
    }

    // Ensure the size doesn't exceed the remaining firmware size
    if (firmware->bytes_processed + size > firmware->header->fw_info.fw_size) {
 80f54f2:	68fb      	ldr	r3, [r7, #12]
 80f54f4:	681a      	ldr	r2, [r3, #0]
 80f54f6:	687b      	ldr	r3, [r7, #4]
 80f54f8:	441a      	add	r2, r3
 80f54fa:	68fb      	ldr	r3, [r7, #12]
 80f54fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f54fe:	6a1b      	ldr	r3, [r3, #32]
 80f5500:	429a      	cmp	r2, r3
 80f5502:	d902      	bls.n	80f550a <fw_verification_process_binary+0x3e>
        return -2;  // Out of bounds
 80f5504:	f06f 0301 	mvn.w	r3, #1
 80f5508:	e02e      	b.n	80f5568 <fw_verification_process_binary+0x9c>
    }

    // Update the cumulative SHA-256 hash
    tc_sha256_update(&firmware->sha_ctx, data, size);
 80f550a:	68fb      	ldr	r3, [r7, #12]
 80f550c:	3308      	adds	r3, #8
 80f550e:	687a      	ldr	r2, [r7, #4]
 80f5510:	68b9      	ldr	r1, [r7, #8]
 80f5512:	4618      	mov	r0, r3
 80f5514:	f002 ff88 	bl	80f8428 <tc_sha256_update>
    firmware->bytes_processed += size;
 80f5518:	68fb      	ldr	r3, [r7, #12]
 80f551a:	681a      	ldr	r2, [r3, #0]
 80f551c:	687b      	ldr	r3, [r7, #4]
 80f551e:	441a      	add	r2, r3
 80f5520:	68fb      	ldr	r3, [r7, #12]
 80f5522:	601a      	str	r2, [r3, #0]

    // Check if the entire binary has been processed
    if (firmware->bytes_processed == firmware->header->fw_info.fw_size) {
 80f5524:	68fb      	ldr	r3, [r7, #12]
 80f5526:	681a      	ldr	r2, [r3, #0]
 80f5528:	68fb      	ldr	r3, [r7, #12]
 80f552a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f552c:	6a1b      	ldr	r3, [r3, #32]
 80f552e:	429a      	cmp	r2, r3
 80f5530:	d119      	bne.n	80f5566 <fw_verification_process_binary+0x9a>
        uint8_t final_hash[32];
        tc_sha256_final(final_hash, &firmware->sha_ctx);
 80f5532:	68fb      	ldr	r3, [r7, #12]
 80f5534:	f103 0208 	add.w	r2, r3, #8
 80f5538:	f107 0310 	add.w	r3, r7, #16
 80f553c:	4611      	mov	r1, r2
 80f553e:	4618      	mov	r0, r3
 80f5540:	f002 ffb5 	bl	80f84ae <tc_sha256_final>

        // Verify the final hash matches the one in the header
        if (memcmp(final_hash, firmware->header->fw_hash, 32) == 0) {
 80f5544:	68fb      	ldr	r3, [r7, #12]
 80f5546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80f5548:	4619      	mov	r1, r3
 80f554a:	f107 0310 	add.w	r3, r7, #16
 80f554e:	2220      	movs	r2, #32
 80f5550:	4618      	mov	r0, r3
 80f5552:	f004 fc52 	bl	80f9dfa <memcmp>
 80f5556:	4603      	mov	r3, r0
 80f5558:	2b00      	cmp	r3, #0
 80f555a:	d101      	bne.n	80f5560 <fw_verification_process_binary+0x94>
            return 1;  // Firmware successfully processed
 80f555c:	2301      	movs	r3, #1
 80f555e:	e003      	b.n	80f5568 <fw_verification_process_binary+0x9c>
        } else {
            return -3;  // Hash mismatch
 80f5560:	f06f 0302 	mvn.w	r3, #2
 80f5564:	e000      	b.n	80f5568 <fw_verification_process_binary+0x9c>
        }
    }

    return 0;  // Processing is incomplete but no errors
 80f5566:	2300      	movs	r3, #0
}
 80f5568:	4618      	mov	r0, r3
 80f556a:	3730      	adds	r7, #48	@ 0x30
 80f556c:	46bd      	mov	sp, r7
 80f556e:	bd80      	pop	{r7, pc}

080f5570 <btea>:


#define DELTA 0x9e3779b9
#define MX (((z>>5^y<<2) + (y>>3^z<<4)) ^ ((sum^y) + (key->key[(p&3)^e] ^ z)))

void btea(uint32_t *v, int n, const btea_key_t* key) {
 80f5570:	b490      	push	{r4, r7}
 80f5572:	b08a      	sub	sp, #40	@ 0x28
 80f5574:	af00      	add	r7, sp, #0
 80f5576:	60f8      	str	r0, [r7, #12]
 80f5578:	60b9      	str	r1, [r7, #8]
 80f557a:	607a      	str	r2, [r7, #4]
    uint32_t y, z, sum;
    unsigned p, rounds, e;
    if (n > 1) {
 80f557c:	68bb      	ldr	r3, [r7, #8]
 80f557e:	2b01      	cmp	r3, #1
 80f5580:	f340 808b 	ble.w	80f569a <btea+0x12a>
        // Coding Part
        rounds = 6 + 52/n;
 80f5584:	2234      	movs	r2, #52	@ 0x34
 80f5586:	68bb      	ldr	r3, [r7, #8]
 80f5588:	fb92 f3f3 	sdiv	r3, r2, r3
 80f558c:	3306      	adds	r3, #6
 80f558e:	617b      	str	r3, [r7, #20]
        sum = 0;
 80f5590:	2300      	movs	r3, #0
 80f5592:	61fb      	str	r3, [r7, #28]
        z = v[n-1];
 80f5594:	68bb      	ldr	r3, [r7, #8]
 80f5596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f559a:	3b01      	subs	r3, #1
 80f559c:	009b      	lsls	r3, r3, #2
 80f559e:	68fa      	ldr	r2, [r7, #12]
 80f55a0:	4413      	add	r3, r2
 80f55a2:	681b      	ldr	r3, [r3, #0]
 80f55a4:	623b      	str	r3, [r7, #32]
        do {
            sum += DELTA;
 80f55a6:	69fa      	ldr	r2, [r7, #28]
 80f55a8:	4b83      	ldr	r3, [pc, #524]	@ (80f57b8 <btea+0x248>)
 80f55aa:	4413      	add	r3, r2
 80f55ac:	61fb      	str	r3, [r7, #28]
            e = (sum >> 2) & 3;
 80f55ae:	69fb      	ldr	r3, [r7, #28]
 80f55b0:	089b      	lsrs	r3, r3, #2
 80f55b2:	f003 0303 	and.w	r3, r3, #3
 80f55b6:	613b      	str	r3, [r7, #16]
            for (p=0; p<n-1; p++) {
 80f55b8:	2300      	movs	r3, #0
 80f55ba:	61bb      	str	r3, [r7, #24]
 80f55bc:	e030      	b.n	80f5620 <btea+0xb0>
                y = v[p+1];
 80f55be:	69bb      	ldr	r3, [r7, #24]
 80f55c0:	3301      	adds	r3, #1
 80f55c2:	009b      	lsls	r3, r3, #2
 80f55c4:	68fa      	ldr	r2, [r7, #12]
 80f55c6:	4413      	add	r3, r2
 80f55c8:	681b      	ldr	r3, [r3, #0]
 80f55ca:	627b      	str	r3, [r7, #36]	@ 0x24
                z = v[p] += MX;
 80f55cc:	69bb      	ldr	r3, [r7, #24]
 80f55ce:	009b      	lsls	r3, r3, #2
 80f55d0:	68fa      	ldr	r2, [r7, #12]
 80f55d2:	4413      	add	r3, r2
 80f55d4:	6819      	ldr	r1, [r3, #0]
 80f55d6:	6a3b      	ldr	r3, [r7, #32]
 80f55d8:	095a      	lsrs	r2, r3, #5
 80f55da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f55dc:	009b      	lsls	r3, r3, #2
 80f55de:	405a      	eors	r2, r3
 80f55e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f55e2:	08d8      	lsrs	r0, r3, #3
 80f55e4:	6a3b      	ldr	r3, [r7, #32]
 80f55e6:	011b      	lsls	r3, r3, #4
 80f55e8:	4043      	eors	r3, r0
 80f55ea:	441a      	add	r2, r3
 80f55ec:	69f8      	ldr	r0, [r7, #28]
 80f55ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f55f0:	4058      	eors	r0, r3
 80f55f2:	69bb      	ldr	r3, [r7, #24]
 80f55f4:	f003 0403 	and.w	r4, r3, #3
 80f55f8:	693b      	ldr	r3, [r7, #16]
 80f55fa:	405c      	eors	r4, r3
 80f55fc:	687b      	ldr	r3, [r7, #4]
 80f55fe:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80f5602:	6a3b      	ldr	r3, [r7, #32]
 80f5604:	4063      	eors	r3, r4
 80f5606:	4403      	add	r3, r0
 80f5608:	405a      	eors	r2, r3
 80f560a:	69bb      	ldr	r3, [r7, #24]
 80f560c:	009b      	lsls	r3, r3, #2
 80f560e:	68f8      	ldr	r0, [r7, #12]
 80f5610:	4403      	add	r3, r0
 80f5612:	440a      	add	r2, r1
 80f5614:	601a      	str	r2, [r3, #0]
 80f5616:	681b      	ldr	r3, [r3, #0]
 80f5618:	623b      	str	r3, [r7, #32]
            for (p=0; p<n-1; p++) {
 80f561a:	69bb      	ldr	r3, [r7, #24]
 80f561c:	3301      	adds	r3, #1
 80f561e:	61bb      	str	r3, [r7, #24]
 80f5620:	68bb      	ldr	r3, [r7, #8]
 80f5622:	3b01      	subs	r3, #1
 80f5624:	461a      	mov	r2, r3
 80f5626:	69bb      	ldr	r3, [r7, #24]
 80f5628:	4293      	cmp	r3, r2
 80f562a:	d3c8      	bcc.n	80f55be <btea+0x4e>
            }
            y = v[0];
 80f562c:	68fb      	ldr	r3, [r7, #12]
 80f562e:	681b      	ldr	r3, [r3, #0]
 80f5630:	627b      	str	r3, [r7, #36]	@ 0x24
            z = v[n-1] += MX;
 80f5632:	68bb      	ldr	r3, [r7, #8]
 80f5634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f5638:	3b01      	subs	r3, #1
 80f563a:	009b      	lsls	r3, r3, #2
 80f563c:	68fa      	ldr	r2, [r7, #12]
 80f563e:	4413      	add	r3, r2
 80f5640:	6819      	ldr	r1, [r3, #0]
 80f5642:	6a3b      	ldr	r3, [r7, #32]
 80f5644:	095a      	lsrs	r2, r3, #5
 80f5646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f5648:	009b      	lsls	r3, r3, #2
 80f564a:	405a      	eors	r2, r3
 80f564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f564e:	08d8      	lsrs	r0, r3, #3
 80f5650:	6a3b      	ldr	r3, [r7, #32]
 80f5652:	011b      	lsls	r3, r3, #4
 80f5654:	4043      	eors	r3, r0
 80f5656:	441a      	add	r2, r3
 80f5658:	69f8      	ldr	r0, [r7, #28]
 80f565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f565c:	4058      	eors	r0, r3
 80f565e:	69bb      	ldr	r3, [r7, #24]
 80f5660:	f003 0403 	and.w	r4, r3, #3
 80f5664:	693b      	ldr	r3, [r7, #16]
 80f5666:	405c      	eors	r4, r3
 80f5668:	687b      	ldr	r3, [r7, #4]
 80f566a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80f566e:	6a3b      	ldr	r3, [r7, #32]
 80f5670:	4063      	eors	r3, r4
 80f5672:	4403      	add	r3, r0
 80f5674:	405a      	eors	r2, r3
 80f5676:	68bb      	ldr	r3, [r7, #8]
 80f5678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f567c:	3b01      	subs	r3, #1
 80f567e:	009b      	lsls	r3, r3, #2
 80f5680:	68f8      	ldr	r0, [r7, #12]
 80f5682:	4403      	add	r3, r0
 80f5684:	440a      	add	r2, r1
 80f5686:	601a      	str	r2, [r3, #0]
 80f5688:	681b      	ldr	r3, [r3, #0]
 80f568a:	623b      	str	r3, [r7, #32]
        } while (--rounds);
 80f568c:	697b      	ldr	r3, [r7, #20]
 80f568e:	3b01      	subs	r3, #1
 80f5690:	617b      	str	r3, [r7, #20]
 80f5692:	697b      	ldr	r3, [r7, #20]
 80f5694:	2b00      	cmp	r3, #0
 80f5696:	d186      	bne.n	80f55a6 <btea+0x36>
            z = v[n-1];
            y = v[0] -= MX;
            sum -= DELTA;
        } while (--rounds);
    }
}
 80f5698:	e089      	b.n	80f57ae <btea+0x23e>
    else if (n < -1) {
 80f569a:	68bb      	ldr	r3, [r7, #8]
 80f569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80f56a0:	f280 8085 	bge.w	80f57ae <btea+0x23e>
        n = -n;
 80f56a4:	68bb      	ldr	r3, [r7, #8]
 80f56a6:	425b      	negs	r3, r3
 80f56a8:	60bb      	str	r3, [r7, #8]
        rounds = 6 + 52/n;
 80f56aa:	2234      	movs	r2, #52	@ 0x34
 80f56ac:	68bb      	ldr	r3, [r7, #8]
 80f56ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80f56b2:	3306      	adds	r3, #6
 80f56b4:	617b      	str	r3, [r7, #20]
        sum = rounds*DELTA;
 80f56b6:	697b      	ldr	r3, [r7, #20]
 80f56b8:	4a3f      	ldr	r2, [pc, #252]	@ (80f57b8 <btea+0x248>)
 80f56ba:	fb02 f303 	mul.w	r3, r2, r3
 80f56be:	61fb      	str	r3, [r7, #28]
        y = v[0];
 80f56c0:	68fb      	ldr	r3, [r7, #12]
 80f56c2:	681b      	ldr	r3, [r3, #0]
 80f56c4:	627b      	str	r3, [r7, #36]	@ 0x24
            e = (sum >> 2) & 3;
 80f56c6:	69fb      	ldr	r3, [r7, #28]
 80f56c8:	089b      	lsrs	r3, r3, #2
 80f56ca:	f003 0303 	and.w	r3, r3, #3
 80f56ce:	613b      	str	r3, [r7, #16]
            for (p=n-1; p>0; p--) {
 80f56d0:	68bb      	ldr	r3, [r7, #8]
 80f56d2:	3b01      	subs	r3, #1
 80f56d4:	61bb      	str	r3, [r7, #24]
 80f56d6:	e032      	b.n	80f573e <btea+0x1ce>
                z = v[p-1];
 80f56d8:	69bb      	ldr	r3, [r7, #24]
 80f56da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f56de:	3b01      	subs	r3, #1
 80f56e0:	009b      	lsls	r3, r3, #2
 80f56e2:	68fa      	ldr	r2, [r7, #12]
 80f56e4:	4413      	add	r3, r2
 80f56e6:	681b      	ldr	r3, [r3, #0]
 80f56e8:	623b      	str	r3, [r7, #32]
                y = v[p] -= MX;
 80f56ea:	69bb      	ldr	r3, [r7, #24]
 80f56ec:	009b      	lsls	r3, r3, #2
 80f56ee:	68fa      	ldr	r2, [r7, #12]
 80f56f0:	4413      	add	r3, r2
 80f56f2:	6819      	ldr	r1, [r3, #0]
 80f56f4:	6a3b      	ldr	r3, [r7, #32]
 80f56f6:	095a      	lsrs	r2, r3, #5
 80f56f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f56fa:	009b      	lsls	r3, r3, #2
 80f56fc:	405a      	eors	r2, r3
 80f56fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f5700:	08d8      	lsrs	r0, r3, #3
 80f5702:	6a3b      	ldr	r3, [r7, #32]
 80f5704:	011b      	lsls	r3, r3, #4
 80f5706:	4043      	eors	r3, r0
 80f5708:	441a      	add	r2, r3
 80f570a:	69f8      	ldr	r0, [r7, #28]
 80f570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f570e:	4058      	eors	r0, r3
 80f5710:	69bb      	ldr	r3, [r7, #24]
 80f5712:	f003 0403 	and.w	r4, r3, #3
 80f5716:	693b      	ldr	r3, [r7, #16]
 80f5718:	405c      	eors	r4, r3
 80f571a:	687b      	ldr	r3, [r7, #4]
 80f571c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80f5720:	6a3b      	ldr	r3, [r7, #32]
 80f5722:	4063      	eors	r3, r4
 80f5724:	4403      	add	r3, r0
 80f5726:	405a      	eors	r2, r3
 80f5728:	69bb      	ldr	r3, [r7, #24]
 80f572a:	009b      	lsls	r3, r3, #2
 80f572c:	68f8      	ldr	r0, [r7, #12]
 80f572e:	4403      	add	r3, r0
 80f5730:	1a8a      	subs	r2, r1, r2
 80f5732:	601a      	str	r2, [r3, #0]
 80f5734:	681b      	ldr	r3, [r3, #0]
 80f5736:	627b      	str	r3, [r7, #36]	@ 0x24
            for (p=n-1; p>0; p--) {
 80f5738:	69bb      	ldr	r3, [r7, #24]
 80f573a:	3b01      	subs	r3, #1
 80f573c:	61bb      	str	r3, [r7, #24]
 80f573e:	69bb      	ldr	r3, [r7, #24]
 80f5740:	2b00      	cmp	r3, #0
 80f5742:	d1c9      	bne.n	80f56d8 <btea+0x168>
            z = v[n-1];
 80f5744:	68bb      	ldr	r3, [r7, #8]
 80f5746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f574a:	3b01      	subs	r3, #1
 80f574c:	009b      	lsls	r3, r3, #2
 80f574e:	68fa      	ldr	r2, [r7, #12]
 80f5750:	4413      	add	r3, r2
 80f5752:	681b      	ldr	r3, [r3, #0]
 80f5754:	623b      	str	r3, [r7, #32]
            y = v[0] -= MX;
 80f5756:	68fb      	ldr	r3, [r7, #12]
 80f5758:	681a      	ldr	r2, [r3, #0]
 80f575a:	6a3b      	ldr	r3, [r7, #32]
 80f575c:	0959      	lsrs	r1, r3, #5
 80f575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f5760:	009b      	lsls	r3, r3, #2
 80f5762:	4059      	eors	r1, r3
 80f5764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f5766:	08d8      	lsrs	r0, r3, #3
 80f5768:	6a3b      	ldr	r3, [r7, #32]
 80f576a:	011b      	lsls	r3, r3, #4
 80f576c:	4043      	eors	r3, r0
 80f576e:	4419      	add	r1, r3
 80f5770:	69f8      	ldr	r0, [r7, #28]
 80f5772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f5774:	4058      	eors	r0, r3
 80f5776:	69bb      	ldr	r3, [r7, #24]
 80f5778:	f003 0403 	and.w	r4, r3, #3
 80f577c:	693b      	ldr	r3, [r7, #16]
 80f577e:	405c      	eors	r4, r3
 80f5780:	687b      	ldr	r3, [r7, #4]
 80f5782:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80f5786:	6a3b      	ldr	r3, [r7, #32]
 80f5788:	4063      	eors	r3, r4
 80f578a:	4403      	add	r3, r0
 80f578c:	404b      	eors	r3, r1
 80f578e:	1ad2      	subs	r2, r2, r3
 80f5790:	68fb      	ldr	r3, [r7, #12]
 80f5792:	601a      	str	r2, [r3, #0]
 80f5794:	68fb      	ldr	r3, [r7, #12]
 80f5796:	681b      	ldr	r3, [r3, #0]
 80f5798:	627b      	str	r3, [r7, #36]	@ 0x24
            sum -= DELTA;
 80f579a:	69fa      	ldr	r2, [r7, #28]
 80f579c:	4b07      	ldr	r3, [pc, #28]	@ (80f57bc <btea+0x24c>)
 80f579e:	4413      	add	r3, r2
 80f57a0:	61fb      	str	r3, [r7, #28]
        } while (--rounds);
 80f57a2:	697b      	ldr	r3, [r7, #20]
 80f57a4:	3b01      	subs	r3, #1
 80f57a6:	617b      	str	r3, [r7, #20]
 80f57a8:	697b      	ldr	r3, [r7, #20]
 80f57aa:	2b00      	cmp	r3, #0
 80f57ac:	d18b      	bne.n	80f56c6 <btea+0x156>
}
 80f57ae:	bf00      	nop
 80f57b0:	3728      	adds	r7, #40	@ 0x28
 80f57b2:	46bd      	mov	sp, r7
 80f57b4:	bc90      	pop	{r4, r7}
 80f57b6:	4770      	bx	lr
 80f57b8:	9e3779b9 	.word	0x9e3779b9
 80f57bc:	61c88647 	.word	0x61c88647

080f57c0 <set_state>:
#endif




static void set_state(data_comm_rx_t* self, data_comm_rx_state_t state) {
 80f57c0:	b580      	push	{r7, lr}
 80f57c2:	b082      	sub	sp, #8
 80f57c4:	af00      	add	r7, sp, #0
 80f57c6:	6078      	str	r0, [r7, #4]
 80f57c8:	460b      	mov	r3, r1
 80f57ca:	70fb      	strb	r3, [r7, #3]
    assert(self);
 80f57cc:	687b      	ldr	r3, [r7, #4]
 80f57ce:	2b00      	cmp	r3, #0
 80f57d0:	d105      	bne.n	80f57de <set_state+0x1e>
 80f57d2:	4b0c      	ldr	r3, [pc, #48]	@ (80f5804 <set_state+0x44>)
 80f57d4:	4a0c      	ldr	r2, [pc, #48]	@ (80f5808 <set_state+0x48>)
 80f57d6:	212d      	movs	r1, #45	@ 0x2d
 80f57d8:	480c      	ldr	r0, [pc, #48]	@ (80f580c <set_state+0x4c>)
 80f57da:	f004 f9d9 	bl	80f9b90 <__assert_func>
    if (self->state!=state) {
        LOG_D("[%d] State %d->%d\n",self->now, self->state,state);
    }
    self->state=state;
 80f57de:	687b      	ldr	r3, [r7, #4]
 80f57e0:	78fa      	ldrb	r2, [r7, #3]
 80f57e2:	711a      	strb	r2, [r3, #4]
    self->timeout_timer=self->now;
 80f57e4:	687b      	ldr	r3, [r7, #4]
 80f57e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80f57e8:	687b      	ldr	r3, [r7, #4]
 80f57ea:	635a      	str	r2, [r3, #52]	@ 0x34
    self->count=0;
 80f57ec:	687b      	ldr	r3, [r7, #4]
 80f57ee:	2200      	movs	r2, #0
 80f57f0:	631a      	str	r2, [r3, #48]	@ 0x30
    self->delay_timer=self->now;
 80f57f2:	687b      	ldr	r3, [r7, #4]
 80f57f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80f57f6:	687b      	ldr	r3, [r7, #4]
 80f57f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80f57fa:	bf00      	nop
 80f57fc:	3708      	adds	r7, #8
 80f57fe:	46bd      	mov	sp, r7
 80f5800:	bd80      	pop	{r7, pc}
 80f5802:	bf00      	nop
 80f5804:	080face8 	.word	0x080face8
 80f5808:	080fae9c 	.word	0x080fae9c
 80f580c:	080facf0 	.word	0x080facf0

080f5810 <check_delay>:

static bool check_delay(data_comm_rx_t* self, uint32_t delay) {
 80f5810:	b480      	push	{r7}
 80f5812:	b083      	sub	sp, #12
 80f5814:	af00      	add	r7, sp, #0
 80f5816:	6078      	str	r0, [r7, #4]
 80f5818:	6039      	str	r1, [r7, #0]
    if (self->now - self->delay_timer<=delay) {
 80f581a:	687b      	ldr	r3, [r7, #4]
 80f581c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80f581e:	687b      	ldr	r3, [r7, #4]
 80f5820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f5822:	1ad3      	subs	r3, r2, r3
 80f5824:	683a      	ldr	r2, [r7, #0]
 80f5826:	429a      	cmp	r2, r3
 80f5828:	d301      	bcc.n	80f582e <check_delay+0x1e>
        return false;
 80f582a:	2300      	movs	r3, #0
 80f582c:	e004      	b.n	80f5838 <check_delay+0x28>
    }
    // LOG_D("[%d] Delay %d finished\n",self->now, delay);
    self->delay_timer=self->now;
 80f582e:	687b      	ldr	r3, [r7, #4]
 80f5830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80f5832:	687b      	ldr	r3, [r7, #4]
 80f5834:	62da      	str	r2, [r3, #44]	@ 0x2c
    return true;
 80f5836:	2301      	movs	r3, #1
}
 80f5838:	4618      	mov	r0, r3
 80f583a:	370c      	adds	r7, #12
 80f583c:	46bd      	mov	sp, r7
 80f583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f5842:	4770      	bx	lr

080f5844 <check_timeout>:

static bool check_timeout(data_comm_rx_t* self, uint32_t timeout) {
 80f5844:	b480      	push	{r7}
 80f5846:	b083      	sub	sp, #12
 80f5848:	af00      	add	r7, sp, #0
 80f584a:	6078      	str	r0, [r7, #4]
 80f584c:	6039      	str	r1, [r7, #0]
    if (self->now - self->timeout_timer<=timeout) {
 80f584e:	687b      	ldr	r3, [r7, #4]
 80f5850:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80f5852:	687b      	ldr	r3, [r7, #4]
 80f5854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f5856:	1ad3      	subs	r3, r2, r3
 80f5858:	683a      	ldr	r2, [r7, #0]
 80f585a:	429a      	cmp	r2, r3
 80f585c:	d301      	bcc.n	80f5862 <check_timeout+0x1e>
        return false;
 80f585e:	2300      	movs	r3, #0
 80f5860:	e000      	b.n	80f5864 <check_timeout+0x20>
    }
    LOG_D("[%d] Timeout %d\n",self->now, timeout);
    return true;
 80f5862:	2301      	movs	r3, #1
}
 80f5864:	4618      	mov	r0, r3
 80f5866:	370c      	adds	r7, #12
 80f5868:	46bd      	mov	sp, r7
 80f586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f586e:	4770      	bx	lr

080f5870 <check_count>:

static bool check_count(data_comm_rx_t* self, uint32_t count) {
 80f5870:	b480      	push	{r7}
 80f5872:	b083      	sub	sp, #12
 80f5874:	af00      	add	r7, sp, #0
 80f5876:	6078      	str	r0, [r7, #4]
 80f5878:	6039      	str	r1, [r7, #0]
    if (self->count<count) {
 80f587a:	687b      	ldr	r3, [r7, #4]
 80f587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f587e:	683a      	ldr	r2, [r7, #0]
 80f5880:	429a      	cmp	r2, r3
 80f5882:	d90d      	bls.n	80f58a0 <check_count+0x30>
        self->count++;
 80f5884:	687b      	ldr	r3, [r7, #4]
 80f5886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f5888:	1c5a      	adds	r2, r3, #1
 80f588a:	687b      	ldr	r3, [r7, #4]
 80f588c:	631a      	str	r2, [r3, #48]	@ 0x30
        if (self->count==count) {
 80f588e:	687b      	ldr	r3, [r7, #4]
 80f5890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f5892:	683a      	ldr	r2, [r7, #0]
 80f5894:	429a      	cmp	r2, r3
 80f5896:	d101      	bne.n	80f589c <check_count+0x2c>
            LOG_D("[%d] Count %d reached\n",self->now, count);
            return true;
 80f5898:	2301      	movs	r3, #1
 80f589a:	e002      	b.n	80f58a2 <check_count+0x32>
        }
        return false;
 80f589c:	2300      	movs	r3, #0
 80f589e:	e000      	b.n	80f58a2 <check_count+0x32>
    }
    return true;
 80f58a0:	2301      	movs	r3, #1
}
 80f58a2:	4618      	mov	r0, r3
 80f58a4:	370c      	adds	r7, #12
 80f58a6:	46bd      	mov	sp, r7
 80f58a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f58ac:	4770      	bx	lr

080f58ae <request_burst>:

static void request_burst(data_comm_rx_t* self, uint32_t sequence) {
 80f58ae:	b580      	push	{r7, lr}
 80f58b0:	b082      	sub	sp, #8
 80f58b2:	af00      	add	r7, sp, #0
 80f58b4:	6078      	str	r0, [r7, #4]
 80f58b6:	6039      	str	r1, [r7, #0]
    self->burst_size=0;
 80f58b8:	687b      	ldr	r3, [r7, #4]
 80f58ba:	2200      	movs	r2, #0
 80f58bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    self->burst_sequence=sequence;
 80f58c0:	687b      	ldr	r3, [r7, #4]
 80f58c2:	683a      	ldr	r2, [r7, #0]
 80f58c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    self->burst_index=0;
 80f58c6:	687b      	ldr	r3, [r7, #4]
 80f58c8:	2200      	movs	r2, #0
 80f58ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    self->expected_sequence=self->burst_sequence;
 80f58cc:	687b      	ldr	r3, [r7, #4]
 80f58ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80f58d0:	687b      	ldr	r3, [r7, #4]
 80f58d2:	649a      	str	r2, [r3, #72]	@ 0x48
    set_state(self,DATA_COMM_RX_STATE_SEND_BURST_REQ_AND_WAIT_BURST_CRC);
 80f58d4:	2102      	movs	r1, #2
 80f58d6:	6878      	ldr	r0, [r7, #4]
 80f58d8:	f7ff ff72 	bl	80f57c0 <set_state>
}
 80f58dc:	bf00      	nop
 80f58de:	3708      	adds	r7, #8
 80f58e0:	46bd      	mov	sp, r7
 80f58e2:	bd80      	pop	{r7, pc}

080f58e4 <retry_burst>:

static bool retry_burst(data_comm_rx_t* self, uint32_t sequence) {
 80f58e4:	b580      	push	{r7, lr}
 80f58e6:	b084      	sub	sp, #16
 80f58e8:	af00      	add	r7, sp, #0
 80f58ea:	6078      	str	r0, [r7, #4]
 80f58ec:	6039      	str	r1, [r7, #0]

    const data_comm_rx_config_t* config = self->settings.config;
 80f58ee:	687b      	ldr	r3, [r7, #4]
 80f58f0:	689b      	ldr	r3, [r3, #8]
 80f58f2:	60fb      	str	r3, [r7, #12]
    // const data_comm_rx_settings_t* settings = &self->settings;
    if (self->burst_retries<config->max_retries_burst) {
 80f58f4:	687b      	ldr	r3, [r7, #4]
 80f58f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80f58f8:	68fb      	ldr	r3, [r7, #12]
 80f58fa:	685b      	ldr	r3, [r3, #4]
 80f58fc:	429a      	cmp	r2, r3
 80f58fe:	d20a      	bcs.n	80f5916 <retry_burst+0x32>
        LOG_I("[%d] %d. Retry burst %d/%d", self->now, self->state,self->burst_retries,config->max_retries_burst);
        self->burst_retries++;
 80f5900:	687b      	ldr	r3, [r7, #4]
 80f5902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80f5904:	1c5a      	adds	r2, r3, #1
 80f5906:	687b      	ldr	r3, [r7, #4]
 80f5908:	651a      	str	r2, [r3, #80]	@ 0x50
        request_burst(self,sequence);
 80f590a:	6839      	ldr	r1, [r7, #0]
 80f590c:	6878      	ldr	r0, [r7, #4]
 80f590e:	f7ff ffce 	bl	80f58ae <request_burst>
        return true;
 80f5912:	2301      	movs	r3, #1
 80f5914:	e000      	b.n	80f5918 <retry_burst+0x34>
    }
    LOG_E("[%d] %d. Max burst retries %d/%d", self->now, self->state,self->burst_retries,config->max_retries_burst);
    return false;
 80f5916:	2300      	movs	r3, #0
}
 80f5918:	4618      	mov	r0, r3
 80f591a:	3710      	adds	r7, #16
 80f591c:	46bd      	mov	sp, r7
 80f591e:	bd80      	pop	{r7, pc}

080f5920 <retry_full>:

static bool retry_full(data_comm_rx_t* self) {
 80f5920:	b580      	push	{r7, lr}
 80f5922:	b084      	sub	sp, #16
 80f5924:	af00      	add	r7, sp, #0
 80f5926:	6078      	str	r0, [r7, #4]

    const data_comm_rx_config_t* config = self->settings.config;
 80f5928:	687b      	ldr	r3, [r7, #4]
 80f592a:	689b      	ldr	r3, [r3, #8]
 80f592c:	60fb      	str	r3, [r7, #12]
    // const data_comm_rx_settings_t* settings = &self->settings;
    if (self->full_retries<config->max_full_retries) {
 80f592e:	687b      	ldr	r3, [r7, #4]
 80f5930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80f5932:	68fb      	ldr	r3, [r7, #12]
 80f5934:	681b      	ldr	r3, [r3, #0]
 80f5936:	429a      	cmp	r2, r3
 80f5938:	d20d      	bcs.n	80f5956 <retry_full+0x36>
        LOG_I("[%d] %d. Retry full %d/%d", self->now, self->state,self->full_retries,config->max_full_retries);
        self->full_retries++;
 80f593a:	687b      	ldr	r3, [r7, #4]
 80f593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80f593e:	1c5a      	adds	r2, r3, #1
 80f5940:	687b      	ldr	r3, [r7, #4]
 80f5942:	655a      	str	r2, [r3, #84]	@ 0x54
        self->burst_retries=0;
 80f5944:	687b      	ldr	r3, [r7, #4]
 80f5946:	2200      	movs	r2, #0
 80f5948:	651a      	str	r2, [r3, #80]	@ 0x50
        request_burst(self,0);
 80f594a:	2100      	movs	r1, #0
 80f594c:	6878      	ldr	r0, [r7, #4]
 80f594e:	f7ff ffae 	bl	80f58ae <request_burst>
        return true;
 80f5952:	2301      	movs	r3, #1
 80f5954:	e000      	b.n	80f5958 <retry_full+0x38>
    }
    LOG_E("[%d] %d. Max full retries %d/%d", self->now, self->state,self->full_retries,config->max_full_retries);
    return false;
 80f5956:	2300      	movs	r3, #0
}
 80f5958:	4618      	mov	r0, r3
 80f595a:	3710      	adds	r7, #16
 80f595c:	46bd      	mov	sp, r7
 80f595e:	bd80      	pop	{r7, pc}

080f5960 <data_comm_rx_is_running>:

bool data_comm_rx_is_running(const data_comm_rx_t* self) {
 80f5960:	b480      	push	{r7}
 80f5962:	b083      	sub	sp, #12
 80f5964:	af00      	add	r7, sp, #0
 80f5966:	6078      	str	r0, [r7, #4]
    if (self->state!=DATA_COMM_RX_STATE_IDLE || self->started) {
 80f5968:	687b      	ldr	r3, [r7, #4]
 80f596a:	791b      	ldrb	r3, [r3, #4]
 80f596c:	2b00      	cmp	r3, #0
 80f596e:	d104      	bne.n	80f597a <data_comm_rx_is_running+0x1a>
 80f5970:	687b      	ldr	r3, [r7, #4]
 80f5972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f5976:	2b00      	cmp	r3, #0
 80f5978:	d001      	beq.n	80f597e <data_comm_rx_is_running+0x1e>
        return true;
 80f597a:	2301      	movs	r3, #1
 80f597c:	e000      	b.n	80f5980 <data_comm_rx_is_running+0x20>
    }
    return false;
 80f597e:	2300      	movs	r3, #0
}
 80f5980:	4618      	mov	r0, r3
 80f5982:	370c      	adds	r7, #12
 80f5984:	46bd      	mov	sp, r7
 80f5986:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f598a:	4770      	bx	lr

080f598c <data_comm_rx_is_receiving>:

bool data_comm_rx_is_receiving(const data_comm_rx_t* self) {
 80f598c:	b480      	push	{r7}
 80f598e:	b083      	sub	sp, #12
 80f5990:	af00      	add	r7, sp, #0
 80f5992:	6078      	str	r0, [r7, #4]
    if (self->state>DATA_COMM_RX_STATE_SEND_READY_AND_WAIT_INFO) {
 80f5994:	687b      	ldr	r3, [r7, #4]
 80f5996:	791b      	ldrb	r3, [r3, #4]
 80f5998:	2b01      	cmp	r3, #1
 80f599a:	d901      	bls.n	80f59a0 <data_comm_rx_is_receiving+0x14>
        return true;
 80f599c:	2301      	movs	r3, #1
 80f599e:	e000      	b.n	80f59a2 <data_comm_rx_is_receiving+0x16>
    }
    return false;
 80f59a0:	2300      	movs	r3, #0
}
 80f59a2:	4618      	mov	r0, r3
 80f59a4:	370c      	adds	r7, #12
 80f59a6:	46bd      	mov	sp, r7
 80f59a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f59ac:	4770      	bx	lr
	...

080f59b0 <data_comm_rx_tick>:

void data_comm_rx_tick(data_comm_rx_t* self, uint32_t time_ms) {
 80f59b0:	b5b0      	push	{r4, r5, r7, lr}
 80f59b2:	b094      	sub	sp, #80	@ 0x50
 80f59b4:	af04      	add	r7, sp, #16
 80f59b6:	6078      	str	r0, [r7, #4]
 80f59b8:	6039      	str	r1, [r7, #0]
    assert(self);
 80f59ba:	687b      	ldr	r3, [r7, #4]
 80f59bc:	2b00      	cmp	r3, #0
 80f59be:	d105      	bne.n	80f59cc <data_comm_rx_tick+0x1c>
 80f59c0:	4b9d      	ldr	r3, [pc, #628]	@ (80f5c38 <data_comm_rx_tick+0x288>)
 80f59c2:	4a9e      	ldr	r2, [pc, #632]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f59c4:	2188      	movs	r1, #136	@ 0x88
 80f59c6:	489e      	ldr	r0, [pc, #632]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f59c8:	f004 f8e2 	bl	80f9b90 <__assert_func>
    assert(self->settings.config);
 80f59cc:	687b      	ldr	r3, [r7, #4]
 80f59ce:	689b      	ldr	r3, [r3, #8]
 80f59d0:	2b00      	cmp	r3, #0
 80f59d2:	d105      	bne.n	80f59e0 <data_comm_rx_tick+0x30>
 80f59d4:	4b9b      	ldr	r3, [pc, #620]	@ (80f5c44 <data_comm_rx_tick+0x294>)
 80f59d6:	4a99      	ldr	r2, [pc, #612]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f59d8:	2189      	movs	r1, #137	@ 0x89
 80f59da:	4899      	ldr	r0, [pc, #612]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f59dc:	f004 f8d8 	bl	80f9b90 <__assert_func>
    assert(self->settings.finish_func);
 80f59e0:	687b      	ldr	r3, [r7, #4]
 80f59e2:	6a1b      	ldr	r3, [r3, #32]
 80f59e4:	2b00      	cmp	r3, #0
 80f59e6:	d105      	bne.n	80f59f4 <data_comm_rx_tick+0x44>
 80f59e8:	4b97      	ldr	r3, [pc, #604]	@ (80f5c48 <data_comm_rx_tick+0x298>)
 80f59ea:	4a94      	ldr	r2, [pc, #592]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f59ec:	218a      	movs	r1, #138	@ 0x8a
 80f59ee:	4894      	ldr	r0, [pc, #592]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f59f0:	f004 f8ce 	bl	80f9b90 <__assert_func>
    assert(self->settings.send_func);
 80f59f4:	687b      	ldr	r3, [r7, #4]
 80f59f6:	69db      	ldr	r3, [r3, #28]
 80f59f8:	2b00      	cmp	r3, #0
 80f59fa:	d105      	bne.n	80f5a08 <data_comm_rx_tick+0x58>
 80f59fc:	4b93      	ldr	r3, [pc, #588]	@ (80f5c4c <data_comm_rx_tick+0x29c>)
 80f59fe:	4a8f      	ldr	r2, [pc, #572]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f5a00:	218b      	movs	r1, #139	@ 0x8b
 80f5a02:	488f      	ldr	r0, [pc, #572]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f5a04:	f004 f8c4 	bl	80f9b90 <__assert_func>
    assert(self->settings.buffer);
 80f5a08:	687b      	ldr	r3, [r7, #4]
 80f5a0a:	68db      	ldr	r3, [r3, #12]
 80f5a0c:	2b00      	cmp	r3, #0
 80f5a0e:	d105      	bne.n	80f5a1c <data_comm_rx_tick+0x6c>
 80f5a10:	4b8f      	ldr	r3, [pc, #572]	@ (80f5c50 <data_comm_rx_tick+0x2a0>)
 80f5a12:	4a8a      	ldr	r2, [pc, #552]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f5a14:	218c      	movs	r1, #140	@ 0x8c
 80f5a16:	488a      	ldr	r0, [pc, #552]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f5a18:	f004 f8ba 	bl	80f9b90 <__assert_func>
    assert(self->settings.buffer_size!=0);
 80f5a1c:	687b      	ldr	r3, [r7, #4]
 80f5a1e:	8a1b      	ldrh	r3, [r3, #16]
 80f5a20:	2b00      	cmp	r3, #0
 80f5a22:	d105      	bne.n	80f5a30 <data_comm_rx_tick+0x80>
 80f5a24:	4b8b      	ldr	r3, [pc, #556]	@ (80f5c54 <data_comm_rx_tick+0x2a4>)
 80f5a26:	4a85      	ldr	r2, [pc, #532]	@ (80f5c3c <data_comm_rx_tick+0x28c>)
 80f5a28:	218d      	movs	r1, #141	@ 0x8d
 80f5a2a:	4885      	ldr	r0, [pc, #532]	@ (80f5c40 <data_comm_rx_tick+0x290>)
 80f5a2c:	f004 f8b0 	bl	80f9b90 <__assert_func>
    self->now=time_ms;
 80f5a30:	687b      	ldr	r3, [r7, #4]
 80f5a32:	683a      	ldr	r2, [r7, #0]
 80f5a34:	659a      	str	r2, [r3, #88]	@ 0x58
    const data_comm_rx_config_t* config = self->settings.config;
 80f5a36:	687b      	ldr	r3, [r7, #4]
 80f5a38:	689b      	ldr	r3, [r3, #8]
 80f5a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    const data_comm_rx_settings_t* settings = &self->settings;
 80f5a3c:	687b      	ldr	r3, [r7, #4]
 80f5a3e:	3308      	adds	r3, #8
 80f5a40:	637b      	str	r3, [r7, #52]	@ 0x34
    switch (self->state) {
 80f5a42:	687b      	ldr	r3, [r7, #4]
 80f5a44:	791b      	ldrb	r3, [r3, #4]
 80f5a46:	2b07      	cmp	r3, #7
 80f5a48:	f200 8292 	bhi.w	80f5f70 <data_comm_rx_tick+0x5c0>
 80f5a4c:	a201      	add	r2, pc, #4	@ (adr r2, 80f5a54 <data_comm_rx_tick+0xa4>)
 80f5a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f5a52:	bf00      	nop
 80f5a54:	080f5a75 	.word	0x080f5a75
 80f5a58:	080f5abd 	.word	0x080f5abd
 80f5a5c:	080f5b3b 	.word	0x080f5b3b
 80f5a60:	080f5c59 	.word	0x080f5c59
 80f5a64:	080f5c99 	.word	0x080f5c99
 80f5a68:	080f5dd3 	.word	0x080f5dd3
 80f5a6c:	080f5e51 	.word	0x080f5e51
 80f5a70:	080f5ed7 	.word	0x080f5ed7
        case DATA_COMM_RX_STATE_IDLE: {
            //In Idle
            if (!self->started) {
 80f5a74:	687b      	ldr	r3, [r7, #4]
 80f5a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f5a7a:	f083 0301 	eor.w	r3, r3, #1
 80f5a7e:	b2db      	uxtb	r3, r3
 80f5a80:	2b00      	cmp	r3, #0
 80f5a82:	d003      	beq.n	80f5a8c <data_comm_rx_tick+0xdc>
                //Doing nothing, not even started
                self->timeout_timer=time_ms;
 80f5a84:	687b      	ldr	r3, [r7, #4]
 80f5a86:	683a      	ldr	r2, [r7, #0]
 80f5a88:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 80f5a8a:	e271      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            }

            //It was started, now we check the timeout
            if (config->prepare_timeout && check_timeout(self,config->prepare_timeout)) {
 80f5a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5a8e:	689b      	ldr	r3, [r3, #8]
 80f5a90:	2b00      	cmp	r3, #0
 80f5a92:	f000 8256 	beq.w	80f5f42 <data_comm_rx_tick+0x592>
 80f5a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5a98:	689b      	ldr	r3, [r3, #8]
 80f5a9a:	4619      	mov	r1, r3
 80f5a9c:	6878      	ldr	r0, [r7, #4]
 80f5a9e:	f7ff fed1 	bl	80f5844 <check_timeout>
 80f5aa2:	4603      	mov	r3, r0
 80f5aa4:	2b00      	cmp	r3, #0
 80f5aa6:	f000 824c 	beq.w	80f5f42 <data_comm_rx_tick+0x592>
                LOG_W("[%d] %s : %d. Timeout, didn't receive Prepare", self->now, __FUNCTION__, self->state);

                //If there was no Prepare message, then Abort everything
                self->status = DATA_COMM_STATUS_PREPARE_TIMEOUT;
 80f5aaa:	687b      	ldr	r3, [r7, #4]
 80f5aac:	2201      	movs	r2, #1
 80f5aae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5ab2:	2106      	movs	r1, #6
 80f5ab4:	6878      	ldr	r0, [r7, #4]
 80f5ab6:	f7ff fe83 	bl	80f57c0 <set_state>
            }
            break;
 80f5aba:	e242      	b.n	80f5f42 <data_comm_rx_tick+0x592>
        }
        case DATA_COMM_RX_STATE_SEND_READY_AND_WAIT_INFO:{
            //While we send the ready message, we wait for the INFO
            if (check_timeout(self,config->info_timeout)) {
 80f5abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5abe:	68db      	ldr	r3, [r3, #12]
 80f5ac0:	4619      	mov	r1, r3
 80f5ac2:	6878      	ldr	r0, [r7, #4]
 80f5ac4:	f7ff febe 	bl	80f5844 <check_timeout>
 80f5ac8:	4603      	mov	r3, r0
 80f5aca:	2b00      	cmp	r3, #0
 80f5acc:	d008      	beq.n	80f5ae0 <data_comm_rx_tick+0x130>
                //Timeout expired, Abort
                LOG_W("[%d] %s : %d. Timeout, didn't receive Info", self->now, __FUNCTION__, self->state);

                self->status = DATA_COMM_STATUS_INFO_TIMEOUT;
 80f5ace:	687b      	ldr	r3, [r7, #4]
 80f5ad0:	2203      	movs	r2, #3
 80f5ad2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5ad6:	2106      	movs	r1, #6
 80f5ad8:	6878      	ldr	r0, [r7, #4]
 80f5ada:	f7ff fe71 	bl	80f57c0 <set_state>
                break;
 80f5ade:	e247      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            }

            if (!check_delay(self, config->ready_status_delay)) {
 80f5ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5ae2:	695b      	ldr	r3, [r3, #20]
 80f5ae4:	4619      	mov	r1, r3
 80f5ae6:	6878      	ldr	r0, [r7, #4]
 80f5ae8:	f7ff fe92 	bl	80f5810 <check_delay>
 80f5aec:	4603      	mov	r3, r0
 80f5aee:	f083 0301 	eor.w	r3, r3, #1
 80f5af2:	b2db      	uxtb	r3, r3
 80f5af4:	2b00      	cmp	r3, #0
 80f5af6:	f040 8226 	bne.w	80f5f46 <data_comm_rx_tick+0x596>
                break;
            }
            //Delay expired, send the READY message
            LOG_I("[%d] %s : %d. Sending Ready", self->now, __FUNCTION__, self->state);

            data_comm_msg_ready_t msg_ready = {
 80f5afa:	23ff      	movs	r3, #255	@ 0xff
 80f5afc:	763b      	strb	r3, [r7, #24]
                .status =DATA_COMM_PEER_STATUS_RSP_READY
            };
            int result = settings->send_func(DATA_COMM_MSG_TYPE_READY_REPORT,settings->id,
 80f5afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5b00:	695c      	ldr	r4, [r3, #20]
 80f5b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5b04:	7a99      	ldrb	r1, [r3, #10]
                (const uint8_t*) &msg_ready,sizeof(msg_ready),NULL,0,settings->context);
 80f5b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5b08:	6a1b      	ldr	r3, [r3, #32]
            int result = settings->send_func(DATA_COMM_MSG_TYPE_READY_REPORT,settings->id,
 80f5b0a:	f107 0218 	add.w	r2, r7, #24
 80f5b0e:	9302      	str	r3, [sp, #8]
 80f5b10:	2300      	movs	r3, #0
 80f5b12:	9301      	str	r3, [sp, #4]
 80f5b14:	2300      	movs	r3, #0
 80f5b16:	9300      	str	r3, [sp, #0]
 80f5b18:	2301      	movs	r3, #1
 80f5b1a:	2001      	movs	r0, #1
 80f5b1c:	47a0      	blx	r4
 80f5b1e:	61f8      	str	r0, [r7, #28]
            if (result!=0) {
 80f5b20:	69fb      	ldr	r3, [r7, #28]
 80f5b22:	2b00      	cmp	r3, #0
 80f5b24:	f000 8211 	beq.w	80f5f4a <data_comm_rx_tick+0x59a>
                //There was an error sending the data, Abort
                LOG_E("[%d] %s : %d. Error sending %d", self->now, __FUNCTION__, self->state,result);
                self->status=DATA_COMM_ERROR_COMM_ERROR;
 80f5b28:	687b      	ldr	r3, [r7, #4]
 80f5b2a:	220c      	movs	r2, #12
 80f5b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5b30:	2106      	movs	r1, #6
 80f5b32:	6878      	ldr	r0, [r7, #4]
 80f5b34:	f7ff fe44 	bl	80f57c0 <set_state>
                break;
 80f5b38:	e21a      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>

            break;
        }
        case DATA_COMM_RX_STATE_SEND_BURST_REQ_AND_WAIT_BURST_CRC: {
            //Wait for the delay
            if (check_delay(self,config->request_delay)) {
 80f5b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5b3c:	69db      	ldr	r3, [r3, #28]
 80f5b3e:	4619      	mov	r1, r3
 80f5b40:	6878      	ldr	r0, [r7, #4]
 80f5b42:	f7ff fe65 	bl	80f5810 <check_delay>
 80f5b46:	4603      	mov	r3, r0
 80f5b48:	2b00      	cmp	r3, #0
 80f5b4a:	d055      	beq.n	80f5bf8 <data_comm_rx_tick+0x248>
                //Delay expired
                if (!check_count(self,config->request_count)) {
 80f5b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5b4e:	699b      	ldr	r3, [r3, #24]
 80f5b50:	4619      	mov	r1, r3
 80f5b52:	6878      	ldr	r0, [r7, #4]
 80f5b54:	f7ff fe8c 	bl	80f5870 <check_count>
 80f5b58:	4603      	mov	r3, r0
 80f5b5a:	f083 0301 	eor.w	r3, r3, #1
 80f5b5e:	b2db      	uxtb	r3, r3
 80f5b60:	2b00      	cmp	r3, #0
 80f5b62:	d049      	beq.n	80f5bf8 <data_comm_rx_tick+0x248>
                    //Count hasn't reached max, send the message
                    //While sending, reset the timeout
                    self->timeout_timer=time_ms;
 80f5b64:	687b      	ldr	r3, [r7, #4]
 80f5b66:	683a      	ldr	r2, [r7, #0]
 80f5b68:	635a      	str	r2, [r3, #52]	@ 0x34

                    //Calculate the requested burst_size
                    //Try to request the rest of the size
                    self->requested_burst_size= self->total_size - self->burst_sequence;
 80f5b6a:	687b      	ldr	r3, [r7, #4]
 80f5b6c:	681b      	ldr	r3, [r3, #0]
 80f5b6e:	b29a      	uxth	r2, r3
 80f5b70:	687b      	ldr	r3, [r7, #4]
 80f5b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5b74:	b29b      	uxth	r3, r3
 80f5b76:	1ad3      	subs	r3, r2, r3
 80f5b78:	b29a      	uxth	r2, r3
 80f5b7a:	687b      	ldr	r3, [r7, #4]
 80f5b7c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
                    //But if it's too big:
                    if (self->requested_burst_size>self->max_burst_size) {
 80f5b80:	687b      	ldr	r3, [r7, #4]
 80f5b82:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80f5b86:	687b      	ldr	r3, [r7, #4]
 80f5b88:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80f5b8a:	429a      	cmp	r2, r3
 80f5b8c:	d904      	bls.n	80f5b98 <data_comm_rx_tick+0x1e8>
                        //Just request the max_burst_size calculated on the INFO reception
                        self->requested_burst_size = self->max_burst_size;
 80f5b8e:	687b      	ldr	r3, [r7, #4]
 80f5b90:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80f5b92:	687b      	ldr	r3, [r7, #4]
 80f5b94:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
                    }
                    //Send the message
                    data_comm_burst_request_t msg_burst_request = {
 80f5b98:	f107 0310 	add.w	r3, r7, #16
 80f5b9c:	2200      	movs	r2, #0
 80f5b9e:	601a      	str	r2, [r3, #0]
 80f5ba0:	711a      	strb	r2, [r3, #4]
                        .burst_size = self->requested_burst_size
 80f5ba2:	687b      	ldr	r3, [r7, #4]
 80f5ba4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
                    data_comm_burst_request_t msg_burst_request = {
 80f5ba8:	f8a7 3013 	strh.w	r3, [r7, #19]
                    };
                    buffer_append_uint24_little(self->burst_sequence, msg_burst_request.sequence);
 80f5bac:	687b      	ldr	r3, [r7, #4]
 80f5bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5bb0:	f107 0210 	add.w	r2, r7, #16
 80f5bb4:	4611      	mov	r1, r2
 80f5bb6:	4618      	mov	r0, r3
 80f5bb8:	f002 ff4b 	bl	80f8a52 <buffer_append_uint24_little>
                    LOG_I("[%d] %s : %d. Sending Burst Req 0x%08x, %d",
                        self->now, __FUNCTION__, self->state, self->burst_sequence, self->requested_burst_size);

                    int result = settings->send_func(DATA_COMM_MSG_TYPE_BURST_REQUEST,settings->id,
 80f5bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5bbe:	695c      	ldr	r4, [r3, #20]
 80f5bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5bc2:	7a99      	ldrb	r1, [r3, #10]
                            (const uint8_t*) &msg_burst_request,sizeof(msg_burst_request),NULL,0,settings->context);
 80f5bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5bc6:	6a1b      	ldr	r3, [r3, #32]
                    int result = settings->send_func(DATA_COMM_MSG_TYPE_BURST_REQUEST,settings->id,
 80f5bc8:	f107 0210 	add.w	r2, r7, #16
 80f5bcc:	9302      	str	r3, [sp, #8]
 80f5bce:	2300      	movs	r3, #0
 80f5bd0:	9301      	str	r3, [sp, #4]
 80f5bd2:	2300      	movs	r3, #0
 80f5bd4:	9300      	str	r3, [sp, #0]
 80f5bd6:	2305      	movs	r3, #5
 80f5bd8:	2003      	movs	r0, #3
 80f5bda:	47a0      	blx	r4
 80f5bdc:	6238      	str	r0, [r7, #32]
                    if (result!=0) {
 80f5bde:	6a3b      	ldr	r3, [r7, #32]
 80f5be0:	2b00      	cmp	r3, #0
 80f5be2:	f000 81b4 	beq.w	80f5f4e <data_comm_rx_tick+0x59e>
                        //There was an error sending, abort
                        self->status=DATA_COMM_ERROR_COMM_ERROR;
 80f5be6:	687b      	ldr	r3, [r7, #4]
 80f5be8:	220c      	movs	r2, #12
 80f5bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5bee:	2106      	movs	r1, #6
 80f5bf0:	6878      	ldr	r0, [r7, #4]
 80f5bf2:	f7ff fde5 	bl	80f57c0 <set_state>
                        break;
 80f5bf6:	e1bb      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                    }
                    break;
                }
            }
            //If after sending the burst request, there's no response
            if (check_timeout(self,config->packets_timeout)) {
 80f5bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5bfa:	691b      	ldr	r3, [r3, #16]
 80f5bfc:	4619      	mov	r1, r3
 80f5bfe:	6878      	ldr	r0, [r7, #4]
 80f5c00:	f7ff fe20 	bl	80f5844 <check_timeout>
 80f5c04:	4603      	mov	r3, r0
 80f5c06:	2b00      	cmp	r3, #0
 80f5c08:	f000 81a3 	beq.w	80f5f52 <data_comm_rx_tick+0x5a2>
                //Timet out
                //Timet out, try to retry
                if (!retry_burst(self,self->burst_sequence)) {
 80f5c0c:	687b      	ldr	r3, [r7, #4]
 80f5c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5c10:	4619      	mov	r1, r3
 80f5c12:	6878      	ldr	r0, [r7, #4]
 80f5c14:	f7ff fe66 	bl	80f58e4 <retry_burst>
 80f5c18:	4603      	mov	r3, r0
 80f5c1a:	f083 0301 	eor.w	r3, r3, #1
 80f5c1e:	b2db      	uxtb	r3, r3
 80f5c20:	2b00      	cmp	r3, #0
 80f5c22:	f000 8196 	beq.w	80f5f52 <data_comm_rx_tick+0x5a2>
                    //No more retries, abort

                    self->status = DATA_COMM_STATUS_REQUEST_TIMEOUT;
 80f5c26:	687b      	ldr	r3, [r7, #4]
 80f5c28:	2205      	movs	r2, #5
 80f5c2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5c2e:	2106      	movs	r1, #6
 80f5c30:	6878      	ldr	r0, [r7, #4]
 80f5c32:	f7ff fdc5 	bl	80f57c0 <set_state>
                }
            }
            break;
 80f5c36:	e18c      	b.n	80f5f52 <data_comm_rx_tick+0x5a2>
 80f5c38:	080face8 	.word	0x080face8
 80f5c3c:	080faea8 	.word	0x080faea8
 80f5c40:	080facf0 	.word	0x080facf0
 80f5c44:	080fad20 	.word	0x080fad20
 80f5c48:	080fad38 	.word	0x080fad38
 80f5c4c:	080fad54 	.word	0x080fad54
 80f5c50:	080fad70 	.word	0x080fad70
 80f5c54:	080fad88 	.word	0x080fad88
        }
        case DATA_COMM_RX_STATE_WAIT_BURST_DATA: {
            //Here we just wait for messages
            if (check_timeout(self,config->packets_timeout)) {
 80f5c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5c5a:	691b      	ldr	r3, [r3, #16]
 80f5c5c:	4619      	mov	r1, r3
 80f5c5e:	6878      	ldr	r0, [r7, #4]
 80f5c60:	f7ff fdf0 	bl	80f5844 <check_timeout>
 80f5c64:	4603      	mov	r3, r0
 80f5c66:	2b00      	cmp	r3, #0
 80f5c68:	f000 8175 	beq.w	80f5f56 <data_comm_rx_tick+0x5a6>
                LOG_W("[%d] %s : %d. Timeout, didn't receive packets", self->now, __FUNCTION__, self->state);
                //Timet out, try to retry
                if (!retry_burst(self,self->burst_sequence)) {
 80f5c6c:	687b      	ldr	r3, [r7, #4]
 80f5c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5c70:	4619      	mov	r1, r3
 80f5c72:	6878      	ldr	r0, [r7, #4]
 80f5c74:	f7ff fe36 	bl	80f58e4 <retry_burst>
 80f5c78:	4603      	mov	r3, r0
 80f5c7a:	f083 0301 	eor.w	r3, r3, #1
 80f5c7e:	b2db      	uxtb	r3, r3
 80f5c80:	2b00      	cmp	r3, #0
 80f5c82:	f000 8168 	beq.w	80f5f56 <data_comm_rx_tick+0x5a6>
                    //No more retries, abort

                    self->status = DATA_COMM_STATUS_REQUEST_TIMEOUT;
 80f5c86:	687b      	ldr	r3, [r7, #4]
 80f5c88:	2205      	movs	r2, #5
 80f5c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5c8e:	2106      	movs	r1, #6
 80f5c90:	6878      	ldr	r0, [r7, #4]
 80f5c92:	f7ff fd95 	bl	80f57c0 <set_state>
                }
            }
            break;
 80f5c96:	e15e      	b.n	80f5f56 <data_comm_rx_tick+0x5a6>
        }
        case DATA_COMM_RX_STATE_BURST_COMPLETE: {
            //We have a complete burst
            uint16_t crc = calc_crc16(settings->buffer, self->burst_size,settings->crc_seed,0);
 80f5c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5c9a:	6858      	ldr	r0, [r3, #4]
 80f5c9c:	687b      	ldr	r3, [r7, #4]
 80f5c9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80f5ca2:	4619      	mov	r1, r3
 80f5ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5ca6:	899a      	ldrh	r2, [r3, #12]
 80f5ca8:	2300      	movs	r3, #0
 80f5caa:	f002 ff45 	bl	80f8b38 <calc_crc16>
 80f5cae:	4603      	mov	r3, r0
 80f5cb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            if (crc!=self->burst_crc) {
 80f5cb2:	687b      	ldr	r3, [r7, #4]
 80f5cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80f5cb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80f5cba:	429a      	cmp	r2, r3
 80f5cbc:	d015      	beq.n	80f5cea <data_comm_rx_tick+0x33a>
                //CRC MISMATCH, try to restart
                LOG_W("[%d] %s : %d. CRC Mismatch %04x != %04x",
                    self->now, __FUNCTION__, self->state,crc,self->burst_crc);

                if (!retry_burst(self,self->burst_sequence)) {
 80f5cbe:	687b      	ldr	r3, [r7, #4]
 80f5cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5cc2:	4619      	mov	r1, r3
 80f5cc4:	6878      	ldr	r0, [r7, #4]
 80f5cc6:	f7ff fe0d 	bl	80f58e4 <retry_burst>
 80f5cca:	4603      	mov	r3, r0
 80f5ccc:	f083 0301 	eor.w	r3, r3, #1
 80f5cd0:	b2db      	uxtb	r3, r3
 80f5cd2:	2b00      	cmp	r3, #0
 80f5cd4:	f000 8141 	beq.w	80f5f5a <data_comm_rx_tick+0x5aa>
                    //Max retry reached, abort
                    self->status = DATA_COMM_STATUS_CRC_MISMATCH;
 80f5cd8:	687b      	ldr	r3, [r7, #4]
 80f5cda:	220a      	movs	r2, #10
 80f5cdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5ce0:	2106      	movs	r1, #6
 80f5ce2:	6878      	ldr	r0, [r7, #4]
 80f5ce4:	f7ff fd6c 	bl	80f57c0 <set_state>
                }
                break;
 80f5ce8:	e137      	b.n	80f5f5a <data_comm_rx_tick+0x5aa>
            }

            uint32_t new_seq = self->burst_sequence+self->burst_size;
 80f5cea:	687b      	ldr	r3, [r7, #4]
 80f5cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5cee:	687a      	ldr	r2, [r7, #4]
 80f5cf0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80f5cf4:	4413      	add	r3, r2
 80f5cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
            bool last_burst = new_seq >= self->total_size;
 80f5cf8:	687b      	ldr	r3, [r7, #4]
 80f5cfa:	681b      	ldr	r3, [r3, #0]
 80f5cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80f5cfe:	429a      	cmp	r2, r3
 80f5d00:	bf2c      	ite	cs
 80f5d02:	2301      	movcs	r3, #1
 80f5d04:	2300      	movcc	r3, #0
 80f5d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            //CRC is OK, send the buffer to the app
            LOG_D("[%d] %s : %d. Calling Write func", self->now, __FUNCTION__, self->state);

            data_comm_rx_write_result_t result = settings->write_func(self->burst_sequence,settings->buffer,self->burst_size,last_burst, settings->context);
 80f5d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5d0c:	691c      	ldr	r4, [r3, #16]
 80f5d0e:	687b      	ldr	r3, [r7, #4]
 80f5d10:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80f5d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5d14:	6859      	ldr	r1, [r3, #4]
 80f5d16:	687b      	ldr	r3, [r7, #4]
 80f5d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80f5d1c:	461d      	mov	r5, r3
 80f5d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5d20:	6a1b      	ldr	r3, [r3, #32]
 80f5d22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80f5d26:	9300      	str	r3, [sp, #0]
 80f5d28:	4613      	mov	r3, r2
 80f5d2a:	462a      	mov	r2, r5
 80f5d2c:	47a0      	blx	r4
 80f5d2e:	4603      	mov	r3, r0
 80f5d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            //What does the app wants to do?
            if (result==DATA_COMM_RX_WRITE_SUCCESS) {
 80f5d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80f5d38:	2b00      	cmp	r3, #0
 80f5d3a:	d110      	bne.n	80f5d5e <data_comm_rx_tick+0x3ae>
                //Calculate the new_sequence based on the completed burst
                LOG_I("[%d] %s : %d. Write func succees", self->now, __FUNCTION__, self->state);

                // assert(new_seq<=self->total_size); //this should be ok, just in case
                //Check if this was the last burst
                if (last_burst) {
 80f5d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80f5d40:	2b00      	cmp	r3, #0
 80f5d42:	d004      	beq.n	80f5d4e <data_comm_rx_tick+0x39e>
                    LOG_I("[%d] %s : %d. Burst complete %d = %d",
                        self->now, __FUNCTION__, self->state, new_seq, self->total_size);

                    // Yes, it was the last burst, send the complete message
                    set_state(self,DATA_COMM_RX_STATE_SEND_COMPLETE);
 80f5d44:	2105      	movs	r1, #5
 80f5d46:	6878      	ldr	r0, [r7, #4]
 80f5d48:	f7ff fd3a 	bl	80f57c0 <set_state>
                LOG_E("[%d] %s : %d. Write func unknown", self->now, __FUNCTION__, self->state);

                self->status=DATA_COMM_ERROR_UNKNOWN_WRITE_RESULT;
                set_state(self,DATA_COMM_RX_STATE_PROCESS);
            }
            break;
 80f5d4c:	e107      	b.n	80f5f5e <data_comm_rx_tick+0x5ae>
                    self->burst_retries=0;
 80f5d4e:	687b      	ldr	r3, [r7, #4]
 80f5d50:	2200      	movs	r2, #0
 80f5d52:	651a      	str	r2, [r3, #80]	@ 0x50
                    request_burst(self,new_seq);
 80f5d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80f5d56:	6878      	ldr	r0, [r7, #4]
 80f5d58:	f7ff fda9 	bl	80f58ae <request_burst>
            break;
 80f5d5c:	e0ff      	b.n	80f5f5e <data_comm_rx_tick+0x5ae>
            else if (result==DATA_COMM_RX_WRITE_ERROR_REPEAT_LAST_BURST) {
 80f5d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80f5d62:	2b01      	cmp	r3, #1
 80f5d64:	d115      	bne.n	80f5d92 <data_comm_rx_tick+0x3e2>
                if (!retry_burst(self,self->burst_sequence)){
 80f5d66:	687b      	ldr	r3, [r7, #4]
 80f5d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f5d6a:	4619      	mov	r1, r3
 80f5d6c:	6878      	ldr	r0, [r7, #4]
 80f5d6e:	f7ff fdb9 	bl	80f58e4 <retry_burst>
 80f5d72:	4603      	mov	r3, r0
 80f5d74:	f083 0301 	eor.w	r3, r3, #1
 80f5d78:	b2db      	uxtb	r3, r3
 80f5d7a:	2b00      	cmp	r3, #0
 80f5d7c:	f000 80ef 	beq.w	80f5f5e <data_comm_rx_tick+0x5ae>
                    self->status = DATA_COMM_STATUS_MAX_BURST_RETRIES;
 80f5d80:	687b      	ldr	r3, [r7, #4]
 80f5d82:	2207      	movs	r2, #7
 80f5d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5d88:	2106      	movs	r1, #6
 80f5d8a:	6878      	ldr	r0, [r7, #4]
 80f5d8c:	f7ff fd18 	bl	80f57c0 <set_state>
            break;
 80f5d90:	e0e5      	b.n	80f5f5e <data_comm_rx_tick+0x5ae>
            else if (result==DATA_COMM_RX_WRITE_ERROR_REPEAT_FROM_BEGGINING) {
 80f5d92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80f5d96:	2b02      	cmp	r3, #2
 80f5d98:	d112      	bne.n	80f5dc0 <data_comm_rx_tick+0x410>
                if (!retry_full(self)) {
 80f5d9a:	6878      	ldr	r0, [r7, #4]
 80f5d9c:	f7ff fdc0 	bl	80f5920 <retry_full>
 80f5da0:	4603      	mov	r3, r0
 80f5da2:	f083 0301 	eor.w	r3, r3, #1
 80f5da6:	b2db      	uxtb	r3, r3
 80f5da8:	2b00      	cmp	r3, #0
 80f5daa:	f000 80d8 	beq.w	80f5f5e <data_comm_rx_tick+0x5ae>
                    self->status=DATA_COMM_STATUS_MAX_FULL_RETRIES;
 80f5dae:	687b      	ldr	r3, [r7, #4]
 80f5db0:	2208      	movs	r2, #8
 80f5db2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_SEND_FINISH_REPORT);
 80f5db6:	2107      	movs	r1, #7
 80f5db8:	6878      	ldr	r0, [r7, #4]
 80f5dba:	f7ff fd01 	bl	80f57c0 <set_state>
            break;
 80f5dbe:	e0ce      	b.n	80f5f5e <data_comm_rx_tick+0x5ae>
                self->status=DATA_COMM_ERROR_UNKNOWN_WRITE_RESULT;
 80f5dc0:	687b      	ldr	r3, [r7, #4]
 80f5dc2:	2211      	movs	r2, #17
 80f5dc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5dc8:	2106      	movs	r1, #6
 80f5dca:	6878      	ldr	r0, [r7, #4]
 80f5dcc:	f7ff fcf8 	bl	80f57c0 <set_state>
            break;
 80f5dd0:	e0c5      	b.n	80f5f5e <data_comm_rx_tick+0x5ae>
        }
        case DATA_COMM_RX_STATE_SEND_COMPLETE: {
            //Wait between sending messages
            if (!check_delay(self,config->complete_delay)) {
 80f5dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5dd4:	6a1b      	ldr	r3, [r3, #32]
 80f5dd6:	4619      	mov	r1, r3
 80f5dd8:	6878      	ldr	r0, [r7, #4]
 80f5dda:	f7ff fd19 	bl	80f5810 <check_delay>
 80f5dde:	4603      	mov	r3, r0
 80f5de0:	f083 0301 	eor.w	r3, r3, #1
 80f5de4:	b2db      	uxtb	r3, r3
 80f5de6:	2b00      	cmp	r3, #0
 80f5de8:	f040 80bb 	bne.w	80f5f62 <data_comm_rx_tick+0x5b2>
                break;
            }
            //Delay expired

            //Check if count reached maximum
            if (!check_count(self,config->complete_count)) {
 80f5dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f5df0:	4619      	mov	r1, r3
 80f5df2:	6878      	ldr	r0, [r7, #4]
 80f5df4:	f7ff fd3c 	bl	80f5870 <check_count>
 80f5df8:	4603      	mov	r3, r0
 80f5dfa:	f083 0301 	eor.w	r3, r3, #1
 80f5dfe:	b2db      	uxtb	r3, r3
 80f5e00:	2b00      	cmp	r3, #0
 80f5e02:	d01c      	beq.n	80f5e3e <data_comm_rx_tick+0x48e>
                //We still need to send messaged
                LOG_I("[%d] %s : %d. Sending Completion", self->now, __FUNCTION__, self->state);

                int result = settings->send_func(DATA_COMM_MSG_TYPE_COMPLETION,settings->id,NULL,0,NULL,0,settings->context);
 80f5e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5e06:	695c      	ldr	r4, [r3, #20]
 80f5e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5e0a:	7a99      	ldrb	r1, [r3, #10]
 80f5e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5e0e:	6a1b      	ldr	r3, [r3, #32]
 80f5e10:	9302      	str	r3, [sp, #8]
 80f5e12:	2300      	movs	r3, #0
 80f5e14:	9301      	str	r3, [sp, #4]
 80f5e16:	2300      	movs	r3, #0
 80f5e18:	9300      	str	r3, [sp, #0]
 80f5e1a:	2300      	movs	r3, #0
 80f5e1c:	2200      	movs	r2, #0
 80f5e1e:	2007      	movs	r0, #7
 80f5e20:	47a0      	blx	r4
 80f5e22:	6338      	str	r0, [r7, #48]	@ 0x30
                if (result!=0) {
 80f5e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80f5e26:	2b00      	cmp	r3, #0
 80f5e28:	f000 809d 	beq.w	80f5f66 <data_comm_rx_tick+0x5b6>
                    LOG_E("[%d] %s : %d. Error sending (completion) %d", self->now, __FUNCTION__, self->state,result);
                    //Error in comm, abort
                    self->status = DATA_COMM_ERROR_COMM_ERROR;
 80f5e2c:	687b      	ldr	r3, [r7, #4]
 80f5e2e:	220c      	movs	r2, #12
 80f5e30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5e34:	2106      	movs	r1, #6
 80f5e36:	6878      	ldr	r0, [r7, #4]
 80f5e38:	f7ff fcc2 	bl	80f57c0 <set_state>
                    break;
 80f5e3c:	e098      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                }
                break;
            }
            //Done sending
            self->status=DATA_COMM_STATUS_OK;
 80f5e3e:	687b      	ldr	r3, [r7, #4]
 80f5e40:	2200      	movs	r2, #0
 80f5e42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f5e46:	2106      	movs	r1, #6
 80f5e48:	6878      	ldr	r0, [r7, #4]
 80f5e4a:	f7ff fcb9 	bl	80f57c0 <set_state>
            break;
 80f5e4e:	e08f      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
        }
        case DATA_COMM_RX_STATE_PROCESS: {
            // Here the app can process errors, or the completion
            uint8_t status=DATA_COMM_ERROR_UNKNOWN;
 80f5e50:	23ff      	movs	r3, #255	@ 0xff
 80f5e52:	73fb      	strb	r3, [r7, #15]
            //Call the function
            LOG_I("[%d] %s : %d. Calling finish with status %02x", self->now, __FUNCTION__, self->state,self->status);

            data_comm_rx_finish_result_t result = settings->finish_func(self->status,&status,settings->context);
 80f5e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5e56:	699b      	ldr	r3, [r3, #24]
 80f5e58:	687a      	ldr	r2, [r7, #4]
 80f5e5a:	f892 0038 	ldrb.w	r0, [r2, #56]	@ 0x38
 80f5e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80f5e60:	6a12      	ldr	r2, [r2, #32]
 80f5e62:	f107 010f 	add.w	r1, r7, #15
 80f5e66:	4798      	blx	r3
 80f5e68:	4603      	mov	r3, r0
 80f5e6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            if (self->status!=DATA_COMM_STATUS_OK) {
 80f5e6e:	687b      	ldr	r3, [r7, #4]
 80f5e70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80f5e74:	2b00      	cmp	r3, #0
 80f5e76:	d002      	beq.n	80f5e7e <data_comm_rx_tick+0x4ce>
                LOG_I("[%d] %s : %d. Finish said %d, but aborting because status %02x !=0 ", self->now, __FUNCTION__, self->state,result, self->status);
                result = DATA_COMM_RX_FINISH_ERROR_ABORT;
 80f5e78:	2302      	movs	r3, #2
 80f5e7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }
            //Check what the app wants to do
            if (result==DATA_COMM_RX_FINISH_SUCCESS) {
 80f5e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80f5e82:	2b00      	cmp	r3, #0
 80f5e84:	d108      	bne.n	80f5e98 <data_comm_rx_tick+0x4e8>
                LOG_I("[%d] %s : %d. Finish => success", self->now, __FUNCTION__, self->state);

                //Finished successfully
                self->status=0x00;
 80f5e86:	687b      	ldr	r3, [r7, #4]
 80f5e88:	2200      	movs	r2, #0
 80f5e8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_SEND_FINISH_REPORT);
 80f5e8e:	2107      	movs	r1, #7
 80f5e90:	6878      	ldr	r0, [r7, #4]
 80f5e92:	f7ff fc95 	bl	80f57c0 <set_state>
                //App has an error and wants to abort
                self->status=status;
                set_state(self,DATA_COMM_RX_STATE_SEND_FINISH_REPORT);
            }

            break;
 80f5e96:	e068      	b.n	80f5f6a <data_comm_rx_tick+0x5ba>
            } else if (result==DATA_COMM_RX_FINISH_ERROR_RETRY) {
 80f5e98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80f5e9c:	2b01      	cmp	r3, #1
 80f5e9e:	d111      	bne.n	80f5ec4 <data_comm_rx_tick+0x514>
                if (!retry_full(self)) {
 80f5ea0:	6878      	ldr	r0, [r7, #4]
 80f5ea2:	f7ff fd3d 	bl	80f5920 <retry_full>
 80f5ea6:	4603      	mov	r3, r0
 80f5ea8:	f083 0301 	eor.w	r3, r3, #1
 80f5eac:	b2db      	uxtb	r3, r3
 80f5eae:	2b00      	cmp	r3, #0
 80f5eb0:	d05b      	beq.n	80f5f6a <data_comm_rx_tick+0x5ba>
                    self->status=DATA_COMM_STATUS_MAX_FULL_RETRIES;
 80f5eb2:	687b      	ldr	r3, [r7, #4]
 80f5eb4:	2208      	movs	r2, #8
 80f5eb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_SEND_FINISH_REPORT);
 80f5eba:	2107      	movs	r1, #7
 80f5ebc:	6878      	ldr	r0, [r7, #4]
 80f5ebe:	f7ff fc7f 	bl	80f57c0 <set_state>
            break;
 80f5ec2:	e052      	b.n	80f5f6a <data_comm_rx_tick+0x5ba>
                self->status=status;
 80f5ec4:	7bfa      	ldrb	r2, [r7, #15]
 80f5ec6:	687b      	ldr	r3, [r7, #4]
 80f5ec8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                set_state(self,DATA_COMM_RX_STATE_SEND_FINISH_REPORT);
 80f5ecc:	2107      	movs	r1, #7
 80f5ece:	6878      	ldr	r0, [r7, #4]
 80f5ed0:	f7ff fc76 	bl	80f57c0 <set_state>
            break;
 80f5ed4:	e049      	b.n	80f5f6a <data_comm_rx_tick+0x5ba>
        }
        case DATA_COMM_RX_STATE_SEND_FINISH_REPORT: {
            //Here we send the FINISH report
            //Wait until the delay expired
            if (!check_delay(self,config->finish_delay)) {
 80f5ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f5eda:	4619      	mov	r1, r3
 80f5edc:	6878      	ldr	r0, [r7, #4]
 80f5ede:	f7ff fc97 	bl	80f5810 <check_delay>
 80f5ee2:	4603      	mov	r3, r0
 80f5ee4:	f083 0301 	eor.w	r3, r3, #1
 80f5ee8:	b2db      	uxtb	r3, r3
 80f5eea:	2b00      	cmp	r3, #0
 80f5eec:	d13f      	bne.n	80f5f6e <data_comm_rx_tick+0x5be>
                break;
            }
            //Delay expired. max count reached?
            if (!check_count(self,config->finish_count)) {
 80f5eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f5ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f5ef2:	4619      	mov	r1, r3
 80f5ef4:	6878      	ldr	r0, [r7, #4]
 80f5ef6:	f7ff fcbb 	bl	80f5870 <check_count>
 80f5efa:	4603      	mov	r3, r0
 80f5efc:	f083 0301 	eor.w	r3, r3, #1
 80f5f00:	b2db      	uxtb	r3, r3
 80f5f02:	2b00      	cmp	r3, #0
 80f5f04:	d014      	beq.n	80f5f30 <data_comm_rx_tick+0x580>
                //Still sending messages
                data_comm_status_t status_msg = {
                    .status = self->status
 80f5f06:	687b      	ldr	r3, [r7, #4]
 80f5f08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
                data_comm_status_t status_msg = {
 80f5f0c:	733b      	strb	r3, [r7, #12]
                };
                LOG_I("[%d] %s : %d. Sending Finish %02x", self->now, __FUNCTION__, self->state,self->status);

                settings->send_func(DATA_COMM_MSG_TYPE_FINISH_REPORT,settings->id,
 80f5f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5f10:	695c      	ldr	r4, [r3, #20]
 80f5f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5f14:	7a99      	ldrb	r1, [r3, #10]
                    (const uint8_t*)&status_msg,sizeof(status_msg),NULL,0,settings->context);
 80f5f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5f18:	6a1b      	ldr	r3, [r3, #32]
                settings->send_func(DATA_COMM_MSG_TYPE_FINISH_REPORT,settings->id,
 80f5f1a:	f107 020c 	add.w	r2, r7, #12
 80f5f1e:	9302      	str	r3, [sp, #8]
 80f5f20:	2300      	movs	r3, #0
 80f5f22:	9301      	str	r3, [sp, #4]
 80f5f24:	2300      	movs	r3, #0
 80f5f26:	9300      	str	r3, [sp, #0]
 80f5f28:	2301      	movs	r3, #1
 80f5f2a:	2009      	movs	r0, #9
 80f5f2c:	47a0      	blx	r4
                //Do not check for errors, since this is the last step
                break;
 80f5f2e:	e01f      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            }
            //Done sending
            set_state(self,DATA_COMM_RX_STATE_IDLE);
 80f5f30:	2100      	movs	r1, #0
 80f5f32:	6878      	ldr	r0, [r7, #4]
 80f5f34:	f7ff fc44 	bl	80f57c0 <set_state>
            self->started=false;
 80f5f38:	687b      	ldr	r3, [r7, #4]
 80f5f3a:	2200      	movs	r2, #0
 80f5f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            break;
 80f5f40:	e016      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f42:	bf00      	nop
 80f5f44:	e014      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                break;
 80f5f46:	bf00      	nop
 80f5f48:	e012      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f4a:	bf00      	nop
 80f5f4c:	e010      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                    break;
 80f5f4e:	bf00      	nop
 80f5f50:	e00e      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f52:	bf00      	nop
 80f5f54:	e00c      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f56:	bf00      	nop
 80f5f58:	e00a      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                break;
 80f5f5a:	bf00      	nop
 80f5f5c:	e008      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f5e:	bf00      	nop
 80f5f60:	e006      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                break;
 80f5f62:	bf00      	nop
 80f5f64:	e004      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                break;
 80f5f66:	bf00      	nop
 80f5f68:	e002      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
            break;
 80f5f6a:	bf00      	nop
 80f5f6c:	e000      	b.n	80f5f70 <data_comm_rx_tick+0x5c0>
                break;
 80f5f6e:	bf00      	nop
        }
    }


}
 80f5f70:	bf00      	nop
 80f5f72:	3740      	adds	r7, #64	@ 0x40
 80f5f74:	46bd      	mov	sp, r7
 80f5f76:	bdb0      	pop	{r4, r5, r7, pc}

080f5f78 <data_comm_rx_process_message>:

bool data_comm_rx_process_message(data_comm_rx_t* self, uint32_t time_ms, data_comm_msg_type_t type, uint8_t id, const uint8_t* data,
    uint16_t size) {
 80f5f78:	b580      	push	{r7, lr}
 80f5f7a:	b08e      	sub	sp, #56	@ 0x38
 80f5f7c:	af00      	add	r7, sp, #0
 80f5f7e:	60f8      	str	r0, [r7, #12]
 80f5f80:	60b9      	str	r1, [r7, #8]
 80f5f82:	4611      	mov	r1, r2
 80f5f84:	461a      	mov	r2, r3
 80f5f86:	460b      	mov	r3, r1
 80f5f88:	71fb      	strb	r3, [r7, #7]
 80f5f8a:	4613      	mov	r3, r2
 80f5f8c:	71bb      	strb	r3, [r7, #6]
    assert(self);
 80f5f8e:	68fb      	ldr	r3, [r7, #12]
 80f5f90:	2b00      	cmp	r3, #0
 80f5f92:	d106      	bne.n	80f5fa2 <data_comm_rx_process_message+0x2a>
 80f5f94:	4b9e      	ldr	r3, [pc, #632]	@ (80f6210 <data_comm_rx_process_message+0x298>)
 80f5f96:	4a9f      	ldr	r2, [pc, #636]	@ (80f6214 <data_comm_rx_process_message+0x29c>)
 80f5f98:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80f5f9c:	489e      	ldr	r0, [pc, #632]	@ (80f6218 <data_comm_rx_process_message+0x2a0>)
 80f5f9e:	f003 fdf7 	bl	80f9b90 <__assert_func>
    self->now=time_ms;
 80f5fa2:	68fb      	ldr	r3, [r7, #12]
 80f5fa4:	68ba      	ldr	r2, [r7, #8]
 80f5fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    // const data_comm_rx_config_t* config = self->settings.config;
    const data_comm_rx_settings_t* settings = &self->settings;
 80f5fa8:	68fb      	ldr	r3, [r7, #12]
 80f5faa:	3308      	adds	r3, #8
 80f5fac:	637b      	str	r3, [r7, #52]	@ 0x34

    if (id!=settings->id) {
 80f5fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f5fb0:	7a9b      	ldrb	r3, [r3, #10]
 80f5fb2:	79ba      	ldrb	r2, [r7, #6]
 80f5fb4:	429a      	cmp	r2, r3
 80f5fb6:	d001      	beq.n	80f5fbc <data_comm_rx_process_message+0x44>
        LOG_D("[%d] %s : Unexpected id 0x%02x != 0x%02x", self->now, __FUNCTION__, id,settings->id);

        return false;
 80f5fb8:	2300      	movs	r3, #0
 80f5fba:	e15e      	b.n	80f627a <data_comm_rx_process_message+0x302>
    }

    switch(self->state){
 80f5fbc:	68fb      	ldr	r3, [r7, #12]
 80f5fbe:	791b      	ldrb	r3, [r3, #4]
 80f5fc0:	2b07      	cmp	r3, #7
 80f5fc2:	f200 8156 	bhi.w	80f6272 <data_comm_rx_process_message+0x2fa>
 80f5fc6:	a201      	add	r2, pc, #4	@ (adr r2, 80f5fcc <data_comm_rx_process_message+0x54>)
 80f5fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f5fcc:	080f5fed 	.word	0x080f5fed
 80f5fd0:	080f6053 	.word	0x080f6053
 80f5fd4:	080f60b3 	.word	0x080f60b3
 80f5fd8:	080f6159 	.word	0x080f6159
 80f5fdc:	080f626f 	.word	0x080f626f
 80f5fe0:	080f6263 	.word	0x080f6263
 80f5fe4:	080f6267 	.word	0x080f6267
 80f5fe8:	080f626b 	.word	0x080f626b
        case DATA_COMM_RX_STATE_IDLE: {
            if (!self->started) {
 80f5fec:	68fb      	ldr	r3, [r7, #12]
 80f5fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f5ff2:	f083 0301 	eor.w	r3, r3, #1
 80f5ff6:	b2db      	uxtb	r3, r3
 80f5ff8:	2b00      	cmp	r3, #0
 80f5ffa:	d001      	beq.n	80f6000 <data_comm_rx_process_message+0x88>
                //If it hasn't started, just ignore any messages
                return false;
 80f5ffc:	2300      	movs	r3, #0
 80f5ffe:	e13c      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }

            if (type!=DATA_COMM_MSG_TYPE_PREPARE_REQUEST) {
 80f6000:	79fb      	ldrb	r3, [r7, #7]
 80f6002:	2b00      	cmp	r3, #0
 80f6004:	d001      	beq.n	80f600a <data_comm_rx_process_message+0x92>
                //If it's not the prepare request, ignore it
                LOG_D("[%d] %s : %d. Unexpected msg in IDLE: %d", self->now, __FUNCTION__, self->state,type);

                return false;
 80f6006:	2300      	movs	r3, #0
 80f6008:	e137      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            LOG_I("[%d] %s : %d. RX Prepare %02x", self->now, __FUNCTION__, self->state, id);
            self->burst_index=0;
 80f600a:	68fb      	ldr	r3, [r7, #12]
 80f600c:	2200      	movs	r2, #0
 80f600e:	87da      	strh	r2, [r3, #62]	@ 0x3e
            self->burst_sequence=0;
 80f6010:	68fb      	ldr	r3, [r7, #12]
 80f6012:	2200      	movs	r2, #0
 80f6014:	64da      	str	r2, [r3, #76]	@ 0x4c
            self->burst_retries=0;
 80f6016:	68fb      	ldr	r3, [r7, #12]
 80f6018:	2200      	movs	r2, #0
 80f601a:	651a      	str	r2, [r3, #80]	@ 0x50
            self->burst_size=0;
 80f601c:	68fb      	ldr	r3, [r7, #12]
 80f601e:	2200      	movs	r2, #0
 80f6020:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            self->burst_crc=0;
 80f6024:	68fb      	ldr	r3, [r7, #12]
 80f6026:	2200      	movs	r2, #0
 80f6028:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            self->max_burst_size=0;
 80f602c:	68fb      	ldr	r3, [r7, #12]
 80f602e:	2200      	movs	r2, #0
 80f6030:	875a      	strh	r2, [r3, #58]	@ 0x3a
            self->total_size=0;
 80f6032:	68fb      	ldr	r3, [r7, #12]
 80f6034:	2200      	movs	r2, #0
 80f6036:	601a      	str	r2, [r3, #0]
            self->expected_sequence=0;
 80f6038:	68fb      	ldr	r3, [r7, #12]
 80f603a:	2200      	movs	r2, #0
 80f603c:	649a      	str	r2, [r3, #72]	@ 0x48
            self->status = DATA_COMM_ERROR_UNKNOWN;
 80f603e:	68fb      	ldr	r3, [r7, #12]
 80f6040:	22ff      	movs	r2, #255	@ 0xff
 80f6042:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            //Change state to send ready message and wait for info
            set_state(self,DATA_COMM_RX_STATE_SEND_READY_AND_WAIT_INFO);
 80f6046:	2101      	movs	r1, #1
 80f6048:	68f8      	ldr	r0, [r7, #12]
 80f604a:	f7ff fbb9 	bl	80f57c0 <set_state>
            return true;
 80f604e:	2301      	movs	r3, #1
 80f6050:	e113      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        case DATA_COMM_RX_STATE_SEND_READY_AND_WAIT_INFO: {
            if (type!=DATA_COMM_MSG_TYPE_INFO) {
 80f6052:	79fb      	ldrb	r3, [r7, #7]
 80f6054:	2b02      	cmp	r3, #2
 80f6056:	d001      	beq.n	80f605c <data_comm_rx_process_message+0xe4>
                LOG_D("[%d] %s : %d. Unexpected msg in WAIT INFO: %d", self->now, __FUNCTION__, self->state,type);

                //We expect only INFO in this state, anything else won't be consumed
                return false;
 80f6058:	2300      	movs	r3, #0
 80f605a:	e10e      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            if (size<sizeof(data_comm_msg_info_t)) {
 80f605c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80f6060:	2b05      	cmp	r3, #5
 80f6062:	d801      	bhi.n	80f6068 <data_comm_rx_process_message+0xf0>
                LOG_D("[%d] %s : %d. msg: %d size too small %d<%d",
                    self->now, __FUNCTION__, self->state,type, size,sizeof(data_comm_msg_info_t));

                //Ignore any message that doesn't have the bytes
                return false;
 80f6064:	2300      	movs	r3, #0
 80f6066:	e108      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            //The message arrived
            const data_comm_msg_info_t* msg_info = (const data_comm_msg_info_t*)data;
 80f6068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f606a:	613b      	str	r3, [r7, #16]
            //Save the info
            self->total_size = msg_info->total_size;
 80f606c:	693b      	ldr	r3, [r7, #16]
 80f606e:	681a      	ldr	r2, [r3, #0]
 80f6070:	68fb      	ldr	r3, [r7, #12]
 80f6072:	601a      	str	r2, [r3, #0]
            //Calculate the max burst size based on the minimum between each buffer
            self->max_burst_size = msg_info->buffer_size;
 80f6074:	693b      	ldr	r3, [r7, #16]
 80f6076:	889b      	ldrh	r3, [r3, #4]
 80f6078:	b29a      	uxth	r2, r3
 80f607a:	68fb      	ldr	r3, [r7, #12]
 80f607c:	875a      	strh	r2, [r3, #58]	@ 0x3a
            if (self->max_burst_size>settings->buffer_size) {
 80f607e:	68fb      	ldr	r3, [r7, #12]
 80f6080:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80f6082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f6084:	891b      	ldrh	r3, [r3, #8]
 80f6086:	429a      	cmp	r2, r3
 80f6088:	d903      	bls.n	80f6092 <data_comm_rx_process_message+0x11a>
                self->max_burst_size = settings->buffer_size;
 80f608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f608c:	891a      	ldrh	r2, [r3, #8]
 80f608e:	68fb      	ldr	r3, [r7, #12]
 80f6090:	875a      	strh	r2, [r3, #58]	@ 0x3a
            }
            LOG_I("[%d] %s : %d. Info size: %d, max_burst: %d final: %d",
                self->now, __FUNCTION__, self->state,msg_info->total_size,msg_info->buffer_size,self->max_burst_size);
            self->burst_size=0;
 80f6092:	68fb      	ldr	r3, [r7, #12]
 80f6094:	2200      	movs	r2, #0
 80f6096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            self->burst_crc=0;
 80f609a:	68fb      	ldr	r3, [r7, #12]
 80f609c:	2200      	movs	r2, #0
 80f609e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            self->burst_sequence=0;
 80f60a2:	68fb      	ldr	r3, [r7, #12]
 80f60a4:	2200      	movs	r2, #0
 80f60a6:	64da      	str	r2, [r3, #76]	@ 0x4c
            //Jump to start requesting
            set_state(self,DATA_COMM_RX_STATE_SEND_BURST_REQ_AND_WAIT_BURST_CRC);
 80f60a8:	2102      	movs	r1, #2
 80f60aa:	68f8      	ldr	r0, [r7, #12]
 80f60ac:	f7ff fb88 	bl	80f57c0 <set_state>
            break;
 80f60b0:	e0e2      	b.n	80f6278 <data_comm_rx_process_message+0x300>
        }
        case DATA_COMM_RX_STATE_SEND_BURST_REQ_AND_WAIT_BURST_CRC: {
            if (type!=DATA_COMM_MSG_TYPE_BURST_CRC) {
 80f60b2:	79fb      	ldrb	r3, [r7, #7]
 80f60b4:	2b04      	cmp	r3, #4
 80f60b6:	d001      	beq.n	80f60bc <data_comm_rx_process_message+0x144>
                //In this state we only wait for CRCs
                LOG_D("[%d] %s : %d. Unexpected msg in WAIT CRC: %d", self->now, __FUNCTION__, self->state,type);

                return false;
 80f60b8:	2300      	movs	r3, #0
 80f60ba:	e0de      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            if (size<sizeof(data_comm_msg_crc_t)) {
 80f60bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80f60c0:	2b06      	cmp	r3, #6
 80f60c2:	d801      	bhi.n	80f60c8 <data_comm_rx_process_message+0x150>
                //Message not big enough
                LOG_D("[%d] %s : %d. msg: %d size too small %d<%d",
                    self->now, __FUNCTION__, self->state,type, size,sizeof(data_comm_msg_crc_t));

                return false;
 80f60c4:	2300      	movs	r3, #0
 80f60c6:	e0d8      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            //We received a valid crc
            const data_comm_msg_crc_t* msg_crc = (const data_comm_msg_crc_t*) data;
 80f60c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f60ca:	61bb      	str	r3, [r7, #24]
            //extract the sequence
            uint32_t crc_sequence = buffer_extract_uint24_little(msg_crc->sequence);
 80f60cc:	69bb      	ldr	r3, [r7, #24]
 80f60ce:	4618      	mov	r0, r3
 80f60d0:	f002 fcda 	bl	80f8a88 <buffer_extract_uint24_little>
 80f60d4:	6178      	str	r0, [r7, #20]
            if (crc_sequence!=self->burst_sequence) {
 80f60d6:	68fb      	ldr	r3, [r7, #12]
 80f60d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f60da:	697a      	ldr	r2, [r7, #20]
 80f60dc:	429a      	cmp	r2, r3
 80f60de:	d001      	beq.n	80f60e4 <data_comm_rx_process_message+0x16c>
                LOG_W("[%d] %s : %d. Sequence mismatch in CRC: rx %08x, expected: %08x",
                    self->now, __FUNCTION__, self->state,type, crc_sequence,self->burst_sequence);

                //Not the sequence we were expecting
                return false;
 80f60e0:	2300      	movs	r3, #0
 80f60e2:	e0ca      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            //Check the burst size, we're allowing to send a smaller than requested burst, but not higher
            if (msg_crc->burst_size>self->requested_burst_size) {
 80f60e4:	69bb      	ldr	r3, [r7, #24]
 80f60e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80f60ea:	b29a      	uxth	r2, r3
 80f60ec:	68fb      	ldr	r3, [r7, #12]
 80f60ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80f60f2:	429a      	cmp	r2, r3
 80f60f4:	d915      	bls.n	80f6122 <data_comm_rx_process_message+0x1aa>
                //It's higher, try to retry
                LOG_W("[%d] %s : %d. Size too big: rx %08x > requested: %08x",
                    self->now, __FUNCTION__, self->state,type, msg_crc->burst_size, self->requested_burst_size);

                if (!retry_burst(self,self->burst_sequence)) {
 80f60f6:	68fb      	ldr	r3, [r7, #12]
 80f60f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f60fa:	4619      	mov	r1, r3
 80f60fc:	68f8      	ldr	r0, [r7, #12]
 80f60fe:	f7ff fbf1 	bl	80f58e4 <retry_burst>
 80f6102:	4603      	mov	r3, r0
 80f6104:	f083 0301 	eor.w	r3, r3, #1
 80f6108:	b2db      	uxtb	r3, r3
 80f610a:	2b00      	cmp	r3, #0
 80f610c:	d007      	beq.n	80f611e <data_comm_rx_process_message+0x1a6>
                    //Can't retry, max retries reached, abort
                    self->status=DATA_COMM_ERROR_BURST_SIZE_TOO_BIG;
 80f610e:	68fb      	ldr	r3, [r7, #12]
 80f6110:	2210      	movs	r2, #16
 80f6112:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f6116:	2106      	movs	r1, #6
 80f6118:	68f8      	ldr	r0, [r7, #12]
 80f611a:	f7ff fb51 	bl	80f57c0 <set_state>
                }
                return true;
 80f611e:	2301      	movs	r3, #1
 80f6120:	e0ab      	b.n	80f627a <data_comm_rx_process_message+0x302>
            }
            //CRC ok and valid

            //Save the CRC for later
            self->burst_crc=msg_crc->crc;
 80f6122:	69bb      	ldr	r3, [r7, #24]
 80f6124:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80f6128:	b29a      	uxth	r2, r3
 80f612a:	68fb      	ldr	r3, [r7, #12]
 80f612c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            //Save the burst_size for later
            self->burst_size=msg_crc->burst_size;
 80f6130:	69bb      	ldr	r3, [r7, #24]
 80f6132:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80f6136:	b29a      	uxth	r2, r3
 80f6138:	68fb      	ldr	r3, [r7, #12]
 80f613a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            //Reset the burst_index (position in the buffer)

            LOG_I("[%d] %s : %d. CRC received seq: %08x, crc: %04x, size %d",
                self->now, __FUNCTION__, self->state,type, self->burst_sequence,msg_crc->crc,msg_crc->burst_size);

            self->burst_index=0;
 80f613e:	68fb      	ldr	r3, [r7, #12]
 80f6140:	2200      	movs	r2, #0
 80f6142:	87da      	strh	r2, [r3, #62]	@ 0x3e
            //Set the expected sequence
            self->expected_sequence=self->burst_sequence;
 80f6144:	68fb      	ldr	r3, [r7, #12]
 80f6146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80f6148:	68fb      	ldr	r3, [r7, #12]
 80f614a:	649a      	str	r2, [r3, #72]	@ 0x48
            //Jump to wait Burst data
            set_state(self,DATA_COMM_RX_STATE_WAIT_BURST_DATA);
 80f614c:	2103      	movs	r1, #3
 80f614e:	68f8      	ldr	r0, [r7, #12]
 80f6150:	f7ff fb36 	bl	80f57c0 <set_state>
            return true;
 80f6154:	2301      	movs	r3, #1
 80f6156:	e090      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        case DATA_COMM_RX_STATE_WAIT_BURST_DATA: {
            //In this state we should receive the data from the burst or a completion
            if (type==DATA_COMM_MSG_TYPE_BURST_PACKET) {
 80f6158:	79fb      	ldrb	r3, [r7, #7]
 80f615a:	2b05      	cmp	r3, #5
 80f615c:	d14e      	bne.n	80f61fc <data_comm_rx_process_message+0x284>
                // Burst data packet
                if (size<sizeof(data_comm_msg_packet_header_t)) {
 80f615e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80f6162:	2b02      	cmp	r3, #2
 80f6164:	d801      	bhi.n	80f616a <data_comm_rx_process_message+0x1f2>
                    //Not big enough to handle the header
                    LOG_D("[%d] %s : %d. msg: %d size too small %d<%d",
                        self->now, __FUNCTION__, self->state,type, size,sizeof(data_comm_msg_packet_header_t));

                    return false;
 80f6166:	2300      	movs	r3, #0
 80f6168:	e087      	b.n	80f627a <data_comm_rx_process_message+0x302>
                }
                const data_comm_msg_packet_header_t* header = (const data_comm_msg_packet_header_t*) data;
 80f616a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f616c:	62bb      	str	r3, [r7, #40]	@ 0x28
                //Calculate the size of the data
                uint16_t data_size = size-sizeof(data_comm_msg_packet_header_t);
 80f616e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80f6172:	3b03      	subs	r3, #3
 80f6174:	84fb      	strh	r3, [r7, #38]	@ 0x26

                if (data_size==0) {
 80f6176:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80f6178:	2b00      	cmp	r3, #0
 80f617a:	d101      	bne.n	80f6180 <data_comm_rx_process_message+0x208>
                    //Size is 0, ignore this message
                    LOG_D("[%d] %s : %d. msg: %d no data",
                    self->now, __FUNCTION__, self->state,type);

                    return false;
 80f617c:	2300      	movs	r3, #0
 80f617e:	e07c      	b.n	80f627a <data_comm_rx_process_message+0x302>
                }


                //packet seems ok, extract sequence
                uint32_t sequence = buffer_extract_uint24_little(header->sequence);
 80f6180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f6182:	4618      	mov	r0, r3
 80f6184:	f002 fc80 	bl	80f8a88 <buffer_extract_uint24_little>
 80f6188:	6238      	str	r0, [r7, #32]

                if (sequence!=self->expected_sequence) {
 80f618a:	68fb      	ldr	r3, [r7, #12]
 80f618c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80f618e:	6a3a      	ldr	r2, [r7, #32]
 80f6190:	429a      	cmp	r2, r3
 80f6192:	d001      	beq.n	80f6198 <data_comm_rx_process_message+0x220>
                    //Not the expected sequence
                    LOG_W("[%d] %s : %d. Sequence mismatch in WAIT DATA (PACKET): rx %08x, expected: %08x",
                        self->now, __FUNCTION__, self->state, sequence,self->expected_sequence);
                    return false;
 80f6194:	2300      	movs	r3, #0
 80f6196:	e070      	b.n	80f627a <data_comm_rx_process_message+0x302>
                }
                if ((self->burst_index+data_size)>self->burst_size) {
 80f6198:	68fb      	ldr	r3, [r7, #12]
 80f619a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80f619c:	461a      	mov	r2, r3
 80f619e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80f61a0:	4413      	add	r3, r2
 80f61a2:	68fa      	ldr	r2, [r7, #12]
 80f61a4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80f61a8:	4293      	cmp	r3, r2
 80f61aa:	dd01      	ble.n	80f61b0 <data_comm_rx_process_message+0x238>
                    //The data overflows the accorded burst size, ignore this message
                    LOG_W("[%d] %s : %d. Sequence %08x overflows: current %08x, data_size: %d, total: %d",
                        self->now, __FUNCTION__, self->state, sequence,self->burst_index,data_size,self->burst_size);
                    return false;
 80f61ac:	2300      	movs	r3, #0
 80f61ae:	e064      	b.n	80f627a <data_comm_rx_process_message+0x302>
                }
                //Packet is OK
                const uint8_t* packet_data = &data[sizeof(data_comm_msg_packet_header_t)];
 80f61b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f61b2:	3303      	adds	r3, #3
 80f61b4:	61fb      	str	r3, [r7, #28]
                //Copy the data to the correct position inside the buffer
                memcpy(&settings->buffer[self->burst_index], packet_data,data_size);
 80f61b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f61b8:	685b      	ldr	r3, [r3, #4]
 80f61ba:	68fa      	ldr	r2, [r7, #12]
 80f61bc:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 80f61be:	4413      	add	r3, r2
 80f61c0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80f61c2:	69f9      	ldr	r1, [r7, #28]
 80f61c4:	4618      	mov	r0, r3
 80f61c6:	f003 fea4 	bl	80f9f12 <memcpy>
                //Update the burst index;
                self->burst_index+=data_size;
 80f61ca:	68fb      	ldr	r3, [r7, #12]
 80f61cc:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80f61ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80f61d0:	4413      	add	r3, r2
 80f61d2:	b29a      	uxth	r2, r3
 80f61d4:	68fb      	ldr	r3, [r7, #12]
 80f61d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
                //Update the next expected sequence
                self->expected_sequence+=data_size;
 80f61d8:	68fb      	ldr	r3, [r7, #12]
 80f61da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80f61dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80f61de:	441a      	add	r2, r3
 80f61e0:	68fb      	ldr	r3, [r7, #12]
 80f61e2:	649a      	str	r2, [r3, #72]	@ 0x48
                //Check if this was the last part of the burst
                LOG_I("[%d] %s : %d. Data 0x%08x, size: %d",
                    self->now, __FUNCTION__,self->state, sequence,data_size);

                if (self->burst_index == self->burst_size) {
 80f61e4:	68fb      	ldr	r3, [r7, #12]
 80f61e6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80f61e8:	68fb      	ldr	r3, [r7, #12]
 80f61ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80f61ee:	429a      	cmp	r2, r3
 80f61f0:	d141      	bne.n	80f6276 <data_comm_rx_process_message+0x2fe>
                    //it was the last part, jump to BURST_COMPLETE
                    LOG_I("[%d] %s : %d. Burst complete 0x%08x, size: %d",
                        self->now, __FUNCTION__,self->state,self->burst_sequence,self->burst_size);

                    set_state(self,DATA_COMM_RX_STATE_BURST_COMPLETE);
 80f61f2:	2104      	movs	r1, #4
 80f61f4:	68f8      	ldr	r0, [r7, #12]
 80f61f6:	f7ff fae3 	bl	80f57c0 <set_state>
            }
            else {
                LOG_D("[%d] %s : %d. Unexpected msg in WAIT DATA: %d", self->now, __FUNCTION__, self->state,type);

            }
            break;
 80f61fa:	e03c      	b.n	80f6276 <data_comm_rx_process_message+0x2fe>
            else if (type==DATA_COMM_MSG_TYPE_BURST_COMPLETION) {
 80f61fc:	79fb      	ldrb	r3, [r7, #7]
 80f61fe:	2b06      	cmp	r3, #6
 80f6200:	d139      	bne.n	80f6276 <data_comm_rx_process_message+0x2fe>
                if (size<sizeof(data_comm_msg_burst_complete_t)) {
 80f6202:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80f6206:	2b04      	cmp	r3, #4
 80f6208:	d808      	bhi.n	80f621c <data_comm_rx_process_message+0x2a4>
                    return false;
 80f620a:	2300      	movs	r3, #0
 80f620c:	e035      	b.n	80f627a <data_comm_rx_process_message+0x302>
 80f620e:	bf00      	nop
 80f6210:	080face8 	.word	0x080face8
 80f6214:	080faebc 	.word	0x080faebc
 80f6218:	080facf0 	.word	0x080facf0
                const data_comm_msg_burst_complete_t* burst_complete = (const data_comm_msg_burst_complete_t*) data;
 80f621c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f621e:	633b      	str	r3, [r7, #48]	@ 0x30
                uint32_t sequence = buffer_extract_uint24_little(burst_complete->sequence);
 80f6220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80f6222:	4618      	mov	r0, r3
 80f6224:	f002 fc30 	bl	80f8a88 <buffer_extract_uint24_little>
 80f6228:	62f8      	str	r0, [r7, #44]	@ 0x2c
                if (sequence!=self->burst_sequence) {
 80f622a:	68fb      	ldr	r3, [r7, #12]
 80f622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f622e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80f6230:	429a      	cmp	r2, r3
 80f6232:	d001      	beq.n	80f6238 <data_comm_rx_process_message+0x2c0>
                    return false;
 80f6234:	2300      	movs	r3, #0
 80f6236:	e020      	b.n	80f627a <data_comm_rx_process_message+0x302>
                if (!retry_burst(self,self->burst_sequence)) {
 80f6238:	68fb      	ldr	r3, [r7, #12]
 80f623a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80f623c:	4619      	mov	r1, r3
 80f623e:	68f8      	ldr	r0, [r7, #12]
 80f6240:	f7ff fb50 	bl	80f58e4 <retry_burst>
 80f6244:	4603      	mov	r3, r0
 80f6246:	f083 0301 	eor.w	r3, r3, #1
 80f624a:	b2db      	uxtb	r3, r3
 80f624c:	2b00      	cmp	r3, #0
 80f624e:	d012      	beq.n	80f6276 <data_comm_rx_process_message+0x2fe>
                    self->status = DATA_COMM_STATUS_UNEXPECTED_COMPLETION;
 80f6250:	68fb      	ldr	r3, [r7, #12]
 80f6252:	2209      	movs	r2, #9
 80f6254:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    set_state(self,DATA_COMM_RX_STATE_PROCESS);
 80f6258:	2106      	movs	r1, #6
 80f625a:	68f8      	ldr	r0, [r7, #12]
 80f625c:	f7ff fab0 	bl	80f57c0 <set_state>
            break;
 80f6260:	e009      	b.n	80f6276 <data_comm_rx_process_message+0x2fe>
            //Here we could expect a completion, but we don't care,
            //we only use the completion in case we miss a packet so
            //we can retry faster
            LOG_D("[%d] %s : %d. Unexpected msg in SEND_COMPLETE: %d", self->now, __FUNCTION__, self->state,type);

            return false;
 80f6262:	2300      	movs	r3, #0
 80f6264:	e009      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        case DATA_COMM_RX_STATE_PROCESS: {
            //Not expecting
            LOG_D("[%d] %s : %d. Unexpected msg in PROCESS: %d", self->now, __FUNCTION__, self->state,type);

            return false;
 80f6266:	2300      	movs	r3, #0
 80f6268:	e007      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        case DATA_COMM_RX_STATE_SEND_FINISH_REPORT: {
            //Not expecting
            LOG_D("[%d] %s : %d. Unexpected msg in FINISH REPORT: %d", self->now, __FUNCTION__, self->state,type);

            return false;
 80f626a:	2300      	movs	r3, #0
 80f626c:	e005      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        case DATA_COMM_RX_STATE_BURST_COMPLETE: {
            //Not expecting
            LOG_D("[%d] %s : %d. Unexpected msg in BURST COMPLETE: %d", self->now, __FUNCTION__, self->state,type);

            return false;
 80f626e:	2300      	movs	r3, #0
 80f6270:	e003      	b.n	80f627a <data_comm_rx_process_message+0x302>
        }
        default: {
            //Not expecting
            LOG_D("[%d] %s : %d. Unexpected msg in DEFAULT: %d", self->now, __FUNCTION__, self->state,type);

            return false;
 80f6272:	2300      	movs	r3, #0
 80f6274:	e001      	b.n	80f627a <data_comm_rx_process_message+0x302>
            break;
 80f6276:	bf00      	nop
        }
    }



    return false;
 80f6278:	2300      	movs	r3, #0
}
 80f627a:	4618      	mov	r0, r3
 80f627c:	3738      	adds	r7, #56	@ 0x38
 80f627e:	46bd      	mov	sp, r7
 80f6280:	bd80      	pop	{r7, pc}
 80f6282:	bf00      	nop

080f6284 <data_comm_rx_start>:

int data_comm_rx_start(data_comm_rx_t* self, uint32_t time_ms) {
 80f6284:	b580      	push	{r7, lr}
 80f6286:	b082      	sub	sp, #8
 80f6288:	af00      	add	r7, sp, #0
 80f628a:	6078      	str	r0, [r7, #4]
 80f628c:	6039      	str	r1, [r7, #0]
    assert(self);
 80f628e:	687b      	ldr	r3, [r7, #4]
 80f6290:	2b00      	cmp	r3, #0
 80f6292:	d106      	bne.n	80f62a2 <data_comm_rx_start+0x1e>
 80f6294:	4b10      	ldr	r3, [pc, #64]	@ (80f62d8 <data_comm_rx_start+0x54>)
 80f6296:	4a11      	ldr	r2, [pc, #68]	@ (80f62dc <data_comm_rx_start+0x58>)
 80f6298:	f240 21b5 	movw	r1, #693	@ 0x2b5
 80f629c:	4810      	ldr	r0, [pc, #64]	@ (80f62e0 <data_comm_rx_start+0x5c>)
 80f629e:	f003 fc77 	bl	80f9b90 <__assert_func>
    self->now=time_ms;
 80f62a2:	687b      	ldr	r3, [r7, #4]
 80f62a4:	683a      	ldr	r2, [r7, #0]
 80f62a6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (self->state==DATA_COMM_RX_STATE_IDLE && !self->started) {
 80f62a8:	687b      	ldr	r3, [r7, #4]
 80f62aa:	791b      	ldrb	r3, [r3, #4]
 80f62ac:	2b00      	cmp	r3, #0
 80f62ae:	d10d      	bne.n	80f62cc <data_comm_rx_start+0x48>
 80f62b0:	687b      	ldr	r3, [r7, #4]
 80f62b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80f62b6:	f083 0301 	eor.w	r3, r3, #1
 80f62ba:	b2db      	uxtb	r3, r3
 80f62bc:	2b00      	cmp	r3, #0
 80f62be:	d005      	beq.n	80f62cc <data_comm_rx_start+0x48>
        self->started=true;
 80f62c0:	687b      	ldr	r3, [r7, #4]
 80f62c2:	2201      	movs	r2, #1
 80f62c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        LOG_I("[%d] %s: Success",self->now,__FUNCTION__);

        return 0;
 80f62c8:	2300      	movs	r3, #0
 80f62ca:	e001      	b.n	80f62d0 <data_comm_rx_start+0x4c>
    }
    LOG_W("[%d] %s: Still running",self->now,__FUNCTION__);

    return -1;
 80f62cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80f62d0:	4618      	mov	r0, r3
 80f62d2:	3708      	adds	r7, #8
 80f62d4:	46bd      	mov	sp, r7
 80f62d6:	bd80      	pop	{r7, pc}
 80f62d8:	080face8 	.word	0x080face8
 80f62dc:	080faedc 	.word	0x080faedc
 80f62e0:	080facf0 	.word	0x080facf0

080f62e4 <dummy_comm_log_func>:

static int dummy_comm_log_func(int level, const char *format, ...){
 80f62e4:	b40e      	push	{r1, r2, r3}
 80f62e6:	b480      	push	{r7}
 80f62e8:	b082      	sub	sp, #8
 80f62ea:	af00      	add	r7, sp, #0
 80f62ec:	6078      	str	r0, [r7, #4]
    return 0;
 80f62ee:	2300      	movs	r3, #0
}
 80f62f0:	4618      	mov	r0, r3
 80f62f2:	3708      	adds	r7, #8
 80f62f4:	46bd      	mov	sp, r7
 80f62f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f62fa:	b003      	add	sp, #12
 80f62fc:	4770      	bx	lr
	...

080f6300 <data_comm_rx_init>:



int data_comm_rx_init(data_comm_rx_t* self, const data_comm_rx_settings_t* settings) {
 80f6300:	b580      	push	{r7, lr}
 80f6302:	b082      	sub	sp, #8
 80f6304:	af00      	add	r7, sp, #0
 80f6306:	6078      	str	r0, [r7, #4]
 80f6308:	6039      	str	r1, [r7, #0]
    if (self==NULL) {
 80f630a:	687b      	ldr	r3, [r7, #4]
 80f630c:	2b00      	cmp	r3, #0
 80f630e:	d102      	bne.n	80f6316 <data_comm_rx_init+0x16>
        return -1;
 80f6310:	f04f 33ff 	mov.w	r3, #4294967295
 80f6314:	e06a      	b.n	80f63ec <data_comm_rx_init+0xec>
    }
    if (settings==NULL) {
 80f6316:	683b      	ldr	r3, [r7, #0]
 80f6318:	2b00      	cmp	r3, #0
 80f631a:	d102      	bne.n	80f6322 <data_comm_rx_init+0x22>
        return -2;
 80f631c:	f06f 0301 	mvn.w	r3, #1
 80f6320:	e064      	b.n	80f63ec <data_comm_rx_init+0xec>
    }
    if (settings->buffer==NULL || settings->buffer_size==0) {
 80f6322:	683b      	ldr	r3, [r7, #0]
 80f6324:	685b      	ldr	r3, [r3, #4]
 80f6326:	2b00      	cmp	r3, #0
 80f6328:	d003      	beq.n	80f6332 <data_comm_rx_init+0x32>
 80f632a:	683b      	ldr	r3, [r7, #0]
 80f632c:	891b      	ldrh	r3, [r3, #8]
 80f632e:	2b00      	cmp	r3, #0
 80f6330:	d102      	bne.n	80f6338 <data_comm_rx_init+0x38>
        return -3;
 80f6332:	f06f 0302 	mvn.w	r3, #2
 80f6336:	e059      	b.n	80f63ec <data_comm_rx_init+0xec>
    }
    if (settings->config==NULL) {
 80f6338:	683b      	ldr	r3, [r7, #0]
 80f633a:	681b      	ldr	r3, [r3, #0]
 80f633c:	2b00      	cmp	r3, #0
 80f633e:	d102      	bne.n	80f6346 <data_comm_rx_init+0x46>
        return -4;
 80f6340:	f06f 0303 	mvn.w	r3, #3
 80f6344:	e052      	b.n	80f63ec <data_comm_rx_init+0xec>
    }
    if (settings->finish_func==NULL || settings->write_func==NULL || settings->send_func==NULL) {
 80f6346:	683b      	ldr	r3, [r7, #0]
 80f6348:	699b      	ldr	r3, [r3, #24]
 80f634a:	2b00      	cmp	r3, #0
 80f634c:	d007      	beq.n	80f635e <data_comm_rx_init+0x5e>
 80f634e:	683b      	ldr	r3, [r7, #0]
 80f6350:	691b      	ldr	r3, [r3, #16]
 80f6352:	2b00      	cmp	r3, #0
 80f6354:	d003      	beq.n	80f635e <data_comm_rx_init+0x5e>
 80f6356:	683b      	ldr	r3, [r7, #0]
 80f6358:	695b      	ldr	r3, [r3, #20]
 80f635a:	2b00      	cmp	r3, #0
 80f635c:	d102      	bne.n	80f6364 <data_comm_rx_init+0x64>
        return -6;
 80f635e:	f06f 0305 	mvn.w	r3, #5
 80f6362:	e043      	b.n	80f63ec <data_comm_rx_init+0xec>
    }
    memcpy(&self->settings,settings,sizeof(data_comm_rx_settings_t));
 80f6364:	687b      	ldr	r3, [r7, #4]
 80f6366:	3308      	adds	r3, #8
 80f6368:	2224      	movs	r2, #36	@ 0x24
 80f636a:	6839      	ldr	r1, [r7, #0]
 80f636c:	4618      	mov	r0, r3
 80f636e:	f003 fdd0 	bl	80f9f12 <memcpy>
    if (settings->log_func==NULL) {
 80f6372:	683b      	ldr	r3, [r7, #0]
 80f6374:	69db      	ldr	r3, [r3, #28]
 80f6376:	2b00      	cmp	r3, #0
 80f6378:	d102      	bne.n	80f6380 <data_comm_rx_init+0x80>
        self->settings.log_func=dummy_comm_log_func;
 80f637a:	687b      	ldr	r3, [r7, #4]
 80f637c:	4a1d      	ldr	r2, [pc, #116]	@ (80f63f4 <data_comm_rx_init+0xf4>)
 80f637e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    LOG_D("%s Init",__FUNCTION__);
    self->state=DATA_COMM_RX_STATE_IDLE;
 80f6380:	687b      	ldr	r3, [r7, #4]
 80f6382:	2200      	movs	r2, #0
 80f6384:	711a      	strb	r2, [r3, #4]
    self->started=false;
 80f6386:	687b      	ldr	r3, [r7, #4]
 80f6388:	2200      	movs	r2, #0
 80f638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    self->total_size=0;
 80f638e:	687b      	ldr	r3, [r7, #4]
 80f6390:	2200      	movs	r2, #0
 80f6392:	601a      	str	r2, [r3, #0]
    self->delay_timer=0;
 80f6394:	687b      	ldr	r3, [r7, #4]
 80f6396:	2200      	movs	r2, #0
 80f6398:	62da      	str	r2, [r3, #44]	@ 0x2c
    self->count=0;
 80f639a:	687b      	ldr	r3, [r7, #4]
 80f639c:	2200      	movs	r2, #0
 80f639e:	631a      	str	r2, [r3, #48]	@ 0x30
    self->timeout_timer=0;
 80f63a0:	687b      	ldr	r3, [r7, #4]
 80f63a2:	2200      	movs	r2, #0
 80f63a4:	635a      	str	r2, [r3, #52]	@ 0x34

    self->status=DATA_COMM_STATUS_OK;
 80f63a6:	687b      	ldr	r3, [r7, #4]
 80f63a8:	2200      	movs	r2, #0
 80f63aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    self->max_burst_size=0;
 80f63ae:	687b      	ldr	r3, [r7, #4]
 80f63b0:	2200      	movs	r2, #0
 80f63b2:	875a      	strh	r2, [r3, #58]	@ 0x3a

    self->burst_index=0;
 80f63b4:	687b      	ldr	r3, [r7, #4]
 80f63b6:	2200      	movs	r2, #0
 80f63b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    self->burst_size=0;
 80f63ba:	687b      	ldr	r3, [r7, #4]
 80f63bc:	2200      	movs	r2, #0
 80f63be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    self->requested_burst_size=0;
 80f63c2:	687b      	ldr	r3, [r7, #4]
 80f63c4:	2200      	movs	r2, #0
 80f63c6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    self->burst_crc=0;
 80f63ca:	687b      	ldr	r3, [r7, #4]
 80f63cc:	2200      	movs	r2, #0
 80f63ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    self->expected_sequence=0;
 80f63d2:	687b      	ldr	r3, [r7, #4]
 80f63d4:	2200      	movs	r2, #0
 80f63d6:	649a      	str	r2, [r3, #72]	@ 0x48
    self->burst_sequence=0;
 80f63d8:	687b      	ldr	r3, [r7, #4]
 80f63da:	2200      	movs	r2, #0
 80f63dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    self->burst_retries=0;
 80f63de:	687b      	ldr	r3, [r7, #4]
 80f63e0:	2200      	movs	r2, #0
 80f63e2:	651a      	str	r2, [r3, #80]	@ 0x50
    self->full_retries=0;
 80f63e4:	687b      	ldr	r3, [r7, #4]
 80f63e6:	2200      	movs	r2, #0
 80f63e8:	655a      	str	r2, [r3, #84]	@ 0x54


    return 0;
 80f63ea:	2300      	movs	r3, #0

}
 80f63ec:	4618      	mov	r0, r3
 80f63ee:	3708      	adds	r7, #8
 80f63f0:	46bd      	mov	sp, r7
 80f63f2:	bd80      	pop	{r7, pc}
 80f63f4:	080f62e5 	.word	0x080f62e5

080f63f8 <get_page>:
//        dst[i]=value;
//    }
//}


static bool get_page(const nand_t* nand, uint32_t address, nand_page_t* page){
 80f63f8:	b580      	push	{r7, lr}
 80f63fa:	b084      	sub	sp, #16
 80f63fc:	af00      	add	r7, sp, #0
 80f63fe:	60f8      	str	r0, [r7, #12]
 80f6400:	60b9      	str	r1, [r7, #8]
 80f6402:	607a      	str	r2, [r7, #4]
    return nand->get_page_func(address,page,nand->context);
 80f6404:	68fb      	ldr	r3, [r7, #12]
 80f6406:	681b      	ldr	r3, [r3, #0]
 80f6408:	68fa      	ldr	r2, [r7, #12]
 80f640a:	6a12      	ldr	r2, [r2, #32]
 80f640c:	6879      	ldr	r1, [r7, #4]
 80f640e:	68b8      	ldr	r0, [r7, #8]
 80f6410:	4798      	blx	r3
 80f6412:	4603      	mov	r3, r0
}
 80f6414:	4618      	mov	r0, r3
 80f6416:	3710      	adds	r7, #16
 80f6418:	46bd      	mov	sp, r7
 80f641a:	bd80      	pop	{r7, pc}

080f641c <check_erase>:
        uint8_t calc_read_crc:1;
        uint8_t calc_expected_crc:1;
    } settings;
} nand_check_t;
static uint8_t check_erase(const nand_t *nand, const nand_page_t* page, uint32_t address, uint32_t size,
                           const uint8_t * data, uint32_t data_size, uint32_t data_offset, nand_check_t *p_result){
 80f641c:	b590      	push	{r4, r7, lr}
 80f641e:	b091      	sub	sp, #68	@ 0x44
 80f6420:	af00      	add	r7, sp, #0
 80f6422:	60f8      	str	r0, [r7, #12]
 80f6424:	60b9      	str	r1, [r7, #8]
 80f6426:	607a      	str	r2, [r7, #4]
 80f6428:	603b      	str	r3, [r7, #0]
    if (size<data_size+data_offset){
 80f642a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80f642c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f642e:	4413      	add	r3, r2
 80f6430:	683a      	ldr	r2, [r7, #0]
 80f6432:	429a      	cmp	r2, r3
 80f6434:	d201      	bcs.n	80f643a <check_erase+0x1e>
        return NAND_ERROR_OOB;
 80f6436:	2305      	movs	r3, #5
 80f6438:	e10f      	b.n	80f665a <check_erase+0x23e>
    }
    uint32_t remaining=size;
 80f643a:	683b      	ldr	r3, [r7, #0]
 80f643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t check_index=0;
 80f643e:	2300      	movs	r3, #0
 80f6440:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (p_result->settings.calc_read_crc==1) {
 80f6442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6444:	7b1b      	ldrb	r3, [r3, #12]
 80f6446:	f003 0302 	and.w	r3, r3, #2
 80f644a:	b2db      	uxtb	r3, r3
 80f644c:	2b00      	cmp	r3, #0
 80f644e:	d002      	beq.n	80f6456 <check_erase+0x3a>
        p_result->read_crc = 0;
 80f6450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6452:	2200      	movs	r2, #0
 80f6454:	605a      	str	r2, [r3, #4]
    }
    if (p_result->settings.calc_expected_crc==1) {
 80f6456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6458:	7b1b      	ldrb	r3, [r3, #12]
 80f645a:	f003 0304 	and.w	r3, r3, #4
 80f645e:	b2db      	uxtb	r3, r3
 80f6460:	2b00      	cmp	r3, #0
 80f6462:	d002      	beq.n	80f646a <check_erase+0x4e>
        p_result->expected_crc = 0;
 80f6464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6466:	2200      	movs	r2, #0
 80f6468:	609a      	str	r2, [r3, #8]
    }
    if (p_result->settings.check_erase==1) {
 80f646a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f646c:	7b1b      	ldrb	r3, [r3, #12]
 80f646e:	f003 0301 	and.w	r3, r3, #1
 80f6472:	b2db      	uxtb	r3, r3
 80f6474:	2b00      	cmp	r3, #0
 80f6476:	f000 80eb 	beq.w	80f6650 <check_erase+0x234>
        p_result->erase_need = false;
 80f647a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f647c:	2200      	movs	r2, #0
 80f647e:	701a      	strb	r2, [r3, #0]
    }
    while(remaining>0) {
 80f6480:	e0e6      	b.n	80f6650 <check_erase+0x234>
        uint32_t check_size = remaining;
 80f6482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f6484:	637b      	str	r3, [r7, #52]	@ 0x34
        if (check_size > page->buffer_size) {
 80f6486:	68bb      	ldr	r3, [r7, #8]
 80f6488:	685b      	ldr	r3, [r3, #4]
 80f648a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80f648c:	429a      	cmp	r2, r3
 80f648e:	d902      	bls.n	80f6496 <check_erase+0x7a>
            check_size = page->buffer_size;
 80f6490:	68bb      	ldr	r3, [r7, #8]
 80f6492:	685b      	ldr	r3, [r3, #4]
 80f6494:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        memset(page->buffer, 0xFF, page->buffer_size);
 80f6496:	68bb      	ldr	r3, [r7, #8]
 80f6498:	6818      	ldr	r0, [r3, #0]
 80f649a:	68bb      	ldr	r3, [r7, #8]
 80f649c:	685b      	ldr	r3, [r3, #4]
 80f649e:	461a      	mov	r2, r3
 80f64a0:	21ff      	movs	r1, #255	@ 0xff
 80f64a2:	f003 fcba 	bl	80f9e1a <memset>
        if (p_result->settings.calc_read_crc == 1 || p_result->settings.check_erase == 1 ) {
 80f64a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f64a8:	7b1b      	ldrb	r3, [r3, #12]
 80f64aa:	f003 0302 	and.w	r3, r3, #2
 80f64ae:	b2db      	uxtb	r3, r3
 80f64b0:	2b00      	cmp	r3, #0
 80f64b2:	d106      	bne.n	80f64c2 <check_erase+0xa6>
 80f64b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f64b6:	7b1b      	ldrb	r3, [r3, #12]
 80f64b8:	f003 0301 	and.w	r3, r3, #1
 80f64bc:	b2db      	uxtb	r3, r3
 80f64be:	2b00      	cmp	r3, #0
 80f64c0:	d014      	beq.n	80f64ec <check_erase+0xd0>
            uint8_t result = nand->read_func(address + check_index, page->buffer, check_size,nand->context);
 80f64c2:	68fb      	ldr	r3, [r7, #12]
 80f64c4:	689c      	ldr	r4, [r3, #8]
 80f64c6:	687a      	ldr	r2, [r7, #4]
 80f64c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f64ca:	18d0      	adds	r0, r2, r3
 80f64cc:	68bb      	ldr	r3, [r7, #8]
 80f64ce:	6819      	ldr	r1, [r3, #0]
 80f64d0:	68fb      	ldr	r3, [r7, #12]
 80f64d2:	6a1b      	ldr	r3, [r3, #32]
 80f64d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80f64d6:	47a0      	blx	r4
 80f64d8:	4603      	mov	r3, r0
 80f64da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (result != NAND_STATUS_SUCCESS) {
 80f64de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80f64e2:	2b00      	cmp	r3, #0
 80f64e4:	d002      	beq.n	80f64ec <check_erase+0xd0>
                LOG_E("NAND_WE ERROR reading 0x%02x", result);
                return result;
 80f64e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80f64ea:	e0b6      	b.n	80f665a <check_erase+0x23e>
            }
        }
        if (p_result->settings.calc_read_crc == 1) {
 80f64ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f64ee:	7b1b      	ldrb	r3, [r3, #12]
 80f64f0:	f003 0302 	and.w	r3, r3, #2
 80f64f4:	b2db      	uxtb	r3, r3
 80f64f6:	2b00      	cmp	r3, #0
 80f64f8:	d00a      	beq.n	80f6510 <check_erase+0xf4>
            p_result->read_crc = calc_crc32(page->buffer, check_size, NAND_CRC_SEED, p_result->read_crc);
 80f64fa:	68bb      	ldr	r3, [r7, #8]
 80f64fc:	6818      	ldr	r0, [r3, #0]
 80f64fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6500:	685b      	ldr	r3, [r3, #4]
 80f6502:	4a58      	ldr	r2, [pc, #352]	@ (80f6664 <check_erase+0x248>)
 80f6504:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80f6506:	f002 fae0 	bl	80f8aca <calc_crc32>
 80f650a:	4602      	mov	r2, r0
 80f650c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f650e:	605a      	str	r2, [r3, #4]
        }
        if (p_result->settings.calc_expected_crc == 1 || p_result->settings.check_erase==1) {
 80f6510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6512:	7b1b      	ldrb	r3, [r3, #12]
 80f6514:	f003 0304 	and.w	r3, r3, #4
 80f6518:	b2db      	uxtb	r3, r3
 80f651a:	2b00      	cmp	r3, #0
 80f651c:	d106      	bne.n	80f652c <check_erase+0x110>
 80f651e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6520:	7b1b      	ldrb	r3, [r3, #12]
 80f6522:	f003 0301 	and.w	r3, r3, #1
 80f6526:	b2db      	uxtb	r3, r3
 80f6528:	2b00      	cmp	r3, #0
 80f652a:	d077      	beq.n	80f661c <check_erase+0x200>

            uint32_t start;
            if (data_offset<check_index){
 80f652c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80f652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f6530:	429a      	cmp	r2, r3
 80f6532:	d202      	bcs.n	80f653a <check_erase+0x11e>
                start= check_index;
 80f6534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f6536:	633b      	str	r3, [r7, #48]	@ 0x30
 80f6538:	e001      	b.n	80f653e <check_erase+0x122>
            } else {
                start = data_offset;
 80f653a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f653c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            uint32_t end;

            uint32_t end_data=data_offset+data_size;
 80f653e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80f6540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f6542:	4413      	add	r3, r2
 80f6544:	623b      	str	r3, [r7, #32]
            uint32_t end_check=check_index+check_size;
 80f6546:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80f6548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f654a:	4413      	add	r3, r2
 80f654c:	61fb      	str	r3, [r7, #28]

            if (end_data<end_check){
 80f654e:	6a3a      	ldr	r2, [r7, #32]
 80f6550:	69fb      	ldr	r3, [r7, #28]
 80f6552:	429a      	cmp	r2, r3
 80f6554:	d202      	bcs.n	80f655c <check_erase+0x140>
                end = end_data;
 80f6556:	6a3b      	ldr	r3, [r7, #32]
 80f6558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80f655a:	e001      	b.n	80f6560 <check_erase+0x144>
            } else {
                end = end_check;
 80f655c:	69fb      	ldr	r3, [r7, #28]
 80f655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            if (start<end ){
 80f6560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80f6562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f6564:	429a      	cmp	r2, r3
 80f6566:	d259      	bcs.n	80f661c <check_erase+0x200>
                uint32_t buffer_addr = start - check_index;
 80f6568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80f656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f656c:	1ad3      	subs	r3, r2, r3
 80f656e:	61bb      	str	r3, [r7, #24]
                uint32_t data_addr = start - data_offset;
 80f6570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80f6572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f6574:	1ad3      	subs	r3, r2, r3
 80f6576:	617b      	str	r3, [r7, #20]
                for (uint32_t i=0;i<(end-start);++i){
 80f6578:	2300      	movs	r3, #0
 80f657a:	62bb      	str	r3, [r7, #40]	@ 0x28
 80f657c:	e048      	b.n	80f6610 <check_erase+0x1f4>
                    uint8_t byte_read = page->buffer[buffer_addr+i];
 80f657e:	68bb      	ldr	r3, [r7, #8]
 80f6580:	681a      	ldr	r2, [r3, #0]
 80f6582:	69b9      	ldr	r1, [r7, #24]
 80f6584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f6586:	440b      	add	r3, r1
 80f6588:	4413      	add	r3, r2
 80f658a:	781b      	ldrb	r3, [r3, #0]
 80f658c:	74fb      	strb	r3, [r7, #19]
                    uint8_t byte_data = (data == NULL ? 0xFF : data[data_addr + i]);
 80f658e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6590:	2b00      	cmp	r3, #0
 80f6592:	d006      	beq.n	80f65a2 <check_erase+0x186>
 80f6594:	697a      	ldr	r2, [r7, #20]
 80f6596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f6598:	4413      	add	r3, r2
 80f659a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f659c:	4413      	add	r3, r2
 80f659e:	781b      	ldrb	r3, [r3, #0]
 80f65a0:	e000      	b.n	80f65a4 <check_erase+0x188>
 80f65a2:	23ff      	movs	r3, #255	@ 0xff
 80f65a4:	74bb      	strb	r3, [r7, #18]
                    if (p_result->settings.check_erase && !p_result->erase_need &&
 80f65a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f65a8:	7b1b      	ldrb	r3, [r3, #12]
 80f65aa:	f003 0301 	and.w	r3, r3, #1
 80f65ae:	b2db      	uxtb	r3, r3
 80f65b0:	2b00      	cmp	r3, #0
 80f65b2:	d022      	beq.n	80f65fa <check_erase+0x1de>
 80f65b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f65b6:	781b      	ldrb	r3, [r3, #0]
 80f65b8:	f083 0301 	eor.w	r3, r3, #1
 80f65bc:	b2db      	uxtb	r3, r3
 80f65be:	2b00      	cmp	r3, #0
 80f65c0:	d01b      	beq.n	80f65fa <check_erase+0x1de>
                        nand->check_func(byte_read, byte_data)) {
 80f65c2:	68fb      	ldr	r3, [r7, #12]
 80f65c4:	695b      	ldr	r3, [r3, #20]
 80f65c6:	7cb9      	ldrb	r1, [r7, #18]
 80f65c8:	7cfa      	ldrb	r2, [r7, #19]
 80f65ca:	4610      	mov	r0, r2
 80f65cc:	4798      	blx	r3
 80f65ce:	4603      	mov	r3, r0
                    if (p_result->settings.check_erase && !p_result->erase_need &&
 80f65d0:	2b00      	cmp	r3, #0
 80f65d2:	d012      	beq.n	80f65fa <check_erase+0x1de>
                        p_result->erase_need = true;
 80f65d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f65d6:	2201      	movs	r2, #1
 80f65d8:	701a      	strb	r2, [r3, #0]
                        if (p_result->settings.calc_read_crc == 0 && p_result->settings.calc_expected_crc == 0) {
 80f65da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f65dc:	7b1b      	ldrb	r3, [r3, #12]
 80f65de:	f003 0302 	and.w	r3, r3, #2
 80f65e2:	b2db      	uxtb	r3, r3
 80f65e4:	2b00      	cmp	r3, #0
 80f65e6:	d108      	bne.n	80f65fa <check_erase+0x1de>
 80f65e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f65ea:	7b1b      	ldrb	r3, [r3, #12]
 80f65ec:	f003 0304 	and.w	r3, r3, #4
 80f65f0:	b2db      	uxtb	r3, r3
 80f65f2:	2b00      	cmp	r3, #0
 80f65f4:	d101      	bne.n	80f65fa <check_erase+0x1de>
                            return NAND_STATUS_SUCCESS;
 80f65f6:	2300      	movs	r3, #0
 80f65f8:	e02f      	b.n	80f665a <check_erase+0x23e>
                        }
                    }
                    page->buffer[buffer_addr+i] = byte_data;
 80f65fa:	68bb      	ldr	r3, [r7, #8]
 80f65fc:	681a      	ldr	r2, [r3, #0]
 80f65fe:	69b9      	ldr	r1, [r7, #24]
 80f6600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f6602:	440b      	add	r3, r1
 80f6604:	4413      	add	r3, r2
 80f6606:	7cba      	ldrb	r2, [r7, #18]
 80f6608:	701a      	strb	r2, [r3, #0]
                for (uint32_t i=0;i<(end-start);++i){
 80f660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f660c:	3301      	adds	r3, #1
 80f660e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80f6610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80f6612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80f6614:	1ad3      	subs	r3, r2, r3
 80f6616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80f6618:	429a      	cmp	r2, r3
 80f661a:	d3b0      	bcc.n	80f657e <check_erase+0x162>
                }


            }
        }
        if (p_result->settings.calc_expected_crc == 1) {
 80f661c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f661e:	7b1b      	ldrb	r3, [r3, #12]
 80f6620:	f003 0304 	and.w	r3, r3, #4
 80f6624:	b2db      	uxtb	r3, r3
 80f6626:	2b00      	cmp	r3, #0
 80f6628:	d00a      	beq.n	80f6640 <check_erase+0x224>
            p_result->expected_crc = calc_crc32(page->buffer, check_size, NAND_CRC_SEED, p_result->expected_crc);
 80f662a:	68bb      	ldr	r3, [r7, #8]
 80f662c:	6818      	ldr	r0, [r3, #0]
 80f662e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f6630:	689b      	ldr	r3, [r3, #8]
 80f6632:	4a0c      	ldr	r2, [pc, #48]	@ (80f6664 <check_erase+0x248>)
 80f6634:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80f6636:	f002 fa48 	bl	80f8aca <calc_crc32>
 80f663a:	4602      	mov	r2, r0
 80f663c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f663e:	609a      	str	r2, [r3, #8]
        }
        remaining -= check_size;
 80f6640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80f6642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f6644:	1ad3      	subs	r3, r2, r3
 80f6646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        check_index += check_size;
 80f6648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80f664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f664c:	4413      	add	r3, r2
 80f664e:	63bb      	str	r3, [r7, #56]	@ 0x38
    while(remaining>0) {
 80f6650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f6652:	2b00      	cmp	r3, #0
 80f6654:	f47f af15 	bne.w	80f6482 <check_erase+0x66>
    }
    return NAND_STATUS_SUCCESS;
 80f6658:	2300      	movs	r3, #0
}
 80f665a:	4618      	mov	r0, r3
 80f665c:	3744      	adds	r7, #68	@ 0x44
 80f665e:	46bd      	mov	sp, r7
 80f6660:	bd90      	pop	{r4, r7, pc}
 80f6662:	bf00      	nop
 80f6664:	deadbeef 	.word	0xdeadbeef

080f6668 <nand_write_erase>:

uint8_t nand_write_erase(const nand_t *nand, uint32_t address, const uint8_t *data, uint32_t size, bool always_backup) {
 80f6668:	b590      	push	{r4, r7, lr}
 80f666a:	b09d      	sub	sp, #116	@ 0x74
 80f666c:	af04      	add	r7, sp, #16
 80f666e:	60f8      	str	r0, [r7, #12]
 80f6670:	60b9      	str	r1, [r7, #8]
 80f6672:	607a      	str	r2, [r7, #4]
 80f6674:	603b      	str	r3, [r7, #0]
    uint8_t result=NAND_STATUS_SUCCESS;
 80f6676:	2300      	movs	r3, #0
 80f6678:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (size==0){
 80f667c:	683b      	ldr	r3, [r7, #0]
 80f667e:	2b00      	cmp	r3, #0
 80f6680:	d102      	bne.n	80f6688 <nand_write_erase+0x20>
        LOG_D("NAND_WE done size=0");
        return result;
 80f6682:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6686:	e166      	b.n	80f6956 <nand_write_erase+0x2ee>
    }

    LOG_D("NAND_WE start addr:0x%08x s:%d del:%d base:0x%08x",address,size,data==NULL,nand->base_address);
    uint32_t remaining_size = size;
 80f6688:	683b      	ldr	r3, [r7, #0]
 80f668a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t data_index = 0;
 80f668c:	2300      	movs	r3, #0
 80f668e:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t start_address=(address-nand->base_address);   //address in page
 80f6690:	68fb      	ldr	r3, [r7, #12]
 80f6692:	699b      	ldr	r3, [r3, #24]
 80f6694:	68ba      	ldr	r2, [r7, #8]
 80f6696:	1ad3      	subs	r3, r2, r3
 80f6698:	657b      	str	r3, [r7, #84]	@ 0x54
    do {
        nand_page_t m_page;
        if (!get_page(nand, start_address, &m_page)) {
 80f669a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80f669e:	461a      	mov	r2, r3
 80f66a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80f66a2:	68f8      	ldr	r0, [r7, #12]
 80f66a4:	f7ff fea8 	bl	80f63f8 <get_page>
 80f66a8:	4603      	mov	r3, r0
 80f66aa:	f083 0301 	eor.w	r3, r3, #1
 80f66ae:	b2db      	uxtb	r3, r3
 80f66b0:	2b00      	cmp	r3, #0
 80f66b2:	d001      	beq.n	80f66b8 <nand_write_erase+0x50>
            LOG_E("NAND_WE ERROR NO page in addr 0x%08x", start_address);
            return NAND_ERROR_OOB;
 80f66b4:	2305      	movs	r3, #5
 80f66b6:	e14e      	b.n	80f6956 <nand_write_erase+0x2ee>
        }
        nand_page_t *page = &m_page;
 80f66b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80f66bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        uint32_t page_start = page->start_address;
 80f66be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f66c0:	691b      	ldr	r3, [r3, #16]
 80f66c2:	647b      	str	r3, [r7, #68]	@ 0x44
        uint32_t size_to_copy = remaining_size;
 80f66c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f66c6:	653b      	str	r3, [r7, #80]	@ 0x50
        uint32_t page_address = start_address - page_start;
 80f66c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80f66ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80f66cc:	1ad3      	subs	r3, r2, r3
 80f66ce:	643b      	str	r3, [r7, #64]	@ 0x40
        LOG_D("NAND_WE start di:%d, rs:%d addr:0x%08x", data_index, remaining_size, start_address);

        LOG_D("NAND_WE page {addr:0x%08x s:%d i:%d } pa:%d, rem:%d",
                   page->start_address, page->size, page->index, page_address, remaining_size);

        uint32_t fit_size = page->size - page_address;  //How much fits into this page
 80f66d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f66d2:	689a      	ldr	r2, [r3, #8]
 80f66d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f66d6:	1ad3      	subs	r3, r2, r3
 80f66d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if (size_to_copy > fit_size) {
 80f66da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f66dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f66de:	429a      	cmp	r2, r3
 80f66e0:	d901      	bls.n	80f66e6 <nand_write_erase+0x7e>
            LOG_D("NAND_WE trimming %d=>%d", size_to_copy, fit_size);
            size_to_copy = fit_size;
 80f66e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f66e4:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        if (page->buffer == NULL || page->buffer_size==0) {
 80f66e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f66e8:	681b      	ldr	r3, [r3, #0]
 80f66ea:	2b00      	cmp	r3, #0
 80f66ec:	d003      	beq.n	80f66f6 <nand_write_erase+0x8e>
 80f66ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f66f0:	685b      	ldr	r3, [r3, #4]
 80f66f2:	2b00      	cmp	r3, #0
 80f66f4:	d101      	bne.n	80f66fa <nand_write_erase+0x92>
            LOG_E("NAND_WE ERROR NO buffer");
            return NAND_ERROR_NO_BUFFER;
 80f66f6:	2306      	movs	r3, #6
 80f66f8:	e12d      	b.n	80f6956 <nand_write_erase+0x2ee>
        }
        nand_check_t check;
        check.settings.check_erase=1;
 80f66fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f66fe:	f043 0301 	orr.w	r3, r3, #1
 80f6702:	f887 3020 	strb.w	r3, [r7, #32]
        check.settings.calc_read_crc=1;
 80f6706:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f670a:	f043 0302 	orr.w	r3, r3, #2
 80f670e:	f887 3020 	strb.w	r3, [r7, #32]
        check.settings.calc_expected_crc=1;
 80f6712:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f6716:	f043 0304 	orr.w	r3, r3, #4
 80f671a:	f887 3020 	strb.w	r3, [r7, #32]
        const uint8_t* p_data=(data==NULL?NULL:&data[data_index]);
 80f671e:	687b      	ldr	r3, [r7, #4]
 80f6720:	2b00      	cmp	r3, #0
 80f6722:	d003      	beq.n	80f672c <nand_write_erase+0xc4>
 80f6724:	687a      	ldr	r2, [r7, #4]
 80f6726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f6728:	4413      	add	r3, r2
 80f672a:	e000      	b.n	80f672e <nand_write_erase+0xc6>
 80f672c:	2300      	movs	r3, #0
 80f672e:	63bb      	str	r3, [r7, #56]	@ 0x38
        result = check_erase(nand,page,page_start,page->size,p_data,size_to_copy,page_address,&check);
 80f6730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f6732:	689a      	ldr	r2, [r3, #8]
 80f6734:	f107 0314 	add.w	r3, r7, #20
 80f6738:	9303      	str	r3, [sp, #12]
 80f673a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f673c:	9302      	str	r3, [sp, #8]
 80f673e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6740:	9301      	str	r3, [sp, #4]
 80f6742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f6744:	9300      	str	r3, [sp, #0]
 80f6746:	4613      	mov	r3, r2
 80f6748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80f674a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80f674c:	68f8      	ldr	r0, [r7, #12]
 80f674e:	f7ff fe65 	bl	80f641c <check_erase>
 80f6752:	4603      	mov	r3, r0
 80f6754:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (result != NAND_STATUS_SUCCESS) {
 80f6758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f675c:	2b00      	cmp	r3, #0
 80f675e:	d002      	beq.n	80f6766 <nand_write_erase+0xfe>
            LOG_E("NAND_WE ERROR erase 0x%02x", result);
            return result;
 80f6760:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6764:	e0f7      	b.n	80f6956 <nand_write_erase+0x2ee>
        }

        if (page->buffer_size < page->size) {
 80f6766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f6768:	685a      	ldr	r2, [r3, #4]
 80f676a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f676c:	689b      	ldr	r3, [r3, #8]
 80f676e:	429a      	cmp	r2, r3
 80f6770:	d25f      	bcs.n	80f6832 <nand_write_erase+0x1ca>
            //Backup is not possible, the page size is too big
            if (check.erase_need && always_backup) {
 80f6772:	7d3b      	ldrb	r3, [r7, #20]
 80f6774:	2b00      	cmp	r3, #0
 80f6776:	d005      	beq.n	80f6784 <nand_write_erase+0x11c>
 80f6778:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80f677c:	2b00      	cmp	r3, #0
 80f677e:	d001      	beq.n	80f6784 <nand_write_erase+0x11c>
                LOG_E("NAND_WE Insufficient Buffer %d < %d", page->buffer_size,page->size);
                return NAND_ERROR_INSUFICIENT_BUFFER;
 80f6780:	2308      	movs	r3, #8
 80f6782:	e0e8      	b.n	80f6956 <nand_write_erase+0x2ee>
            }


            if (check.erase_need){
 80f6784:	7d3b      	ldrb	r3, [r7, #20]
 80f6786:	2b00      	cmp	r3, #0
 80f6788:	d013      	beq.n	80f67b2 <nand_write_erase+0x14a>
                LOG_I("NAND_WE NO BACKUP erasing %d (0x%08x, size: 0x%08x)", page->index,page_start,page->size);
                result = nand->erase_page_func(page->index, page_start, page->size,nand->context);
 80f678a:	68fb      	ldr	r3, [r7, #12]
 80f678c:	68dc      	ldr	r4, [r3, #12]
 80f678e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f6790:	68d8      	ldr	r0, [r3, #12]
 80f6792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f6794:	689a      	ldr	r2, [r3, #8]
 80f6796:	68fb      	ldr	r3, [r7, #12]
 80f6798:	6a1b      	ldr	r3, [r3, #32]
 80f679a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80f679c:	47a0      	blx	r4
 80f679e:	4603      	mov	r3, r0
 80f67a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                if (result != NAND_STATUS_SUCCESS) {
 80f67a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f67a8:	2b00      	cmp	r3, #0
 80f67aa:	d002      	beq.n	80f67b2 <nand_write_erase+0x14a>
                    LOG_E("NAND_WE ERROR erase 0x%02x", result);
                    return result;
 80f67ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f67b0:	e0d1      	b.n	80f6956 <nand_write_erase+0x2ee>
                }

            }
            if(data!=NULL) {
 80f67b2:	687b      	ldr	r3, [r7, #4]
 80f67b4:	2b00      	cmp	r3, #0
 80f67b6:	d011      	beq.n	80f67dc <nand_write_erase+0x174>
                //Data is null, so it was erasing
                result = nand->write_func(start_address, p_data, size_to_copy,nand->context);
 80f67b8:	68fb      	ldr	r3, [r7, #12]
 80f67ba:	685c      	ldr	r4, [r3, #4]
 80f67bc:	68fb      	ldr	r3, [r7, #12]
 80f67be:	6a1b      	ldr	r3, [r3, #32]
 80f67c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f67c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80f67c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80f67c6:	47a0      	blx	r4
 80f67c8:	4603      	mov	r3, r0
 80f67ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                if (result != NAND_STATUS_SUCCESS) {
 80f67ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f67d2:	2b00      	cmp	r3, #0
 80f67d4:	d002      	beq.n	80f67dc <nand_write_erase+0x174>
                    LOG_E("NAND_WE ERROR write 0x%02x", result);
                    return result;
 80f67d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f67da:	e0bc      	b.n	80f6956 <nand_write_erase+0x2ee>
                }
            }
            check.settings.check_erase=0;
 80f67dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f67e0:	f023 0301 	bic.w	r3, r3, #1
 80f67e4:	f887 3020 	strb.w	r3, [r7, #32]
            check.settings.calc_read_crc=1;
 80f67e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f67ec:	f043 0302 	orr.w	r3, r3, #2
 80f67f0:	f887 3020 	strb.w	r3, [r7, #32]
            check.settings.calc_expected_crc=1;
 80f67f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f67f8:	f043 0304 	orr.w	r3, r3, #4
 80f67fc:	f887 3020 	strb.w	r3, [r7, #32]
            result = check_erase(nand,page,start_address,size_to_copy,p_data,size_to_copy,0,&check);
 80f6800:	f107 0314 	add.w	r3, r7, #20
 80f6804:	9303      	str	r3, [sp, #12]
 80f6806:	2300      	movs	r3, #0
 80f6808:	9302      	str	r3, [sp, #8]
 80f680a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f680c:	9301      	str	r3, [sp, #4]
 80f680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f6810:	9300      	str	r3, [sp, #0]
 80f6812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6814:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80f6816:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80f6818:	68f8      	ldr	r0, [r7, #12]
 80f681a:	f7ff fdff 	bl	80f641c <check_erase>
 80f681e:	4603      	mov	r3, r0
 80f6820:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            //Calculate the final crc
            if (result != NAND_STATUS_SUCCESS) {
 80f6824:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6828:	2b00      	cmp	r3, #0
 80f682a:	d07d      	beq.n	80f6928 <nand_write_erase+0x2c0>
                LOG_E("NAND_WE ERROR check 0x%02x", result);
                return result;
 80f682c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6830:	e091      	b.n	80f6956 <nand_write_erase+0x2ee>
            }
            LOG_D("NAND_WE sb:%d se:%d ep:%d sc:%d", skip_beginning, skip_end, erase_page,
                       size_to_copy);
            expected_crc = calc_crc32(page->buffer, page->size, NAND_CRC_SEED, 0);
            LOG_D("NAND_WE crc 0x%08x", expected_crc);*/
            if (!check.erase_need) {
 80f6832:	7d3b      	ldrb	r3, [r7, #20]
 80f6834:	f083 0301 	eor.w	r3, r3, #1
 80f6838:	b2db      	uxtb	r3, r3
 80f683a:	2b00      	cmp	r3, #0
 80f683c:	d014      	beq.n	80f6868 <nand_write_erase+0x200>
                LOG_D("NAND_WE no erase");
                //there's no need to erase the page to write the data
                if (data != NULL) {
 80f683e:	687b      	ldr	r3, [r7, #4]
 80f6840:	2b00      	cmp	r3, #0
 80f6842:	d044      	beq.n	80f68ce <nand_write_erase+0x266>
                    LOG_D("NAND_WE write to 0x%08x data[%d] s: %d", start_address, data_index, size_to_copy);
                    result = nand->write_func(start_address, p_data, size_to_copy,nand->context);
 80f6844:	68fb      	ldr	r3, [r7, #12]
 80f6846:	685c      	ldr	r4, [r3, #4]
 80f6848:	68fb      	ldr	r3, [r7, #12]
 80f684a:	6a1b      	ldr	r3, [r3, #32]
 80f684c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f684e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80f6850:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80f6852:	47a0      	blx	r4
 80f6854:	4603      	mov	r3, r0
 80f6856:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (result != NAND_STATUS_SUCCESS) {
 80f685a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f685e:	2b00      	cmp	r3, #0
 80f6860:	d035      	beq.n	80f68ce <nand_write_erase+0x266>
                        LOG_E("NAND_WE ERROR write 0x%02x", result);
                        return result;
 80f6862:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6866:	e076      	b.n	80f6956 <nand_write_erase+0x2ee>

            } else {
                LOG_D("NAND_WE erasing page %d 0x%08x %d", page->index, page_start, page->size);
                // Since we already backed up the entire page into the buffer, we just need to modify the buffer
                // with the wanted data at the wanted location
                result = nand->erase_page_func(page->index, page_start, page->size,nand->context);
 80f6868:	68fb      	ldr	r3, [r7, #12]
 80f686a:	68dc      	ldr	r4, [r3, #12]
 80f686c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f686e:	68d8      	ldr	r0, [r3, #12]
 80f6870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f6872:	689a      	ldr	r2, [r3, #8]
 80f6874:	68fb      	ldr	r3, [r7, #12]
 80f6876:	6a1b      	ldr	r3, [r3, #32]
 80f6878:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80f687a:	47a0      	blx	r4
 80f687c:	4603      	mov	r3, r0
 80f687e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                if (result != NAND_STATUS_SUCCESS) {
 80f6882:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6886:	2b00      	cmp	r3, #0
 80f6888:	d002      	beq.n	80f6890 <nand_write_erase+0x228>
                    LOG_E("NAND_WE ERROR erase 0x%02x", result);
                    return result;
 80f688a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f688e:	e062      	b.n	80f6956 <nand_write_erase+0x2ee>
                }
                // if I'm trying to delete (data==NULL) the whole page (buffer_index==0 and size_to_copy == nand->page_size)
                // then we don't need to write anything
                LOG_D("NAND_WE erasing done %d %d %d", data != NULL, page_address != 0,
                           size_to_copy != page->size);
                if (data != NULL || page_address != 0 || size_to_copy != page->size) {
 80f6890:	687b      	ldr	r3, [r7, #4]
 80f6892:	2b00      	cmp	r3, #0
 80f6894:	d107      	bne.n	80f68a6 <nand_write_erase+0x23e>
 80f6896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f6898:	2b00      	cmp	r3, #0
 80f689a:	d104      	bne.n	80f68a6 <nand_write_erase+0x23e>
 80f689c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f689e:	689b      	ldr	r3, [r3, #8]
 80f68a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f68a2:	429a      	cmp	r2, r3
 80f68a4:	d013      	beq.n	80f68ce <nand_write_erase+0x266>
                    //There's actually something to write
                    LOG_D("NAND_WE writing all buffer in 0x%08x s:%d", page_start, page->size);
                    result = nand->write_func(page_start, (uint8_t *) page->buffer, page->size,nand->context);
 80f68a6:	68fb      	ldr	r3, [r7, #12]
 80f68a8:	685c      	ldr	r4, [r3, #4]
 80f68aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f68ac:	6819      	ldr	r1, [r3, #0]
 80f68ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f68b0:	689a      	ldr	r2, [r3, #8]
 80f68b2:	68fb      	ldr	r3, [r7, #12]
 80f68b4:	6a1b      	ldr	r3, [r3, #32]
 80f68b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80f68b8:	47a0      	blx	r4
 80f68ba:	4603      	mov	r3, r0
 80f68bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (result != NAND_STATUS_SUCCESS) {
 80f68c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f68c4:	2b00      	cmp	r3, #0
 80f68c6:	d002      	beq.n	80f68ce <nand_write_erase+0x266>
                        LOG_E("NAND_WE ERROR write 0x%02x", result);
                        return result;
 80f68c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f68cc:	e043      	b.n	80f6956 <nand_write_erase+0x2ee>
                    }
                }

            }

            check.settings.check_erase=0;
 80f68ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f68d2:	f023 0301 	bic.w	r3, r3, #1
 80f68d6:	f887 3020 	strb.w	r3, [r7, #32]
            check.settings.calc_read_crc=1;
 80f68da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f68de:	f043 0302 	orr.w	r3, r3, #2
 80f68e2:	f887 3020 	strb.w	r3, [r7, #32]
            check.settings.calc_expected_crc=0;
 80f68e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80f68ea:	f023 0304 	bic.w	r3, r3, #4
 80f68ee:	f887 3020 	strb.w	r3, [r7, #32]
            result = check_erase(nand,page,page_start,page->size,p_data,size_to_copy,page_address,&check);
 80f68f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f68f4:	689a      	ldr	r2, [r3, #8]
 80f68f6:	f107 0314 	add.w	r3, r7, #20
 80f68fa:	9303      	str	r3, [sp, #12]
 80f68fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f68fe:	9302      	str	r3, [sp, #8]
 80f6900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6902:	9301      	str	r3, [sp, #4]
 80f6904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f6906:	9300      	str	r3, [sp, #0]
 80f6908:	4613      	mov	r3, r2
 80f690a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80f690c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80f690e:	68f8      	ldr	r0, [r7, #12]
 80f6910:	f7ff fd84 	bl	80f641c <check_erase>
 80f6914:	4603      	mov	r3, r0
 80f6916:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if (result != NAND_STATUS_SUCCESS) {
 80f691a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f691e:	2b00      	cmp	r3, #0
 80f6920:	d002      	beq.n	80f6928 <nand_write_erase+0x2c0>
                LOG_E("NAND_WE ERROR read chk 0x%02x", result);
                return result;
 80f6922:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80f6926:	e016      	b.n	80f6956 <nand_write_erase+0x2ee>
            LOG_D("NAND_WE reading done crc: 0x%08x", check.read_crc);



        }
        if (check.expected_crc != check.read_crc) {
 80f6928:	69fa      	ldr	r2, [r7, #28]
 80f692a:	69bb      	ldr	r3, [r7, #24]
 80f692c:	429a      	cmp	r2, r3
 80f692e:	d001      	beq.n	80f6934 <nand_write_erase+0x2cc>
            LOG_E("NAND_WE ERROR CRC 0x%08x!=0x%08x", check.expected_crc, check.read_crc);
            return NAND_ERROR_CRC_MISMATCH;
 80f6930:	2307      	movs	r3, #7
 80f6932:	e010      	b.n	80f6956 <nand_write_erase+0x2ee>
        }
        data_index += size_to_copy;
 80f6934:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80f6936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6938:	4413      	add	r3, r2
 80f693a:	65bb      	str	r3, [r7, #88]	@ 0x58
        remaining_size -= size_to_copy;
 80f693c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80f693e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6940:	1ad3      	subs	r3, r2, r3
 80f6942:	65fb      	str	r3, [r7, #92]	@ 0x5c
        start_address += size_to_copy;
 80f6944:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80f6946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f6948:	4413      	add	r3, r2
 80f694a:	657b      	str	r3, [r7, #84]	@ 0x54
        LOG_D("NAND_WE next di:%d, rs:%d addr:0x%08x",data_index,remaining_size,start_address);
    } while(remaining_size>0);
 80f694c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f694e:	2b00      	cmp	r3, #0
 80f6950:	f47f aea3 	bne.w	80f669a <nand_write_erase+0x32>
    return NAND_STATUS_SUCCESS;
 80f6954:	2300      	movs	r3, #0
}
 80f6956:	4618      	mov	r0, r3
 80f6958:	3764      	adds	r7, #100	@ 0x64
 80f695a:	46bd      	mov	sp, r7
 80f695c:	bd90      	pop	{r4, r7, pc}

080f695e <uECC_vli_clear>:
{
	return 2 * curve->num_bytes;
}

void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words)
{
 80f695e:	b480      	push	{r7}
 80f6960:	b085      	sub	sp, #20
 80f6962:	af00      	add	r7, sp, #0
 80f6964:	6078      	str	r0, [r7, #4]
 80f6966:	460b      	mov	r3, r1
 80f6968:	70fb      	strb	r3, [r7, #3]
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 80f696a:	2300      	movs	r3, #0
 80f696c:	73fb      	strb	r3, [r7, #15]
 80f696e:	e00a      	b.n	80f6986 <uECC_vli_clear+0x28>
		 vli[i] = 0;
 80f6970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6974:	009b      	lsls	r3, r3, #2
 80f6976:	687a      	ldr	r2, [r7, #4]
 80f6978:	4413      	add	r3, r2
 80f697a:	2200      	movs	r2, #0
 80f697c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_words; ++i) {
 80f697e:	7bfb      	ldrb	r3, [r7, #15]
 80f6980:	3301      	adds	r3, #1
 80f6982:	b2db      	uxtb	r3, r3
 80f6984:	73fb      	strb	r3, [r7, #15]
 80f6986:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80f698a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f698e:	429a      	cmp	r2, r3
 80f6990:	dbee      	blt.n	80f6970 <uECC_vli_clear+0x12>
	}
}
 80f6992:	bf00      	nop
 80f6994:	bf00      	nop
 80f6996:	3714      	adds	r7, #20
 80f6998:	46bd      	mov	sp, r7
 80f699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f699e:	4770      	bx	lr

080f69a0 <uECC_vli_isZero>:

uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words)
{
 80f69a0:	b480      	push	{r7}
 80f69a2:	b085      	sub	sp, #20
 80f69a4:	af00      	add	r7, sp, #0
 80f69a6:	6078      	str	r0, [r7, #4]
 80f69a8:	460b      	mov	r3, r1
 80f69aa:	70fb      	strb	r3, [r7, #3]
	uECC_word_t bits = 0;
 80f69ac:	2300      	movs	r3, #0
 80f69ae:	60fb      	str	r3, [r7, #12]
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 80f69b0:	2300      	movs	r3, #0
 80f69b2:	72fb      	strb	r3, [r7, #11]
 80f69b4:	e00c      	b.n	80f69d0 <uECC_vli_isZero+0x30>
		bits |= vli[i];
 80f69b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80f69ba:	009b      	lsls	r3, r3, #2
 80f69bc:	687a      	ldr	r2, [r7, #4]
 80f69be:	4413      	add	r3, r2
 80f69c0:	681b      	ldr	r3, [r3, #0]
 80f69c2:	68fa      	ldr	r2, [r7, #12]
 80f69c4:	4313      	orrs	r3, r2
 80f69c6:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < num_words; ++i) {
 80f69c8:	7afb      	ldrb	r3, [r7, #11]
 80f69ca:	3301      	adds	r3, #1
 80f69cc:	b2db      	uxtb	r3, r3
 80f69ce:	72fb      	strb	r3, [r7, #11]
 80f69d0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80f69d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f69d8:	429a      	cmp	r2, r3
 80f69da:	dbec      	blt.n	80f69b6 <uECC_vli_isZero+0x16>
	}
	return (bits == 0);
 80f69dc:	68fb      	ldr	r3, [r7, #12]
 80f69de:	2b00      	cmp	r3, #0
 80f69e0:	bf0c      	ite	eq
 80f69e2:	2301      	moveq	r3, #1
 80f69e4:	2300      	movne	r3, #0
 80f69e6:	b2db      	uxtb	r3, r3
}
 80f69e8:	4618      	mov	r0, r3
 80f69ea:	3714      	adds	r7, #20
 80f69ec:	46bd      	mov	sp, r7
 80f69ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f69f2:	4770      	bx	lr

080f69f4 <uECC_vli_testBit>:

uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit)
{
 80f69f4:	b480      	push	{r7}
 80f69f6:	b083      	sub	sp, #12
 80f69f8:	af00      	add	r7, sp, #0
 80f69fa:	6078      	str	r0, [r7, #4]
 80f69fc:	460b      	mov	r3, r1
 80f69fe:	807b      	strh	r3, [r7, #2]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 80f6a00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80f6a04:	115b      	asrs	r3, r3, #5
 80f6a06:	b21b      	sxth	r3, r3
 80f6a08:	009b      	lsls	r3, r3, #2
 80f6a0a:	687a      	ldr	r2, [r7, #4]
 80f6a0c:	4413      	add	r3, r2
 80f6a0e:	681a      	ldr	r2, [r3, #0]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80f6a10:	887b      	ldrh	r3, [r7, #2]
 80f6a12:	f003 031f 	and.w	r3, r3, #31
 80f6a16:	2101      	movs	r1, #1
 80f6a18:	fa01 f303 	lsl.w	r3, r1, r3
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 80f6a1c:	4013      	ands	r3, r2
}
 80f6a1e:	4618      	mov	r0, r3
 80f6a20:	370c      	adds	r7, #12
 80f6a22:	46bd      	mov	sp, r7
 80f6a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6a28:	4770      	bx	lr

080f6a2a <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli,
				 const wordcount_t max_words)
{
 80f6a2a:	b480      	push	{r7}
 80f6a2c:	b085      	sub	sp, #20
 80f6a2e:	af00      	add	r7, sp, #0
 80f6a30:	6078      	str	r0, [r7, #4]
 80f6a32:	460b      	mov	r3, r1
 80f6a34:	70fb      	strb	r3, [r7, #3]

	wordcount_t i;
	/* Search from the end until we find a non-zero digit. We do it in reverse
	 * because we expect that most digits will be nonzero. */
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80f6a36:	78fb      	ldrb	r3, [r7, #3]
 80f6a38:	3b01      	subs	r3, #1
 80f6a3a:	b2db      	uxtb	r3, r3
 80f6a3c:	73fb      	strb	r3, [r7, #15]
 80f6a3e:	e003      	b.n	80f6a48 <vli_numDigits+0x1e>
 80f6a40:	7bfb      	ldrb	r3, [r7, #15]
 80f6a42:	3b01      	subs	r3, #1
 80f6a44:	b2db      	uxtb	r3, r3
 80f6a46:	73fb      	strb	r3, [r7, #15]
 80f6a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6a4c:	2b00      	cmp	r3, #0
 80f6a4e:	db07      	blt.n	80f6a60 <vli_numDigits+0x36>
 80f6a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6a54:	009b      	lsls	r3, r3, #2
 80f6a56:	687a      	ldr	r2, [r7, #4]
 80f6a58:	4413      	add	r3, r2
 80f6a5a:	681b      	ldr	r3, [r3, #0]
 80f6a5c:	2b00      	cmp	r3, #0
 80f6a5e:	d0ef      	beq.n	80f6a40 <vli_numDigits+0x16>
	}

	return (i + 1);
 80f6a60:	7bfb      	ldrb	r3, [r7, #15]
 80f6a62:	3301      	adds	r3, #1
 80f6a64:	b2db      	uxtb	r3, r3
 80f6a66:	b25b      	sxtb	r3, r3
}
 80f6a68:	4618      	mov	r0, r3
 80f6a6a:	3714      	adds	r7, #20
 80f6a6c:	46bd      	mov	sp, r7
 80f6a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6a72:	4770      	bx	lr

080f6a74 <uECC_vli_numBits>:

bitcount_t uECC_vli_numBits(const uECC_word_t *vli,
			    const wordcount_t max_words)
{
 80f6a74:	b580      	push	{r7, lr}
 80f6a76:	b086      	sub	sp, #24
 80f6a78:	af00      	add	r7, sp, #0
 80f6a7a:	6078      	str	r0, [r7, #4]
 80f6a7c:	460b      	mov	r3, r1
 80f6a7e:	70fb      	strb	r3, [r7, #3]

	uECC_word_t i;
	uECC_word_t digit;

	wordcount_t num_digits = vli_numDigits(vli, max_words);
 80f6a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6a84:	4619      	mov	r1, r3
 80f6a86:	6878      	ldr	r0, [r7, #4]
 80f6a88:	f7ff ffcf 	bl	80f6a2a <vli_numDigits>
 80f6a8c:	4603      	mov	r3, r0
 80f6a8e:	73fb      	strb	r3, [r7, #15]
	if (num_digits == 0) {
 80f6a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6a94:	2b00      	cmp	r3, #0
 80f6a96:	d101      	bne.n	80f6a9c <uECC_vli_numBits+0x28>
		return 0;
 80f6a98:	2300      	movs	r3, #0
 80f6a9a:	e021      	b.n	80f6ae0 <uECC_vli_numBits+0x6c>
	}

	digit = vli[num_digits - 1];
 80f6a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f6aa4:	3b01      	subs	r3, #1
 80f6aa6:	009b      	lsls	r3, r3, #2
 80f6aa8:	687a      	ldr	r2, [r7, #4]
 80f6aaa:	4413      	add	r3, r2
 80f6aac:	681b      	ldr	r3, [r3, #0]
 80f6aae:	613b      	str	r3, [r7, #16]
	for (i = 0; digit; ++i) {
 80f6ab0:	2300      	movs	r3, #0
 80f6ab2:	617b      	str	r3, [r7, #20]
 80f6ab4:	e005      	b.n	80f6ac2 <uECC_vli_numBits+0x4e>
		digit >>= 1;
 80f6ab6:	693b      	ldr	r3, [r7, #16]
 80f6ab8:	085b      	lsrs	r3, r3, #1
 80f6aba:	613b      	str	r3, [r7, #16]
	for (i = 0; digit; ++i) {
 80f6abc:	697b      	ldr	r3, [r7, #20]
 80f6abe:	3301      	adds	r3, #1
 80f6ac0:	617b      	str	r3, [r7, #20]
 80f6ac2:	693b      	ldr	r3, [r7, #16]
 80f6ac4:	2b00      	cmp	r3, #0
 80f6ac6:	d1f6      	bne.n	80f6ab6 <uECC_vli_numBits+0x42>
	}

	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 80f6ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80f6acc:	b29b      	uxth	r3, r3
 80f6ace:	3b01      	subs	r3, #1
 80f6ad0:	b29b      	uxth	r3, r3
 80f6ad2:	015b      	lsls	r3, r3, #5
 80f6ad4:	b29a      	uxth	r2, r3
 80f6ad6:	697b      	ldr	r3, [r7, #20]
 80f6ad8:	b29b      	uxth	r3, r3
 80f6ada:	4413      	add	r3, r2
 80f6adc:	b29b      	uxth	r3, r3
 80f6ade:	b21b      	sxth	r3, r3
}
 80f6ae0:	4618      	mov	r0, r3
 80f6ae2:	3718      	adds	r7, #24
 80f6ae4:	46bd      	mov	sp, r7
 80f6ae6:	bd80      	pop	{r7, pc}

080f6ae8 <uECC_vli_set>:

void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src,
		  wordcount_t num_words)
{
 80f6ae8:	b480      	push	{r7}
 80f6aea:	b087      	sub	sp, #28
 80f6aec:	af00      	add	r7, sp, #0
 80f6aee:	60f8      	str	r0, [r7, #12]
 80f6af0:	60b9      	str	r1, [r7, #8]
 80f6af2:	4613      	mov	r3, r2
 80f6af4:	71fb      	strb	r3, [r7, #7]
	wordcount_t i;

	for (i = 0; i < num_words; ++i) {
 80f6af6:	2300      	movs	r3, #0
 80f6af8:	75fb      	strb	r3, [r7, #23]
 80f6afa:	e00f      	b.n	80f6b1c <uECC_vli_set+0x34>
		dest[i] = src[i];
 80f6afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b00:	009b      	lsls	r3, r3, #2
 80f6b02:	68ba      	ldr	r2, [r7, #8]
 80f6b04:	441a      	add	r2, r3
 80f6b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b0a:	009b      	lsls	r3, r3, #2
 80f6b0c:	68f9      	ldr	r1, [r7, #12]
 80f6b0e:	440b      	add	r3, r1
 80f6b10:	6812      	ldr	r2, [r2, #0]
 80f6b12:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_words; ++i) {
 80f6b14:	7dfb      	ldrb	r3, [r7, #23]
 80f6b16:	3301      	adds	r3, #1
 80f6b18:	b2db      	uxtb	r3, r3
 80f6b1a:	75fb      	strb	r3, [r7, #23]
 80f6b1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80f6b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f6b24:	429a      	cmp	r2, r3
 80f6b26:	dbe9      	blt.n	80f6afc <uECC_vli_set+0x14>
  	}
}
 80f6b28:	bf00      	nop
 80f6b2a:	bf00      	nop
 80f6b2c:	371c      	adds	r7, #28
 80f6b2e:	46bd      	mov	sp, r7
 80f6b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6b34:	4770      	bx	lr

080f6b36 <uECC_vli_cmp_unsafe>:

cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
				const uECC_word_t *right,
				wordcount_t num_words)
{
 80f6b36:	b480      	push	{r7}
 80f6b38:	b087      	sub	sp, #28
 80f6b3a:	af00      	add	r7, sp, #0
 80f6b3c:	60f8      	str	r0, [r7, #12]
 80f6b3e:	60b9      	str	r1, [r7, #8]
 80f6b40:	4613      	mov	r3, r2
 80f6b42:	71fb      	strb	r3, [r7, #7]
	wordcount_t i;

	for (i = num_words - 1; i >= 0; --i) {
 80f6b44:	79fb      	ldrb	r3, [r7, #7]
 80f6b46:	3b01      	subs	r3, #1
 80f6b48:	b2db      	uxtb	r3, r3
 80f6b4a:	75fb      	strb	r3, [r7, #23]
 80f6b4c:	e024      	b.n	80f6b98 <uECC_vli_cmp_unsafe+0x62>
		if (left[i] > right[i]) {
 80f6b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b52:	009b      	lsls	r3, r3, #2
 80f6b54:	68fa      	ldr	r2, [r7, #12]
 80f6b56:	4413      	add	r3, r2
 80f6b58:	681a      	ldr	r2, [r3, #0]
 80f6b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b5e:	009b      	lsls	r3, r3, #2
 80f6b60:	68b9      	ldr	r1, [r7, #8]
 80f6b62:	440b      	add	r3, r1
 80f6b64:	681b      	ldr	r3, [r3, #0]
 80f6b66:	429a      	cmp	r2, r3
 80f6b68:	d901      	bls.n	80f6b6e <uECC_vli_cmp_unsafe+0x38>
			return 1;
 80f6b6a:	2301      	movs	r3, #1
 80f6b6c:	e019      	b.n	80f6ba2 <uECC_vli_cmp_unsafe+0x6c>
		} else if (left[i] < right[i]) {
 80f6b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b72:	009b      	lsls	r3, r3, #2
 80f6b74:	68fa      	ldr	r2, [r7, #12]
 80f6b76:	4413      	add	r3, r2
 80f6b78:	681a      	ldr	r2, [r3, #0]
 80f6b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b7e:	009b      	lsls	r3, r3, #2
 80f6b80:	68b9      	ldr	r1, [r7, #8]
 80f6b82:	440b      	add	r3, r1
 80f6b84:	681b      	ldr	r3, [r3, #0]
 80f6b86:	429a      	cmp	r2, r3
 80f6b88:	d202      	bcs.n	80f6b90 <uECC_vli_cmp_unsafe+0x5a>
			return -1;
 80f6b8a:	f04f 33ff 	mov.w	r3, #4294967295
 80f6b8e:	e008      	b.n	80f6ba2 <uECC_vli_cmp_unsafe+0x6c>
	for (i = num_words - 1; i >= 0; --i) {
 80f6b90:	7dfb      	ldrb	r3, [r7, #23]
 80f6b92:	3b01      	subs	r3, #1
 80f6b94:	b2db      	uxtb	r3, r3
 80f6b96:	75fb      	strb	r3, [r7, #23]
 80f6b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f6b9c:	2b00      	cmp	r3, #0
 80f6b9e:	dad6      	bge.n	80f6b4e <uECC_vli_cmp_unsafe+0x18>
		}
	}
	return 0;
 80f6ba0:	2300      	movs	r3, #0
}
 80f6ba2:	4618      	mov	r0, r3
 80f6ba4:	371c      	adds	r7, #28
 80f6ba6:	46bd      	mov	sp, r7
 80f6ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6bac:	4770      	bx	lr

080f6bae <uECC_vli_equal>:

uECC_word_t uECC_vli_equal(const uECC_word_t *left, const uECC_word_t *right,
			   wordcount_t num_words)
{
 80f6bae:	b480      	push	{r7}
 80f6bb0:	b087      	sub	sp, #28
 80f6bb2:	af00      	add	r7, sp, #0
 80f6bb4:	60f8      	str	r0, [r7, #12]
 80f6bb6:	60b9      	str	r1, [r7, #8]
 80f6bb8:	4613      	mov	r3, r2
 80f6bba:	71fb      	strb	r3, [r7, #7]

	uECC_word_t diff = 0;
 80f6bbc:	2300      	movs	r3, #0
 80f6bbe:	617b      	str	r3, [r7, #20]
	wordcount_t i;

	for (i = num_words - 1; i >= 0; --i) {
 80f6bc0:	79fb      	ldrb	r3, [r7, #7]
 80f6bc2:	3b01      	subs	r3, #1
 80f6bc4:	b2db      	uxtb	r3, r3
 80f6bc6:	74fb      	strb	r3, [r7, #19]
 80f6bc8:	e013      	b.n	80f6bf2 <uECC_vli_equal+0x44>
		diff |= (left[i] ^ right[i]);
 80f6bca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80f6bce:	009b      	lsls	r3, r3, #2
 80f6bd0:	68fa      	ldr	r2, [r7, #12]
 80f6bd2:	4413      	add	r3, r2
 80f6bd4:	681a      	ldr	r2, [r3, #0]
 80f6bd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80f6bda:	009b      	lsls	r3, r3, #2
 80f6bdc:	68b9      	ldr	r1, [r7, #8]
 80f6bde:	440b      	add	r3, r1
 80f6be0:	681b      	ldr	r3, [r3, #0]
 80f6be2:	4053      	eors	r3, r2
 80f6be4:	697a      	ldr	r2, [r7, #20]
 80f6be6:	4313      	orrs	r3, r2
 80f6be8:	617b      	str	r3, [r7, #20]
	for (i = num_words - 1; i >= 0; --i) {
 80f6bea:	7cfb      	ldrb	r3, [r7, #19]
 80f6bec:	3b01      	subs	r3, #1
 80f6bee:	b2db      	uxtb	r3, r3
 80f6bf0:	74fb      	strb	r3, [r7, #19]
 80f6bf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80f6bf6:	2b00      	cmp	r3, #0
 80f6bf8:	dae7      	bge.n	80f6bca <uECC_vli_equal+0x1c>
	}
	return !(diff == 0);
 80f6bfa:	697b      	ldr	r3, [r7, #20]
 80f6bfc:	2b00      	cmp	r3, #0
 80f6bfe:	bf14      	ite	ne
 80f6c00:	2301      	movne	r3, #1
 80f6c02:	2300      	moveq	r3, #0
 80f6c04:	b2db      	uxtb	r3, r3
}
 80f6c06:	4618      	mov	r0, r3
 80f6c08:	371c      	adds	r7, #28
 80f6c0a:	46bd      	mov	sp, r7
 80f6c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6c10:	4770      	bx	lr

080f6c12 <cond_set>:

uECC_word_t cond_set(uECC_word_t p_true, uECC_word_t p_false, unsigned int cond)
{
 80f6c12:	b480      	push	{r7}
 80f6c14:	b085      	sub	sp, #20
 80f6c16:	af00      	add	r7, sp, #0
 80f6c18:	60f8      	str	r0, [r7, #12]
 80f6c1a:	60b9      	str	r1, [r7, #8]
 80f6c1c:	607a      	str	r2, [r7, #4]
	return (p_true*(cond)) | (p_false*(!cond));
 80f6c1e:	68fb      	ldr	r3, [r7, #12]
 80f6c20:	687a      	ldr	r2, [r7, #4]
 80f6c22:	fb03 f202 	mul.w	r2, r3, r2
 80f6c26:	687b      	ldr	r3, [r7, #4]
 80f6c28:	2b00      	cmp	r3, #0
 80f6c2a:	bf0c      	ite	eq
 80f6c2c:	2301      	moveq	r3, #1
 80f6c2e:	2300      	movne	r3, #0
 80f6c30:	b2db      	uxtb	r3, r3
 80f6c32:	4619      	mov	r1, r3
 80f6c34:	68bb      	ldr	r3, [r7, #8]
 80f6c36:	fb01 f303 	mul.w	r3, r1, r3
 80f6c3a:	4313      	orrs	r3, r2
}
 80f6c3c:	4618      	mov	r0, r3
 80f6c3e:	3714      	adds	r7, #20
 80f6c40:	46bd      	mov	sp, r7
 80f6c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6c46:	4770      	bx	lr

080f6c48 <uECC_vli_sub>:

/* Computes result = left - right, returning borrow, in constant time.
 * Can modify in place. */
uECC_word_t uECC_vli_sub(uECC_word_t *result, const uECC_word_t *left,
			 const uECC_word_t *right, wordcount_t num_words)
{
 80f6c48:	b580      	push	{r7, lr}
 80f6c4a:	b088      	sub	sp, #32
 80f6c4c:	af00      	add	r7, sp, #0
 80f6c4e:	60f8      	str	r0, [r7, #12]
 80f6c50:	60b9      	str	r1, [r7, #8]
 80f6c52:	607a      	str	r2, [r7, #4]
 80f6c54:	70fb      	strb	r3, [r7, #3]
	uECC_word_t borrow = 0;
 80f6c56:	2300      	movs	r3, #0
 80f6c58:	61fb      	str	r3, [r7, #28]
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 80f6c5a:	2300      	movs	r3, #0
 80f6c5c:	76fb      	strb	r3, [r7, #27]
 80f6c5e:	e039      	b.n	80f6cd4 <uECC_vli_sub+0x8c>
		uECC_word_t diff = left[i] - right[i] - borrow;
 80f6c60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6c64:	009b      	lsls	r3, r3, #2
 80f6c66:	68ba      	ldr	r2, [r7, #8]
 80f6c68:	4413      	add	r3, r2
 80f6c6a:	681a      	ldr	r2, [r3, #0]
 80f6c6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6c70:	009b      	lsls	r3, r3, #2
 80f6c72:	6879      	ldr	r1, [r7, #4]
 80f6c74:	440b      	add	r3, r1
 80f6c76:	681b      	ldr	r3, [r3, #0]
 80f6c78:	1ad2      	subs	r2, r2, r3
 80f6c7a:	69fb      	ldr	r3, [r7, #28]
 80f6c7c:	1ad3      	subs	r3, r2, r3
 80f6c7e:	617b      	str	r3, [r7, #20]
		uECC_word_t val = (diff > left[i]);
 80f6c80:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6c84:	009b      	lsls	r3, r3, #2
 80f6c86:	68ba      	ldr	r2, [r7, #8]
 80f6c88:	4413      	add	r3, r2
 80f6c8a:	681b      	ldr	r3, [r3, #0]
 80f6c8c:	697a      	ldr	r2, [r7, #20]
 80f6c8e:	429a      	cmp	r2, r3
 80f6c90:	bf8c      	ite	hi
 80f6c92:	2301      	movhi	r3, #1
 80f6c94:	2300      	movls	r3, #0
 80f6c96:	b2db      	uxtb	r3, r3
 80f6c98:	613b      	str	r3, [r7, #16]
		borrow = cond_set(val, borrow, (diff != left[i]));
 80f6c9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6c9e:	009b      	lsls	r3, r3, #2
 80f6ca0:	68ba      	ldr	r2, [r7, #8]
 80f6ca2:	4413      	add	r3, r2
 80f6ca4:	681b      	ldr	r3, [r3, #0]
 80f6ca6:	697a      	ldr	r2, [r7, #20]
 80f6ca8:	429a      	cmp	r2, r3
 80f6caa:	bf14      	ite	ne
 80f6cac:	2301      	movne	r3, #1
 80f6cae:	2300      	moveq	r3, #0
 80f6cb0:	b2db      	uxtb	r3, r3
 80f6cb2:	461a      	mov	r2, r3
 80f6cb4:	69f9      	ldr	r1, [r7, #28]
 80f6cb6:	6938      	ldr	r0, [r7, #16]
 80f6cb8:	f7ff ffab 	bl	80f6c12 <cond_set>
 80f6cbc:	61f8      	str	r0, [r7, #28]

		result[i] = diff;
 80f6cbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6cc2:	009b      	lsls	r3, r3, #2
 80f6cc4:	68fa      	ldr	r2, [r7, #12]
 80f6cc6:	4413      	add	r3, r2
 80f6cc8:	697a      	ldr	r2, [r7, #20]
 80f6cca:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_words; ++i) {
 80f6ccc:	7efb      	ldrb	r3, [r7, #27]
 80f6cce:	3301      	adds	r3, #1
 80f6cd0:	b2db      	uxtb	r3, r3
 80f6cd2:	76fb      	strb	r3, [r7, #27]
 80f6cd4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80f6cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6cdc:	429a      	cmp	r2, r3
 80f6cde:	dbbf      	blt.n	80f6c60 <uECC_vli_sub+0x18>
	}
	return borrow;
 80f6ce0:	69fb      	ldr	r3, [r7, #28]
}
 80f6ce2:	4618      	mov	r0, r3
 80f6ce4:	3720      	adds	r7, #32
 80f6ce6:	46bd      	mov	sp, r7
 80f6ce8:	bd80      	pop	{r7, pc}

080f6cea <uECC_vli_add>:

/* Computes result = left + right, returning carry, in constant time.
 * Can modify in place. */
static uECC_word_t uECC_vli_add(uECC_word_t *result, const uECC_word_t *left,
				const uECC_word_t *right, wordcount_t num_words)
{
 80f6cea:	b580      	push	{r7, lr}
 80f6cec:	b088      	sub	sp, #32
 80f6cee:	af00      	add	r7, sp, #0
 80f6cf0:	60f8      	str	r0, [r7, #12]
 80f6cf2:	60b9      	str	r1, [r7, #8]
 80f6cf4:	607a      	str	r2, [r7, #4]
 80f6cf6:	70fb      	strb	r3, [r7, #3]
	uECC_word_t carry = 0;
 80f6cf8:	2300      	movs	r3, #0
 80f6cfa:	61fb      	str	r3, [r7, #28]
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 80f6cfc:	2300      	movs	r3, #0
 80f6cfe:	76fb      	strb	r3, [r7, #27]
 80f6d00:	e039      	b.n	80f6d76 <uECC_vli_add+0x8c>
		uECC_word_t sum = left[i] + right[i] + carry;
 80f6d02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6d06:	009b      	lsls	r3, r3, #2
 80f6d08:	68ba      	ldr	r2, [r7, #8]
 80f6d0a:	4413      	add	r3, r2
 80f6d0c:	681a      	ldr	r2, [r3, #0]
 80f6d0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6d12:	009b      	lsls	r3, r3, #2
 80f6d14:	6879      	ldr	r1, [r7, #4]
 80f6d16:	440b      	add	r3, r1
 80f6d18:	681b      	ldr	r3, [r3, #0]
 80f6d1a:	4413      	add	r3, r2
 80f6d1c:	69fa      	ldr	r2, [r7, #28]
 80f6d1e:	4413      	add	r3, r2
 80f6d20:	617b      	str	r3, [r7, #20]
		uECC_word_t val = (sum < left[i]);
 80f6d22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6d26:	009b      	lsls	r3, r3, #2
 80f6d28:	68ba      	ldr	r2, [r7, #8]
 80f6d2a:	4413      	add	r3, r2
 80f6d2c:	681b      	ldr	r3, [r3, #0]
 80f6d2e:	697a      	ldr	r2, [r7, #20]
 80f6d30:	429a      	cmp	r2, r3
 80f6d32:	bf34      	ite	cc
 80f6d34:	2301      	movcc	r3, #1
 80f6d36:	2300      	movcs	r3, #0
 80f6d38:	b2db      	uxtb	r3, r3
 80f6d3a:	613b      	str	r3, [r7, #16]
		carry = cond_set(val, carry, (sum != left[i]));
 80f6d3c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6d40:	009b      	lsls	r3, r3, #2
 80f6d42:	68ba      	ldr	r2, [r7, #8]
 80f6d44:	4413      	add	r3, r2
 80f6d46:	681b      	ldr	r3, [r3, #0]
 80f6d48:	697a      	ldr	r2, [r7, #20]
 80f6d4a:	429a      	cmp	r2, r3
 80f6d4c:	bf14      	ite	ne
 80f6d4e:	2301      	movne	r3, #1
 80f6d50:	2300      	moveq	r3, #0
 80f6d52:	b2db      	uxtb	r3, r3
 80f6d54:	461a      	mov	r2, r3
 80f6d56:	69f9      	ldr	r1, [r7, #28]
 80f6d58:	6938      	ldr	r0, [r7, #16]
 80f6d5a:	f7ff ff5a 	bl	80f6c12 <cond_set>
 80f6d5e:	61f8      	str	r0, [r7, #28]
		result[i] = sum;
 80f6d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80f6d64:	009b      	lsls	r3, r3, #2
 80f6d66:	68fa      	ldr	r2, [r7, #12]
 80f6d68:	4413      	add	r3, r2
 80f6d6a:	697a      	ldr	r2, [r7, #20]
 80f6d6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_words; ++i) {
 80f6d6e:	7efb      	ldrb	r3, [r7, #27]
 80f6d70:	3301      	adds	r3, #1
 80f6d72:	b2db      	uxtb	r3, r3
 80f6d74:	76fb      	strb	r3, [r7, #27]
 80f6d76:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80f6d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6d7e:	429a      	cmp	r2, r3
 80f6d80:	dbbf      	blt.n	80f6d02 <uECC_vli_add+0x18>
	}
	return carry;
 80f6d82:	69fb      	ldr	r3, [r7, #28]
}
 80f6d84:	4618      	mov	r0, r3
 80f6d86:	3720      	adds	r7, #32
 80f6d88:	46bd      	mov	sp, r7
 80f6d8a:	bd80      	pop	{r7, pc}

080f6d8c <uECC_vli_rshift1>:
	return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
 80f6d8c:	b480      	push	{r7}
 80f6d8e:	b087      	sub	sp, #28
 80f6d90:	af00      	add	r7, sp, #0
 80f6d92:	6078      	str	r0, [r7, #4]
 80f6d94:	460b      	mov	r3, r1
 80f6d96:	70fb      	strb	r3, [r7, #3]
	uECC_word_t *end = vli;
 80f6d98:	687b      	ldr	r3, [r7, #4]
 80f6d9a:	613b      	str	r3, [r7, #16]
	uECC_word_t carry = 0;
 80f6d9c:	2300      	movs	r3, #0
 80f6d9e:	617b      	str	r3, [r7, #20]

	vli += num_words;
 80f6da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6da4:	009b      	lsls	r3, r3, #2
 80f6da6:	687a      	ldr	r2, [r7, #4]
 80f6da8:	4413      	add	r3, r2
 80f6daa:	607b      	str	r3, [r7, #4]
	while (vli-- > end) {
 80f6dac:	e00b      	b.n	80f6dc6 <uECC_vli_rshift1+0x3a>
		uECC_word_t temp = *vli;
 80f6dae:	687b      	ldr	r3, [r7, #4]
 80f6db0:	681b      	ldr	r3, [r3, #0]
 80f6db2:	60fb      	str	r3, [r7, #12]
		*vli = (temp >> 1) | carry;
 80f6db4:	68fb      	ldr	r3, [r7, #12]
 80f6db6:	085a      	lsrs	r2, r3, #1
 80f6db8:	697b      	ldr	r3, [r7, #20]
 80f6dba:	431a      	orrs	r2, r3
 80f6dbc:	687b      	ldr	r3, [r7, #4]
 80f6dbe:	601a      	str	r2, [r3, #0]
		carry = temp << (uECC_WORD_BITS - 1);
 80f6dc0:	68fb      	ldr	r3, [r7, #12]
 80f6dc2:	07db      	lsls	r3, r3, #31
 80f6dc4:	617b      	str	r3, [r7, #20]
	while (vli-- > end) {
 80f6dc6:	687b      	ldr	r3, [r7, #4]
 80f6dc8:	1f1a      	subs	r2, r3, #4
 80f6dca:	607a      	str	r2, [r7, #4]
 80f6dcc:	693a      	ldr	r2, [r7, #16]
 80f6dce:	429a      	cmp	r2, r3
 80f6dd0:	d3ed      	bcc.n	80f6dae <uECC_vli_rshift1+0x22>
	}
}
 80f6dd2:	bf00      	nop
 80f6dd4:	bf00      	nop
 80f6dd6:	371c      	adds	r7, #28
 80f6dd8:	46bd      	mov	sp, r7
 80f6dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f6dde:	4770      	bx	lr

080f6de0 <muladd>:

static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,
		   uECC_word_t *r1, uECC_word_t *r2)
{
 80f6de0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80f6de4:	b091      	sub	sp, #68	@ 0x44
 80f6de6:	af00      	add	r7, sp, #0
 80f6de8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80f6dea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80f6dec:	627a      	str	r2, [r7, #36]	@ 0x24
 80f6dee:	623b      	str	r3, [r7, #32]

	uECC_dword_t p = (uECC_dword_t)a * b;
 80f6df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f6df2:	2200      	movs	r2, #0
 80f6df4:	4698      	mov	r8, r3
 80f6df6:	4691      	mov	r9, r2
 80f6df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f6dfa:	2200      	movs	r2, #0
 80f6dfc:	469a      	mov	sl, r3
 80f6dfe:	4693      	mov	fp, r2
 80f6e00:	fb0a f209 	mul.w	r2, sl, r9
 80f6e04:	fb08 f30b 	mul.w	r3, r8, fp
 80f6e08:	4413      	add	r3, r2
 80f6e0a:	fba8 450a 	umull	r4, r5, r8, sl
 80f6e0e:	442b      	add	r3, r5
 80f6e10:	461d      	mov	r5, r3
 80f6e12:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 80f6e16:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 80f6e1a:	6a3b      	ldr	r3, [r7, #32]
 80f6e1c:	681b      	ldr	r3, [r3, #0]
 80f6e1e:	2200      	movs	r2, #0
 80f6e20:	61bb      	str	r3, [r7, #24]
 80f6e22:	61fa      	str	r2, [r7, #28]
 80f6e24:	f04f 0200 	mov.w	r2, #0
 80f6e28:	f04f 0300 	mov.w	r3, #0
 80f6e2c:	69b9      	ldr	r1, [r7, #24]
 80f6e2e:	000b      	movs	r3, r1
 80f6e30:	2200      	movs	r2, #0
 80f6e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80f6e34:	6809      	ldr	r1, [r1, #0]
 80f6e36:	2000      	movs	r0, #0
 80f6e38:	6139      	str	r1, [r7, #16]
 80f6e3a:	6178      	str	r0, [r7, #20]
 80f6e3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80f6e40:	4621      	mov	r1, r4
 80f6e42:	4311      	orrs	r1, r2
 80f6e44:	60b9      	str	r1, [r7, #8]
 80f6e46:	4629      	mov	r1, r5
 80f6e48:	4319      	orrs	r1, r3
 80f6e4a:	60f9      	str	r1, [r7, #12]
 80f6e4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80f6e50:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	r01 += p;
 80f6e54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80f6e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80f6e5c:	1884      	adds	r4, r0, r2
 80f6e5e:	603c      	str	r4, [r7, #0]
 80f6e60:	eb41 0303 	adc.w	r3, r1, r3
 80f6e64:	607b      	str	r3, [r7, #4]
 80f6e66:	e9d7 3400 	ldrd	r3, r4, [r7]
 80f6e6a:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	*r2 += (r01 < p);
 80f6e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f6e70:	681c      	ldr	r4, [r3, #0]
 80f6e72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80f6e76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80f6e7a:	4290      	cmp	r0, r2
 80f6e7c:	eb71 0303 	sbcs.w	r3, r1, r3
 80f6e80:	bf34      	ite	cc
 80f6e82:	2301      	movcc	r3, #1
 80f6e84:	2300      	movcs	r3, #0
 80f6e86:	b2db      	uxtb	r3, r3
 80f6e88:	18e2      	adds	r2, r4, r3
 80f6e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f6e8c:	601a      	str	r2, [r3, #0]
	*r1 = r01 >> uECC_WORD_BITS;
 80f6e8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80f6e92:	f04f 0200 	mov.w	r2, #0
 80f6e96:	f04f 0300 	mov.w	r3, #0
 80f6e9a:	000a      	movs	r2, r1
 80f6e9c:	2300      	movs	r3, #0
 80f6e9e:	6a3b      	ldr	r3, [r7, #32]
 80f6ea0:	601a      	str	r2, [r3, #0]
	*r0 = (uECC_word_t)r01;
 80f6ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80f6ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f6ea6:	601a      	str	r2, [r3, #0]

}
 80f6ea8:	bf00      	nop
 80f6eaa:	3744      	adds	r7, #68	@ 0x44
 80f6eac:	46bd      	mov	sp, r7
 80f6eae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80f6eb2:	4770      	bx	lr

080f6eb4 <uECC_vli_mult>:

/* Computes result = left * right. Result must be 2 * num_words long. */
static void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,
			  const uECC_word_t *right, wordcount_t num_words)
{
 80f6eb4:	b590      	push	{r4, r7, lr}
 80f6eb6:	b08b      	sub	sp, #44	@ 0x2c
 80f6eb8:	af02      	add	r7, sp, #8
 80f6eba:	60f8      	str	r0, [r7, #12]
 80f6ebc:	60b9      	str	r1, [r7, #8]
 80f6ebe:	607a      	str	r2, [r7, #4]
 80f6ec0:	70fb      	strb	r3, [r7, #3]

	uECC_word_t r0 = 0;
 80f6ec2:	2300      	movs	r3, #0
 80f6ec4:	61bb      	str	r3, [r7, #24]
	uECC_word_t r1 = 0;
 80f6ec6:	2300      	movs	r3, #0
 80f6ec8:	617b      	str	r3, [r7, #20]
	uECC_word_t r2 = 0;
 80f6eca:	2300      	movs	r3, #0
 80f6ecc:	613b      	str	r3, [r7, #16]
	wordcount_t i, k;

	/* Compute each digit of result in sequence, maintaining the carries. */
	for (k = 0; k < num_words; ++k) {
 80f6ece:	2300      	movs	r3, #0
 80f6ed0:	77bb      	strb	r3, [r7, #30]
 80f6ed2:	e036      	b.n	80f6f42 <uECC_vli_mult+0x8e>

		for (i = 0; i <= k; ++i) {
 80f6ed4:	2300      	movs	r3, #0
 80f6ed6:	77fb      	strb	r3, [r7, #31]
 80f6ed8:	e01c      	b.n	80f6f14 <uECC_vli_mult+0x60>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 80f6eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80f6ede:	009b      	lsls	r3, r3, #2
 80f6ee0:	68ba      	ldr	r2, [r7, #8]
 80f6ee2:	4413      	add	r3, r2
 80f6ee4:	6818      	ldr	r0, [r3, #0]
 80f6ee6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80f6eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80f6eee:	1ad3      	subs	r3, r2, r3
 80f6ef0:	009b      	lsls	r3, r3, #2
 80f6ef2:	687a      	ldr	r2, [r7, #4]
 80f6ef4:	4413      	add	r3, r2
 80f6ef6:	6819      	ldr	r1, [r3, #0]
 80f6ef8:	f107 0414 	add.w	r4, r7, #20
 80f6efc:	f107 0218 	add.w	r2, r7, #24
 80f6f00:	f107 0310 	add.w	r3, r7, #16
 80f6f04:	9300      	str	r3, [sp, #0]
 80f6f06:	4623      	mov	r3, r4
 80f6f08:	f7ff ff6a 	bl	80f6de0 <muladd>
		for (i = 0; i <= k; ++i) {
 80f6f0c:	7ffb      	ldrb	r3, [r7, #31]
 80f6f0e:	3301      	adds	r3, #1
 80f6f10:	b2db      	uxtb	r3, r3
 80f6f12:	77fb      	strb	r3, [r7, #31]
 80f6f14:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80f6f18:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80f6f1c:	429a      	cmp	r2, r3
 80f6f1e:	dddc      	ble.n	80f6eda <uECC_vli_mult+0x26>
		}

		result[k] = r0;
 80f6f20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80f6f24:	009b      	lsls	r3, r3, #2
 80f6f26:	68fa      	ldr	r2, [r7, #12]
 80f6f28:	4413      	add	r3, r2
 80f6f2a:	69ba      	ldr	r2, [r7, #24]
 80f6f2c:	601a      	str	r2, [r3, #0]
		r0 = r1;
 80f6f2e:	697b      	ldr	r3, [r7, #20]
 80f6f30:	61bb      	str	r3, [r7, #24]
		r1 = r2;
 80f6f32:	693b      	ldr	r3, [r7, #16]
 80f6f34:	617b      	str	r3, [r7, #20]
		r2 = 0;
 80f6f36:	2300      	movs	r3, #0
 80f6f38:	613b      	str	r3, [r7, #16]
	for (k = 0; k < num_words; ++k) {
 80f6f3a:	7fbb      	ldrb	r3, [r7, #30]
 80f6f3c:	3301      	adds	r3, #1
 80f6f3e:	b2db      	uxtb	r3, r3
 80f6f40:	77bb      	strb	r3, [r7, #30]
 80f6f42:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80f6f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6f4a:	429a      	cmp	r2, r3
 80f6f4c:	dbc2      	blt.n	80f6ed4 <uECC_vli_mult+0x20>
	}

	for (k = num_words; k < num_words * 2 - 1; ++k) {
 80f6f4e:	78fb      	ldrb	r3, [r7, #3]
 80f6f50:	77bb      	strb	r3, [r7, #30]
 80f6f52:	e03b      	b.n	80f6fcc <uECC_vli_mult+0x118>

		for (i = (k + 1) - num_words; i < num_words; ++i) {
 80f6f54:	7fba      	ldrb	r2, [r7, #30]
 80f6f56:	78fb      	ldrb	r3, [r7, #3]
 80f6f58:	1ad3      	subs	r3, r2, r3
 80f6f5a:	b2db      	uxtb	r3, r3
 80f6f5c:	3301      	adds	r3, #1
 80f6f5e:	b2db      	uxtb	r3, r3
 80f6f60:	77fb      	strb	r3, [r7, #31]
 80f6f62:	e01c      	b.n	80f6f9e <uECC_vli_mult+0xea>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 80f6f64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80f6f68:	009b      	lsls	r3, r3, #2
 80f6f6a:	68ba      	ldr	r2, [r7, #8]
 80f6f6c:	4413      	add	r3, r2
 80f6f6e:	6818      	ldr	r0, [r3, #0]
 80f6f70:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80f6f74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80f6f78:	1ad3      	subs	r3, r2, r3
 80f6f7a:	009b      	lsls	r3, r3, #2
 80f6f7c:	687a      	ldr	r2, [r7, #4]
 80f6f7e:	4413      	add	r3, r2
 80f6f80:	6819      	ldr	r1, [r3, #0]
 80f6f82:	f107 0414 	add.w	r4, r7, #20
 80f6f86:	f107 0218 	add.w	r2, r7, #24
 80f6f8a:	f107 0310 	add.w	r3, r7, #16
 80f6f8e:	9300      	str	r3, [sp, #0]
 80f6f90:	4623      	mov	r3, r4
 80f6f92:	f7ff ff25 	bl	80f6de0 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 80f6f96:	7ffb      	ldrb	r3, [r7, #31]
 80f6f98:	3301      	adds	r3, #1
 80f6f9a:	b2db      	uxtb	r3, r3
 80f6f9c:	77fb      	strb	r3, [r7, #31]
 80f6f9e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80f6fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6fa6:	429a      	cmp	r2, r3
 80f6fa8:	dbdc      	blt.n	80f6f64 <uECC_vli_mult+0xb0>
		}
		result[k] = r0;
 80f6faa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80f6fae:	009b      	lsls	r3, r3, #2
 80f6fb0:	68fa      	ldr	r2, [r7, #12]
 80f6fb2:	4413      	add	r3, r2
 80f6fb4:	69ba      	ldr	r2, [r7, #24]
 80f6fb6:	601a      	str	r2, [r3, #0]
		r0 = r1;
 80f6fb8:	697b      	ldr	r3, [r7, #20]
 80f6fba:	61bb      	str	r3, [r7, #24]
		r1 = r2;
 80f6fbc:	693b      	ldr	r3, [r7, #16]
 80f6fbe:	617b      	str	r3, [r7, #20]
		r2 = 0;
 80f6fc0:	2300      	movs	r3, #0
 80f6fc2:	613b      	str	r3, [r7, #16]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 80f6fc4:	7fbb      	ldrb	r3, [r7, #30]
 80f6fc6:	3301      	adds	r3, #1
 80f6fc8:	b2db      	uxtb	r3, r3
 80f6fca:	77bb      	strb	r3, [r7, #30]
 80f6fcc:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80f6fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6fd4:	005b      	lsls	r3, r3, #1
 80f6fd6:	3b01      	subs	r3, #1
 80f6fd8:	429a      	cmp	r2, r3
 80f6fda:	dbbb      	blt.n	80f6f54 <uECC_vli_mult+0xa0>
	}
	result[num_words * 2 - 1] = r0;
 80f6fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f6fe0:	00db      	lsls	r3, r3, #3
 80f6fe2:	3b04      	subs	r3, #4
 80f6fe4:	68fa      	ldr	r2, [r7, #12]
 80f6fe6:	4413      	add	r3, r2
 80f6fe8:	69ba      	ldr	r2, [r7, #24]
 80f6fea:	601a      	str	r2, [r3, #0]
}
 80f6fec:	bf00      	nop
 80f6fee:	3724      	adds	r7, #36	@ 0x24
 80f6ff0:	46bd      	mov	sp, r7
 80f6ff2:	bd90      	pop	{r4, r7, pc}

080f6ff4 <uECC_vli_modAdd>:

void uECC_vli_modAdd(uECC_word_t *result, const uECC_word_t *left,
		     const uECC_word_t *right, const uECC_word_t *mod,
		     wordcount_t num_words)
{
 80f6ff4:	b580      	push	{r7, lr}
 80f6ff6:	b086      	sub	sp, #24
 80f6ff8:	af00      	add	r7, sp, #0
 80f6ffa:	60f8      	str	r0, [r7, #12]
 80f6ffc:	60b9      	str	r1, [r7, #8]
 80f6ffe:	607a      	str	r2, [r7, #4]
 80f7000:	603b      	str	r3, [r7, #0]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 80f7002:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80f7006:	687a      	ldr	r2, [r7, #4]
 80f7008:	68b9      	ldr	r1, [r7, #8]
 80f700a:	68f8      	ldr	r0, [r7, #12]
 80f700c:	f7ff fe6d 	bl	80f6cea <uECC_vli_add>
 80f7010:	6178      	str	r0, [r7, #20]
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 80f7012:	697b      	ldr	r3, [r7, #20]
 80f7014:	2b00      	cmp	r3, #0
 80f7016:	d109      	bne.n	80f702c <uECC_vli_modAdd+0x38>
 80f7018:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80f701c:	461a      	mov	r2, r3
 80f701e:	68f9      	ldr	r1, [r7, #12]
 80f7020:	6838      	ldr	r0, [r7, #0]
 80f7022:	f7ff fd88 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7026:	4603      	mov	r3, r0
 80f7028:	2b01      	cmp	r3, #1
 80f702a:	d006      	beq.n	80f703a <uECC_vli_modAdd+0x46>
	/* result > mod (result = mod + remainder), so subtract mod to get
	 * remainder. */
		uECC_vli_sub(result, result, mod, num_words);
 80f702c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80f7030:	683a      	ldr	r2, [r7, #0]
 80f7032:	68f9      	ldr	r1, [r7, #12]
 80f7034:	68f8      	ldr	r0, [r7, #12]
 80f7036:	f7ff fe07 	bl	80f6c48 <uECC_vli_sub>
	}
}
 80f703a:	bf00      	nop
 80f703c:	3718      	adds	r7, #24
 80f703e:	46bd      	mov	sp, r7
 80f7040:	bd80      	pop	{r7, pc}

080f7042 <uECC_vli_modSub>:

void uECC_vli_modSub(uECC_word_t *result, const uECC_word_t *left,
		     const uECC_word_t *right, const uECC_word_t *mod,
		     wordcount_t num_words)
{
 80f7042:	b580      	push	{r7, lr}
 80f7044:	b086      	sub	sp, #24
 80f7046:	af00      	add	r7, sp, #0
 80f7048:	60f8      	str	r0, [r7, #12]
 80f704a:	60b9      	str	r1, [r7, #8]
 80f704c:	607a      	str	r2, [r7, #4]
 80f704e:	603b      	str	r3, [r7, #0]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80f7050:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80f7054:	687a      	ldr	r2, [r7, #4]
 80f7056:	68b9      	ldr	r1, [r7, #8]
 80f7058:	68f8      	ldr	r0, [r7, #12]
 80f705a:	f7ff fdf5 	bl	80f6c48 <uECC_vli_sub>
 80f705e:	6178      	str	r0, [r7, #20]
	if (l_borrow) {
 80f7060:	697b      	ldr	r3, [r7, #20]
 80f7062:	2b00      	cmp	r3, #0
 80f7064:	d006      	beq.n	80f7074 <uECC_vli_modSub+0x32>
		/* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
		 * we can get the correct result from result + mod (with overflow). */
		uECC_vli_add(result, result, mod, num_words);
 80f7066:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80f706a:	683a      	ldr	r2, [r7, #0]
 80f706c:	68f9      	ldr	r1, [r7, #12]
 80f706e:	68f8      	ldr	r0, [r7, #12]
 80f7070:	f7ff fe3b 	bl	80f6cea <uECC_vli_add>
	}
}
 80f7074:	bf00      	nop
 80f7076:	3718      	adds	r7, #24
 80f7078:	46bd      	mov	sp, r7
 80f707a:	bd80      	pop	{r7, pc}

080f707c <uECC_vli_mmod>:

/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
void uECC_vli_mmod(uECC_word_t *result, uECC_word_t *product,
    		   const uECC_word_t *mod, wordcount_t num_words)
{
 80f707c:	b590      	push	{r4, r7, lr}
 80f707e:	b0ad      	sub	sp, #180	@ 0xb4
 80f7080:	af00      	add	r7, sp, #0
 80f7082:	60f8      	str	r0, [r7, #12]
 80f7084:	60b9      	str	r1, [r7, #8]
 80f7086:	607a      	str	r2, [r7, #4]
 80f7088:	70fb      	strb	r3, [r7, #3]
	uECC_word_t mod_multiple[2 * NUM_ECC_WORDS];
	uECC_word_t tmp[2 * NUM_ECC_WORDS];
	uECC_word_t *v[2] = {tmp, product};
 80f708a:	f107 0318 	add.w	r3, r7, #24
 80f708e:	613b      	str	r3, [r7, #16]
 80f7090:	68bb      	ldr	r3, [r7, #8]
 80f7092:	617b      	str	r3, [r7, #20]
	uECC_word_t index;

	/* Shift mod so its highest set bit is at the maximum position. */
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 80f7094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7098:	b29b      	uxth	r3, r3
 80f709a:	019b      	lsls	r3, r3, #6
 80f709c:	b29c      	uxth	r4, r3
			   uECC_vli_numBits(mod, num_words);
 80f709e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f70a2:	4619      	mov	r1, r3
 80f70a4:	6878      	ldr	r0, [r7, #4]
 80f70a6:	f7ff fce5 	bl	80f6a74 <uECC_vli_numBits>
 80f70aa:	4603      	mov	r3, r0
 80f70ac:	b29b      	uxth	r3, r3
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 80f70ae:	1ae3      	subs	r3, r4, r3
 80f70b0:	b29b      	uxth	r3, r3
 80f70b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 80f70b6:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80f70ba:	2b00      	cmp	r3, #0
 80f70bc:	da00      	bge.n	80f70c0 <uECC_vli_mmod+0x44>
 80f70be:	331f      	adds	r3, #31
 80f70c0:	115b      	asrs	r3, r3, #5
 80f70c2:	b21b      	sxth	r3, r3
 80f70c4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 80f70c8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80f70cc:	425a      	negs	r2, r3
 80f70ce:	f003 031f 	and.w	r3, r3, #31
 80f70d2:	f002 021f 	and.w	r2, r2, #31
 80f70d6:	bf58      	it	pl
 80f70d8:	4253      	negpl	r3, r2
 80f70da:	b21b      	sxth	r3, r3
 80f70dc:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	uECC_word_t carry = 0;
 80f70e0:	2300      	movs	r3, #0
 80f70e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	uECC_vli_clear(mod_multiple, word_shift);
 80f70e6:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 80f70ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80f70ee:	4611      	mov	r1, r2
 80f70f0:	4618      	mov	r0, r3
 80f70f2:	f7ff fc34 	bl	80f695e <uECC_vli_clear>
	if (bit_shift > 0) {
 80f70f6:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80f70fa:	2b00      	cmp	r3, #0
 80f70fc:	dd34      	ble.n	80f7168 <uECC_vli_mmod+0xec>
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 80f70fe:	2300      	movs	r3, #0
 80f7100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80f7104:	e029      	b.n	80f715a <uECC_vli_mmod+0xde>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 80f7106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f710a:	009b      	lsls	r3, r3, #2
 80f710c:	687a      	ldr	r2, [r7, #4]
 80f710e:	4413      	add	r3, r2
 80f7110:	681a      	ldr	r2, [r3, #0]
 80f7112:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80f7116:	fa02 f103 	lsl.w	r1, r2, r3
 80f711a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 80f711e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f7122:	4413      	add	r3, r2
 80f7124:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80f7128:	430a      	orrs	r2, r1
 80f712a:	009b      	lsls	r3, r3, #2
 80f712c:	33b0      	adds	r3, #176	@ 0xb0
 80f712e:	443b      	add	r3, r7
 80f7130:	f843 2c58 	str.w	r2, [r3, #-88]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 80f7134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f7138:	009b      	lsls	r3, r3, #2
 80f713a:	687a      	ldr	r2, [r7, #4]
 80f713c:	4413      	add	r3, r2
 80f713e:	681a      	ldr	r2, [r3, #0]
 80f7140:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80f7144:	f1c3 0320 	rsb	r3, r3, #32
 80f7148:	fa22 f303 	lsr.w	r3, r2, r3
 80f714c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 80f7150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f7154:	3301      	adds	r3, #1
 80f7156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80f715a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f715e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80f7162:	429a      	cmp	r2, r3
 80f7164:	d3cf      	bcc.n	80f7106 <uECC_vli_mmod+0x8a>
 80f7166:	e00b      	b.n	80f7180 <uECC_vli_mmod+0x104>
		}
	} else {
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 80f7168:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 80f716c:	009b      	lsls	r3, r3, #2
 80f716e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80f7172:	4413      	add	r3, r2
 80f7174:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7178:	6879      	ldr	r1, [r7, #4]
 80f717a:	4618      	mov	r0, r3
 80f717c:	f7ff fcb4 	bl	80f6ae8 <uECC_vli_set>
	}

	for (index = 1; shift >= 0; --shift) {
 80f7180:	2301      	movs	r3, #1
 80f7182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80f7186:	e09f      	b.n	80f72c8 <uECC_vli_mmod+0x24c>
		uECC_word_t borrow = 0;
 80f7188:	2300      	movs	r3, #0
 80f718a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		wordcount_t i;
		for (i = 0; i < num_words * 2; ++i) {
 80f718e:	2300      	movs	r3, #0
 80f7190:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80f7194:	e053      	b.n	80f723e <uECC_vli_mmod+0x1c2>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80f7196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f719a:	009b      	lsls	r3, r3, #2
 80f719c:	33b0      	adds	r3, #176	@ 0xb0
 80f719e:	443b      	add	r3, r7
 80f71a0:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80f71a4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80f71a8:	009b      	lsls	r3, r3, #2
 80f71aa:	4413      	add	r3, r2
 80f71ac:	681a      	ldr	r2, [r3, #0]
 80f71ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80f71b2:	009b      	lsls	r3, r3, #2
 80f71b4:	33b0      	adds	r3, #176	@ 0xb0
 80f71b6:	443b      	add	r3, r7
 80f71b8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80f71bc:	1ad2      	subs	r2, r2, r3
 80f71be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80f71c2:	1ad3      	subs	r3, r2, r3
 80f71c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			if (diff != v[index][i]) {
 80f71c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f71cc:	009b      	lsls	r3, r3, #2
 80f71ce:	33b0      	adds	r3, #176	@ 0xb0
 80f71d0:	443b      	add	r3, r7
 80f71d2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80f71d6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80f71da:	009b      	lsls	r3, r3, #2
 80f71dc:	4413      	add	r3, r2
 80f71de:	681b      	ldr	r3, [r3, #0]
 80f71e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80f71e4:	429a      	cmp	r2, r3
 80f71e6:	d014      	beq.n	80f7212 <uECC_vli_mmod+0x196>
				borrow = (diff > v[index][i]);
 80f71e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f71ec:	009b      	lsls	r3, r3, #2
 80f71ee:	33b0      	adds	r3, #176	@ 0xb0
 80f71f0:	443b      	add	r3, r7
 80f71f2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80f71f6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80f71fa:	009b      	lsls	r3, r3, #2
 80f71fc:	4413      	add	r3, r2
 80f71fe:	681b      	ldr	r3, [r3, #0]
 80f7200:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80f7204:	429a      	cmp	r2, r3
 80f7206:	bf8c      	ite	hi
 80f7208:	2301      	movhi	r3, #1
 80f720a:	2300      	movls	r3, #0
 80f720c:	b2db      	uxtb	r3, r3
 80f720e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			}
			v[1 - index][i] = diff;
 80f7212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f7216:	f1c3 0301 	rsb	r3, r3, #1
 80f721a:	009b      	lsls	r3, r3, #2
 80f721c:	33b0      	adds	r3, #176	@ 0xb0
 80f721e:	443b      	add	r3, r7
 80f7220:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80f7224:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80f7228:	009b      	lsls	r3, r3, #2
 80f722a:	4413      	add	r3, r2
 80f722c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80f7230:	601a      	str	r2, [r3, #0]
		for (i = 0; i < num_words * 2; ++i) {
 80f7232:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80f7236:	3301      	adds	r3, #1
 80f7238:	b2db      	uxtb	r3, r3
 80f723a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80f723e:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 80f7242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7246:	005b      	lsls	r3, r3, #1
 80f7248:	429a      	cmp	r2, r3
 80f724a:	dba4      	blt.n	80f7196 <uECC_vli_mmod+0x11a>
		}
		/* Swap the index if there was no borrow */
		index = !(index ^ borrow);
 80f724c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80f7250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80f7254:	429a      	cmp	r2, r3
 80f7256:	bf0c      	ite	eq
 80f7258:	2301      	moveq	r3, #1
 80f725a:	2300      	movne	r3, #0
 80f725c:	b2db      	uxtb	r3, r3
 80f725e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		uECC_vli_rshift1(mod_multiple, num_words);
 80f7262:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7266:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80f726a:	4611      	mov	r1, r2
 80f726c:	4618      	mov	r0, r3
 80f726e:	f7ff fd8d 	bl	80f6d8c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80f7272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7276:	3b01      	subs	r3, #1
 80f7278:	009b      	lsls	r3, r3, #2
 80f727a:	33b0      	adds	r3, #176	@ 0xb0
 80f727c:	443b      	add	r3, r7
 80f727e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 80f7282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7286:	009b      	lsls	r3, r3, #2
 80f7288:	33b0      	adds	r3, #176	@ 0xb0
 80f728a:	443b      	add	r3, r7
 80f728c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80f7290:	07da      	lsls	r2, r3, #31
 80f7292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7296:	3b01      	subs	r3, #1
 80f7298:	430a      	orrs	r2, r1
 80f729a:	009b      	lsls	r3, r3, #2
 80f729c:	33b0      	adds	r3, #176	@ 0xb0
 80f729e:	443b      	add	r3, r7
 80f72a0:	f843 2c58 	str.w	r2, [r3, #-88]
					       (uECC_WORD_BITS - 1);
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80f72a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f72a8:	009b      	lsls	r3, r3, #2
 80f72aa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80f72ae:	4413      	add	r3, r2
 80f72b0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f72b4:	4611      	mov	r1, r2
 80f72b6:	4618      	mov	r0, r3
 80f72b8:	f7ff fd68 	bl	80f6d8c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
 80f72bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80f72c0:	3b01      	subs	r3, #1
 80f72c2:	b29b      	uxth	r3, r3
 80f72c4:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 80f72c8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80f72cc:	2b00      	cmp	r3, #0
 80f72ce:	f6bf af5b 	bge.w	80f7188 <uECC_vli_mmod+0x10c>
	}
	uECC_vli_set(result, v[index], num_words);
 80f72d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80f72d6:	009b      	lsls	r3, r3, #2
 80f72d8:	33b0      	adds	r3, #176	@ 0xb0
 80f72da:	443b      	add	r3, r7
 80f72dc:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80f72e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f72e4:	4619      	mov	r1, r3
 80f72e6:	68f8      	ldr	r0, [r7, #12]
 80f72e8:	f7ff fbfe 	bl	80f6ae8 <uECC_vli_set>
}
 80f72ec:	bf00      	nop
 80f72ee:	37b4      	adds	r7, #180	@ 0xb4
 80f72f0:	46bd      	mov	sp, r7
 80f72f2:	bd90      	pop	{r4, r7, pc}

080f72f4 <uECC_vli_modMult>:

void uECC_vli_modMult(uECC_word_t *result, const uECC_word_t *left,
		      const uECC_word_t *right, const uECC_word_t *mod,
		      wordcount_t num_words)
{
 80f72f4:	b580      	push	{r7, lr}
 80f72f6:	b094      	sub	sp, #80	@ 0x50
 80f72f8:	af00      	add	r7, sp, #0
 80f72fa:	60f8      	str	r0, [r7, #12]
 80f72fc:	60b9      	str	r1, [r7, #8]
 80f72fe:	607a      	str	r2, [r7, #4]
 80f7300:	603b      	str	r3, [r7, #0]
	uECC_word_t product[2 * NUM_ECC_WORDS];
	uECC_vli_mult(product, left, right, num_words);
 80f7302:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80f7306:	f107 0010 	add.w	r0, r7, #16
 80f730a:	687a      	ldr	r2, [r7, #4]
 80f730c:	68b9      	ldr	r1, [r7, #8]
 80f730e:	f7ff fdd1 	bl	80f6eb4 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
 80f7312:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80f7316:	f107 0110 	add.w	r1, r7, #16
 80f731a:	683a      	ldr	r2, [r7, #0]
 80f731c:	68f8      	ldr	r0, [r7, #12]
 80f731e:	f7ff fead 	bl	80f707c <uECC_vli_mmod>
}
 80f7322:	bf00      	nop
 80f7324:	3750      	adds	r7, #80	@ 0x50
 80f7326:	46bd      	mov	sp, r7
 80f7328:	bd80      	pop	{r7, pc}

080f732a <uECC_vli_modMult_fast>:

void uECC_vli_modMult_fast(uECC_word_t *result, const uECC_word_t *left,
			   const uECC_word_t *right, uECC_Curve curve)
{
 80f732a:	b580      	push	{r7, lr}
 80f732c:	b094      	sub	sp, #80	@ 0x50
 80f732e:	af00      	add	r7, sp, #0
 80f7330:	60f8      	str	r0, [r7, #12]
 80f7332:	60b9      	str	r1, [r7, #8]
 80f7334:	607a      	str	r2, [r7, #4]
 80f7336:	603b      	str	r3, [r7, #0]
	uECC_word_t product[2 * NUM_ECC_WORDS];
	uECC_vli_mult(product, left, right, curve->num_words);
 80f7338:	683b      	ldr	r3, [r7, #0]
 80f733a:	f993 3000 	ldrsb.w	r3, [r3]
 80f733e:	f107 0010 	add.w	r0, r7, #16
 80f7342:	687a      	ldr	r2, [r7, #4]
 80f7344:	68b9      	ldr	r1, [r7, #8]
 80f7346:	f7ff fdb5 	bl	80f6eb4 <uECC_vli_mult>

	curve->mmod_fast(result, product);
 80f734a:	683b      	ldr	r3, [r7, #0]
 80f734c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80f7350:	f107 0210 	add.w	r2, r7, #16
 80f7354:	4611      	mov	r1, r2
 80f7356:	68f8      	ldr	r0, [r7, #12]
 80f7358:	4798      	blx	r3
}
 80f735a:	bf00      	nop
 80f735c:	3750      	adds	r7, #80	@ 0x50
 80f735e:	46bd      	mov	sp, r7
 80f7360:	bd80      	pop	{r7, pc}

080f7362 <uECC_vli_modSquare_fast>:

static void uECC_vli_modSquare_fast(uECC_word_t *result,
				    const uECC_word_t *left,
				    uECC_Curve curve)
{
 80f7362:	b580      	push	{r7, lr}
 80f7364:	b084      	sub	sp, #16
 80f7366:	af00      	add	r7, sp, #0
 80f7368:	60f8      	str	r0, [r7, #12]
 80f736a:	60b9      	str	r1, [r7, #8]
 80f736c:	607a      	str	r2, [r7, #4]
	uECC_vli_modMult_fast(result, left, left, curve);
 80f736e:	687b      	ldr	r3, [r7, #4]
 80f7370:	68ba      	ldr	r2, [r7, #8]
 80f7372:	68b9      	ldr	r1, [r7, #8]
 80f7374:	68f8      	ldr	r0, [r7, #12]
 80f7376:	f7ff ffd8 	bl	80f732a <uECC_vli_modMult_fast>
}
 80f737a:	bf00      	nop
 80f737c:	3710      	adds	r7, #16
 80f737e:	46bd      	mov	sp, r7
 80f7380:	bd80      	pop	{r7, pc}

080f7382 <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))

static void vli_modInv_update(uECC_word_t *uv,
			      const uECC_word_t *mod,
			      wordcount_t num_words)
{
 80f7382:	b580      	push	{r7, lr}
 80f7384:	b086      	sub	sp, #24
 80f7386:	af00      	add	r7, sp, #0
 80f7388:	60f8      	str	r0, [r7, #12]
 80f738a:	60b9      	str	r1, [r7, #8]
 80f738c:	4613      	mov	r3, r2
 80f738e:	71fb      	strb	r3, [r7, #7]

	uECC_word_t carry = 0;
 80f7390:	2300      	movs	r3, #0
 80f7392:	617b      	str	r3, [r7, #20]

	if (!EVEN(uv)) {
 80f7394:	68fb      	ldr	r3, [r7, #12]
 80f7396:	681b      	ldr	r3, [r3, #0]
 80f7398:	f003 0301 	and.w	r3, r3, #1
 80f739c:	2b00      	cmp	r3, #0
 80f739e:	d007      	beq.n	80f73b0 <vli_modInv_update+0x2e>
		carry = uECC_vli_add(uv, uv, mod, num_words);
 80f73a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f73a4:	68ba      	ldr	r2, [r7, #8]
 80f73a6:	68f9      	ldr	r1, [r7, #12]
 80f73a8:	68f8      	ldr	r0, [r7, #12]
 80f73aa:	f7ff fc9e 	bl	80f6cea <uECC_vli_add>
 80f73ae:	6178      	str	r0, [r7, #20]
	}
	uECC_vli_rshift1(uv, num_words);
 80f73b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f73b4:	4619      	mov	r1, r3
 80f73b6:	68f8      	ldr	r0, [r7, #12]
 80f73b8:	f7ff fce8 	bl	80f6d8c <uECC_vli_rshift1>
	if (carry) {
 80f73bc:	697b      	ldr	r3, [r7, #20]
 80f73be:	2b00      	cmp	r3, #0
 80f73c0:	d013      	beq.n	80f73ea <vli_modInv_update+0x68>
		uv[num_words - 1] |= HIGH_BIT_SET;
 80f73c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f73c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f73ca:	3b01      	subs	r3, #1
 80f73cc:	009b      	lsls	r3, r3, #2
 80f73ce:	68fa      	ldr	r2, [r7, #12]
 80f73d0:	4413      	add	r3, r2
 80f73d2:	681a      	ldr	r2, [r3, #0]
 80f73d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80f73d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f73dc:	3b01      	subs	r3, #1
 80f73de:	009b      	lsls	r3, r3, #2
 80f73e0:	68f9      	ldr	r1, [r7, #12]
 80f73e2:	440b      	add	r3, r1
 80f73e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80f73e8:	601a      	str	r2, [r3, #0]
	}
}
 80f73ea:	bf00      	nop
 80f73ec:	3718      	adds	r7, #24
 80f73ee:	46bd      	mov	sp, r7
 80f73f0:	bd80      	pop	{r7, pc}

080f73f2 <uECC_vli_modInv>:

void uECC_vli_modInv(uECC_word_t *result, const uECC_word_t *input,
		     const uECC_word_t *mod, wordcount_t num_words)
{
 80f73f2:	b580      	push	{r7, lr}
 80f73f4:	b0a6      	sub	sp, #152	@ 0x98
 80f73f6:	af00      	add	r7, sp, #0
 80f73f8:	60f8      	str	r0, [r7, #12]
 80f73fa:	60b9      	str	r1, [r7, #8]
 80f73fc:	607a      	str	r2, [r7, #4]
 80f73fe:	70fb      	strb	r3, [r7, #3]
	uECC_word_t a[NUM_ECC_WORDS], b[NUM_ECC_WORDS];
	uECC_word_t u[NUM_ECC_WORDS], v[NUM_ECC_WORDS];
	cmpresult_t cmpResult;

	if (uECC_vli_isZero(input, num_words)) {
 80f7400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7404:	4619      	mov	r1, r3
 80f7406:	68b8      	ldr	r0, [r7, #8]
 80f7408:	f7ff faca 	bl	80f69a0 <uECC_vli_isZero>
 80f740c:	4603      	mov	r3, r0
 80f740e:	2b00      	cmp	r3, #0
 80f7410:	d006      	beq.n	80f7420 <uECC_vli_modInv+0x2e>
		uECC_vli_clear(result, num_words);
 80f7412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7416:	4619      	mov	r1, r3
 80f7418:	68f8      	ldr	r0, [r7, #12]
 80f741a:	f7ff faa0 	bl	80f695e <uECC_vli_clear>
 80f741e:	e0de      	b.n	80f75de <uECC_vli_modInv+0x1ec>
		return;
	}

	uECC_vli_set(a, input, num_words);
 80f7420:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7424:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80f7428:	68b9      	ldr	r1, [r7, #8]
 80f742a:	4618      	mov	r0, r3
 80f742c:	f7ff fb5c 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
 80f7430:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80f7438:	6879      	ldr	r1, [r7, #4]
 80f743a:	4618      	mov	r0, r3
 80f743c:	f7ff fb54 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
 80f7440:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7444:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80f7448:	4611      	mov	r1, r2
 80f744a:	4618      	mov	r0, r3
 80f744c:	f7ff fa87 	bl	80f695e <uECC_vli_clear>
	u[0] = 1;
 80f7450:	2301      	movs	r3, #1
 80f7452:	637b      	str	r3, [r7, #52]	@ 0x34
	uECC_vli_clear(v, num_words);
 80f7454:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7458:	f107 0314 	add.w	r3, r7, #20
 80f745c:	4611      	mov	r1, r2
 80f745e:	4618      	mov	r0, r3
 80f7460:	f7ff fa7d 	bl	80f695e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80f7464:	e0a2      	b.n	80f75ac <uECC_vli_modInv+0x1ba>
		if (EVEN(a)) {
 80f7466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f7468:	f003 0301 	and.w	r3, r3, #1
 80f746c:	2b00      	cmp	r3, #0
 80f746e:	d110      	bne.n	80f7492 <uECC_vli_modInv+0xa0>
			uECC_vli_rshift1(a, num_words);
 80f7470:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7474:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80f7478:	4611      	mov	r1, r2
 80f747a:	4618      	mov	r0, r3
 80f747c:	f7ff fc86 	bl	80f6d8c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
 80f7480:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80f7488:	6879      	ldr	r1, [r7, #4]
 80f748a:	4618      	mov	r0, r3
 80f748c:	f7ff ff79 	bl	80f7382 <vli_modInv_update>
 80f7490:	e08c      	b.n	80f75ac <uECC_vli_modInv+0x1ba>
    		} else if (EVEN(b)) {
 80f7492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f7494:	f003 0301 	and.w	r3, r3, #1
 80f7498:	2b00      	cmp	r3, #0
 80f749a:	d110      	bne.n	80f74be <uECC_vli_modInv+0xcc>
			uECC_vli_rshift1(b, num_words);
 80f749c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f74a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80f74a4:	4611      	mov	r1, r2
 80f74a6:	4618      	mov	r0, r3
 80f74a8:	f7ff fc70 	bl	80f6d8c <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
 80f74ac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f74b0:	f107 0314 	add.w	r3, r7, #20
 80f74b4:	6879      	ldr	r1, [r7, #4]
 80f74b6:	4618      	mov	r0, r3
 80f74b8:	f7ff ff63 	bl	80f7382 <vli_modInv_update>
 80f74bc:	e076      	b.n	80f75ac <uECC_vli_modInv+0x1ba>
		} else if (cmpResult > 0) {
 80f74be:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80f74c2:	2b00      	cmp	r3, #0
 80f74c4:	dd39      	ble.n	80f753a <uECC_vli_modInv+0x148>
			uECC_vli_sub(a, a, b, num_words);
 80f74c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f74ca:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80f74ce:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80f74d2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80f74d6:	f7ff fbb7 	bl	80f6c48 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
 80f74da:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f74de:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80f74e2:	4611      	mov	r1, r2
 80f74e4:	4618      	mov	r0, r3
 80f74e6:	f7ff fc51 	bl	80f6d8c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 80f74ea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f74ee:	f107 0114 	add.w	r1, r7, #20
 80f74f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80f74f6:	4618      	mov	r0, r3
 80f74f8:	f7ff fb1d 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f74fc:	4603      	mov	r3, r0
 80f74fe:	2b00      	cmp	r3, #0
 80f7500:	da08      	bge.n	80f7514 <uECC_vli_modInv+0x122>
        			uECC_vli_add(u, u, mod, num_words);
 80f7502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7506:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80f750a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80f750e:	687a      	ldr	r2, [r7, #4]
 80f7510:	f7ff fbeb 	bl	80f6cea <uECC_vli_add>
      			}
      			uECC_vli_sub(u, u, v, num_words);
 80f7514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f7518:	f107 0214 	add.w	r2, r7, #20
 80f751c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80f7520:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80f7524:	f7ff fb90 	bl	80f6c48 <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
 80f7528:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f752c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80f7530:	6879      	ldr	r1, [r7, #4]
 80f7532:	4618      	mov	r0, r3
 80f7534:	f7ff ff25 	bl	80f7382 <vli_modInv_update>
 80f7538:	e038      	b.n	80f75ac <uECC_vli_modInv+0x1ba>
    		} else {
      			uECC_vli_sub(b, b, a, num_words);
 80f753a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f753e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80f7542:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80f7546:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80f754a:	f7ff fb7d 	bl	80f6c48 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
 80f754e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7552:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80f7556:	4611      	mov	r1, r2
 80f7558:	4618      	mov	r0, r3
 80f755a:	f7ff fc17 	bl	80f6d8c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 80f755e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f7562:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80f7566:	f107 0314 	add.w	r3, r7, #20
 80f756a:	4618      	mov	r0, r3
 80f756c:	f7ff fae3 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7570:	4603      	mov	r3, r0
 80f7572:	2b00      	cmp	r3, #0
 80f7574:	da08      	bge.n	80f7588 <uECC_vli_modInv+0x196>
        			uECC_vli_add(v, v, mod, num_words);
 80f7576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f757a:	f107 0114 	add.w	r1, r7, #20
 80f757e:	f107 0014 	add.w	r0, r7, #20
 80f7582:	687a      	ldr	r2, [r7, #4]
 80f7584:	f7ff fbb1 	bl	80f6cea <uECC_vli_add>
      			}
      			uECC_vli_sub(v, v, u, num_words);
 80f7588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80f758c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80f7590:	f107 0114 	add.w	r1, r7, #20
 80f7594:	f107 0014 	add.w	r0, r7, #20
 80f7598:	f7ff fb56 	bl	80f6c48 <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
 80f759c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f75a0:	f107 0314 	add.w	r3, r7, #20
 80f75a4:	6879      	ldr	r1, [r7, #4]
 80f75a6:	4618      	mov	r0, r3
 80f75a8:	f7ff feeb 	bl	80f7382 <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80f75ac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f75b0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80f75b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80f75b8:	4618      	mov	r0, r3
 80f75ba:	f7ff fabc 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f75be:	4603      	mov	r3, r0
 80f75c0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80f75c4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80f75c8:	2b00      	cmp	r3, #0
 80f75ca:	f47f af4c 	bne.w	80f7466 <uECC_vli_modInv+0x74>
    		}
  	}
  	uECC_vli_set(result, u, num_words);
 80f75ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80f75d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80f75d6:	4619      	mov	r1, r3
 80f75d8:	68f8      	ldr	r0, [r7, #12]
 80f75da:	f7ff fa85 	bl	80f6ae8 <uECC_vli_set>
}
 80f75de:	3798      	adds	r7, #152	@ 0x98
 80f75e0:	46bd      	mov	sp, r7
 80f75e2:	bd80      	pop	{r7, pc}

080f75e4 <double_jacobian_default>:

/* ------ Point operations ------ */

void double_jacobian_default(uECC_word_t * X1, uECC_word_t * Y1,
			     uECC_word_t * Z1, uECC_Curve curve)
{
 80f75e4:	b580      	push	{r7, lr}
 80f75e6:	b098      	sub	sp, #96	@ 0x60
 80f75e8:	af02      	add	r7, sp, #8
 80f75ea:	60f8      	str	r0, [r7, #12]
 80f75ec:	60b9      	str	r1, [r7, #8]
 80f75ee:	607a      	str	r2, [r7, #4]
 80f75f0:	603b      	str	r3, [r7, #0]
	/* t1 = X, t2 = Y, t3 = Z */
	uECC_word_t t4[NUM_ECC_WORDS];
	uECC_word_t t5[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80f75f2:	683b      	ldr	r3, [r7, #0]
 80f75f4:	781b      	ldrb	r3, [r3, #0]
 80f75f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (uECC_vli_isZero(Z1, num_words)) {
 80f75fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f75fe:	4619      	mov	r1, r3
 80f7600:	6878      	ldr	r0, [r7, #4]
 80f7602:	f7ff f9cd 	bl	80f69a0 <uECC_vli_isZero>
 80f7606:	4603      	mov	r3, r0
 80f7608:	2b00      	cmp	r3, #0
 80f760a:	f040 80e6 	bne.w	80f77da <double_jacobian_default+0x1f6>
		return;
	}

	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 80f760e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80f7612:	683a      	ldr	r2, [r7, #0]
 80f7614:	68b9      	ldr	r1, [r7, #8]
 80f7616:	4618      	mov	r0, r3
 80f7618:	f7ff fea3 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 80f761c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80f7620:	f107 0010 	add.w	r0, r7, #16
 80f7624:	683b      	ldr	r3, [r7, #0]
 80f7626:	68f9      	ldr	r1, [r7, #12]
 80f7628:	f7ff fe7f 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 80f762c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80f7630:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80f7634:	683a      	ldr	r2, [r7, #0]
 80f7636:	4618      	mov	r0, r3
 80f7638:	f7ff fe93 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 80f763c:	683b      	ldr	r3, [r7, #0]
 80f763e:	687a      	ldr	r2, [r7, #4]
 80f7640:	68b9      	ldr	r1, [r7, #8]
 80f7642:	68b8      	ldr	r0, [r7, #8]
 80f7644:	f7ff fe71 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 80f7648:	683a      	ldr	r2, [r7, #0]
 80f764a:	6879      	ldr	r1, [r7, #4]
 80f764c:	6878      	ldr	r0, [r7, #4]
 80f764e:	f7ff fe88 	bl	80f7362 <uECC_vli_modSquare_fast>

	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 80f7652:	683b      	ldr	r3, [r7, #0]
 80f7654:	1d1a      	adds	r2, r3, #4
 80f7656:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f765a:	9300      	str	r3, [sp, #0]
 80f765c:	4613      	mov	r3, r2
 80f765e:	687a      	ldr	r2, [r7, #4]
 80f7660:	68f9      	ldr	r1, [r7, #12]
 80f7662:	68f8      	ldr	r0, [r7, #12]
 80f7664:	f7ff fcc6 	bl	80f6ff4 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 80f7668:	683b      	ldr	r3, [r7, #0]
 80f766a:	1d1a      	adds	r2, r3, #4
 80f766c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f7670:	9300      	str	r3, [sp, #0]
 80f7672:	4613      	mov	r3, r2
 80f7674:	687a      	ldr	r2, [r7, #4]
 80f7676:	6879      	ldr	r1, [r7, #4]
 80f7678:	6878      	ldr	r0, [r7, #4]
 80f767a:	f7ff fcbb 	bl	80f6ff4 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 80f767e:	683b      	ldr	r3, [r7, #0]
 80f7680:	1d1a      	adds	r2, r3, #4
 80f7682:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f7686:	9300      	str	r3, [sp, #0]
 80f7688:	4613      	mov	r3, r2
 80f768a:	687a      	ldr	r2, [r7, #4]
 80f768c:	68f9      	ldr	r1, [r7, #12]
 80f768e:	6878      	ldr	r0, [r7, #4]
 80f7690:	f7ff fcd7 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
 80f7694:	683b      	ldr	r3, [r7, #0]
 80f7696:	687a      	ldr	r2, [r7, #4]
 80f7698:	68f9      	ldr	r1, [r7, #12]
 80f769a:	68f8      	ldr	r0, [r7, #12]
 80f769c:	f7ff fe45 	bl	80f732a <uECC_vli_modMult_fast>

	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 80f76a0:	683b      	ldr	r3, [r7, #0]
 80f76a2:	1d1a      	adds	r2, r3, #4
 80f76a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f76a8:	9300      	str	r3, [sp, #0]
 80f76aa:	4613      	mov	r3, r2
 80f76ac:	68fa      	ldr	r2, [r7, #12]
 80f76ae:	68f9      	ldr	r1, [r7, #12]
 80f76b0:	6878      	ldr	r0, [r7, #4]
 80f76b2:	f7ff fc9f 	bl	80f6ff4 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 80f76b6:	683b      	ldr	r3, [r7, #0]
 80f76b8:	1d1a      	adds	r2, r3, #4
 80f76ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f76be:	9300      	str	r3, [sp, #0]
 80f76c0:	4613      	mov	r3, r2
 80f76c2:	687a      	ldr	r2, [r7, #4]
 80f76c4:	68f9      	ldr	r1, [r7, #12]
 80f76c6:	68f8      	ldr	r0, [r7, #12]
 80f76c8:	f7ff fc94 	bl	80f6ff4 <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
 80f76cc:	2100      	movs	r1, #0
 80f76ce:	68f8      	ldr	r0, [r7, #12]
 80f76d0:	f7ff f990 	bl	80f69f4 <uECC_vli_testBit>
 80f76d4:	4603      	mov	r3, r0
 80f76d6:	2b00      	cmp	r3, #0
 80f76d8:	d024      	beq.n	80f7724 <double_jacobian_default+0x140>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 80f76da:	683b      	ldr	r3, [r7, #0]
 80f76dc:	1d1a      	adds	r2, r3, #4
 80f76de:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f76e2:	68f9      	ldr	r1, [r7, #12]
 80f76e4:	68f8      	ldr	r0, [r7, #12]
 80f76e6:	f7ff fb00 	bl	80f6cea <uECC_vli_add>
 80f76ea:	6538      	str	r0, [r7, #80]	@ 0x50
		uECC_vli_rshift1(X1, num_words);
 80f76ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f76f0:	4619      	mov	r1, r3
 80f76f2:	68f8      	ldr	r0, [r7, #12]
 80f76f4:	f7ff fb4a 	bl	80f6d8c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 80f76f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f76fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f7700:	3b01      	subs	r3, #1
 80f7702:	009b      	lsls	r3, r3, #2
 80f7704:	68fa      	ldr	r2, [r7, #12]
 80f7706:	4413      	add	r3, r2
 80f7708:	6819      	ldr	r1, [r3, #0]
 80f770a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f770c:	07da      	lsls	r2, r3, #31
 80f770e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f7712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80f7716:	3b01      	subs	r3, #1
 80f7718:	009b      	lsls	r3, r3, #2
 80f771a:	68f8      	ldr	r0, [r7, #12]
 80f771c:	4403      	add	r3, r0
 80f771e:	430a      	orrs	r2, r1
 80f7720:	601a      	str	r2, [r3, #0]
 80f7722:	e005      	b.n	80f7730 <double_jacobian_default+0x14c>
	} else {
		uECC_vli_rshift1(X1, num_words);
 80f7724:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f7728:	4619      	mov	r1, r3
 80f772a:	68f8      	ldr	r0, [r7, #12]
 80f772c:	f7ff fb2e 	bl	80f6d8c <uECC_vli_rshift1>
	}

	/* t1 = 3/2*(x1^2 - z1^4) = B */
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
 80f7730:	683a      	ldr	r2, [r7, #0]
 80f7732:	68f9      	ldr	r1, [r7, #12]
 80f7734:	6878      	ldr	r0, [r7, #4]
 80f7736:	f7ff fe14 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 80f773a:	683b      	ldr	r3, [r7, #0]
 80f773c:	1d19      	adds	r1, r3, #4
 80f773e:	f107 0210 	add.w	r2, r7, #16
 80f7742:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f7746:	9300      	str	r3, [sp, #0]
 80f7748:	460b      	mov	r3, r1
 80f774a:	6879      	ldr	r1, [r7, #4]
 80f774c:	6878      	ldr	r0, [r7, #4]
 80f774e:	f7ff fc78 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 80f7752:	683b      	ldr	r3, [r7, #0]
 80f7754:	1d19      	adds	r1, r3, #4
 80f7756:	f107 0210 	add.w	r2, r7, #16
 80f775a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f775e:	9300      	str	r3, [sp, #0]
 80f7760:	460b      	mov	r3, r1
 80f7762:	6879      	ldr	r1, [r7, #4]
 80f7764:	6878      	ldr	r0, [r7, #4]
 80f7766:	f7ff fc6c 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 80f776a:	683b      	ldr	r3, [r7, #0]
 80f776c:	1d1a      	adds	r2, r3, #4
 80f776e:	f107 0110 	add.w	r1, r7, #16
 80f7772:	f107 0010 	add.w	r0, r7, #16
 80f7776:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f777a:	9300      	str	r3, [sp, #0]
 80f777c:	4613      	mov	r3, r2
 80f777e:	687a      	ldr	r2, [r7, #4]
 80f7780:	f7ff fc5f 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
 80f7784:	f107 0210 	add.w	r2, r7, #16
 80f7788:	683b      	ldr	r3, [r7, #0]
 80f778a:	68f9      	ldr	r1, [r7, #12]
 80f778c:	68f8      	ldr	r0, [r7, #12]
 80f778e:	f7ff fdcc 	bl	80f732a <uECC_vli_modMult_fast>
	/* t4 = B * (A - x3) - y1^4 = y3: */
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
 80f7792:	683b      	ldr	r3, [r7, #0]
 80f7794:	1d19      	adds	r1, r3, #4
 80f7796:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80f779a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80f779e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f77a2:	9300      	str	r3, [sp, #0]
 80f77a4:	460b      	mov	r3, r1
 80f77a6:	68f9      	ldr	r1, [r7, #12]
 80f77a8:	f7ff fc4b 	bl	80f7042 <uECC_vli_modSub>

	uECC_vli_set(X1, Z1, num_words);
 80f77ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f77b0:	461a      	mov	r2, r3
 80f77b2:	6879      	ldr	r1, [r7, #4]
 80f77b4:	68f8      	ldr	r0, [r7, #12]
 80f77b6:	f7ff f997 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
 80f77ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80f77be:	461a      	mov	r2, r3
 80f77c0:	68b9      	ldr	r1, [r7, #8]
 80f77c2:	6878      	ldr	r0, [r7, #4]
 80f77c4:	f7ff f990 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
 80f77c8:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80f77cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80f77d0:	4619      	mov	r1, r3
 80f77d2:	68b8      	ldr	r0, [r7, #8]
 80f77d4:	f7ff f988 	bl	80f6ae8 <uECC_vli_set>
 80f77d8:	e000      	b.n	80f77dc <double_jacobian_default+0x1f8>
		return;
 80f77da:	bf00      	nop
}
 80f77dc:	3758      	adds	r7, #88	@ 0x58
 80f77de:	46bd      	mov	sp, r7
 80f77e0:	bd80      	pop	{r7, pc}

080f77e2 <x_side_default>:

void x_side_default(uECC_word_t *result,
		    const uECC_word_t *x,
		    uECC_Curve curve)
{
 80f77e2:	b580      	push	{r7, lr}
 80f77e4:	b090      	sub	sp, #64	@ 0x40
 80f77e6:	af02      	add	r7, sp, #8
 80f77e8:	60f8      	str	r0, [r7, #12]
 80f77ea:	60b9      	str	r1, [r7, #8]
 80f77ec:	607a      	str	r2, [r7, #4]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 80f77ee:	f107 0314 	add.w	r3, r7, #20
 80f77f2:	2220      	movs	r2, #32
 80f77f4:	2100      	movs	r1, #0
 80f77f6:	4618      	mov	r0, r3
 80f77f8:	f002 fb0f 	bl	80f9e1a <memset>
 80f77fc:	2303      	movs	r3, #3
 80f77fe:	617b      	str	r3, [r7, #20]
	wordcount_t num_words = curve->num_words;
 80f7800:	687b      	ldr	r3, [r7, #4]
 80f7802:	781b      	ldrb	r3, [r3, #0]
 80f7804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 80f7808:	687a      	ldr	r2, [r7, #4]
 80f780a:	68b9      	ldr	r1, [r7, #8]
 80f780c:	68f8      	ldr	r0, [r7, #12]
 80f780e:	f7ff fda8 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 80f7812:	687b      	ldr	r3, [r7, #4]
 80f7814:	1d19      	adds	r1, r3, #4
 80f7816:	f107 0214 	add.w	r2, r7, #20
 80f781a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f781e:	9300      	str	r3, [sp, #0]
 80f7820:	460b      	mov	r3, r1
 80f7822:	68f9      	ldr	r1, [r7, #12]
 80f7824:	68f8      	ldr	r0, [r7, #12]
 80f7826:	f7ff fc0c 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 80f782a:	687b      	ldr	r3, [r7, #4]
 80f782c:	68ba      	ldr	r2, [r7, #8]
 80f782e:	68f9      	ldr	r1, [r7, #12]
 80f7830:	68f8      	ldr	r0, [r7, #12]
 80f7832:	f7ff fd7a 	bl	80f732a <uECC_vli_modMult_fast>
	/* r = x^3 - 3x + b: */
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
 80f7836:	687b      	ldr	r3, [r7, #4]
 80f7838:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80f783c:	687b      	ldr	r3, [r7, #4]
 80f783e:	1d19      	adds	r1, r3, #4
 80f7840:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7844:	9300      	str	r3, [sp, #0]
 80f7846:	460b      	mov	r3, r1
 80f7848:	68f9      	ldr	r1, [r7, #12]
 80f784a:	68f8      	ldr	r0, [r7, #12]
 80f784c:	f7ff fbd2 	bl	80f6ff4 <uECC_vli_modAdd>
}
 80f7850:	bf00      	nop
 80f7852:	3738      	adds	r7, #56	@ 0x38
 80f7854:	46bd      	mov	sp, r7
 80f7856:	bd80      	pop	{r7, pc}

080f7858 <uECC_secp256r1>:

uECC_Curve uECC_secp256r1(void)
{
 80f7858:	b480      	push	{r7}
 80f785a:	af00      	add	r7, sp, #0
	return &curve_secp256r1;
 80f785c:	4b02      	ldr	r3, [pc, #8]	@ (80f7868 <uECC_secp256r1+0x10>)
}
 80f785e:	4618      	mov	r0, r3
 80f7860:	46bd      	mov	sp, r7
 80f7862:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f7866:	4770      	bx	lr
 80f7868:	080faef0 	.word	0x080faef0

080f786c <vli_mmod_fast_secp256r1>:

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
 80f786c:	b580      	push	{r7, lr}
 80f786e:	b08c      	sub	sp, #48	@ 0x30
 80f7870:	af00      	add	r7, sp, #0
 80f7872:	6078      	str	r0, [r7, #4]
 80f7874:	6039      	str	r1, [r7, #0]
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 80f7876:	2208      	movs	r2, #8
 80f7878:	6839      	ldr	r1, [r7, #0]
 80f787a:	6878      	ldr	r0, [r7, #4]
 80f787c:	f7ff f934 	bl	80f6ae8 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
 80f7880:	2300      	movs	r3, #0
 80f7882:	617b      	str	r3, [r7, #20]
 80f7884:	697b      	ldr	r3, [r7, #20]
 80f7886:	613b      	str	r3, [r7, #16]
 80f7888:	693b      	ldr	r3, [r7, #16]
 80f788a:	60fb      	str	r3, [r7, #12]
	tmp[3] = product[11];
 80f788c:	683b      	ldr	r3, [r7, #0]
 80f788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f7890:	61bb      	str	r3, [r7, #24]
	tmp[4] = product[12];
 80f7892:	683b      	ldr	r3, [r7, #0]
 80f7894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f7896:	61fb      	str	r3, [r7, #28]
	tmp[5] = product[13];
 80f7898:	683b      	ldr	r3, [r7, #0]
 80f789a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f789c:	623b      	str	r3, [r7, #32]
	tmp[6] = product[14];
 80f789e:	683b      	ldr	r3, [r7, #0]
 80f78a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f78a2:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[15];
 80f78a4:	683b      	ldr	r3, [r7, #0]
 80f78a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f78a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80f78aa:	f107 020c 	add.w	r2, r7, #12
 80f78ae:	f107 010c 	add.w	r1, r7, #12
 80f78b2:	f107 000c 	add.w	r0, r7, #12
 80f78b6:	2308      	movs	r3, #8
 80f78b8:	f7ff fa17 	bl	80f6cea <uECC_vli_add>
 80f78bc:	4603      	mov	r3, r0
 80f78be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80f78c0:	f107 020c 	add.w	r2, r7, #12
 80f78c4:	2308      	movs	r3, #8
 80f78c6:	6879      	ldr	r1, [r7, #4]
 80f78c8:	6878      	ldr	r0, [r7, #4]
 80f78ca:	f7ff fa0e 	bl	80f6cea <uECC_vli_add>
 80f78ce:	4602      	mov	r2, r0
 80f78d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f78d2:	4413      	add	r3, r2
 80f78d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* s2 */
	tmp[3] = product[12];
 80f78d6:	683b      	ldr	r3, [r7, #0]
 80f78d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f78da:	61bb      	str	r3, [r7, #24]
	tmp[4] = product[13];
 80f78dc:	683b      	ldr	r3, [r7, #0]
 80f78de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f78e0:	61fb      	str	r3, [r7, #28]
	tmp[5] = product[14];
 80f78e2:	683b      	ldr	r3, [r7, #0]
 80f78e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f78e6:	623b      	str	r3, [r7, #32]
	tmp[6] = product[15];
 80f78e8:	683b      	ldr	r3, [r7, #0]
 80f78ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f78ec:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = 0;
 80f78ee:	2300      	movs	r3, #0
 80f78f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80f78f2:	f107 020c 	add.w	r2, r7, #12
 80f78f6:	f107 010c 	add.w	r1, r7, #12
 80f78fa:	f107 000c 	add.w	r0, r7, #12
 80f78fe:	2308      	movs	r3, #8
 80f7900:	f7ff f9f3 	bl	80f6cea <uECC_vli_add>
 80f7904:	4602      	mov	r2, r0
 80f7906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7908:	4413      	add	r3, r2
 80f790a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80f790c:	f107 020c 	add.w	r2, r7, #12
 80f7910:	2308      	movs	r3, #8
 80f7912:	6879      	ldr	r1, [r7, #4]
 80f7914:	6878      	ldr	r0, [r7, #4]
 80f7916:	f7ff f9e8 	bl	80f6cea <uECC_vli_add>
 80f791a:	4602      	mov	r2, r0
 80f791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f791e:	4413      	add	r3, r2
 80f7920:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* s3 */
	tmp[0] = product[8];
 80f7922:	683b      	ldr	r3, [r7, #0]
 80f7924:	6a1b      	ldr	r3, [r3, #32]
 80f7926:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[9];
 80f7928:	683b      	ldr	r3, [r7, #0]
 80f792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f792c:	613b      	str	r3, [r7, #16]
	tmp[2] = product[10];
 80f792e:	683b      	ldr	r3, [r7, #0]
 80f7930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f7932:	617b      	str	r3, [r7, #20]
	tmp[3] = tmp[4] = tmp[5] = 0;
 80f7934:	2300      	movs	r3, #0
 80f7936:	623b      	str	r3, [r7, #32]
 80f7938:	6a3b      	ldr	r3, [r7, #32]
 80f793a:	61fb      	str	r3, [r7, #28]
 80f793c:	69fb      	ldr	r3, [r7, #28]
 80f793e:	61bb      	str	r3, [r7, #24]
	tmp[6] = product[14];
 80f7940:	683b      	ldr	r3, [r7, #0]
 80f7942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f7944:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[15];
 80f7946:	683b      	ldr	r3, [r7, #0]
 80f7948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f794a:	62bb      	str	r3, [r7, #40]	@ 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80f794c:	f107 020c 	add.w	r2, r7, #12
 80f7950:	2308      	movs	r3, #8
 80f7952:	6879      	ldr	r1, [r7, #4]
 80f7954:	6878      	ldr	r0, [r7, #4]
 80f7956:	f7ff f9c8 	bl	80f6cea <uECC_vli_add>
 80f795a:	4602      	mov	r2, r0
 80f795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f795e:	4413      	add	r3, r2
 80f7960:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* s4 */
	tmp[0] = product[9];
 80f7962:	683b      	ldr	r3, [r7, #0]
 80f7964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f7966:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[10];
 80f7968:	683b      	ldr	r3, [r7, #0]
 80f796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f796c:	613b      	str	r3, [r7, #16]
	tmp[2] = product[11];
 80f796e:	683b      	ldr	r3, [r7, #0]
 80f7970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f7972:	617b      	str	r3, [r7, #20]
	tmp[3] = product[13];
 80f7974:	683b      	ldr	r3, [r7, #0]
 80f7976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f7978:	61bb      	str	r3, [r7, #24]
	tmp[4] = product[14];
 80f797a:	683b      	ldr	r3, [r7, #0]
 80f797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f797e:	61fb      	str	r3, [r7, #28]
	tmp[5] = product[15];
 80f7980:	683b      	ldr	r3, [r7, #0]
 80f7982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f7984:	623b      	str	r3, [r7, #32]
	tmp[6] = product[13];
 80f7986:	683b      	ldr	r3, [r7, #0]
 80f7988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f798a:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[8];
 80f798c:	683b      	ldr	r3, [r7, #0]
 80f798e:	6a1b      	ldr	r3, [r3, #32]
 80f7990:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80f7992:	f107 020c 	add.w	r2, r7, #12
 80f7996:	2308      	movs	r3, #8
 80f7998:	6879      	ldr	r1, [r7, #4]
 80f799a:	6878      	ldr	r0, [r7, #4]
 80f799c:	f7ff f9a5 	bl	80f6cea <uECC_vli_add>
 80f79a0:	4602      	mov	r2, r0
 80f79a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f79a4:	4413      	add	r3, r2
 80f79a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* d1 */
	tmp[0] = product[11];
 80f79a8:	683b      	ldr	r3, [r7, #0]
 80f79aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f79ac:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[12];
 80f79ae:	683b      	ldr	r3, [r7, #0]
 80f79b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f79b2:	613b      	str	r3, [r7, #16]
	tmp[2] = product[13];
 80f79b4:	683b      	ldr	r3, [r7, #0]
 80f79b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f79b8:	617b      	str	r3, [r7, #20]
	tmp[3] = tmp[4] = tmp[5] = 0;
 80f79ba:	2300      	movs	r3, #0
 80f79bc:	623b      	str	r3, [r7, #32]
 80f79be:	6a3b      	ldr	r3, [r7, #32]
 80f79c0:	61fb      	str	r3, [r7, #28]
 80f79c2:	69fb      	ldr	r3, [r7, #28]
 80f79c4:	61bb      	str	r3, [r7, #24]
	tmp[6] = product[8];
 80f79c6:	683b      	ldr	r3, [r7, #0]
 80f79c8:	6a1b      	ldr	r3, [r3, #32]
 80f79ca:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[10];
 80f79cc:	683b      	ldr	r3, [r7, #0]
 80f79ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f79d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80f79d2:	f107 020c 	add.w	r2, r7, #12
 80f79d6:	2308      	movs	r3, #8
 80f79d8:	6879      	ldr	r1, [r7, #4]
 80f79da:	6878      	ldr	r0, [r7, #4]
 80f79dc:	f7ff f934 	bl	80f6c48 <uECC_vli_sub>
 80f79e0:	4602      	mov	r2, r0
 80f79e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f79e4:	1a9b      	subs	r3, r3, r2
 80f79e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* d2 */
	tmp[0] = product[12];
 80f79e8:	683b      	ldr	r3, [r7, #0]
 80f79ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f79ec:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[13];
 80f79ee:	683b      	ldr	r3, [r7, #0]
 80f79f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f79f2:	613b      	str	r3, [r7, #16]
	tmp[2] = product[14];
 80f79f4:	683b      	ldr	r3, [r7, #0]
 80f79f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f79f8:	617b      	str	r3, [r7, #20]
	tmp[3] = product[15];
 80f79fa:	683b      	ldr	r3, [r7, #0]
 80f79fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f79fe:	61bb      	str	r3, [r7, #24]
	tmp[4] = tmp[5] = 0;
 80f7a00:	2300      	movs	r3, #0
 80f7a02:	623b      	str	r3, [r7, #32]
 80f7a04:	6a3b      	ldr	r3, [r7, #32]
 80f7a06:	61fb      	str	r3, [r7, #28]
	tmp[6] = product[9];
 80f7a08:	683b      	ldr	r3, [r7, #0]
 80f7a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f7a0c:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[11];
 80f7a0e:	683b      	ldr	r3, [r7, #0]
 80f7a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f7a12:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80f7a14:	f107 020c 	add.w	r2, r7, #12
 80f7a18:	2308      	movs	r3, #8
 80f7a1a:	6879      	ldr	r1, [r7, #4]
 80f7a1c:	6878      	ldr	r0, [r7, #4]
 80f7a1e:	f7ff f913 	bl	80f6c48 <uECC_vli_sub>
 80f7a22:	4602      	mov	r2, r0
 80f7a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7a26:	1a9b      	subs	r3, r3, r2
 80f7a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* d3 */
	tmp[0] = product[13];
 80f7a2a:	683b      	ldr	r3, [r7, #0]
 80f7a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f7a2e:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[14];
 80f7a30:	683b      	ldr	r3, [r7, #0]
 80f7a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f7a34:	613b      	str	r3, [r7, #16]
	tmp[2] = product[15];
 80f7a36:	683b      	ldr	r3, [r7, #0]
 80f7a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f7a3a:	617b      	str	r3, [r7, #20]
	tmp[3] = product[8];
 80f7a3c:	683b      	ldr	r3, [r7, #0]
 80f7a3e:	6a1b      	ldr	r3, [r3, #32]
 80f7a40:	61bb      	str	r3, [r7, #24]
	tmp[4] = product[9];
 80f7a42:	683b      	ldr	r3, [r7, #0]
 80f7a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f7a46:	61fb      	str	r3, [r7, #28]
	tmp[5] = product[10];
 80f7a48:	683b      	ldr	r3, [r7, #0]
 80f7a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f7a4c:	623b      	str	r3, [r7, #32]
	tmp[6] = 0;
 80f7a4e:	2300      	movs	r3, #0
 80f7a50:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[12];
 80f7a52:	683b      	ldr	r3, [r7, #0]
 80f7a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80f7a56:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80f7a58:	f107 020c 	add.w	r2, r7, #12
 80f7a5c:	2308      	movs	r3, #8
 80f7a5e:	6879      	ldr	r1, [r7, #4]
 80f7a60:	6878      	ldr	r0, [r7, #4]
 80f7a62:	f7ff f8f1 	bl	80f6c48 <uECC_vli_sub>
 80f7a66:	4602      	mov	r2, r0
 80f7a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7a6a:	1a9b      	subs	r3, r3, r2
 80f7a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* d4 */
	tmp[0] = product[14];
 80f7a6e:	683b      	ldr	r3, [r7, #0]
 80f7a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80f7a72:	60fb      	str	r3, [r7, #12]
	tmp[1] = product[15];
 80f7a74:	683b      	ldr	r3, [r7, #0]
 80f7a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80f7a78:	613b      	str	r3, [r7, #16]
	tmp[2] = 0;
 80f7a7a:	2300      	movs	r3, #0
 80f7a7c:	617b      	str	r3, [r7, #20]
	tmp[3] = product[9];
 80f7a7e:	683b      	ldr	r3, [r7, #0]
 80f7a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80f7a82:	61bb      	str	r3, [r7, #24]
	tmp[4] = product[10];
 80f7a84:	683b      	ldr	r3, [r7, #0]
 80f7a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80f7a88:	61fb      	str	r3, [r7, #28]
	tmp[5] = product[11];
 80f7a8a:	683b      	ldr	r3, [r7, #0]
 80f7a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80f7a8e:	623b      	str	r3, [r7, #32]
	tmp[6] = 0;
 80f7a90:	2300      	movs	r3, #0
 80f7a92:	627b      	str	r3, [r7, #36]	@ 0x24
	tmp[7] = product[13];
 80f7a94:	683b      	ldr	r3, [r7, #0]
 80f7a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80f7a98:	62bb      	str	r3, [r7, #40]	@ 0x28
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80f7a9a:	f107 020c 	add.w	r2, r7, #12
 80f7a9e:	2308      	movs	r3, #8
 80f7aa0:	6879      	ldr	r1, [r7, #4]
 80f7aa2:	6878      	ldr	r0, [r7, #4]
 80f7aa4:	f7ff f8d0 	bl	80f6c48 <uECC_vli_sub>
 80f7aa8:	4602      	mov	r2, r0
 80f7aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7aac:	1a9b      	subs	r3, r3, r2
 80f7aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (carry < 0) {
 80f7ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7ab2:	2b00      	cmp	r3, #0
 80f7ab4:	da17      	bge.n	80f7ae6 <vli_mmod_fast_secp256r1+0x27a>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 80f7ab6:	2308      	movs	r3, #8
 80f7ab8:	4a12      	ldr	r2, [pc, #72]	@ (80f7b04 <vli_mmod_fast_secp256r1+0x298>)
 80f7aba:	6879      	ldr	r1, [r7, #4]
 80f7abc:	6878      	ldr	r0, [r7, #4]
 80f7abe:	f7ff f914 	bl	80f6cea <uECC_vli_add>
 80f7ac2:	4602      	mov	r2, r0
 80f7ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7ac6:	4413      	add	r3, r2
 80f7ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		while (carry < 0);
 80f7aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7acc:	2b00      	cmp	r3, #0
 80f7ace:	dbf2      	blt.n	80f7ab6 <vli_mmod_fast_secp256r1+0x24a>
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
	}
}
 80f7ad0:	e014      	b.n	80f7afc <vli_mmod_fast_secp256r1+0x290>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 80f7ad2:	2308      	movs	r3, #8
 80f7ad4:	4a0b      	ldr	r2, [pc, #44]	@ (80f7b04 <vli_mmod_fast_secp256r1+0x298>)
 80f7ad6:	6879      	ldr	r1, [r7, #4]
 80f7ad8:	6878      	ldr	r0, [r7, #4]
 80f7ada:	f7ff f8b5 	bl	80f6c48 <uECC_vli_sub>
 80f7ade:	4602      	mov	r2, r0
 80f7ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7ae2:	1a9b      	subs	r3, r3, r2
 80f7ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (carry || 
 80f7ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f7ae8:	2b00      	cmp	r3, #0
 80f7aea:	d1f2      	bne.n	80f7ad2 <vli_mmod_fast_secp256r1+0x266>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
 80f7aec:	2208      	movs	r2, #8
 80f7aee:	6879      	ldr	r1, [r7, #4]
 80f7af0:	4804      	ldr	r0, [pc, #16]	@ (80f7b04 <vli_mmod_fast_secp256r1+0x298>)
 80f7af2:	f7ff f820 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7af6:	4603      	mov	r3, r0
		while (carry || 
 80f7af8:	2b01      	cmp	r3, #1
 80f7afa:	d1ea      	bne.n	80f7ad2 <vli_mmod_fast_secp256r1+0x266>
}
 80f7afc:	bf00      	nop
 80f7afe:	3730      	adds	r7, #48	@ 0x30
 80f7b00:	46bd      	mov	sp, r7
 80f7b02:	bd80      	pop	{r7, pc}
 80f7b04:	080faef4 	.word	0x080faef4

080f7b08 <apply_z>:
	return uECC_vli_isZero(point, curve->num_words * 2);
}

void apply_z(uECC_word_t * X1, uECC_word_t * Y1, const uECC_word_t * const Z,
	     uECC_Curve curve)
{
 80f7b08:	b580      	push	{r7, lr}
 80f7b0a:	b08c      	sub	sp, #48	@ 0x30
 80f7b0c:	af00      	add	r7, sp, #0
 80f7b0e:	60f8      	str	r0, [r7, #12]
 80f7b10:	60b9      	str	r1, [r7, #8]
 80f7b12:	607a      	str	r2, [r7, #4]
 80f7b14:	603b      	str	r3, [r7, #0]
	uECC_word_t t1[NUM_ECC_WORDS];

	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 80f7b16:	f107 0310 	add.w	r3, r7, #16
 80f7b1a:	683a      	ldr	r2, [r7, #0]
 80f7b1c:	6879      	ldr	r1, [r7, #4]
 80f7b1e:	4618      	mov	r0, r3
 80f7b20:	f7ff fc1f 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 80f7b24:	f107 0210 	add.w	r2, r7, #16
 80f7b28:	683b      	ldr	r3, [r7, #0]
 80f7b2a:	68f9      	ldr	r1, [r7, #12]
 80f7b2c:	68f8      	ldr	r0, [r7, #12]
 80f7b2e:	f7ff fbfc 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 80f7b32:	f107 0110 	add.w	r1, r7, #16
 80f7b36:	f107 0010 	add.w	r0, r7, #16
 80f7b3a:	683b      	ldr	r3, [r7, #0]
 80f7b3c:	687a      	ldr	r2, [r7, #4]
 80f7b3e:	f7ff fbf4 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 80f7b42:	f107 0210 	add.w	r2, r7, #16
 80f7b46:	683b      	ldr	r3, [r7, #0]
 80f7b48:	68b9      	ldr	r1, [r7, #8]
 80f7b4a:	68b8      	ldr	r0, [r7, #8]
 80f7b4c:	f7ff fbed 	bl	80f732a <uECC_vli_modMult_fast>
}
 80f7b50:	bf00      	nop
 80f7b52:	3730      	adds	r7, #48	@ 0x30
 80f7b54:	46bd      	mov	sp, r7
 80f7b56:	bd80      	pop	{r7, pc}

080f7b58 <XYcZ_add>:
}

void XYcZ_add(uECC_word_t * X1, uECC_word_t * Y1,
	      uECC_word_t * X2, uECC_word_t * Y2,
	      uECC_Curve curve)
{
 80f7b58:	b580      	push	{r7, lr}
 80f7b5a:	b090      	sub	sp, #64	@ 0x40
 80f7b5c:	af02      	add	r7, sp, #8
 80f7b5e:	60f8      	str	r0, [r7, #12]
 80f7b60:	60b9      	str	r1, [r7, #8]
 80f7b62:	607a      	str	r2, [r7, #4]
 80f7b64:	603b      	str	r3, [r7, #0]
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80f7b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7b68:	781b      	ldrb	r3, [r3, #0]
 80f7b6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80f7b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7b70:	1d1a      	adds	r2, r3, #4
 80f7b72:	f107 0014 	add.w	r0, r7, #20
 80f7b76:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7b7a:	9300      	str	r3, [sp, #0]
 80f7b7c:	4613      	mov	r3, r2
 80f7b7e:	68fa      	ldr	r2, [r7, #12]
 80f7b80:	6879      	ldr	r1, [r7, #4]
 80f7b82:	f7ff fa5e 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 80f7b86:	f107 0114 	add.w	r1, r7, #20
 80f7b8a:	f107 0314 	add.w	r3, r7, #20
 80f7b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80f7b90:	4618      	mov	r0, r3
 80f7b92:	f7ff fbe6 	bl	80f7362 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 80f7b96:	f107 0214 	add.w	r2, r7, #20
 80f7b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7b9c:	68f9      	ldr	r1, [r7, #12]
 80f7b9e:	68f8      	ldr	r0, [r7, #12]
 80f7ba0:	f7ff fbc3 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80f7ba4:	f107 0214 	add.w	r2, r7, #20
 80f7ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7baa:	6879      	ldr	r1, [r7, #4]
 80f7bac:	6878      	ldr	r0, [r7, #4]
 80f7bae:	f7ff fbbc 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80f7bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7bb4:	1d1a      	adds	r2, r3, #4
 80f7bb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7bba:	9300      	str	r3, [sp, #0]
 80f7bbc:	4613      	mov	r3, r2
 80f7bbe:	68ba      	ldr	r2, [r7, #8]
 80f7bc0:	6839      	ldr	r1, [r7, #0]
 80f7bc2:	6838      	ldr	r0, [r7, #0]
 80f7bc4:	f7ff fa3d 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 80f7bc8:	f107 0314 	add.w	r3, r7, #20
 80f7bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80f7bce:	6839      	ldr	r1, [r7, #0]
 80f7bd0:	4618      	mov	r0, r3
 80f7bd2:	f7ff fbc6 	bl	80f7362 <uECC_vli_modSquare_fast>

	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 80f7bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7bd8:	1d1a      	adds	r2, r3, #4
 80f7bda:	f107 0114 	add.w	r1, r7, #20
 80f7bde:	f107 0014 	add.w	r0, r7, #20
 80f7be2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7be6:	9300      	str	r3, [sp, #0]
 80f7be8:	4613      	mov	r3, r2
 80f7bea:	68fa      	ldr	r2, [r7, #12]
 80f7bec:	f7ff fa29 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 80f7bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7bf2:	1d1a      	adds	r2, r3, #4
 80f7bf4:	f107 0114 	add.w	r1, r7, #20
 80f7bf8:	f107 0014 	add.w	r0, r7, #20
 80f7bfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7c00:	9300      	str	r3, [sp, #0]
 80f7c02:	4613      	mov	r3, r2
 80f7c04:	687a      	ldr	r2, [r7, #4]
 80f7c06:	f7ff fa1c 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80f7c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7c0c:	1d1a      	adds	r2, r3, #4
 80f7c0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7c12:	9300      	str	r3, [sp, #0]
 80f7c14:	4613      	mov	r3, r2
 80f7c16:	68fa      	ldr	r2, [r7, #12]
 80f7c18:	6879      	ldr	r1, [r7, #4]
 80f7c1a:	6878      	ldr	r0, [r7, #4]
 80f7c1c:	f7ff fa11 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
 80f7c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7c22:	687a      	ldr	r2, [r7, #4]
 80f7c24:	68b9      	ldr	r1, [r7, #8]
 80f7c26:	68b8      	ldr	r0, [r7, #8]
 80f7c28:	f7ff fb7f 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80f7c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7c2e:	1d19      	adds	r1, r3, #4
 80f7c30:	f107 0214 	add.w	r2, r7, #20
 80f7c34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7c38:	9300      	str	r3, [sp, #0]
 80f7c3a:	460b      	mov	r3, r1
 80f7c3c:	68f9      	ldr	r1, [r7, #12]
 80f7c3e:	6878      	ldr	r0, [r7, #4]
 80f7c40:	f7ff f9ff 	bl	80f7042 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 80f7c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7c46:	687a      	ldr	r2, [r7, #4]
 80f7c48:	6839      	ldr	r1, [r7, #0]
 80f7c4a:	6838      	ldr	r0, [r7, #0]
 80f7c4c:	f7ff fb6d 	bl	80f732a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 80f7c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f7c52:	1d1a      	adds	r2, r3, #4
 80f7c54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80f7c58:	9300      	str	r3, [sp, #0]
 80f7c5a:	4613      	mov	r3, r2
 80f7c5c:	68ba      	ldr	r2, [r7, #8]
 80f7c5e:	6839      	ldr	r1, [r7, #0]
 80f7c60:	6838      	ldr	r0, [r7, #0]
 80f7c62:	f7ff f9ee 	bl	80f7042 <uECC_vli_modSub>

	uECC_vli_set(X2, t5, num_words);
 80f7c66:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80f7c6a:	f107 0314 	add.w	r3, r7, #20
 80f7c6e:	4619      	mov	r1, r3
 80f7c70:	6878      	ldr	r0, [r7, #4]
 80f7c72:	f7fe ff39 	bl	80f6ae8 <uECC_vli_set>
}
 80f7c76:	bf00      	nop
 80f7c78:	3738      	adds	r7, #56	@ 0x38
 80f7c7a:	46bd      	mov	sp, r7
 80f7c7c:	bd80      	pop	{r7, pc}

080f7c7e <uECC_vli_bytesToNative>:
}

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
 80f7c7e:	b580      	push	{r7, lr}
 80f7c80:	b086      	sub	sp, #24
 80f7c82:	af00      	add	r7, sp, #0
 80f7c84:	60f8      	str	r0, [r7, #12]
 80f7c86:	60b9      	str	r1, [r7, #8]
 80f7c88:	607a      	str	r2, [r7, #4]
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 80f7c8a:	687b      	ldr	r3, [r7, #4]
 80f7c8c:	3303      	adds	r3, #3
 80f7c8e:	2b00      	cmp	r3, #0
 80f7c90:	da00      	bge.n	80f7c94 <uECC_vli_bytesToNative+0x16>
 80f7c92:	3303      	adds	r3, #3
 80f7c94:	109b      	asrs	r3, r3, #2
 80f7c96:	b25b      	sxtb	r3, r3
 80f7c98:	4619      	mov	r1, r3
 80f7c9a:	68f8      	ldr	r0, [r7, #12]
 80f7c9c:	f7fe fe5f 	bl	80f695e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
 80f7ca0:	2300      	movs	r3, #0
 80f7ca2:	75fb      	strb	r3, [r7, #23]
 80f7ca4:	e021      	b.n	80f7cea <uECC_vli_bytesToNative+0x6c>
		unsigned b = num_bytes - 1 - i;
 80f7ca6:	687b      	ldr	r3, [r7, #4]
 80f7ca8:	1e5a      	subs	r2, r3, #1
 80f7caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f7cae:	1ad3      	subs	r3, r2, r3
 80f7cb0:	613b      	str	r3, [r7, #16]
		native[b / uECC_WORD_SIZE] |=
 80f7cb2:	693b      	ldr	r3, [r7, #16]
 80f7cb4:	f023 0303 	bic.w	r3, r3, #3
 80f7cb8:	68fa      	ldr	r2, [r7, #12]
 80f7cba:	4413      	add	r3, r2
 80f7cbc:	6819      	ldr	r1, [r3, #0]
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 80f7cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f7cc2:	68ba      	ldr	r2, [r7, #8]
 80f7cc4:	4413      	add	r3, r2
 80f7cc6:	781b      	ldrb	r3, [r3, #0]
 80f7cc8:	461a      	mov	r2, r3
 80f7cca:	693b      	ldr	r3, [r7, #16]
 80f7ccc:	f003 0303 	and.w	r3, r3, #3
 80f7cd0:	00db      	lsls	r3, r3, #3
 80f7cd2:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
 80f7cd4:	693b      	ldr	r3, [r7, #16]
 80f7cd6:	f023 0303 	bic.w	r3, r3, #3
 80f7cda:	68f8      	ldr	r0, [r7, #12]
 80f7cdc:	4403      	add	r3, r0
 80f7cde:	430a      	orrs	r2, r1
 80f7ce0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_bytes; ++i) {
 80f7ce2:	7dfb      	ldrb	r3, [r7, #23]
 80f7ce4:	3301      	adds	r3, #1
 80f7ce6:	b2db      	uxtb	r3, r3
 80f7ce8:	75fb      	strb	r3, [r7, #23]
 80f7cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80f7cee:	687a      	ldr	r2, [r7, #4]
 80f7cf0:	429a      	cmp	r2, r3
 80f7cf2:	dcd8      	bgt.n	80f7ca6 <uECC_vli_bytesToNative+0x28>
  	}
}
 80f7cf4:	bf00      	nop
 80f7cf6:	bf00      	nop
 80f7cf8:	3718      	adds	r7, #24
 80f7cfa:	46bd      	mov	sp, r7
 80f7cfc:	bd80      	pop	{r7, pc}

080f7cfe <bits2int>:
#include <tinycrypt/ecc_dsa.h>


static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
 80f7cfe:	b580      	push	{r7, lr}
 80f7d00:	b08a      	sub	sp, #40	@ 0x28
 80f7d02:	af00      	add	r7, sp, #0
 80f7d04:	60f8      	str	r0, [r7, #12]
 80f7d06:	60b9      	str	r1, [r7, #8]
 80f7d08:	607a      	str	r2, [r7, #4]
 80f7d0a:	603b      	str	r3, [r7, #0]
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 80f7d0c:	683b      	ldr	r3, [r7, #0]
 80f7d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80f7d12:	3307      	adds	r3, #7
 80f7d14:	2b00      	cmp	r3, #0
 80f7d16:	da00      	bge.n	80f7d1a <bits2int+0x1c>
 80f7d18:	3307      	adds	r3, #7
 80f7d1a:	10db      	asrs	r3, r3, #3
 80f7d1c:	61fb      	str	r3, [r7, #28]
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80f7d1e:	683b      	ldr	r3, [r7, #0]
 80f7d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80f7d24:	331f      	adds	r3, #31
 80f7d26:	2b00      	cmp	r3, #0
 80f7d28:	da00      	bge.n	80f7d2c <bits2int+0x2e>
 80f7d2a:	331f      	adds	r3, #31
 80f7d2c:	115b      	asrs	r3, r3, #5
 80f7d2e:	61bb      	str	r3, [r7, #24]
	int shift;
	uECC_word_t carry;
	uECC_word_t *ptr;

	if (bits_size > num_n_bytes) {
 80f7d30:	687a      	ldr	r2, [r7, #4]
 80f7d32:	69fb      	ldr	r3, [r7, #28]
 80f7d34:	429a      	cmp	r2, r3
 80f7d36:	d901      	bls.n	80f7d3c <bits2int+0x3e>
		bits_size = num_n_bytes;
 80f7d38:	69fb      	ldr	r3, [r7, #28]
 80f7d3a:	607b      	str	r3, [r7, #4]
	}

	uECC_vli_clear(native, num_n_words);
 80f7d3c:	69bb      	ldr	r3, [r7, #24]
 80f7d3e:	b25b      	sxtb	r3, r3
 80f7d40:	4619      	mov	r1, r3
 80f7d42:	68f8      	ldr	r0, [r7, #12]
 80f7d44:	f7fe fe0b 	bl	80f695e <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
 80f7d48:	687b      	ldr	r3, [r7, #4]
 80f7d4a:	461a      	mov	r2, r3
 80f7d4c:	68b9      	ldr	r1, [r7, #8]
 80f7d4e:	68f8      	ldr	r0, [r7, #12]
 80f7d50:	f7ff ff95 	bl	80f7c7e <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 80f7d54:	687b      	ldr	r3, [r7, #4]
 80f7d56:	00db      	lsls	r3, r3, #3
 80f7d58:	683a      	ldr	r2, [r7, #0]
 80f7d5a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80f7d5e:	4293      	cmp	r3, r2
 80f7d60:	d93a      	bls.n	80f7dd8 <bits2int+0xda>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
 80f7d62:	687b      	ldr	r3, [r7, #4]
 80f7d64:	00db      	lsls	r3, r3, #3
 80f7d66:	683a      	ldr	r2, [r7, #0]
 80f7d68:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80f7d6c:	1a9b      	subs	r3, r3, r2
 80f7d6e:	617b      	str	r3, [r7, #20]
	carry = 0;
 80f7d70:	2300      	movs	r3, #0
 80f7d72:	627b      	str	r3, [r7, #36]	@ 0x24
	ptr = native + num_n_words;
 80f7d74:	69bb      	ldr	r3, [r7, #24]
 80f7d76:	009b      	lsls	r3, r3, #2
 80f7d78:	68fa      	ldr	r2, [r7, #12]
 80f7d7a:	4413      	add	r3, r2
 80f7d7c:	623b      	str	r3, [r7, #32]
	while (ptr-- > native) {
 80f7d7e:	e010      	b.n	80f7da2 <bits2int+0xa4>
		uECC_word_t temp = *ptr;
 80f7d80:	6a3b      	ldr	r3, [r7, #32]
 80f7d82:	681b      	ldr	r3, [r3, #0]
 80f7d84:	613b      	str	r3, [r7, #16]
		*ptr = (temp >> shift) | carry;
 80f7d86:	693a      	ldr	r2, [r7, #16]
 80f7d88:	697b      	ldr	r3, [r7, #20]
 80f7d8a:	40da      	lsrs	r2, r3
 80f7d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f7d8e:	431a      	orrs	r2, r3
 80f7d90:	6a3b      	ldr	r3, [r7, #32]
 80f7d92:	601a      	str	r2, [r3, #0]
		carry = temp << (uECC_WORD_BITS - shift);
 80f7d94:	697b      	ldr	r3, [r7, #20]
 80f7d96:	f1c3 0320 	rsb	r3, r3, #32
 80f7d9a:	693a      	ldr	r2, [r7, #16]
 80f7d9c:	fa02 f303 	lsl.w	r3, r2, r3
 80f7da0:	627b      	str	r3, [r7, #36]	@ 0x24
	while (ptr-- > native) {
 80f7da2:	6a3b      	ldr	r3, [r7, #32]
 80f7da4:	1f1a      	subs	r2, r3, #4
 80f7da6:	623a      	str	r2, [r7, #32]
 80f7da8:	68fa      	ldr	r2, [r7, #12]
 80f7daa:	429a      	cmp	r2, r3
 80f7dac:	d3e8      	bcc.n	80f7d80 <bits2int+0x82>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 80f7dae:	683b      	ldr	r3, [r7, #0]
 80f7db0:	3324      	adds	r3, #36	@ 0x24
 80f7db2:	69ba      	ldr	r2, [r7, #24]
 80f7db4:	b252      	sxtb	r2, r2
 80f7db6:	68f9      	ldr	r1, [r7, #12]
 80f7db8:	4618      	mov	r0, r3
 80f7dba:	f7fe febc 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7dbe:	4603      	mov	r3, r0
 80f7dc0:	2b01      	cmp	r3, #1
 80f7dc2:	d00a      	beq.n	80f7dda <bits2int+0xdc>
		uECC_vli_sub(native, native, curve->n, num_n_words);
 80f7dc4:	683b      	ldr	r3, [r7, #0]
 80f7dc6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80f7dca:	69bb      	ldr	r3, [r7, #24]
 80f7dcc:	b25b      	sxtb	r3, r3
 80f7dce:	68f9      	ldr	r1, [r7, #12]
 80f7dd0:	68f8      	ldr	r0, [r7, #12]
 80f7dd2:	f7fe ff39 	bl	80f6c48 <uECC_vli_sub>
 80f7dd6:	e000      	b.n	80f7dda <bits2int+0xdc>
		return;
 80f7dd8:	bf00      	nop
	}
}
 80f7dda:	3728      	adds	r7, #40	@ 0x28
 80f7ddc:	46bd      	mov	sp, r7
 80f7dde:	bd80      	pop	{r7, pc}

080f7de0 <smax>:
	}
	return 0;
}

static bitcount_t smax(bitcount_t a, bitcount_t b)
{
 80f7de0:	b480      	push	{r7}
 80f7de2:	b083      	sub	sp, #12
 80f7de4:	af00      	add	r7, sp, #0
 80f7de6:	4603      	mov	r3, r0
 80f7de8:	460a      	mov	r2, r1
 80f7dea:	80fb      	strh	r3, [r7, #6]
 80f7dec:	4613      	mov	r3, r2
 80f7dee:	80bb      	strh	r3, [r7, #4]
	return (a > b ? a : b);
 80f7df0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80f7df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80f7df8:	4293      	cmp	r3, r2
 80f7dfa:	bfb8      	it	lt
 80f7dfc:	4613      	movlt	r3, r2
 80f7dfe:	b21b      	sxth	r3, r3
}
 80f7e00:	4618      	mov	r0, r3
 80f7e02:	370c      	adds	r7, #12
 80f7e04:	46bd      	mov	sp, r7
 80f7e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f7e0a:	4770      	bx	lr

080f7e0c <uECC_verify>:

int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,
		unsigned hash_size, const uint8_t *signature,
	        uECC_Curve curve)
{
 80f7e0c:	b590      	push	{r4, r7, lr}
 80f7e0e:	b0ff      	sub	sp, #508	@ 0x1fc
 80f7e10:	af02      	add	r7, sp, #8
 80f7e12:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 80f7e16:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 80f7e1a:	6020      	str	r0, [r4, #0]
 80f7e1c:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 80f7e20:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 80f7e24:	6001      	str	r1, [r0, #0]
 80f7e26:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 80f7e2a:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 80f7e2e:	600a      	str	r2, [r1, #0]
 80f7e30:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 80f7e34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80f7e38:	6013      	str	r3, [r2, #0]
	bitcount_t num_bits;
	bitcount_t i;

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t r[NUM_ECC_WORDS], s[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80f7e3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7e3e:	781b      	ldrb	r3, [r3, #0]
 80f7e40:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80f7e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80f7e4c:	331f      	adds	r3, #31
 80f7e4e:	2b00      	cmp	r3, #0
 80f7e50:	da00      	bge.n	80f7e54 <uECC_verify+0x48>
 80f7e52:	331f      	adds	r3, #31
 80f7e54:	115b      	asrs	r3, r3, #5
 80f7e56:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

	rx[num_n_words - 1] = 0;
 80f7e5a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7e5e:	3b01      	subs	r3, #1
 80f7e60:	009b      	lsls	r3, r3, #2
 80f7e62:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80f7e66:	443b      	add	r3, r7
 80f7e68:	2200      	movs	r2, #0
 80f7e6a:	f843 2cd0 	str.w	r2, [r3, #-208]
	r[num_n_words - 1] = 0;
 80f7e6e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7e72:	1e5a      	subs	r2, r3, #1
 80f7e74:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7e78:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80f7e7c:	2100      	movs	r1, #0
 80f7e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	s[num_n_words - 1] = 0;
 80f7e82:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7e86:	1e5a      	subs	r2, r3, #1
 80f7e88:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7e8c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80f7e90:	2100      	movs	r1, #0
 80f7e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 80f7e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7e9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80f7e9e:	461a      	mov	r2, r3
 80f7ea0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7ea4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80f7ea8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80f7eac:	6819      	ldr	r1, [r3, #0]
 80f7eae:	f7ff fee6 	bl	80f7c7e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 80f7eb2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f7eb6:	009b      	lsls	r3, r3, #2
 80f7eb8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80f7ebc:	18d0      	adds	r0, r2, r3
 80f7ebe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7ec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80f7ec6:	461a      	mov	r2, r3
 80f7ec8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7ecc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80f7ed0:	681b      	ldr	r3, [r3, #0]
 80f7ed2:	1899      	adds	r1, r3, r2
			       curve->num_bytes);
 80f7ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7ed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
	uECC_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 80f7edc:	461a      	mov	r2, r3
 80f7ede:	f7ff fece 	bl	80f7c7e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 80f7ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7ee6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80f7eea:	461a      	mov	r2, r3
 80f7eec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7ef0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80f7ef4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80f7ef8:	6819      	ldr	r1, [r3, #0]
 80f7efa:	f7ff fec0 	bl	80f7c7e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 80f7efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7f02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80f7f06:	461a      	mov	r2, r3
 80f7f08:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7f0c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80f7f10:	681b      	ldr	r3, [r3, #0]
 80f7f12:	1899      	adds	r1, r3, r2
 80f7f14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7f18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80f7f1c:	461a      	mov	r2, r3
 80f7f1e:	f107 0310 	add.w	r3, r7, #16
 80f7f22:	4618      	mov	r0, r3
 80f7f24:	f7ff feab 	bl	80f7c7e <uECC_vli_bytesToNative>

	/* r, s must not be 0. */
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 80f7f28:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f7f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80f7f30:	4611      	mov	r1, r2
 80f7f32:	4618      	mov	r0, r3
 80f7f34:	f7fe fd34 	bl	80f69a0 <uECC_vli_isZero>
 80f7f38:	4603      	mov	r3, r0
 80f7f3a:	2b00      	cmp	r3, #0
 80f7f3c:	d10a      	bne.n	80f7f54 <uECC_verify+0x148>
 80f7f3e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f7f42:	f107 0310 	add.w	r3, r7, #16
 80f7f46:	4611      	mov	r1, r2
 80f7f48:	4618      	mov	r0, r3
 80f7f4a:	f7fe fd29 	bl	80f69a0 <uECC_vli_isZero>
 80f7f4e:	4603      	mov	r3, r0
 80f7f50:	2b00      	cmp	r3, #0
 80f7f52:	d001      	beq.n	80f7f58 <uECC_verify+0x14c>
		return 0;
 80f7f54:	2300      	movs	r3, #0
 80f7f56:	e225      	b.n	80f83a4 <uECC_verify+0x598>
	}

	/* r, s must be < n. */
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80f7f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7f5c:	3324      	adds	r3, #36	@ 0x24
 80f7f5e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80f7f62:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80f7f66:	4618      	mov	r0, r3
 80f7f68:	f7fe fde5 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7f6c:	4603      	mov	r3, r0
 80f7f6e:	2b01      	cmp	r3, #1
 80f7f70:	d10c      	bne.n	80f7f8c <uECC_verify+0x180>
	    uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 80f7f72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7f76:	3324      	adds	r3, #36	@ 0x24
 80f7f78:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80f7f7c:	f107 0110 	add.w	r1, r7, #16
 80f7f80:	4618      	mov	r0, r3
 80f7f82:	f7fe fdd8 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f7f86:	4603      	mov	r3, r0
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 80f7f88:	2b01      	cmp	r3, #1
 80f7f8a:	d001      	beq.n	80f7f90 <uECC_verify+0x184>
		return 0;
 80f7f8c:	2300      	movs	r3, #0
 80f7f8e:	e209      	b.n	80f83a4 <uECC_verify+0x598>
	}

	/* Calculate u1 and u2. */
	uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 80f7f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7f94:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80f7f98:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7f9c:	f107 0110 	add.w	r1, r7, #16
 80f7fa0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80f7fa4:	f7ff fa25 	bl	80f73f2 <uECC_vli_modInv>
	u1[num_n_words - 1] = 0;
 80f7fa8:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7fac:	3b01      	subs	r3, #1
 80f7fae:	009b      	lsls	r3, r3, #2
 80f7fb0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80f7fb4:	443b      	add	r3, r7
 80f7fb6:	2200      	movs	r2, #0
 80f7fb8:	f843 2c30 	str.w	r2, [r3, #-48]
	bits2int(u1, message_hash, hash_size, curve);
 80f7fbc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7fc0:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 80f7fc4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f7fc8:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 80f7fcc:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80f7fd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7fd4:	6812      	ldr	r2, [r2, #0]
 80f7fd6:	6809      	ldr	r1, [r1, #0]
 80f7fd8:	f7ff fe91 	bl	80f7cfe <bits2int>
	uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 80f7fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f7fe0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80f7fe4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f7fe8:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80f7fec:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80f7ff0:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f7ff4:	9300      	str	r3, [sp, #0]
 80f7ff6:	4623      	mov	r3, r4
 80f7ff8:	f7ff f97c 	bl	80f72f4 <uECC_vli_modMult>
	uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 80f7ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8000:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80f8004:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f8008:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80f800c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80f8010:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f8014:	9300      	str	r3, [sp, #0]
 80f8016:	4623      	mov	r3, r4
 80f8018:	f7ff f96c 	bl	80f72f4 <uECC_vli_modMult>

	/* Calculate sum = G + Q. */
	uECC_vli_set(sum, _public, num_words);
 80f801c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f8020:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80f8024:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80f8028:	4618      	mov	r0, r3
 80f802a:	f7fe fd5d 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(sum + num_words, _public + num_words, num_words);
 80f802e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f8032:	009b      	lsls	r3, r3, #2
 80f8034:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80f8038:	18d0      	adds	r0, r2, r3
 80f803a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f803e:	009b      	lsls	r3, r3, #2
 80f8040:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80f8044:	4413      	add	r3, r2
 80f8046:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f804a:	4619      	mov	r1, r3
 80f804c:	f7fe fd4c 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(tx, curve->G, num_words);
 80f8050:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8054:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80f8058:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f805c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80f8060:	4618      	mov	r0, r3
 80f8062:	f7fe fd41 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(ty, curve->G + num_words, num_words);
 80f8066:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f806a:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80f806e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f8072:	009b      	lsls	r3, r3, #2
 80f8074:	18d1      	adds	r1, r2, r3
 80f8076:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f807a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80f807e:	4618      	mov	r0, r3
 80f8080:	f7fe fd32 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 80f8084:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8088:	1d1c      	adds	r4, r3, #4
 80f808a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80f808e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80f8092:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80f8096:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f809a:	9300      	str	r3, [sp, #0]
 80f809c:	4623      	mov	r3, r4
 80f809e:	f7fe ffd0 	bl	80f7042 <uECC_vli_modSub>
	XYcZ_add(tx, ty, sum, sum + num_words, curve);
 80f80a2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f80a6:	009b      	lsls	r3, r3, #2
 80f80a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80f80ac:	18d4      	adds	r4, r2, r3
 80f80ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80f80b2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80f80b6:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80f80ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f80be:	9300      	str	r3, [sp, #0]
 80f80c0:	4623      	mov	r3, r4
 80f80c2:	f7ff fd49 	bl	80f7b58 <XYcZ_add>
	uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 80f80c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f80ca:	1d1a      	adds	r2, r3, #4
 80f80cc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f80d0:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80f80d4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80f80d8:	f7ff f98b 	bl	80f73f2 <uECC_vli_modInv>
	apply_z(sum, sum + num_words, z, curve);
 80f80dc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f80e0:	009b      	lsls	r3, r3, #2
 80f80e2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80f80e6:	18d1      	adds	r1, r2, r3
 80f80e8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f80ec:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80f80f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f80f4:	f7ff fd08 	bl	80f7b08 <apply_z>

	/* Use Shamir's trick to calculate u1*G + u2*Q */
	points[0] = 0;
 80f80f8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f80fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f8100:	2200      	movs	r2, #0
 80f8102:	601a      	str	r2, [r3, #0]
	points[1] = curve->G;
 80f8104:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8108:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80f810c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f8110:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f8114:	605a      	str	r2, [r3, #4]
	points[2] = _public;
 80f8116:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f811a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f811e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80f8122:	609a      	str	r2, [r3, #8]
	points[3] = sum;
 80f8124:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f8128:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f812c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80f8130:	60da      	str	r2, [r3, #12]
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 80f8132:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80f8136:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80f813a:	4611      	mov	r1, r2
 80f813c:	4618      	mov	r0, r3
 80f813e:	f7fe fc99 	bl	80f6a74 <uECC_vli_numBits>
 80f8142:	4603      	mov	r3, r0
 80f8144:	461c      	mov	r4, r3
 80f8146:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80f814a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80f814e:	4611      	mov	r1, r2
 80f8150:	4618      	mov	r0, r3
 80f8152:	f7fe fc8f 	bl	80f6a74 <uECC_vli_numBits>
 80f8156:	4603      	mov	r3, r0
 80f8158:	4619      	mov	r1, r3
 80f815a:	4620      	mov	r0, r4
 80f815c:	f7ff fe40 	bl	80f7de0 <smax>
 80f8160:	4603      	mov	r3, r0
 80f8162:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
	uECC_vli_numBits(u2, num_n_words));

	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 80f8166:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80f816a:	3b01      	subs	r3, #1
 80f816c:	b29b      	uxth	r3, r3
 80f816e:	b21a      	sxth	r2, r3
 80f8170:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80f8174:	4611      	mov	r1, r2
 80f8176:	4618      	mov	r0, r3
 80f8178:	f7fe fc3c 	bl	80f69f4 <uECC_vli_testBit>
 80f817c:	4603      	mov	r3, r0
 80f817e:	2b00      	cmp	r3, #0
 80f8180:	bf14      	ite	ne
 80f8182:	2301      	movne	r3, #1
 80f8184:	2300      	moveq	r3, #0
 80f8186:	b2db      	uxtb	r3, r3
 80f8188:	461c      	mov	r4, r3
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 80f818a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80f818e:	3b01      	subs	r3, #1
 80f8190:	b29b      	uxth	r3, r3
 80f8192:	b21a      	sxth	r2, r3
 80f8194:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80f8198:	4611      	mov	r1, r2
 80f819a:	4618      	mov	r0, r3
 80f819c:	f7fe fc2a 	bl	80f69f4 <uECC_vli_testBit>
 80f81a0:	4603      	mov	r3, r0
 80f81a2:	2b00      	cmp	r3, #0
 80f81a4:	d001      	beq.n	80f81aa <uECC_verify+0x39e>
 80f81a6:	2302      	movs	r3, #2
 80f81a8:	e000      	b.n	80f81ac <uECC_verify+0x3a0>
 80f81aa:	2300      	movs	r3, #0
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 80f81ac:	ea43 0204 	orr.w	r2, r3, r4
 80f81b0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f81b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f81b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80f81bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	uECC_vli_set(rx, point, num_words);
 80f81c0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f81c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80f81c8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80f81cc:	4618      	mov	r0, r3
 80f81ce:	f7fe fc8b 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_set(ry, point + num_words, num_words);
 80f81d2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f81d6:	009b      	lsls	r3, r3, #2
 80f81d8:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80f81dc:	18d1      	adds	r1, r2, r3
 80f81de:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f81e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80f81e6:	4618      	mov	r0, r3
 80f81e8:	f7fe fc7e 	bl	80f6ae8 <uECC_vli_set>
	uECC_vli_clear(z, num_words);
 80f81ec:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f81f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80f81f4:	4611      	mov	r1, r2
 80f81f6:	4618      	mov	r0, r3
 80f81f8:	f7fe fbb1 	bl	80f695e <uECC_vli_clear>
	z[0] = 1;
 80f81fc:	2301      	movs	r3, #1
 80f81fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

	for (i = num_bits - 2; i >= 0; --i) {
 80f8202:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80f8206:	3b02      	subs	r3, #2
 80f8208:	b29b      	uxth	r3, r3
 80f820a:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80f820e:	e087      	b.n	80f8320 <uECC_verify+0x514>
		uECC_word_t index;
		curve->double_jacobian(rx, ry, z, curve);
 80f8210:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8214:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80f8218:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f821c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80f8220:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80f8224:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8228:	47a0      	blx	r4

		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 80f822a:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 80f822e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80f8232:	4611      	mov	r1, r2
 80f8234:	4618      	mov	r0, r3
 80f8236:	f7fe fbdd 	bl	80f69f4 <uECC_vli_testBit>
 80f823a:	4603      	mov	r3, r0
 80f823c:	2b00      	cmp	r3, #0
 80f823e:	bf14      	ite	ne
 80f8240:	2301      	movne	r3, #1
 80f8242:	2300      	moveq	r3, #0
 80f8244:	b2db      	uxtb	r3, r3
 80f8246:	461c      	mov	r4, r3
 80f8248:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 80f824c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80f8250:	4611      	mov	r1, r2
 80f8252:	4618      	mov	r0, r3
 80f8254:	f7fe fbce 	bl	80f69f4 <uECC_vli_testBit>
 80f8258:	4603      	mov	r3, r0
 80f825a:	2b00      	cmp	r3, #0
 80f825c:	d001      	beq.n	80f8262 <uECC_verify+0x456>
 80f825e:	2302      	movs	r3, #2
 80f8260:	e000      	b.n	80f8264 <uECC_verify+0x458>
 80f8262:	2300      	movs	r3, #0
 80f8264:	4323      	orrs	r3, r4
 80f8266:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
		point = points[index];
 80f826a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80f826e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80f8272:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80f8276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80f827a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
		if (point) {
 80f827e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80f8282:	2b00      	cmp	r3, #0
 80f8284:	d046      	beq.n	80f8314 <uECC_verify+0x508>
			uECC_vli_set(tx, point, num_words);
 80f8286:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f828a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80f828e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80f8292:	4618      	mov	r0, r3
 80f8294:	f7fe fc28 	bl	80f6ae8 <uECC_vli_set>
			uECC_vli_set(ty, point + num_words, num_words);
 80f8298:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f829c:	009b      	lsls	r3, r3, #2
 80f829e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80f82a2:	18d1      	adds	r1, r2, r3
 80f82a4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f82a8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80f82ac:	4618      	mov	r0, r3
 80f82ae:	f7fe fc1b 	bl	80f6ae8 <uECC_vli_set>
			apply_z(tx, ty, z, curve);
 80f82b2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f82b6:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80f82ba:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80f82be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f82c2:	f7ff fc21 	bl	80f7b08 <apply_z>
			uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80f82c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f82ca:	1d1c      	adds	r4, r3, #4
 80f82cc:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80f82d0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80f82d4:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80f82d8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f82dc:	9300      	str	r3, [sp, #0]
 80f82de:	4623      	mov	r3, r4
 80f82e0:	f7fe feaf 	bl	80f7042 <uECC_vli_modSub>
			XYcZ_add(tx, ty, rx, ry, curve);
 80f82e4:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 80f82e8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80f82ec:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80f82f0:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80f82f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f82f8:	9300      	str	r3, [sp, #0]
 80f82fa:	4623      	mov	r3, r4
 80f82fc:	f7ff fc2c 	bl	80f7b58 <XYcZ_add>
			uECC_vli_modMult_fast(z, z, tz, curve);
 80f8300:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80f8304:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80f8308:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80f830c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8310:	f7ff f80b 	bl	80f732a <uECC_vli_modMult_fast>
	for (i = num_bits - 2; i >= 0; --i) {
 80f8314:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 80f8318:	3b01      	subs	r3, #1
 80f831a:	b29b      	uxth	r3, r3
 80f831c:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80f8320:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 80f8324:	2b00      	cmp	r3, #0
 80f8326:	f6bf af73 	bge.w	80f8210 <uECC_verify+0x404>
		}
  	}

	uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 80f832a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f832e:	1d1a      	adds	r2, r3, #4
 80f8330:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80f8334:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80f8338:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80f833c:	f7ff f859 	bl	80f73f2 <uECC_vli_modInv>
	apply_z(rx, ry, z, curve);
 80f8340:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80f8344:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80f8348:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80f834c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8350:	f7ff fbda 	bl	80f7b08 <apply_z>

	/* v = x1 (mod n) */
	if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 80f8354:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8358:	3324      	adds	r3, #36	@ 0x24
 80f835a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 80f835e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80f8362:	4618      	mov	r0, r3
 80f8364:	f7fe fbe7 	bl	80f6b36 <uECC_vli_cmp_unsafe>
 80f8368:	4603      	mov	r3, r0
 80f836a:	2b01      	cmp	r3, #1
 80f836c:	d00b      	beq.n	80f8386 <uECC_verify+0x57a>
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
 80f836e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80f8372:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80f8376:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80f837a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80f837e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80f8382:	f7fe fc61 	bl	80f6c48 <uECC_vli_sub>
	}

	/* Accept only if v == r. */
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
 80f8386:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80f838a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80f838e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80f8392:	4618      	mov	r0, r3
 80f8394:	f7fe fc0b 	bl	80f6bae <uECC_vli_equal>
 80f8398:	4603      	mov	r3, r0
 80f839a:	2b00      	cmp	r3, #0
 80f839c:	bf0c      	ite	eq
 80f839e:	2301      	moveq	r3, #1
 80f83a0:	2300      	movne	r3, #0
 80f83a2:	b2db      	uxtb	r3, r3
}
 80f83a4:	4618      	mov	r0, r3
 80f83a6:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 80f83aa:	46bd      	mov	sp, r7
 80f83ac:	bd90      	pop	{r4, r7, pc}
	...

080f83b0 <tc_sha256_init>:
#include <tinycrypt/utils.h>

static void compress(unsigned int *iv, const uint8_t *data);

int tc_sha256_init(TCSha256State_t s)
{
 80f83b0:	b580      	push	{r7, lr}
 80f83b2:	b082      	sub	sp, #8
 80f83b4:	af00      	add	r7, sp, #0
 80f83b6:	6078      	str	r0, [r7, #4]
	/* input sanity check: */
	if (s == (TCSha256State_t) 0) {
 80f83b8:	687b      	ldr	r3, [r7, #4]
 80f83ba:	2b00      	cmp	r3, #0
 80f83bc:	d101      	bne.n	80f83c2 <tc_sha256_init+0x12>
		return TC_CRYPTO_FAIL;
 80f83be:	2300      	movs	r3, #0
 80f83c0:	e01d      	b.n	80f83fe <tc_sha256_init+0x4e>
	 * Setting the initial state values.
	 * These values correspond to the first 32 bits of the fractional parts
	 * of the square roots of the first 8 primes: 2, 3, 5, 7, 11, 13, 17
	 * and 19.
	 */
	_set((uint8_t *) s, 0x00, sizeof(*s));
 80f83c2:	2270      	movs	r2, #112	@ 0x70
 80f83c4:	2100      	movs	r1, #0
 80f83c6:	6878      	ldr	r0, [r7, #4]
 80f83c8:	f000 fb32 	bl	80f8a30 <_set>
	s->iv[0] = 0x6a09e667;
 80f83cc:	687b      	ldr	r3, [r7, #4]
 80f83ce:	4a0e      	ldr	r2, [pc, #56]	@ (80f8408 <tc_sha256_init+0x58>)
 80f83d0:	601a      	str	r2, [r3, #0]
	s->iv[1] = 0xbb67ae85;
 80f83d2:	687b      	ldr	r3, [r7, #4]
 80f83d4:	4a0d      	ldr	r2, [pc, #52]	@ (80f840c <tc_sha256_init+0x5c>)
 80f83d6:	605a      	str	r2, [r3, #4]
	s->iv[2] = 0x3c6ef372;
 80f83d8:	687b      	ldr	r3, [r7, #4]
 80f83da:	4a0d      	ldr	r2, [pc, #52]	@ (80f8410 <tc_sha256_init+0x60>)
 80f83dc:	609a      	str	r2, [r3, #8]
	s->iv[3] = 0xa54ff53a;
 80f83de:	687b      	ldr	r3, [r7, #4]
 80f83e0:	4a0c      	ldr	r2, [pc, #48]	@ (80f8414 <tc_sha256_init+0x64>)
 80f83e2:	60da      	str	r2, [r3, #12]
	s->iv[4] = 0x510e527f;
 80f83e4:	687b      	ldr	r3, [r7, #4]
 80f83e6:	4a0c      	ldr	r2, [pc, #48]	@ (80f8418 <tc_sha256_init+0x68>)
 80f83e8:	611a      	str	r2, [r3, #16]
	s->iv[5] = 0x9b05688c;
 80f83ea:	687b      	ldr	r3, [r7, #4]
 80f83ec:	4a0b      	ldr	r2, [pc, #44]	@ (80f841c <tc_sha256_init+0x6c>)
 80f83ee:	615a      	str	r2, [r3, #20]
	s->iv[6] = 0x1f83d9ab;
 80f83f0:	687b      	ldr	r3, [r7, #4]
 80f83f2:	4a0b      	ldr	r2, [pc, #44]	@ (80f8420 <tc_sha256_init+0x70>)
 80f83f4:	619a      	str	r2, [r3, #24]
	s->iv[7] = 0x5be0cd19;
 80f83f6:	687b      	ldr	r3, [r7, #4]
 80f83f8:	4a0a      	ldr	r2, [pc, #40]	@ (80f8424 <tc_sha256_init+0x74>)
 80f83fa:	61da      	str	r2, [r3, #28]

	return TC_CRYPTO_SUCCESS;
 80f83fc:	2301      	movs	r3, #1
}
 80f83fe:	4618      	mov	r0, r3
 80f8400:	3708      	adds	r7, #8
 80f8402:	46bd      	mov	sp, r7
 80f8404:	bd80      	pop	{r7, pc}
 80f8406:	bf00      	nop
 80f8408:	6a09e667 	.word	0x6a09e667
 80f840c:	bb67ae85 	.word	0xbb67ae85
 80f8410:	3c6ef372 	.word	0x3c6ef372
 80f8414:	a54ff53a 	.word	0xa54ff53a
 80f8418:	510e527f 	.word	0x510e527f
 80f841c:	9b05688c 	.word	0x9b05688c
 80f8420:	1f83d9ab 	.word	0x1f83d9ab
 80f8424:	5be0cd19 	.word	0x5be0cd19

080f8428 <tc_sha256_update>:

int tc_sha256_update(TCSha256State_t s, const uint8_t *data, size_t datalen)
{
 80f8428:	b5b0      	push	{r4, r5, r7, lr}
 80f842a:	b084      	sub	sp, #16
 80f842c:	af00      	add	r7, sp, #0
 80f842e:	60f8      	str	r0, [r7, #12]
 80f8430:	60b9      	str	r1, [r7, #8]
 80f8432:	607a      	str	r2, [r7, #4]
	/* input sanity check: */
	if (s == (TCSha256State_t) 0 ||
 80f8434:	68fb      	ldr	r3, [r7, #12]
 80f8436:	2b00      	cmp	r3, #0
 80f8438:	d002      	beq.n	80f8440 <tc_sha256_update+0x18>
 80f843a:	68bb      	ldr	r3, [r7, #8]
 80f843c:	2b00      	cmp	r3, #0
 80f843e:	d101      	bne.n	80f8444 <tc_sha256_update+0x1c>
	    data == (void *) 0) {
		return TC_CRYPTO_FAIL;
 80f8440:	2300      	movs	r3, #0
 80f8442:	e030      	b.n	80f84a6 <tc_sha256_update+0x7e>
	} else if (datalen == 0) {
 80f8444:	687b      	ldr	r3, [r7, #4]
 80f8446:	2b00      	cmp	r3, #0
 80f8448:	d127      	bne.n	80f849a <tc_sha256_update+0x72>
		return TC_CRYPTO_SUCCESS;
 80f844a:	2301      	movs	r3, #1
 80f844c:	e02b      	b.n	80f84a6 <tc_sha256_update+0x7e>
	}

	while (datalen-- > 0) {
		s->leftover[s->leftover_offset++] = *(data++);
 80f844e:	68ba      	ldr	r2, [r7, #8]
 80f8450:	1c53      	adds	r3, r2, #1
 80f8452:	60bb      	str	r3, [r7, #8]
 80f8454:	68fb      	ldr	r3, [r7, #12]
 80f8456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f8458:	1c58      	adds	r0, r3, #1
 80f845a:	68f9      	ldr	r1, [r7, #12]
 80f845c:	6688      	str	r0, [r1, #104]	@ 0x68
 80f845e:	7811      	ldrb	r1, [r2, #0]
 80f8460:	68fa      	ldr	r2, [r7, #12]
 80f8462:	4413      	add	r3, r2
 80f8464:	460a      	mov	r2, r1
 80f8466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 80f846a:	68fb      	ldr	r3, [r7, #12]
 80f846c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f846e:	2b3f      	cmp	r3, #63	@ 0x3f
 80f8470:	d913      	bls.n	80f849a <tc_sha256_update+0x72>
			compress(s->iv, s->leftover);
 80f8472:	68fa      	ldr	r2, [r7, #12]
 80f8474:	68fb      	ldr	r3, [r7, #12]
 80f8476:	3328      	adds	r3, #40	@ 0x28
 80f8478:	4619      	mov	r1, r3
 80f847a:	4610      	mov	r0, r2
 80f847c:	f000 f94e 	bl	80f871c <compress>
			s->leftover_offset = 0;
 80f8480:	68fb      	ldr	r3, [r7, #12]
 80f8482:	2200      	movs	r2, #0
 80f8484:	669a      	str	r2, [r3, #104]	@ 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80f8486:	68fb      	ldr	r3, [r7, #12]
 80f8488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80f848c:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 80f8490:	f143 0500 	adc.w	r5, r3, #0
 80f8494:	68fb      	ldr	r3, [r7, #12]
 80f8496:	e9c3 4508 	strd	r4, r5, [r3, #32]
	while (datalen-- > 0) {
 80f849a:	687b      	ldr	r3, [r7, #4]
 80f849c:	1e5a      	subs	r2, r3, #1
 80f849e:	607a      	str	r2, [r7, #4]
 80f84a0:	2b00      	cmp	r3, #0
 80f84a2:	d1d4      	bne.n	80f844e <tc_sha256_update+0x26>
		}
	}

	return TC_CRYPTO_SUCCESS;
 80f84a4:	2301      	movs	r3, #1
}
 80f84a6:	4618      	mov	r0, r3
 80f84a8:	3710      	adds	r7, #16
 80f84aa:	46bd      	mov	sp, r7
 80f84ac:	bdb0      	pop	{r4, r5, r7, pc}

080f84ae <tc_sha256_final>:

int tc_sha256_final(uint8_t *digest, TCSha256State_t s)
{
 80f84ae:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80f84b2:	b084      	sub	sp, #16
 80f84b4:	af00      	add	r7, sp, #0
 80f84b6:	6078      	str	r0, [r7, #4]
 80f84b8:	6039      	str	r1, [r7, #0]
	unsigned int i;

	/* input sanity check: */
	if (digest == (uint8_t *) 0 ||
 80f84ba:	687b      	ldr	r3, [r7, #4]
 80f84bc:	2b00      	cmp	r3, #0
 80f84be:	d002      	beq.n	80f84c6 <tc_sha256_final+0x18>
 80f84c0:	683b      	ldr	r3, [r7, #0]
 80f84c2:	2b00      	cmp	r3, #0
 80f84c4:	d101      	bne.n	80f84ca <tc_sha256_final+0x1c>
	    s == (TCSha256State_t) 0) {
		return TC_CRYPTO_FAIL;
 80f84c6:	2300      	movs	r3, #0
 80f84c8:	e0e1      	b.n	80f868e <tc_sha256_final+0x1e0>
	}

	s->bits_hashed += (s->leftover_offset << 3);
 80f84ca:	683b      	ldr	r3, [r7, #0]
 80f84cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80f84d0:	6839      	ldr	r1, [r7, #0]
 80f84d2:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80f84d4:	00c9      	lsls	r1, r1, #3
 80f84d6:	2000      	movs	r0, #0
 80f84d8:	460c      	mov	r4, r1
 80f84da:	4605      	mov	r5, r0
 80f84dc:	eb12 0804 	adds.w	r8, r2, r4
 80f84e0:	eb43 0905 	adc.w	r9, r3, r5
 80f84e4:	683b      	ldr	r3, [r7, #0]
 80f84e6:	e9c3 8908 	strd	r8, r9, [r3, #32]

	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80f84ea:	683b      	ldr	r3, [r7, #0]
 80f84ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f84ee:	1c59      	adds	r1, r3, #1
 80f84f0:	683a      	ldr	r2, [r7, #0]
 80f84f2:	6691      	str	r1, [r2, #104]	@ 0x68
 80f84f4:	683a      	ldr	r2, [r7, #0]
 80f84f6:	4413      	add	r3, r2
 80f84f8:	2280      	movs	r2, #128	@ 0x80
 80f84fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80f84fe:	683b      	ldr	r3, [r7, #0]
 80f8500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f8502:	2b38      	cmp	r3, #56	@ 0x38
 80f8504:	d917      	bls.n	80f8536 <tc_sha256_final+0x88>
		/* there is not room for all the padding in this block */
		_set(s->leftover + s->leftover_offset, 0x00,
 80f8506:	683b      	ldr	r3, [r7, #0]
 80f8508:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80f850c:	683b      	ldr	r3, [r7, #0]
 80f850e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f8510:	18d0      	adds	r0, r2, r3
		     sizeof(s->leftover) - s->leftover_offset);
 80f8512:	683b      	ldr	r3, [r7, #0]
 80f8514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
		_set(s->leftover + s->leftover_offset, 0x00,
 80f8516:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80f851a:	461a      	mov	r2, r3
 80f851c:	2100      	movs	r1, #0
 80f851e:	f000 fa87 	bl	80f8a30 <_set>
		compress(s->iv, s->leftover);
 80f8522:	683a      	ldr	r2, [r7, #0]
 80f8524:	683b      	ldr	r3, [r7, #0]
 80f8526:	3328      	adds	r3, #40	@ 0x28
 80f8528:	4619      	mov	r1, r3
 80f852a:	4610      	mov	r0, r2
 80f852c:	f000 f8f6 	bl	80f871c <compress>
		s->leftover_offset = 0;
 80f8530:	683b      	ldr	r3, [r7, #0]
 80f8532:	2200      	movs	r2, #0
 80f8534:	669a      	str	r2, [r3, #104]	@ 0x68
	}

	/* add the padding and the length in big-Endian format */
	_set(s->leftover + s->leftover_offset, 0x00,
 80f8536:	683b      	ldr	r3, [r7, #0]
 80f8538:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80f853c:	683b      	ldr	r3, [r7, #0]
 80f853e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80f8540:	18d0      	adds	r0, r2, r3
	     sizeof(s->leftover) - 8 - s->leftover_offset);
 80f8542:	683b      	ldr	r3, [r7, #0]
 80f8544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 80f8546:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80f854a:	461a      	mov	r2, r3
 80f854c:	2100      	movs	r1, #0
 80f854e:	f000 fa6f 	bl	80f8a30 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80f8552:	683b      	ldr	r3, [r7, #0]
 80f8554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80f8558:	b2d2      	uxtb	r2, r2
 80f855a:	683b      	ldr	r3, [r7, #0]
 80f855c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80f8560:	683b      	ldr	r3, [r7, #0]
 80f8562:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f8566:	f04f 0200 	mov.w	r2, #0
 80f856a:	f04f 0300 	mov.w	r3, #0
 80f856e:	0a02      	lsrs	r2, r0, #8
 80f8570:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80f8574:	0a0b      	lsrs	r3, r1, #8
 80f8576:	b2d2      	uxtb	r2, r2
 80f8578:	683b      	ldr	r3, [r7, #0]
 80f857a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 80f857e:	683b      	ldr	r3, [r7, #0]
 80f8580:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f8584:	f04f 0200 	mov.w	r2, #0
 80f8588:	f04f 0300 	mov.w	r3, #0
 80f858c:	0c02      	lsrs	r2, r0, #16
 80f858e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80f8592:	0c0b      	lsrs	r3, r1, #16
 80f8594:	b2d2      	uxtb	r2, r2
 80f8596:	683b      	ldr	r3, [r7, #0]
 80f8598:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 80f859c:	683b      	ldr	r3, [r7, #0]
 80f859e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f85a2:	f04f 0200 	mov.w	r2, #0
 80f85a6:	f04f 0300 	mov.w	r3, #0
 80f85aa:	0e02      	lsrs	r2, r0, #24
 80f85ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80f85b0:	0e0b      	lsrs	r3, r1, #24
 80f85b2:	b2d2      	uxtb	r2, r2
 80f85b4:	683b      	ldr	r3, [r7, #0]
 80f85b6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 80f85ba:	683b      	ldr	r3, [r7, #0]
 80f85bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f85c0:	f04f 0200 	mov.w	r2, #0
 80f85c4:	f04f 0300 	mov.w	r3, #0
 80f85c8:	000a      	movs	r2, r1
 80f85ca:	2300      	movs	r3, #0
 80f85cc:	b2d2      	uxtb	r2, r2
 80f85ce:	683b      	ldr	r3, [r7, #0]
 80f85d0:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 80f85d4:	683b      	ldr	r3, [r7, #0]
 80f85d6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f85da:	f04f 0200 	mov.w	r2, #0
 80f85de:	f04f 0300 	mov.w	r3, #0
 80f85e2:	0a0a      	lsrs	r2, r1, #8
 80f85e4:	2300      	movs	r3, #0
 80f85e6:	b2d2      	uxtb	r2, r2
 80f85e8:	683b      	ldr	r3, [r7, #0]
 80f85ea:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 80f85ee:	683b      	ldr	r3, [r7, #0]
 80f85f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f85f4:	f04f 0200 	mov.w	r2, #0
 80f85f8:	f04f 0300 	mov.w	r3, #0
 80f85fc:	0c0a      	lsrs	r2, r1, #16
 80f85fe:	2300      	movs	r3, #0
 80f8600:	b2d2      	uxtb	r2, r2
 80f8602:	683b      	ldr	r3, [r7, #0]
 80f8604:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 80f8608:	683b      	ldr	r3, [r7, #0]
 80f860a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80f860e:	f04f 0200 	mov.w	r2, #0
 80f8612:	f04f 0300 	mov.w	r3, #0
 80f8616:	0e0a      	lsrs	r2, r1, #24
 80f8618:	2300      	movs	r3, #0
 80f861a:	b2d2      	uxtb	r2, r2
 80f861c:	683b      	ldr	r3, [r7, #0]
 80f861e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	/* hash the padding and length */
	compress(s->iv, s->leftover);
 80f8622:	683a      	ldr	r2, [r7, #0]
 80f8624:	683b      	ldr	r3, [r7, #0]
 80f8626:	3328      	adds	r3, #40	@ 0x28
 80f8628:	4619      	mov	r1, r3
 80f862a:	4610      	mov	r0, r2
 80f862c:	f000 f876 	bl	80f871c <compress>

	/* copy the iv out to digest */
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 80f8630:	2300      	movs	r3, #0
 80f8632:	60fb      	str	r3, [r7, #12]
 80f8634:	e022      	b.n	80f867c <tc_sha256_final+0x1ce>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 80f8636:	683b      	ldr	r3, [r7, #0]
 80f8638:	68fa      	ldr	r2, [r7, #12]
 80f863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80f863e:	60bb      	str	r3, [r7, #8]
		*digest++ = (uint8_t)(t >> 24);
 80f8640:	68bb      	ldr	r3, [r7, #8]
 80f8642:	0e19      	lsrs	r1, r3, #24
 80f8644:	687b      	ldr	r3, [r7, #4]
 80f8646:	1c5a      	adds	r2, r3, #1
 80f8648:	607a      	str	r2, [r7, #4]
 80f864a:	b2ca      	uxtb	r2, r1
 80f864c:	701a      	strb	r2, [r3, #0]
		*digest++ = (uint8_t)(t >> 16);
 80f864e:	68bb      	ldr	r3, [r7, #8]
 80f8650:	0c19      	lsrs	r1, r3, #16
 80f8652:	687b      	ldr	r3, [r7, #4]
 80f8654:	1c5a      	adds	r2, r3, #1
 80f8656:	607a      	str	r2, [r7, #4]
 80f8658:	b2ca      	uxtb	r2, r1
 80f865a:	701a      	strb	r2, [r3, #0]
		*digest++ = (uint8_t)(t >> 8);
 80f865c:	68bb      	ldr	r3, [r7, #8]
 80f865e:	0a19      	lsrs	r1, r3, #8
 80f8660:	687b      	ldr	r3, [r7, #4]
 80f8662:	1c5a      	adds	r2, r3, #1
 80f8664:	607a      	str	r2, [r7, #4]
 80f8666:	b2ca      	uxtb	r2, r1
 80f8668:	701a      	strb	r2, [r3, #0]
		*digest++ = (uint8_t)(t);
 80f866a:	687b      	ldr	r3, [r7, #4]
 80f866c:	1c5a      	adds	r2, r3, #1
 80f866e:	607a      	str	r2, [r7, #4]
 80f8670:	68ba      	ldr	r2, [r7, #8]
 80f8672:	b2d2      	uxtb	r2, r2
 80f8674:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 80f8676:	68fb      	ldr	r3, [r7, #12]
 80f8678:	3301      	adds	r3, #1
 80f867a:	60fb      	str	r3, [r7, #12]
 80f867c:	68fb      	ldr	r3, [r7, #12]
 80f867e:	2b07      	cmp	r3, #7
 80f8680:	d9d9      	bls.n	80f8636 <tc_sha256_final+0x188>
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 80f8682:	2270      	movs	r2, #112	@ 0x70
 80f8684:	2100      	movs	r1, #0
 80f8686:	6838      	ldr	r0, [r7, #0]
 80f8688:	f000 f9d2 	bl	80f8a30 <_set>

	return TC_CRYPTO_SUCCESS;
 80f868c:	2301      	movs	r3, #1
}
 80f868e:	4618      	mov	r0, r3
 80f8690:	3710      	adds	r7, #16
 80f8692:	46bd      	mov	sp, r7
 80f8694:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080f8698 <ROTR>:
	0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

static inline unsigned int ROTR(unsigned int a, unsigned int n)
{
 80f8698:	b480      	push	{r7}
 80f869a:	b083      	sub	sp, #12
 80f869c:	af00      	add	r7, sp, #0
 80f869e:	6078      	str	r0, [r7, #4]
 80f86a0:	6039      	str	r1, [r7, #0]
	return (((a) >> n) | ((a) << (32 - n)));
 80f86a2:	687a      	ldr	r2, [r7, #4]
 80f86a4:	683b      	ldr	r3, [r7, #0]
 80f86a6:	fa62 f303 	ror.w	r3, r2, r3
}
 80f86aa:	4618      	mov	r0, r3
 80f86ac:	370c      	adds	r7, #12
 80f86ae:	46bd      	mov	sp, r7
 80f86b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f86b4:	4770      	bx	lr

080f86b6 <BigEndian>:

#define Ch(a, b, c)(((a) & (b)) ^ ((~(a)) & (c)))
#define Maj(a, b, c)(((a) & (b)) ^ ((a) & (c)) ^ ((b) & (c)))

static inline unsigned int BigEndian(const uint8_t **c)
{
 80f86b6:	b480      	push	{r7}
 80f86b8:	b085      	sub	sp, #20
 80f86ba:	af00      	add	r7, sp, #0
 80f86bc:	6078      	str	r0, [r7, #4]
	unsigned int n = 0;
 80f86be:	2300      	movs	r3, #0
 80f86c0:	60fb      	str	r3, [r7, #12]

	n = (((unsigned int)(*((*c)++))) << 24);
 80f86c2:	687b      	ldr	r3, [r7, #4]
 80f86c4:	681b      	ldr	r3, [r3, #0]
 80f86c6:	1c59      	adds	r1, r3, #1
 80f86c8:	687a      	ldr	r2, [r7, #4]
 80f86ca:	6011      	str	r1, [r2, #0]
 80f86cc:	781b      	ldrb	r3, [r3, #0]
 80f86ce:	061b      	lsls	r3, r3, #24
 80f86d0:	60fb      	str	r3, [r7, #12]
	n |= ((unsigned int)(*((*c)++)) << 16);
 80f86d2:	687b      	ldr	r3, [r7, #4]
 80f86d4:	681b      	ldr	r3, [r3, #0]
 80f86d6:	1c59      	adds	r1, r3, #1
 80f86d8:	687a      	ldr	r2, [r7, #4]
 80f86da:	6011      	str	r1, [r2, #0]
 80f86dc:	781b      	ldrb	r3, [r3, #0]
 80f86de:	041b      	lsls	r3, r3, #16
 80f86e0:	68fa      	ldr	r2, [r7, #12]
 80f86e2:	4313      	orrs	r3, r2
 80f86e4:	60fb      	str	r3, [r7, #12]
	n |= ((unsigned int)(*((*c)++)) << 8);
 80f86e6:	687b      	ldr	r3, [r7, #4]
 80f86e8:	681b      	ldr	r3, [r3, #0]
 80f86ea:	1c59      	adds	r1, r3, #1
 80f86ec:	687a      	ldr	r2, [r7, #4]
 80f86ee:	6011      	str	r1, [r2, #0]
 80f86f0:	781b      	ldrb	r3, [r3, #0]
 80f86f2:	021b      	lsls	r3, r3, #8
 80f86f4:	68fa      	ldr	r2, [r7, #12]
 80f86f6:	4313      	orrs	r3, r2
 80f86f8:	60fb      	str	r3, [r7, #12]
	n |= ((unsigned int)(*((*c)++)));
 80f86fa:	687b      	ldr	r3, [r7, #4]
 80f86fc:	681b      	ldr	r3, [r3, #0]
 80f86fe:	1c59      	adds	r1, r3, #1
 80f8700:	687a      	ldr	r2, [r7, #4]
 80f8702:	6011      	str	r1, [r2, #0]
 80f8704:	781b      	ldrb	r3, [r3, #0]
 80f8706:	461a      	mov	r2, r3
 80f8708:	68fb      	ldr	r3, [r7, #12]
 80f870a:	4313      	orrs	r3, r2
 80f870c:	60fb      	str	r3, [r7, #12]
	return n;
 80f870e:	68fb      	ldr	r3, [r7, #12]
}
 80f8710:	4618      	mov	r0, r3
 80f8712:	3714      	adds	r7, #20
 80f8714:	46bd      	mov	sp, r7
 80f8716:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f871a:	4770      	bx	lr

080f871c <compress>:

static void compress(unsigned int *iv, const uint8_t *data)
{
 80f871c:	b590      	push	{r4, r7, lr}
 80f871e:	b0a1      	sub	sp, #132	@ 0x84
 80f8720:	af00      	add	r7, sp, #0
 80f8722:	6078      	str	r0, [r7, #4]
 80f8724:	6039      	str	r1, [r7, #0]
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80f8726:	687b      	ldr	r3, [r7, #4]
 80f8728:	681b      	ldr	r3, [r3, #0]
 80f872a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80f872c:	687b      	ldr	r3, [r7, #4]
 80f872e:	685b      	ldr	r3, [r3, #4]
 80f8730:	67bb      	str	r3, [r7, #120]	@ 0x78
 80f8732:	687b      	ldr	r3, [r7, #4]
 80f8734:	689b      	ldr	r3, [r3, #8]
 80f8736:	677b      	str	r3, [r7, #116]	@ 0x74
 80f8738:	687b      	ldr	r3, [r7, #4]
 80f873a:	68db      	ldr	r3, [r3, #12]
 80f873c:	673b      	str	r3, [r7, #112]	@ 0x70
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 80f873e:	687b      	ldr	r3, [r7, #4]
 80f8740:	691b      	ldr	r3, [r3, #16]
 80f8742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80f8744:	687b      	ldr	r3, [r7, #4]
 80f8746:	695b      	ldr	r3, [r3, #20]
 80f8748:	66bb      	str	r3, [r7, #104]	@ 0x68
 80f874a:	687b      	ldr	r3, [r7, #4]
 80f874c:	699b      	ldr	r3, [r3, #24]
 80f874e:	667b      	str	r3, [r7, #100]	@ 0x64
 80f8750:	687b      	ldr	r3, [r7, #4]
 80f8752:	69db      	ldr	r3, [r3, #28]
 80f8754:	663b      	str	r3, [r7, #96]	@ 0x60

	for (i = 0; i < 16; ++i) {
 80f8756:	2300      	movs	r3, #0
 80f8758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80f875a:	e06b      	b.n	80f8834 <compress+0x118>
		n = BigEndian(&data);
 80f875c:	463b      	mov	r3, r7
 80f875e:	4618      	mov	r0, r3
 80f8760:	f7ff ffa9 	bl	80f86b6 <BigEndian>
 80f8764:	64b8      	str	r0, [r7, #72]	@ 0x48
		t1 = work_space[i] = n;
 80f8766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f8768:	009b      	lsls	r3, r3, #2
 80f876a:	3380      	adds	r3, #128	@ 0x80
 80f876c:	443b      	add	r3, r7
 80f876e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80f8770:	f843 2c78 	str.w	r2, [r3, #-120]
 80f8774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f8776:	009b      	lsls	r3, r3, #2
 80f8778:	3380      	adds	r3, #128	@ 0x80
 80f877a:	443b      	add	r3, r7
 80f877c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80f8780:	653b      	str	r3, [r7, #80]	@ 0x50
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80f8782:	2106      	movs	r1, #6
 80f8784:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f8786:	f7ff ff87 	bl	80f8698 <ROTR>
 80f878a:	4604      	mov	r4, r0
 80f878c:	210b      	movs	r1, #11
 80f878e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f8790:	f7ff ff82 	bl	80f8698 <ROTR>
 80f8794:	4603      	mov	r3, r0
 80f8796:	405c      	eors	r4, r3
 80f8798:	2119      	movs	r1, #25
 80f879a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f879c:	f7ff ff7c 	bl	80f8698 <ROTR>
 80f87a0:	4603      	mov	r3, r0
 80f87a2:	ea84 0203 	eor.w	r2, r4, r3
 80f87a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f87a8:	441a      	add	r2, r3
 80f87aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80f87ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80f87ae:	4019      	ands	r1, r3
 80f87b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80f87b2:	43d8      	mvns	r0, r3
 80f87b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80f87b6:	4003      	ands	r3, r0
 80f87b8:	404b      	eors	r3, r1
 80f87ba:	441a      	add	r2, r3
 80f87bc:	499b      	ldr	r1, [pc, #620]	@ (80f8a2c <compress+0x310>)
 80f87be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f87c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80f87c4:	4413      	add	r3, r2
 80f87c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f87c8:	4413      	add	r3, r2
 80f87ca:	653b      	str	r3, [r7, #80]	@ 0x50
		t2 = Sigma0(a) + Maj(a, b, c);
 80f87cc:	2102      	movs	r1, #2
 80f87ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f87d0:	f7ff ff62 	bl	80f8698 <ROTR>
 80f87d4:	4604      	mov	r4, r0
 80f87d6:	210d      	movs	r1, #13
 80f87d8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f87da:	f7ff ff5d 	bl	80f8698 <ROTR>
 80f87de:	4603      	mov	r3, r0
 80f87e0:	405c      	eors	r4, r3
 80f87e2:	2116      	movs	r1, #22
 80f87e4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f87e6:	f7ff ff57 	bl	80f8698 <ROTR>
 80f87ea:	4603      	mov	r3, r0
 80f87ec:	ea84 0203 	eor.w	r2, r4, r3
 80f87f0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80f87f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f87f4:	4059      	eors	r1, r3
 80f87f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80f87f8:	4019      	ands	r1, r3
 80f87fa:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80f87fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f87fe:	4003      	ands	r3, r0
 80f8800:	404b      	eors	r3, r1
 80f8802:	4413      	add	r3, r2
 80f8804:	64fb      	str	r3, [r7, #76]	@ 0x4c
		h = g; g = f; f = e; e = d + t1;
 80f8806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80f8808:	663b      	str	r3, [r7, #96]	@ 0x60
 80f880a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80f880c:	667b      	str	r3, [r7, #100]	@ 0x64
 80f880e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80f8810:	66bb      	str	r3, [r7, #104]	@ 0x68
 80f8812:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80f8814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f8816:	4413      	add	r3, r2
 80f8818:	66fb      	str	r3, [r7, #108]	@ 0x6c
		d = c; c = b; b = a; a = t1 + t2;
 80f881a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f881c:	673b      	str	r3, [r7, #112]	@ 0x70
 80f881e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80f8820:	677b      	str	r3, [r7, #116]	@ 0x74
 80f8822:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80f8824:	67bb      	str	r3, [r7, #120]	@ 0x78
 80f8826:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f8828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80f882a:	4413      	add	r3, r2
 80f882c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for (i = 0; i < 16; ++i) {
 80f882e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f8830:	3301      	adds	r3, #1
 80f8832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80f8834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f8836:	2b0f      	cmp	r3, #15
 80f8838:	d990      	bls.n	80f875c <compress+0x40>
	}

	for ( ; i < 64; ++i) {
 80f883a:	e0b0      	b.n	80f899e <compress+0x282>
		s0 = work_space[(i+1)&0x0f];
 80f883c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f883e:	3301      	adds	r3, #1
 80f8840:	f003 030f 	and.w	r3, r3, #15
 80f8844:	009b      	lsls	r3, r3, #2
 80f8846:	3380      	adds	r3, #128	@ 0x80
 80f8848:	443b      	add	r3, r7
 80f884a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80f884e:	65bb      	str	r3, [r7, #88]	@ 0x58
		s0 = sigma0(s0);
 80f8850:	2107      	movs	r1, #7
 80f8852:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80f8854:	f7ff ff20 	bl	80f8698 <ROTR>
 80f8858:	4604      	mov	r4, r0
 80f885a:	2112      	movs	r1, #18
 80f885c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80f885e:	f7ff ff1b 	bl	80f8698 <ROTR>
 80f8862:	4603      	mov	r3, r0
 80f8864:	ea84 0203 	eor.w	r2, r4, r3
 80f8868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f886a:	08db      	lsrs	r3, r3, #3
 80f886c:	4053      	eors	r3, r2
 80f886e:	65bb      	str	r3, [r7, #88]	@ 0x58
		s1 = work_space[(i+14)&0x0f];
 80f8870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f8872:	330e      	adds	r3, #14
 80f8874:	f003 030f 	and.w	r3, r3, #15
 80f8878:	009b      	lsls	r3, r3, #2
 80f887a:	3380      	adds	r3, #128	@ 0x80
 80f887c:	443b      	add	r3, r7
 80f887e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80f8882:	657b      	str	r3, [r7, #84]	@ 0x54
		s1 = sigma1(s1);
 80f8884:	2111      	movs	r1, #17
 80f8886:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80f8888:	f7ff ff06 	bl	80f8698 <ROTR>
 80f888c:	4604      	mov	r4, r0
 80f888e:	2113      	movs	r1, #19
 80f8890:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80f8892:	f7ff ff01 	bl	80f8698 <ROTR>
 80f8896:	4603      	mov	r3, r0
 80f8898:	ea84 0203 	eor.w	r2, r4, r3
 80f889c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f889e:	0a9b      	lsrs	r3, r3, #10
 80f88a0:	4053      	eors	r3, r2
 80f88a2:	657b      	str	r3, [r7, #84]	@ 0x54

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80f88a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f88a6:	f003 030f 	and.w	r3, r3, #15
 80f88aa:	009b      	lsls	r3, r3, #2
 80f88ac:	3380      	adds	r3, #128	@ 0x80
 80f88ae:	443b      	add	r3, r7
 80f88b0:	f853 1c78 	ldr.w	r1, [r3, #-120]
 80f88b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80f88b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f88b8:	441a      	add	r2, r3
 80f88ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f88bc:	3309      	adds	r3, #9
 80f88be:	f003 030f 	and.w	r3, r3, #15
 80f88c2:	009b      	lsls	r3, r3, #2
 80f88c4:	3380      	adds	r3, #128	@ 0x80
 80f88c6:	443b      	add	r3, r7
 80f88c8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80f88cc:	4413      	add	r3, r2
 80f88ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80f88d0:	f002 020f 	and.w	r2, r2, #15
 80f88d4:	4419      	add	r1, r3
 80f88d6:	0093      	lsls	r3, r2, #2
 80f88d8:	3380      	adds	r3, #128	@ 0x80
 80f88da:	443b      	add	r3, r7
 80f88dc:	f843 1c78 	str.w	r1, [r3, #-120]
 80f88e0:	0093      	lsls	r3, r2, #2
 80f88e2:	3380      	adds	r3, #128	@ 0x80
 80f88e4:	443b      	add	r3, r7
 80f88e6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80f88ea:	653b      	str	r3, [r7, #80]	@ 0x50
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80f88ec:	2106      	movs	r1, #6
 80f88ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f88f0:	f7ff fed2 	bl	80f8698 <ROTR>
 80f88f4:	4604      	mov	r4, r0
 80f88f6:	210b      	movs	r1, #11
 80f88f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f88fa:	f7ff fecd 	bl	80f8698 <ROTR>
 80f88fe:	4603      	mov	r3, r0
 80f8900:	405c      	eors	r4, r3
 80f8902:	2119      	movs	r1, #25
 80f8904:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80f8906:	f7ff fec7 	bl	80f8698 <ROTR>
 80f890a:	4603      	mov	r3, r0
 80f890c:	ea84 0203 	eor.w	r2, r4, r3
 80f8910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f8912:	441a      	add	r2, r3
 80f8914:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80f8916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80f8918:	4019      	ands	r1, r3
 80f891a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80f891c:	43d8      	mvns	r0, r3
 80f891e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80f8920:	4003      	ands	r3, r0
 80f8922:	404b      	eors	r3, r1
 80f8924:	441a      	add	r2, r3
 80f8926:	4941      	ldr	r1, [pc, #260]	@ (80f8a2c <compress+0x310>)
 80f8928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f892a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80f892e:	4413      	add	r3, r2
 80f8930:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f8932:	4413      	add	r3, r2
 80f8934:	653b      	str	r3, [r7, #80]	@ 0x50
		t2 = Sigma0(a) + Maj(a, b, c);
 80f8936:	2102      	movs	r1, #2
 80f8938:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f893a:	f7ff fead 	bl	80f8698 <ROTR>
 80f893e:	4604      	mov	r4, r0
 80f8940:	210d      	movs	r1, #13
 80f8942:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f8944:	f7ff fea8 	bl	80f8698 <ROTR>
 80f8948:	4603      	mov	r3, r0
 80f894a:	405c      	eors	r4, r3
 80f894c:	2116      	movs	r1, #22
 80f894e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80f8950:	f7ff fea2 	bl	80f8698 <ROTR>
 80f8954:	4603      	mov	r3, r0
 80f8956:	ea84 0203 	eor.w	r2, r4, r3
 80f895a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80f895c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f895e:	4059      	eors	r1, r3
 80f8960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80f8962:	4019      	ands	r1, r3
 80f8964:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80f8966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f8968:	4003      	ands	r3, r0
 80f896a:	404b      	eors	r3, r1
 80f896c:	4413      	add	r3, r2
 80f896e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		h = g; g = f; f = e; e = d + t1;
 80f8970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80f8972:	663b      	str	r3, [r7, #96]	@ 0x60
 80f8974:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80f8976:	667b      	str	r3, [r7, #100]	@ 0x64
 80f8978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80f897a:	66bb      	str	r3, [r7, #104]	@ 0x68
 80f897c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80f897e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f8980:	4413      	add	r3, r2
 80f8982:	66fb      	str	r3, [r7, #108]	@ 0x6c
		d = c; c = b; b = a; a = t1 + t2;
 80f8984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80f8986:	673b      	str	r3, [r7, #112]	@ 0x70
 80f8988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80f898a:	677b      	str	r3, [r7, #116]	@ 0x74
 80f898c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80f898e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80f8990:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80f8992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80f8994:	4413      	add	r3, r2
 80f8996:	67fb      	str	r3, [r7, #124]	@ 0x7c
	for ( ; i < 64; ++i) {
 80f8998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f899a:	3301      	adds	r3, #1
 80f899c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80f899e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f89a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80f89a2:	f67f af4b 	bls.w	80f883c <compress+0x120>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 80f89a6:	687b      	ldr	r3, [r7, #4]
 80f89a8:	681a      	ldr	r2, [r3, #0]
 80f89aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80f89ac:	441a      	add	r2, r3
 80f89ae:	687b      	ldr	r3, [r7, #4]
 80f89b0:	601a      	str	r2, [r3, #0]
 80f89b2:	687b      	ldr	r3, [r7, #4]
 80f89b4:	3304      	adds	r3, #4
 80f89b6:	6819      	ldr	r1, [r3, #0]
 80f89b8:	687b      	ldr	r3, [r7, #4]
 80f89ba:	3304      	adds	r3, #4
 80f89bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80f89be:	440a      	add	r2, r1
 80f89c0:	601a      	str	r2, [r3, #0]
 80f89c2:	687b      	ldr	r3, [r7, #4]
 80f89c4:	3308      	adds	r3, #8
 80f89c6:	6819      	ldr	r1, [r3, #0]
 80f89c8:	687b      	ldr	r3, [r7, #4]
 80f89ca:	3308      	adds	r3, #8
 80f89cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80f89ce:	440a      	add	r2, r1
 80f89d0:	601a      	str	r2, [r3, #0]
 80f89d2:	687b      	ldr	r3, [r7, #4]
 80f89d4:	330c      	adds	r3, #12
 80f89d6:	6819      	ldr	r1, [r3, #0]
 80f89d8:	687b      	ldr	r3, [r7, #4]
 80f89da:	330c      	adds	r3, #12
 80f89dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80f89de:	440a      	add	r2, r1
 80f89e0:	601a      	str	r2, [r3, #0]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 80f89e2:	687b      	ldr	r3, [r7, #4]
 80f89e4:	3310      	adds	r3, #16
 80f89e6:	6819      	ldr	r1, [r3, #0]
 80f89e8:	687b      	ldr	r3, [r7, #4]
 80f89ea:	3310      	adds	r3, #16
 80f89ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80f89ee:	440a      	add	r2, r1
 80f89f0:	601a      	str	r2, [r3, #0]
 80f89f2:	687b      	ldr	r3, [r7, #4]
 80f89f4:	3314      	adds	r3, #20
 80f89f6:	6819      	ldr	r1, [r3, #0]
 80f89f8:	687b      	ldr	r3, [r7, #4]
 80f89fa:	3314      	adds	r3, #20
 80f89fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80f89fe:	440a      	add	r2, r1
 80f8a00:	601a      	str	r2, [r3, #0]
 80f8a02:	687b      	ldr	r3, [r7, #4]
 80f8a04:	3318      	adds	r3, #24
 80f8a06:	6819      	ldr	r1, [r3, #0]
 80f8a08:	687b      	ldr	r3, [r7, #4]
 80f8a0a:	3318      	adds	r3, #24
 80f8a0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80f8a0e:	440a      	add	r2, r1
 80f8a10:	601a      	str	r2, [r3, #0]
 80f8a12:	687b      	ldr	r3, [r7, #4]
 80f8a14:	331c      	adds	r3, #28
 80f8a16:	6819      	ldr	r1, [r3, #0]
 80f8a18:	687b      	ldr	r3, [r7, #4]
 80f8a1a:	331c      	adds	r3, #28
 80f8a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80f8a1e:	440a      	add	r2, r1
 80f8a20:	601a      	str	r2, [r3, #0]
}
 80f8a22:	bf00      	nop
 80f8a24:	3784      	adds	r7, #132	@ 0x84
 80f8a26:	46bd      	mov	sp, r7
 80f8a28:	bd90      	pop	{r4, r7, pc}
 80f8a2a:	bf00      	nop
 80f8a2c:	080fafa0 	.word	0x080fafa0

080f8a30 <_set>:
		return TC_CRYPTO_FAIL;
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
 80f8a30:	b580      	push	{r7, lr}
 80f8a32:	b084      	sub	sp, #16
 80f8a34:	af00      	add	r7, sp, #0
 80f8a36:	60f8      	str	r0, [r7, #12]
 80f8a38:	460b      	mov	r3, r1
 80f8a3a:	607a      	str	r2, [r7, #4]
 80f8a3c:	72fb      	strb	r3, [r7, #11]
	(void)memset(to, val, len);
 80f8a3e:	7afb      	ldrb	r3, [r7, #11]
 80f8a40:	687a      	ldr	r2, [r7, #4]
 80f8a42:	4619      	mov	r1, r3
 80f8a44:	68f8      	ldr	r0, [r7, #12]
 80f8a46:	f001 f9e8 	bl	80f9e1a <memset>
}
 80f8a4a:	bf00      	nop
 80f8a4c:	3710      	adds	r7, #16
 80f8a4e:	46bd      	mov	sp, r7
 80f8a50:	bd80      	pop	{r7, pc}

080f8a52 <buffer_append_uint24_little>:
void buffer_append_uint24_big(uint32_t source, uint8_t *dst){
    dst[0] = (uint8_t)(source>>16);
    dst[1] = (uint8_t)(source>>8);
    dst[2] = (uint8_t)(source);
}
void buffer_append_uint24_little(uint32_t source, uint8_t *dst){
 80f8a52:	b480      	push	{r7}
 80f8a54:	b083      	sub	sp, #12
 80f8a56:	af00      	add	r7, sp, #0
 80f8a58:	6078      	str	r0, [r7, #4]
 80f8a5a:	6039      	str	r1, [r7, #0]
    dst[0] = (uint8_t)(source);
 80f8a5c:	687b      	ldr	r3, [r7, #4]
 80f8a5e:	b2da      	uxtb	r2, r3
 80f8a60:	683b      	ldr	r3, [r7, #0]
 80f8a62:	701a      	strb	r2, [r3, #0]
    dst[1] = (uint8_t)(source>>8);
 80f8a64:	687b      	ldr	r3, [r7, #4]
 80f8a66:	0a1a      	lsrs	r2, r3, #8
 80f8a68:	683b      	ldr	r3, [r7, #0]
 80f8a6a:	3301      	adds	r3, #1
 80f8a6c:	b2d2      	uxtb	r2, r2
 80f8a6e:	701a      	strb	r2, [r3, #0]
    dst[2] = (uint8_t)(source>>16);
 80f8a70:	687b      	ldr	r3, [r7, #4]
 80f8a72:	0c1a      	lsrs	r2, r3, #16
 80f8a74:	683b      	ldr	r3, [r7, #0]
 80f8a76:	3302      	adds	r3, #2
 80f8a78:	b2d2      	uxtb	r2, r2
 80f8a7a:	701a      	strb	r2, [r3, #0]
}
 80f8a7c:	bf00      	nop
 80f8a7e:	370c      	adds	r7, #12
 80f8a80:	46bd      	mov	sp, r7
 80f8a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8a86:	4770      	bx	lr

080f8a88 <buffer_extract_uint24_little>:
    result |= (uint32_t)(src[0]<<16);
    result |= (uint32_t)(src[1]<<8);
    result |= (uint32_t)(src[2]);
    return result;
}
uint32_t buffer_extract_uint24_little(uint8_t const *src){
 80f8a88:	b480      	push	{r7}
 80f8a8a:	b085      	sub	sp, #20
 80f8a8c:	af00      	add	r7, sp, #0
 80f8a8e:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80f8a90:	2300      	movs	r3, #0
 80f8a92:	60fb      	str	r3, [r7, #12]
    result |= (uint32_t)(src[0]);
 80f8a94:	687b      	ldr	r3, [r7, #4]
 80f8a96:	781b      	ldrb	r3, [r3, #0]
 80f8a98:	461a      	mov	r2, r3
 80f8a9a:	68fb      	ldr	r3, [r7, #12]
 80f8a9c:	4313      	orrs	r3, r2
 80f8a9e:	60fb      	str	r3, [r7, #12]
    result |= (uint32_t)(src[1]<<8);
 80f8aa0:	687b      	ldr	r3, [r7, #4]
 80f8aa2:	3301      	adds	r3, #1
 80f8aa4:	781b      	ldrb	r3, [r3, #0]
 80f8aa6:	021b      	lsls	r3, r3, #8
 80f8aa8:	68fa      	ldr	r2, [r7, #12]
 80f8aaa:	4313      	orrs	r3, r2
 80f8aac:	60fb      	str	r3, [r7, #12]
    result |= (uint32_t)(src[2]<<16);
 80f8aae:	687b      	ldr	r3, [r7, #4]
 80f8ab0:	3302      	adds	r3, #2
 80f8ab2:	781b      	ldrb	r3, [r3, #0]
 80f8ab4:	041b      	lsls	r3, r3, #16
 80f8ab6:	68fa      	ldr	r2, [r7, #12]
 80f8ab8:	4313      	orrs	r3, r2
 80f8aba:	60fb      	str	r3, [r7, #12]
    return result;
 80f8abc:	68fb      	ldr	r3, [r7, #12]
}
 80f8abe:	4618      	mov	r0, r3
 80f8ac0:	3714      	adds	r7, #20
 80f8ac2:	46bd      	mov	sp, r7
 80f8ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8ac8:	4770      	bx	lr

080f8aca <calc_crc32>:
    return result;
    
}


uint32_t calc_crc32(const volatile uint8_t *bytes, uint32_t size, uint32_t seed, uint32_t crc) {
 80f8aca:	b480      	push	{r7}
 80f8acc:	b089      	sub	sp, #36	@ 0x24
 80f8ace:	af00      	add	r7, sp, #0
 80f8ad0:	60f8      	str	r0, [r7, #12]
 80f8ad2:	60b9      	str	r1, [r7, #8]
 80f8ad4:	607a      	str	r2, [r7, #4]
 80f8ad6:	603b      	str	r3, [r7, #0]
    for (uint32_t j=0;j<size;j++) {
 80f8ad8:	2300      	movs	r3, #0
 80f8ada:	61fb      	str	r3, [r7, #28]
 80f8adc:	e021      	b.n	80f8b22 <calc_crc32+0x58>
        uint8_t b = bytes[j];
 80f8ade:	68fa      	ldr	r2, [r7, #12]
 80f8ae0:	69fb      	ldr	r3, [r7, #28]
 80f8ae2:	4413      	add	r3, r2
 80f8ae4:	781b      	ldrb	r3, [r3, #0]
 80f8ae6:	75fb      	strb	r3, [r7, #23]
        crc ^= (uint32_t) (b << 24); /* move byte into MSB of 32bit CRC */
 80f8ae8:	7dfb      	ldrb	r3, [r7, #23]
 80f8aea:	061b      	lsls	r3, r3, #24
 80f8aec:	683a      	ldr	r2, [r7, #0]
 80f8aee:	4053      	eors	r3, r2
 80f8af0:	603b      	str	r3, [r7, #0]
        for (int i = 0; i < 8; i++) {
 80f8af2:	2300      	movs	r3, #0
 80f8af4:	61bb      	str	r3, [r7, #24]
 80f8af6:	e00e      	b.n	80f8b16 <calc_crc32+0x4c>
            if ((crc & 0x80000000) != 0) {/* test for MSB = bit 31 */
 80f8af8:	683b      	ldr	r3, [r7, #0]
 80f8afa:	2b00      	cmp	r3, #0
 80f8afc:	da05      	bge.n	80f8b0a <calc_crc32+0x40>
                crc = (uint32_t) ((crc << 1) ^ seed);
 80f8afe:	683b      	ldr	r3, [r7, #0]
 80f8b00:	005b      	lsls	r3, r3, #1
 80f8b02:	687a      	ldr	r2, [r7, #4]
 80f8b04:	4053      	eors	r3, r2
 80f8b06:	603b      	str	r3, [r7, #0]
 80f8b08:	e002      	b.n	80f8b10 <calc_crc32+0x46>
            } else {
                crc <<= 1;
 80f8b0a:	683b      	ldr	r3, [r7, #0]
 80f8b0c:	005b      	lsls	r3, r3, #1
 80f8b0e:	603b      	str	r3, [r7, #0]
        for (int i = 0; i < 8; i++) {
 80f8b10:	69bb      	ldr	r3, [r7, #24]
 80f8b12:	3301      	adds	r3, #1
 80f8b14:	61bb      	str	r3, [r7, #24]
 80f8b16:	69bb      	ldr	r3, [r7, #24]
 80f8b18:	2b07      	cmp	r3, #7
 80f8b1a:	dded      	ble.n	80f8af8 <calc_crc32+0x2e>
    for (uint32_t j=0;j<size;j++) {
 80f8b1c:	69fb      	ldr	r3, [r7, #28]
 80f8b1e:	3301      	adds	r3, #1
 80f8b20:	61fb      	str	r3, [r7, #28]
 80f8b22:	69fa      	ldr	r2, [r7, #28]
 80f8b24:	68bb      	ldr	r3, [r7, #8]
 80f8b26:	429a      	cmp	r2, r3
 80f8b28:	d3d9      	bcc.n	80f8ade <calc_crc32+0x14>
            }
        }
    }
    return crc;
 80f8b2a:	683b      	ldr	r3, [r7, #0]
}
 80f8b2c:	4618      	mov	r0, r3
 80f8b2e:	3724      	adds	r7, #36	@ 0x24
 80f8b30:	46bd      	mov	sp, r7
 80f8b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8b36:	4770      	bx	lr

080f8b38 <calc_crc16>:

uint16_t calc_crc16(const volatile uint8_t *bytes, uint32_t size, uint16_t seed, uint16_t crc){
 80f8b38:	b480      	push	{r7}
 80f8b3a:	b089      	sub	sp, #36	@ 0x24
 80f8b3c:	af00      	add	r7, sp, #0
 80f8b3e:	60f8      	str	r0, [r7, #12]
 80f8b40:	60b9      	str	r1, [r7, #8]
 80f8b42:	4611      	mov	r1, r2
 80f8b44:	461a      	mov	r2, r3
 80f8b46:	460b      	mov	r3, r1
 80f8b48:	80fb      	strh	r3, [r7, #6]
 80f8b4a:	4613      	mov	r3, r2
 80f8b4c:	80bb      	strh	r3, [r7, #4]
    for (uint32_t j=0;j<size;j++) {
 80f8b4e:	2300      	movs	r3, #0
 80f8b50:	61fb      	str	r3, [r7, #28]
 80f8b52:	e028      	b.n	80f8ba6 <calc_crc16+0x6e>
        uint8_t b = bytes[j];
 80f8b54:	68fa      	ldr	r2, [r7, #12]
 80f8b56:	69fb      	ldr	r3, [r7, #28]
 80f8b58:	4413      	add	r3, r2
 80f8b5a:	781b      	ldrb	r3, [r3, #0]
 80f8b5c:	75fb      	strb	r3, [r7, #23]
        crc ^= (uint16_t) (b << 8); /* move byte into MSB of 16bit CRC */
 80f8b5e:	7dfb      	ldrb	r3, [r7, #23]
 80f8b60:	b29b      	uxth	r3, r3
 80f8b62:	021b      	lsls	r3, r3, #8
 80f8b64:	b29a      	uxth	r2, r3
 80f8b66:	88bb      	ldrh	r3, [r7, #4]
 80f8b68:	4053      	eors	r3, r2
 80f8b6a:	80bb      	strh	r3, [r7, #4]
        for (int i = 0; i < 8; i++) {
 80f8b6c:	2300      	movs	r3, #0
 80f8b6e:	61bb      	str	r3, [r7, #24]
 80f8b70:	e013      	b.n	80f8b9a <calc_crc16+0x62>
            if ((crc & 0x8000) != 0) {/* test for MSB = bit 15 */
 80f8b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80f8b76:	2b00      	cmp	r3, #0
 80f8b78:	da09      	bge.n	80f8b8e <calc_crc16+0x56>
                crc = (uint16_t) ((crc << 1) ^ seed);
 80f8b7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80f8b7e:	005b      	lsls	r3, r3, #1
 80f8b80:	b21a      	sxth	r2, r3
 80f8b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80f8b86:	4053      	eors	r3, r2
 80f8b88:	b21b      	sxth	r3, r3
 80f8b8a:	80bb      	strh	r3, [r7, #4]
 80f8b8c:	e002      	b.n	80f8b94 <calc_crc16+0x5c>
            } else {
                crc <<= 1;
 80f8b8e:	88bb      	ldrh	r3, [r7, #4]
 80f8b90:	005b      	lsls	r3, r3, #1
 80f8b92:	80bb      	strh	r3, [r7, #4]
        for (int i = 0; i < 8; i++) {
 80f8b94:	69bb      	ldr	r3, [r7, #24]
 80f8b96:	3301      	adds	r3, #1
 80f8b98:	61bb      	str	r3, [r7, #24]
 80f8b9a:	69bb      	ldr	r3, [r7, #24]
 80f8b9c:	2b07      	cmp	r3, #7
 80f8b9e:	dde8      	ble.n	80f8b72 <calc_crc16+0x3a>
    for (uint32_t j=0;j<size;j++) {
 80f8ba0:	69fb      	ldr	r3, [r7, #28]
 80f8ba2:	3301      	adds	r3, #1
 80f8ba4:	61fb      	str	r3, [r7, #28]
 80f8ba6:	69fa      	ldr	r2, [r7, #28]
 80f8ba8:	68bb      	ldr	r3, [r7, #8]
 80f8baa:	429a      	cmp	r2, r3
 80f8bac:	d3d2      	bcc.n	80f8b54 <calc_crc16+0x1c>
            }
        }
    }
    return crc;
 80f8bae:	88bb      	ldrh	r3, [r7, #4]
}
 80f8bb0:	4618      	mov	r0, r3
 80f8bb2:	3724      	adds	r7, #36	@ 0x24
 80f8bb4:	46bd      	mov	sp, r7
 80f8bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8bba:	4770      	bx	lr

080f8bbc <mem_init>:

/* Static Variables -----------------------------------------------------------------*/
static nand_t nand;

void mem_init( void )
{
 80f8bbc:	b480      	push	{r7}
 80f8bbe:	af00      	add	r7, sp, #0
	/* Initialize nand_t structure with pointers to implementation functions */
	nand.base_address    = 0;
 80f8bc0:	4b0f      	ldr	r3, [pc, #60]	@ (80f8c00 <mem_init+0x44>)
 80f8bc2:	2200      	movs	r2, #0
 80f8bc4:	619a      	str	r2, [r3, #24]
	nand.check_func      = sf_flash_check;
 80f8bc6:	4b0e      	ldr	r3, [pc, #56]	@ (80f8c00 <mem_init+0x44>)
 80f8bc8:	4a0e      	ldr	r2, [pc, #56]	@ (80f8c04 <mem_init+0x48>)
 80f8bca:	615a      	str	r2, [r3, #20]
	nand.context         = NULL;
 80f8bcc:	4b0c      	ldr	r3, [pc, #48]	@ (80f8c00 <mem_init+0x44>)
 80f8bce:	2200      	movs	r2, #0
 80f8bd0:	621a      	str	r2, [r3, #32]
	nand.erase_page_func = sf_flash_erase_page;
 80f8bd2:	4b0b      	ldr	r3, [pc, #44]	@ (80f8c00 <mem_init+0x44>)
 80f8bd4:	4a0c      	ldr	r2, [pc, #48]	@ (80f8c08 <mem_init+0x4c>)
 80f8bd6:	60da      	str	r2, [r3, #12]
	nand.get_page_func   = sf_flash_get_page_index;
 80f8bd8:	4b09      	ldr	r3, [pc, #36]	@ (80f8c00 <mem_init+0x44>)
 80f8bda:	4a0c      	ldr	r2, [pc, #48]	@ (80f8c0c <mem_init+0x50>)
 80f8bdc:	601a      	str	r2, [r3, #0]
	nand.log_func        = NULL;
 80f8bde:	4b08      	ldr	r3, [pc, #32]	@ (80f8c00 <mem_init+0x44>)
 80f8be0:	2200      	movs	r2, #0
 80f8be2:	611a      	str	r2, [r3, #16]
	nand.min_size_write  = MEM_FLASH_WRITE_ALIGNMENT;
 80f8be4:	4b06      	ldr	r3, [pc, #24]	@ (80f8c00 <mem_init+0x44>)
 80f8be6:	2210      	movs	r2, #16
 80f8be8:	61da      	str	r2, [r3, #28]
	nand.read_func       = sf_flash_read;
 80f8bea:	4b05      	ldr	r3, [pc, #20]	@ (80f8c00 <mem_init+0x44>)
 80f8bec:	4a08      	ldr	r2, [pc, #32]	@ (80f8c10 <mem_init+0x54>)
 80f8bee:	609a      	str	r2, [r3, #8]
	nand.write_func      = sf_flash_write;
 80f8bf0:	4b03      	ldr	r3, [pc, #12]	@ (80f8c00 <mem_init+0x44>)
 80f8bf2:	4a08      	ldr	r2, [pc, #32]	@ (80f8c14 <mem_init+0x58>)
 80f8bf4:	605a      	str	r2, [r3, #4]
}
 80f8bf6:	bf00      	nop
 80f8bf8:	46bd      	mov	sp, r7
 80f8bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8bfe:	4770      	bx	lr
 80f8c00:	20002998 	.word	0x20002998
 80f8c04:	080f980d 	.word	0x080f980d
 80f8c08:	080f9951 	.word	0x080f9951
 80f8c0c:	080f977d 	.word	0x080f977d
 80f8c10:	080f98d9 	.word	0x080f98d9
 80f8c14:	080f982b 	.word	0x080f982b

080f8c18 <mem_read>:

int mem_read( uint32_t address, void* data, uint32_t size) {
 80f8c18:	b580      	push	{r7, lr}
 80f8c1a:	b084      	sub	sp, #16
 80f8c1c:	af00      	add	r7, sp, #0
 80f8c1e:	60f8      	str	r0, [r7, #12]
 80f8c20:	60b9      	str	r1, [r7, #8]
 80f8c22:	607a      	str	r2, [r7, #4]

	if (address >= MEM_FLASH_END_ADDRESS || (address +size)>=MEM_FLASH_END_ADDRESS) {
 80f8c24:	68fb      	ldr	r3, [r7, #12]
 80f8c26:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80f8c2a:	d205      	bcs.n	80f8c38 <mem_read+0x20>
 80f8c2c:	68fa      	ldr	r2, [r7, #12]
 80f8c2e:	687b      	ldr	r3, [r7, #4]
 80f8c30:	4413      	add	r3, r2
 80f8c32:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80f8c36:	d302      	bcc.n	80f8c3e <mem_read+0x26>
        return -1;
 80f8c38:	f04f 33ff 	mov.w	r3, #4294967295
 80f8c3c:	e006      	b.n	80f8c4c <mem_read+0x34>
    }

    return sf_flash_read(address, data, size, NULL);
 80f8c3e:	2300      	movs	r3, #0
 80f8c40:	687a      	ldr	r2, [r7, #4]
 80f8c42:	68b9      	ldr	r1, [r7, #8]
 80f8c44:	68f8      	ldr	r0, [r7, #12]
 80f8c46:	f000 fe47 	bl	80f98d8 <sf_flash_read>
 80f8c4a:	4603      	mov	r3, r0
}
 80f8c4c:	4618      	mov	r0, r3
 80f8c4e:	3710      	adds	r7, #16
 80f8c50:	46bd      	mov	sp, r7
 80f8c52:	bd80      	pop	{r7, pc}

080f8c54 <mem_copy>:

int mem_copy(uint32_t src_address, uint32_t dst_address,uint32_t size) {
 80f8c54:	b580      	push	{r7, lr}
 80f8c56:	b088      	sub	sp, #32
 80f8c58:	af02      	add	r7, sp, #8
 80f8c5a:	60f8      	str	r0, [r7, #12]
 80f8c5c:	60b9      	str	r1, [r7, #8]
 80f8c5e:	607a      	str	r2, [r7, #4]
	uint8_t status = nand_write_erase(&nand,dst_address,(const void*)src_address,size,true);
 80f8c60:	68fa      	ldr	r2, [r7, #12]
 80f8c62:	2301      	movs	r3, #1
 80f8c64:	9300      	str	r3, [sp, #0]
 80f8c66:	687b      	ldr	r3, [r7, #4]
 80f8c68:	68b9      	ldr	r1, [r7, #8]
 80f8c6a:	4807      	ldr	r0, [pc, #28]	@ (80f8c88 <mem_copy+0x34>)
 80f8c6c:	f7fd fcfc 	bl	80f6668 <nand_write_erase>
 80f8c70:	4603      	mov	r3, r0
 80f8c72:	75fb      	strb	r3, [r7, #23]
	if (status == NAND_STATUS_SUCCESS) {
 80f8c74:	7dfb      	ldrb	r3, [r7, #23]
 80f8c76:	2b00      	cmp	r3, #0
 80f8c78:	d101      	bne.n	80f8c7e <mem_copy+0x2a>
		return 0;
 80f8c7a:	2300      	movs	r3, #0
 80f8c7c:	e000      	b.n	80f8c80 <mem_copy+0x2c>
	} else {
		return status;
 80f8c7e:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80f8c80:	4618      	mov	r0, r3
 80f8c82:	3718      	adds	r7, #24
 80f8c84:	46bd      	mov	sp, r7
 80f8c86:	bd80      	pop	{r7, pc}
 80f8c88:	20002998 	.word	0x20002998

080f8c8c <mem_write>:

int mem_write(uint32_t address, const void *data,uint32_t size) {
 80f8c8c:	b580      	push	{r7, lr}
 80f8c8e:	b088      	sub	sp, #32
 80f8c90:	af02      	add	r7, sp, #8
 80f8c92:	60f8      	str	r0, [r7, #12]
 80f8c94:	60b9      	str	r1, [r7, #8]
 80f8c96:	607a      	str	r2, [r7, #4]

	uint8_t status = nand_write_erase(&nand,address,data,size,true);
 80f8c98:	2301      	movs	r3, #1
 80f8c9a:	9300      	str	r3, [sp, #0]
 80f8c9c:	687b      	ldr	r3, [r7, #4]
 80f8c9e:	68ba      	ldr	r2, [r7, #8]
 80f8ca0:	68f9      	ldr	r1, [r7, #12]
 80f8ca2:	4807      	ldr	r0, [pc, #28]	@ (80f8cc0 <mem_write+0x34>)
 80f8ca4:	f7fd fce0 	bl	80f6668 <nand_write_erase>
 80f8ca8:	4603      	mov	r3, r0
 80f8caa:	75fb      	strb	r3, [r7, #23]

	if (status == NAND_STATUS_SUCCESS) {
 80f8cac:	7dfb      	ldrb	r3, [r7, #23]
 80f8cae:	2b00      	cmp	r3, #0
 80f8cb0:	d101      	bne.n	80f8cb6 <mem_write+0x2a>
		return 0;
 80f8cb2:	2300      	movs	r3, #0
 80f8cb4:	e000      	b.n	80f8cb8 <mem_write+0x2c>
	} else {
		return status;
 80f8cb6:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80f8cb8:	4618      	mov	r0, r3
 80f8cba:	3718      	adds	r7, #24
 80f8cbc:	46bd      	mov	sp, r7
 80f8cbe:	bd80      	pop	{r7, pc}
 80f8cc0:	20002998 	.word	0x20002998

080f8cc4 <sf_bootloader_hal_init>:

/**
 * @brief Initialize bootloader HAL timer reference
 */
void sf_bootloader_hal_init(void)
{
 80f8cc4:	b580      	push	{r7, lr}
 80f8cc6:	af00      	add	r7, sp, #0
    start_time = get_1ms_counter();  /* Store system time at boot */
 80f8cc8:	f000 ff5a 	bl	80f9b80 <get_1ms_counter>
 80f8ccc:	4603      	mov	r3, r0
 80f8cce:	4a02      	ldr	r2, [pc, #8]	@ (80f8cd8 <sf_bootloader_hal_init+0x14>)
 80f8cd0:	6013      	str	r3, [r2, #0]
}
 80f8cd2:	bf00      	nop
 80f8cd4:	bd80      	pop	{r7, pc}
 80f8cd6:	bf00      	nop
 80f8cd8:	200029bc 	.word	0x200029bc

080f8cdc <sf_bootloader_hal_jump_to_app>:

/**
 * @brief Jump to application code from bootloader
 */
void sf_bootloader_hal_jump_to_app(void)
{
 80f8cdc:	b580      	push	{r7, lr}
 80f8cde:	b084      	sub	sp, #16
 80f8ce0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80f8ce2:	b672      	cpsid	i
}
 80f8ce4:	bf00      	nop
    uint32_t app_stack;                                      /* Application stack pointer */
    uint32_t app_reset_handler;                              /* Application reset handler address */

    __disable_irq();                                         /* Disable all interrupts */

    HAL_DeInit();                                            /* Deinitialize HAL peripherals */
 80f8ce6:	f7f1 fc5f 	bl	80ea5a8 <HAL_DeInit>

    SysTick->CTRL = 0;                                       /* Disable SysTick timer */
 80f8cea:	4b10      	ldr	r3, [pc, #64]	@ (80f8d2c <sf_bootloader_hal_jump_to_app+0x50>)
 80f8cec:	2200      	movs	r2, #0
 80f8cee:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;                                       /* Clear SysTick reload value */
 80f8cf0:	4b0e      	ldr	r3, [pc, #56]	@ (80f8d2c <sf_bootloader_hal_jump_to_app+0x50>)
 80f8cf2:	2200      	movs	r2, #0
 80f8cf4:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0;                                       /* Clear current SysTick value */
 80f8cf6:	4b0d      	ldr	r3, [pc, #52]	@ (80f8d2c <sf_bootloader_hal_jump_to_app+0x50>)
 80f8cf8:	2200      	movs	r2, #0
 80f8cfa:	609a      	str	r2, [r3, #8]

    app_stack = *((volatile uint32_t *)MEM_APP_START_ADDRESS);         /* Read MSP from application vector table */
 80f8cfc:	4b0c      	ldr	r3, [pc, #48]	@ (80f8d30 <sf_bootloader_hal_jump_to_app+0x54>)
 80f8cfe:	681b      	ldr	r3, [r3, #0]
 80f8d00:	60fb      	str	r3, [r7, #12]
    app_reset_handler = *((volatile uint32_t *)(MEM_APP_START_ADDRESS + 4)); /* Read PC from application vector table */
 80f8d02:	4b0c      	ldr	r3, [pc, #48]	@ (80f8d34 <sf_bootloader_hal_jump_to_app+0x58>)
 80f8d04:	681b      	ldr	r3, [r3, #0]
 80f8d06:	60bb      	str	r3, [r7, #8]
 80f8d08:	68fb      	ldr	r3, [r7, #12]
 80f8d0a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80f8d0c:	683b      	ldr	r3, [r7, #0]
 80f8d0e:	f383 8808 	msr	MSP, r3
}
 80f8d12:	bf00      	nop

    __set_MSP(app_stack);                                    /* Set Main Stack Pointer */
    SCB->VTOR = MEM_APP_START_ADDRESS;                       /* Set Vector Table Offset Register */
 80f8d14:	4b08      	ldr	r3, [pc, #32]	@ (80f8d38 <sf_bootloader_hal_jump_to_app+0x5c>)
 80f8d16:	4a06      	ldr	r2, [pc, #24]	@ (80f8d30 <sf_bootloader_hal_jump_to_app+0x54>)
 80f8d18:	609a      	str	r2, [r3, #8]

    app_entry = (void (*)(void))app_reset_handler;           /* Assign PC to entry function */
 80f8d1a:	68bb      	ldr	r3, [r7, #8]
 80f8d1c:	607b      	str	r3, [r7, #4]
    app_entry();                                             /* Jump to application */
 80f8d1e:	687b      	ldr	r3, [r7, #4]
 80f8d20:	4798      	blx	r3
}
 80f8d22:	bf00      	nop
 80f8d24:	3710      	adds	r7, #16
 80f8d26:	46bd      	mov	sp, r7
 80f8d28:	bd80      	pop	{r7, pc}
 80f8d2a:	bf00      	nop
 80f8d2c:	e000e010 	.word	0xe000e010
 80f8d30:	08004000 	.word	0x08004000
 80f8d34:	08004004 	.word	0x08004004
 80f8d38:	e000ed00 	.word	0xe000ed00

080f8d3c <sf_bootloader_hal_send_bootloader_message>:

int sf_bootloader_hal_send_bootloader_message(data_comm_msg_type_t type, uint8_t id, const uint8_t* header, uint16_t header_size, const uint8_t* data, uint16_t data_size, void *context)
{
 80f8d3c:	b5b0      	push	{r4, r5, r7, lr}
 80f8d3e:	b098      	sub	sp, #96	@ 0x60
 80f8d40:	af0a      	add	r7, sp, #40	@ 0x28
 80f8d42:	603a      	str	r2, [r7, #0]
 80f8d44:	461a      	mov	r2, r3
 80f8d46:	4603      	mov	r3, r0
 80f8d48:	71fb      	strb	r3, [r7, #7]
 80f8d4a:	460b      	mov	r3, r1
 80f8d4c:	71bb      	strb	r3, [r7, #6]
 80f8d4e:	4613      	mov	r3, r2
 80f8d50:	80bb      	strh	r3, [r7, #4]
	(void)context;
	(void)data_size;
	(void)data;

	can_message_tx_t can_msg = {0};
 80f8d52:	f107 0308 	add.w	r3, r7, #8
 80f8d56:	2230      	movs	r2, #48	@ 0x30
 80f8d58:	2100      	movs	r1, #0
 80f8d5a:	4618      	mov	r0, r3
 80f8d5c:	f001 f85d 	bl	80f9e1a <memset>
	can_msg.data[CAN_MSG_ECU_CODE_BYTE_INDEX] = id;
 80f8d60:	79bb      	ldrb	r3, [r7, #6]
 80f8d62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	can_msg.identifier_type = SF_FDCAN_EXTENDED_ID;
 80f8d66:	2301      	movs	r3, #1
 80f8d68:	60fb      	str	r3, [r7, #12]
	can_msg.tx_frame_type = SF_FDCAN_DATA_FRAME;
 80f8d6a:	2300      	movs	r3, #0
 80f8d6c:	613b      	str	r3, [r7, #16]
	can_msg.fdf_format = SF_FDCAN_CLASSIC_CAN;
 80f8d6e:	2300      	movs	r3, #0
 80f8d70:	623b      	str	r3, [r7, #32]
	can_msg.tx_event_fifo_control = SF_FDCAN_NO_TX_EVENTS;
 80f8d72:	2300      	movs	r3, #0
 80f8d74:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(type) {
 80f8d76:	79fb      	ldrb	r3, [r7, #7]
 80f8d78:	3b01      	subs	r3, #1
 80f8d7a:	2b08      	cmp	r3, #8
 80f8d7c:	d855      	bhi.n	80f8e2a <sf_bootloader_hal_send_bootloader_message+0xee>
 80f8d7e:	a201      	add	r2, pc, #4	@ (adr r2, 80f8d84 <sf_bootloader_hal_send_bootloader_message+0x48>)
 80f8d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f8d84:	080f8da9 	.word	0x080f8da9
 80f8d88:	080f8e2b 	.word	0x080f8e2b
 80f8d8c:	080f8dd1 	.word	0x080f8dd1
 80f8d90:	080f8e2b 	.word	0x080f8e2b
 80f8d94:	080f8e2b 	.word	0x080f8e2b
 80f8d98:	080f8e2b 	.word	0x080f8e2b
 80f8d9c:	080f8df9 	.word	0x080f8df9
 80f8da0:	080f8e2b 	.word	0x080f8e2b
 80f8da4:	080f8e03 	.word	0x080f8e03

	case DATA_COMM_MSG_TYPE_READY_REPORT:
	{
		can_msg.identifier = CAN_MSG_SEND_BOOTLOADER_READY_REPORT_ID;
 80f8da8:	4b2b      	ldr	r3, [pc, #172]	@ (80f8e58 <sf_bootloader_hal_send_bootloader_message+0x11c>)
 80f8daa:	60bb      	str	r3, [r7, #8]
		can_msg.data_length = header_size + CAN_MSG_ECU_CODE_SIZE;
 80f8dac:	88bb      	ldrh	r3, [r7, #4]
 80f8dae:	3301      	adds	r3, #1
 80f8db0:	617b      	str	r3, [r7, #20]

		if( header_size > (CAN_MSG_MAX_LENGTH - CAN_MSG_ECU_CODE_SIZE))
 80f8db2:	88bb      	ldrh	r3, [r7, #4]
 80f8db4:	2b07      	cmp	r3, #7
 80f8db6:	d902      	bls.n	80f8dbe <sf_bootloader_hal_send_bootloader_message+0x82>
		{
			return -2;
 80f8db8:	f06f 0301 	mvn.w	r3, #1
 80f8dbc:	e048      	b.n	80f8e50 <sf_bootloader_hal_send_bootloader_message+0x114>
		}

		memcpy(&(can_msg.data[1]), header, header_size);
 80f8dbe:	88ba      	ldrh	r2, [r7, #4]
 80f8dc0:	f107 0308 	add.w	r3, r7, #8
 80f8dc4:	3329      	adds	r3, #41	@ 0x29
 80f8dc6:	6839      	ldr	r1, [r7, #0]
 80f8dc8:	4618      	mov	r0, r3
 80f8dca:	f001 f8a2 	bl	80f9f12 <memcpy>

		break;
 80f8dce:	e02f      	b.n	80f8e30 <sf_bootloader_hal_send_bootloader_message+0xf4>
	}
	case DATA_COMM_MSG_TYPE_BURST_REQUEST:
	{
		can_msg.identifier = CAN_MSG_SEND_BOOTLOADER_BURST_REQUEST_ID;
 80f8dd0:	4b22      	ldr	r3, [pc, #136]	@ (80f8e5c <sf_bootloader_hal_send_bootloader_message+0x120>)
 80f8dd2:	60bb      	str	r3, [r7, #8]
		can_msg.data_length = header_size + CAN_MSG_ECU_CODE_SIZE;
 80f8dd4:	88bb      	ldrh	r3, [r7, #4]
 80f8dd6:	3301      	adds	r3, #1
 80f8dd8:	617b      	str	r3, [r7, #20]

		if( header_size > (CAN_MSG_MAX_LENGTH - CAN_MSG_ECU_CODE_SIZE))
 80f8dda:	88bb      	ldrh	r3, [r7, #4]
 80f8ddc:	2b07      	cmp	r3, #7
 80f8dde:	d902      	bls.n	80f8de6 <sf_bootloader_hal_send_bootloader_message+0xaa>
		{
			return -2;
 80f8de0:	f06f 0301 	mvn.w	r3, #1
 80f8de4:	e034      	b.n	80f8e50 <sf_bootloader_hal_send_bootloader_message+0x114>
		}

		memcpy(&(can_msg.data[1]), header, header_size);
 80f8de6:	88ba      	ldrh	r2, [r7, #4]
 80f8de8:	f107 0308 	add.w	r3, r7, #8
 80f8dec:	3329      	adds	r3, #41	@ 0x29
 80f8dee:	6839      	ldr	r1, [r7, #0]
 80f8df0:	4618      	mov	r0, r3
 80f8df2:	f001 f88e 	bl	80f9f12 <memcpy>


		break;
 80f8df6:	e01b      	b.n	80f8e30 <sf_bootloader_hal_send_bootloader_message+0xf4>
	}
	case DATA_COMM_MSG_TYPE_COMPLETION:
	{
		can_msg.identifier = CAN_MSG_SEND_BOOTLOADER_COMPLETION_MESSAGE_ID;
 80f8df8:	4b19      	ldr	r3, [pc, #100]	@ (80f8e60 <sf_bootloader_hal_send_bootloader_message+0x124>)
 80f8dfa:	60bb      	str	r3, [r7, #8]
		can_msg.data_length = CAN_MSG_ECU_CODE_SIZE;
 80f8dfc:	2301      	movs	r3, #1
 80f8dfe:	617b      	str	r3, [r7, #20]

		break;
 80f8e00:	e016      	b.n	80f8e30 <sf_bootloader_hal_send_bootloader_message+0xf4>
	}

	case DATA_COMM_MSG_TYPE_FINISH_REPORT:
	{
		can_msg.identifier = CAN_MSG_SEND_BOOTLOADER_FINISH_REPORT_ID;
 80f8e02:	4b18      	ldr	r3, [pc, #96]	@ (80f8e64 <sf_bootloader_hal_send_bootloader_message+0x128>)
 80f8e04:	60bb      	str	r3, [r7, #8]
		can_msg.data_length = header_size + CAN_MSG_ECU_CODE_SIZE;
 80f8e06:	88bb      	ldrh	r3, [r7, #4]
 80f8e08:	3301      	adds	r3, #1
 80f8e0a:	617b      	str	r3, [r7, #20]

		if( header_size > (CAN_MSG_MAX_LENGTH - CAN_MSG_ECU_CODE_SIZE))
 80f8e0c:	88bb      	ldrh	r3, [r7, #4]
 80f8e0e:	2b07      	cmp	r3, #7
 80f8e10:	d902      	bls.n	80f8e18 <sf_bootloader_hal_send_bootloader_message+0xdc>
		{
			return -2;
 80f8e12:	f06f 0301 	mvn.w	r3, #1
 80f8e16:	e01b      	b.n	80f8e50 <sf_bootloader_hal_send_bootloader_message+0x114>
		}

		memcpy(&(can_msg.data[1]), header, header_size);
 80f8e18:	88ba      	ldrh	r2, [r7, #4]
 80f8e1a:	f107 0308 	add.w	r3, r7, #8
 80f8e1e:	3329      	adds	r3, #41	@ 0x29
 80f8e20:	6839      	ldr	r1, [r7, #0]
 80f8e22:	4618      	mov	r0, r3
 80f8e24:	f001 f875 	bl	80f9f12 <memcpy>

		break;
 80f8e28:	e002      	b.n	80f8e30 <sf_bootloader_hal_send_bootloader_message+0xf4>
	}

	default:
	{
		return -1;
 80f8e2a:	f04f 33ff 	mov.w	r3, #4294967295
 80f8e2e:	e00f      	b.n	80f8e50 <sf_bootloader_hal_send_bootloader_message+0x114>
	}


	}

	sf_can_send_message(1, can_msg );
 80f8e30:	466d      	mov	r5, sp
 80f8e32:	f107 0414 	add.w	r4, r7, #20
 80f8e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80f8e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80f8e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80f8e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80f8e3e:	6823      	ldr	r3, [r4, #0]
 80f8e40:	602b      	str	r3, [r5, #0]
 80f8e42:	f107 0308 	add.w	r3, r7, #8
 80f8e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 80f8e48:	2001      	movs	r0, #1
 80f8e4a:	f000 f8fd 	bl	80f9048 <sf_can_send_message>

	return 0;
 80f8e4e:	2300      	movs	r3, #0
}
 80f8e50:	4618      	mov	r0, r3
 80f8e52:	3738      	adds	r7, #56	@ 0x38
 80f8e54:	46bd      	mov	sp, r7
 80f8e56:	bdb0      	pop	{r4, r5, r7, pc}
 80f8e58:	0001f101 	.word	0x0001f101
 80f8e5c:	0001f103 	.word	0x0001f103
 80f8e60:	0001f107 	.word	0x0001f107
 80f8e64:	0001f109 	.word	0x0001f109

080f8e68 <sf_bootloader_hal_log_func>:

int sf_bootloader_hal_log_func(int level, const char *format, ...){
 80f8e68:	b40e      	push	{r1, r2, r3}
 80f8e6a:	b480      	push	{r7}
 80f8e6c:	b082      	sub	sp, #8
 80f8e6e:	af00      	add	r7, sp, #0
 80f8e70:	6078      	str	r0, [r7, #4]
    return 0;
 80f8e72:	2300      	movs	r3, #0
}
 80f8e74:	4618      	mov	r0, r3
 80f8e76:	3708      	adds	r7, #8
 80f8e78:	46bd      	mov	sp, r7
 80f8e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f8e7e:	b003      	add	sp, #12
 80f8e80:	4770      	bx	lr

080f8e82 <sf_bootloader_hal_crc32_func>:

uint32_t sf_bootloader_hal_crc32_func(uint32_t address, uint32_t size){
 80f8e82:	b580      	push	{r7, lr}
 80f8e84:	b082      	sub	sp, #8
 80f8e86:	af00      	add	r7, sp, #0
 80f8e88:	6078      	str	r0, [r7, #4]
 80f8e8a:	6039      	str	r1, [r7, #0]
    return sf_crc_compute_crc32_deadbeef((void*)address, size);
 80f8e8c:	687b      	ldr	r3, [r7, #4]
 80f8e8e:	6839      	ldr	r1, [r7, #0]
 80f8e90:	4618      	mov	r0, r3
 80f8e92:	f000 fc4b 	bl	80f972c <sf_crc_compute_crc32_deadbeef>
 80f8e96:	4603      	mov	r3, r0
}
 80f8e98:	4618      	mov	r0, r3
 80f8e9a:	3708      	adds	r7, #8
 80f8e9c:	46bd      	mov	sp, r7
 80f8e9e:	bd80      	pop	{r7, pc}

080f8ea0 <BYTE_TO_FDCAN_DLC>:
    ( (peripheral_number) == 1  ? &hfdcan1  :       \
      (peripheral_number) == 2  ? &hfdcan2  :       \
      NULL )

// Macro-like static inline function to convert byte size to FDCAN DLC
static inline uint32_t BYTE_TO_FDCAN_DLC(uint8_t numBytes) {
 80f8ea0:	b480      	push	{r7}
 80f8ea2:	b083      	sub	sp, #12
 80f8ea4:	af00      	add	r7, sp, #0
 80f8ea6:	4603      	mov	r3, r0
 80f8ea8:	71fb      	strb	r3, [r7, #7]
    switch (numBytes) {
 80f8eaa:	79fb      	ldrb	r3, [r7, #7]
 80f8eac:	2b40      	cmp	r3, #64	@ 0x40
 80f8eae:	f200 80a5 	bhi.w	80f8ffc <BYTE_TO_FDCAN_DLC+0x15c>
 80f8eb2:	a201      	add	r2, pc, #4	@ (adr r2, 80f8eb8 <BYTE_TO_FDCAN_DLC+0x18>)
 80f8eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80f8eb8:	080f8fbd 	.word	0x080f8fbd
 80f8ebc:	080f8fc1 	.word	0x080f8fc1
 80f8ec0:	080f8fc5 	.word	0x080f8fc5
 80f8ec4:	080f8fc9 	.word	0x080f8fc9
 80f8ec8:	080f8fcd 	.word	0x080f8fcd
 80f8ecc:	080f8fd1 	.word	0x080f8fd1
 80f8ed0:	080f8fd5 	.word	0x080f8fd5
 80f8ed4:	080f8fd9 	.word	0x080f8fd9
 80f8ed8:	080f8fdd 	.word	0x080f8fdd
 80f8edc:	080f8ffd 	.word	0x080f8ffd
 80f8ee0:	080f8ffd 	.word	0x080f8ffd
 80f8ee4:	080f8ffd 	.word	0x080f8ffd
 80f8ee8:	080f8fe1 	.word	0x080f8fe1
 80f8eec:	080f8ffd 	.word	0x080f8ffd
 80f8ef0:	080f8ffd 	.word	0x080f8ffd
 80f8ef4:	080f8ffd 	.word	0x080f8ffd
 80f8ef8:	080f8fe5 	.word	0x080f8fe5
 80f8efc:	080f8ffd 	.word	0x080f8ffd
 80f8f00:	080f8ffd 	.word	0x080f8ffd
 80f8f04:	080f8ffd 	.word	0x080f8ffd
 80f8f08:	080f8fe9 	.word	0x080f8fe9
 80f8f0c:	080f8ffd 	.word	0x080f8ffd
 80f8f10:	080f8ffd 	.word	0x080f8ffd
 80f8f14:	080f8ffd 	.word	0x080f8ffd
 80f8f18:	080f8fed 	.word	0x080f8fed
 80f8f1c:	080f8ffd 	.word	0x080f8ffd
 80f8f20:	080f8ffd 	.word	0x080f8ffd
 80f8f24:	080f8ffd 	.word	0x080f8ffd
 80f8f28:	080f8ffd 	.word	0x080f8ffd
 80f8f2c:	080f8ffd 	.word	0x080f8ffd
 80f8f30:	080f8ffd 	.word	0x080f8ffd
 80f8f34:	080f8ffd 	.word	0x080f8ffd
 80f8f38:	080f8ff1 	.word	0x080f8ff1
 80f8f3c:	080f8ffd 	.word	0x080f8ffd
 80f8f40:	080f8ffd 	.word	0x080f8ffd
 80f8f44:	080f8ffd 	.word	0x080f8ffd
 80f8f48:	080f8ffd 	.word	0x080f8ffd
 80f8f4c:	080f8ffd 	.word	0x080f8ffd
 80f8f50:	080f8ffd 	.word	0x080f8ffd
 80f8f54:	080f8ffd 	.word	0x080f8ffd
 80f8f58:	080f8ffd 	.word	0x080f8ffd
 80f8f5c:	080f8ffd 	.word	0x080f8ffd
 80f8f60:	080f8ffd 	.word	0x080f8ffd
 80f8f64:	080f8ffd 	.word	0x080f8ffd
 80f8f68:	080f8ffd 	.word	0x080f8ffd
 80f8f6c:	080f8ffd 	.word	0x080f8ffd
 80f8f70:	080f8ffd 	.word	0x080f8ffd
 80f8f74:	080f8ffd 	.word	0x080f8ffd
 80f8f78:	080f8ff5 	.word	0x080f8ff5
 80f8f7c:	080f8ffd 	.word	0x080f8ffd
 80f8f80:	080f8ffd 	.word	0x080f8ffd
 80f8f84:	080f8ffd 	.word	0x080f8ffd
 80f8f88:	080f8ffd 	.word	0x080f8ffd
 80f8f8c:	080f8ffd 	.word	0x080f8ffd
 80f8f90:	080f8ffd 	.word	0x080f8ffd
 80f8f94:	080f8ffd 	.word	0x080f8ffd
 80f8f98:	080f8ffd 	.word	0x080f8ffd
 80f8f9c:	080f8ffd 	.word	0x080f8ffd
 80f8fa0:	080f8ffd 	.word	0x080f8ffd
 80f8fa4:	080f8ffd 	.word	0x080f8ffd
 80f8fa8:	080f8ffd 	.word	0x080f8ffd
 80f8fac:	080f8ffd 	.word	0x080f8ffd
 80f8fb0:	080f8ffd 	.word	0x080f8ffd
 80f8fb4:	080f8ffd 	.word	0x080f8ffd
 80f8fb8:	080f8ff9 	.word	0x080f8ff9
        case 0:  return FDCAN_DLC_BYTES_0;
 80f8fbc:	2300      	movs	r3, #0
 80f8fbe:	e03c      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 1:  return FDCAN_DLC_BYTES_1;
 80f8fc0:	2301      	movs	r3, #1
 80f8fc2:	e03a      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 2:  return FDCAN_DLC_BYTES_2;
 80f8fc4:	2302      	movs	r3, #2
 80f8fc6:	e038      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 3:  return FDCAN_DLC_BYTES_3;
 80f8fc8:	2303      	movs	r3, #3
 80f8fca:	e036      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 4:  return FDCAN_DLC_BYTES_4;
 80f8fcc:	2304      	movs	r3, #4
 80f8fce:	e034      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 5:  return FDCAN_DLC_BYTES_5;
 80f8fd0:	2305      	movs	r3, #5
 80f8fd2:	e032      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 6:  return FDCAN_DLC_BYTES_6;
 80f8fd4:	2306      	movs	r3, #6
 80f8fd6:	e030      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 7:  return FDCAN_DLC_BYTES_7;
 80f8fd8:	2307      	movs	r3, #7
 80f8fda:	e02e      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 8:  return FDCAN_DLC_BYTES_8;
 80f8fdc:	2308      	movs	r3, #8
 80f8fde:	e02c      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 12: return FDCAN_DLC_BYTES_12;
 80f8fe0:	2309      	movs	r3, #9
 80f8fe2:	e02a      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 16: return FDCAN_DLC_BYTES_16;
 80f8fe4:	230a      	movs	r3, #10
 80f8fe6:	e028      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 20: return FDCAN_DLC_BYTES_20;
 80f8fe8:	230b      	movs	r3, #11
 80f8fea:	e026      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 24: return FDCAN_DLC_BYTES_24;
 80f8fec:	230c      	movs	r3, #12
 80f8fee:	e024      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 32: return FDCAN_DLC_BYTES_32;
 80f8ff0:	230d      	movs	r3, #13
 80f8ff2:	e022      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 48: return FDCAN_DLC_BYTES_48;
 80f8ff4:	230e      	movs	r3, #14
 80f8ff6:	e020      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        case 64: return FDCAN_DLC_BYTES_64;
 80f8ff8:	230f      	movs	r3, #15
 80f8ffa:	e01e      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
        default:
            if (numBytes < 12) return FDCAN_DLC_BYTES_8;
 80f8ffc:	79fb      	ldrb	r3, [r7, #7]
 80f8ffe:	2b0b      	cmp	r3, #11
 80f9000:	d801      	bhi.n	80f9006 <BYTE_TO_FDCAN_DLC+0x166>
 80f9002:	2308      	movs	r3, #8
 80f9004:	e019      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            if (numBytes <= 16) return FDCAN_DLC_BYTES_16;
 80f9006:	79fb      	ldrb	r3, [r7, #7]
 80f9008:	2b10      	cmp	r3, #16
 80f900a:	d801      	bhi.n	80f9010 <BYTE_TO_FDCAN_DLC+0x170>
 80f900c:	230a      	movs	r3, #10
 80f900e:	e014      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            if (numBytes <= 20) return FDCAN_DLC_BYTES_20;
 80f9010:	79fb      	ldrb	r3, [r7, #7]
 80f9012:	2b14      	cmp	r3, #20
 80f9014:	d801      	bhi.n	80f901a <BYTE_TO_FDCAN_DLC+0x17a>
 80f9016:	230b      	movs	r3, #11
 80f9018:	e00f      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            if (numBytes <= 24) return FDCAN_DLC_BYTES_24;
 80f901a:	79fb      	ldrb	r3, [r7, #7]
 80f901c:	2b18      	cmp	r3, #24
 80f901e:	d801      	bhi.n	80f9024 <BYTE_TO_FDCAN_DLC+0x184>
 80f9020:	230c      	movs	r3, #12
 80f9022:	e00a      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            if (numBytes <= 32) return FDCAN_DLC_BYTES_32;
 80f9024:	79fb      	ldrb	r3, [r7, #7]
 80f9026:	2b20      	cmp	r3, #32
 80f9028:	d801      	bhi.n	80f902e <BYTE_TO_FDCAN_DLC+0x18e>
 80f902a:	230d      	movs	r3, #13
 80f902c:	e005      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            if (numBytes <= 48) return FDCAN_DLC_BYTES_48;
 80f902e:	79fb      	ldrb	r3, [r7, #7]
 80f9030:	2b30      	cmp	r3, #48	@ 0x30
 80f9032:	d801      	bhi.n	80f9038 <BYTE_TO_FDCAN_DLC+0x198>
 80f9034:	230e      	movs	r3, #14
 80f9036:	e000      	b.n	80f903a <BYTE_TO_FDCAN_DLC+0x19a>
            return FDCAN_DLC_BYTES_64;
 80f9038:	230f      	movs	r3, #15
    }
}
 80f903a:	4618      	mov	r0, r3
 80f903c:	370c      	adds	r7, #12
 80f903e:	46bd      	mov	sp, r7
 80f9040:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f9044:	4770      	bx	lr
 80f9046:	bf00      	nop

080f9048 <sf_can_send_message>:
 *
 * @return     can_status_t Returns CAN_STATUS_OK if the message was queued successfully, otherwise returns CAN_STATUS_NOOK.
 *
 * @note       Ensure that the CAN peripheral is properly initialized and configured before calling this function.
 */
can_status_t sf_can_send_message(uint8_t peripheral_number, can_message_tx_t can_message) {
 80f9048:	b084      	sub	sp, #16
 80f904a:	b590      	push	{r4, r7, lr}
 80f904c:	b08d      	sub	sp, #52	@ 0x34
 80f904e:	af00      	add	r7, sp, #0
 80f9050:	4604      	mov	r4, r0
 80f9052:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80f9056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80f905a:	4623      	mov	r3, r4
 80f905c:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef txHeader;
    HAL_StatusTypeDef status = HAL_BUSY;
 80f905e:	2302      	movs	r3, #2
 80f9060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    memset(&txHeader, 0, sizeof(txHeader)); // Initialize the structure to zero
 80f9064:	f107 0308 	add.w	r3, r7, #8
 80f9068:	2224      	movs	r2, #36	@ 0x24
 80f906a:	2100      	movs	r1, #0
 80f906c:	4618      	mov	r0, r3
 80f906e:	f000 fed4 	bl	80f9e1a <memset>

    txHeader.Identifier = can_message.identifier;
 80f9072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80f9074:	60bb      	str	r3, [r7, #8]
    txHeader.IdType = GET_CAN_IDENTIFIER(can_message.identifier_type);
 80f9076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f9078:	2b00      	cmp	r3, #0
 80f907a:	d007      	beq.n	80f908c <sf_can_send_message+0x44>
 80f907c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f907e:	2b01      	cmp	r3, #1
 80f9080:	d102      	bne.n	80f9088 <sf_can_send_message+0x40>
 80f9082:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80f9086:	e002      	b.n	80f908e <sf_can_send_message+0x46>
 80f9088:	23ff      	movs	r3, #255	@ 0xff
 80f908a:	e000      	b.n	80f908e <sf_can_send_message+0x46>
 80f908c:	2300      	movs	r3, #0
 80f908e:	60fb      	str	r3, [r7, #12]
    txHeader.TxFrameType = GET_CAN_FRAME(can_message.tx_frame_type);
 80f9090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80f9092:	2b00      	cmp	r3, #0
 80f9094:	d007      	beq.n	80f90a6 <sf_can_send_message+0x5e>
 80f9096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80f9098:	2b01      	cmp	r3, #1
 80f909a:	d102      	bne.n	80f90a2 <sf_can_send_message+0x5a>
 80f909c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80f90a0:	e002      	b.n	80f90a8 <sf_can_send_message+0x60>
 80f90a2:	23ff      	movs	r3, #255	@ 0xff
 80f90a4:	e000      	b.n	80f90a8 <sf_can_send_message+0x60>
 80f90a6:	2300      	movs	r3, #0
 80f90a8:	613b      	str	r3, [r7, #16]
    txHeader.DataLength = BYTE_TO_FDCAN_DLC(can_message.data_length);
 80f90aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80f90ac:	b2db      	uxtb	r3, r3
 80f90ae:	4618      	mov	r0, r3
 80f90b0:	f7ff fef6 	bl	80f8ea0 <BYTE_TO_FDCAN_DLC>
 80f90b4:	4603      	mov	r3, r0
 80f90b6:	617b      	str	r3, [r7, #20]
    txHeader.ErrorStateIndicator = GET_CAN_ESI(can_message.error_state_indicator);
 80f90b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f90ba:	2b00      	cmp	r3, #0
 80f90bc:	d007      	beq.n	80f90ce <sf_can_send_message+0x86>
 80f90be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80f90c0:	2b01      	cmp	r3, #1
 80f90c2:	d102      	bne.n	80f90ca <sf_can_send_message+0x82>
 80f90c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80f90c8:	e002      	b.n	80f90d0 <sf_can_send_message+0x88>
 80f90ca:	23ff      	movs	r3, #255	@ 0xff
 80f90cc:	e000      	b.n	80f90d0 <sf_can_send_message+0x88>
 80f90ce:	2300      	movs	r3, #0
 80f90d0:	61bb      	str	r3, [r7, #24]
    txHeader.BitRateSwitch = GET_CAN_BRS(can_message.bit_rate_switch);
 80f90d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f90d4:	2b00      	cmp	r3, #0
 80f90d6:	d007      	beq.n	80f90e8 <sf_can_send_message+0xa0>
 80f90d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80f90da:	2b01      	cmp	r3, #1
 80f90dc:	d102      	bne.n	80f90e4 <sf_can_send_message+0x9c>
 80f90de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80f90e2:	e002      	b.n	80f90ea <sf_can_send_message+0xa2>
 80f90e4:	23ff      	movs	r3, #255	@ 0xff
 80f90e6:	e000      	b.n	80f90ea <sf_can_send_message+0xa2>
 80f90e8:	2300      	movs	r3, #0
 80f90ea:	61fb      	str	r3, [r7, #28]
    txHeader.FDFormat = GET_CAN_FORMAT(can_message.fdf_format);
 80f90ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f90ee:	2b00      	cmp	r3, #0
 80f90f0:	d007      	beq.n	80f9102 <sf_can_send_message+0xba>
 80f90f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80f90f4:	2b01      	cmp	r3, #1
 80f90f6:	d102      	bne.n	80f90fe <sf_can_send_message+0xb6>
 80f90f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80f90fc:	e002      	b.n	80f9104 <sf_can_send_message+0xbc>
 80f90fe:	23ff      	movs	r3, #255	@ 0xff
 80f9100:	e000      	b.n	80f9104 <sf_can_send_message+0xbc>
 80f9102:	2300      	movs	r3, #0
 80f9104:	623b      	str	r3, [r7, #32]
    txHeader.TxEventFifoControl = GET_CAN_EFD(can_message.tx_event_fifo_control);
 80f9106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f9108:	2b00      	cmp	r3, #0
 80f910a:	d007      	beq.n	80f911c <sf_can_send_message+0xd4>
 80f910c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80f910e:	2b01      	cmp	r3, #1
 80f9110:	d102      	bne.n	80f9118 <sf_can_send_message+0xd0>
 80f9112:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80f9116:	e002      	b.n	80f911e <sf_can_send_message+0xd6>
 80f9118:	23ff      	movs	r3, #255	@ 0xff
 80f911a:	e000      	b.n	80f911e <sf_can_send_message+0xd6>
 80f911c:	2300      	movs	r3, #0
 80f911e:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.MessageMarker = can_message.message_marker;
 80f9120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80f9122:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (HAL_FDCAN_GetTxFifoFreeLevel(GET_CAN_HANDLER(peripheral_number)) != 0){
 80f9124:	79fb      	ldrb	r3, [r7, #7]
 80f9126:	2b01      	cmp	r3, #1
 80f9128:	d006      	beq.n	80f9138 <sf_can_send_message+0xf0>
 80f912a:	79fb      	ldrb	r3, [r7, #7]
 80f912c:	2b02      	cmp	r3, #2
 80f912e:	d101      	bne.n	80f9134 <sf_can_send_message+0xec>
 80f9130:	4b17      	ldr	r3, [pc, #92]	@ (80f9190 <sf_can_send_message+0x148>)
 80f9132:	e002      	b.n	80f913a <sf_can_send_message+0xf2>
 80f9134:	2300      	movs	r3, #0
 80f9136:	e000      	b.n	80f913a <sf_can_send_message+0xf2>
 80f9138:	4b16      	ldr	r3, [pc, #88]	@ (80f9194 <sf_can_send_message+0x14c>)
 80f913a:	4618      	mov	r0, r3
 80f913c:	f7f5 f898 	bl	80ee270 <HAL_FDCAN_GetTxFifoFreeLevel>
 80f9140:	4603      	mov	r3, r0
 80f9142:	2b00      	cmp	r3, #0
 80f9144:	d015      	beq.n	80f9172 <sf_can_send_message+0x12a>
    	status = HAL_FDCAN_AddMessageToTxFifoQ(GET_CAN_HANDLER(peripheral_number), &txHeader, can_message.data);
 80f9146:	79fb      	ldrb	r3, [r7, #7]
 80f9148:	2b01      	cmp	r3, #1
 80f914a:	d006      	beq.n	80f915a <sf_can_send_message+0x112>
 80f914c:	79fb      	ldrb	r3, [r7, #7]
 80f914e:	2b02      	cmp	r3, #2
 80f9150:	d101      	bne.n	80f9156 <sf_can_send_message+0x10e>
 80f9152:	4b0f      	ldr	r3, [pc, #60]	@ (80f9190 <sf_can_send_message+0x148>)
 80f9154:	e002      	b.n	80f915c <sf_can_send_message+0x114>
 80f9156:	2300      	movs	r3, #0
 80f9158:	e000      	b.n	80f915c <sf_can_send_message+0x114>
 80f915a:	4b0e      	ldr	r3, [pc, #56]	@ (80f9194 <sf_can_send_message+0x14c>)
 80f915c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80f9160:	3228      	adds	r2, #40	@ 0x28
 80f9162:	f107 0108 	add.w	r1, r7, #8
 80f9166:	4618      	mov	r0, r3
 80f9168:	f7f4 ff17 	bl	80edf9a <HAL_FDCAN_AddMessageToTxFifoQ>
 80f916c:	4603      	mov	r3, r0
 80f916e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return (status == HAL_OK) ? CAN_STATUS_OK : CAN_STATUS_NOOK;
 80f9172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80f9176:	2b00      	cmp	r3, #0
 80f9178:	bf14      	ite	ne
 80f917a:	2301      	movne	r3, #1
 80f917c:	2300      	moveq	r3, #0
 80f917e:	b2db      	uxtb	r3, r3
}
 80f9180:	4618      	mov	r0, r3
 80f9182:	3734      	adds	r7, #52	@ 0x34
 80f9184:	46bd      	mov	sp, r7
 80f9186:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80f918a:	b004      	add	sp, #16
 80f918c:	4770      	bx	lr
 80f918e:	bf00      	nop
 80f9190:	200029c0 	.word	0x200029c0
 80f9194:	200002dc 	.word	0x200002dc

080f9198 <sf_can_configure_filters>:
 *
 * @note       Ensure that the FDCAN peripheral is properly initialized before calling this function. The function will return
 *             CAN_STATUS_NOOK if the configuration fails for any reason, which may require further debugging or validation of
 *             filter settings.
 */
can_status_t sf_can_configure_filters(uint8_t peripheral_number, can_filter_message_t can_message) {
 80f9198:	b084      	sub	sp, #16
 80f919a:	b590      	push	{r4, r7, lr}
 80f919c:	b089      	sub	sp, #36	@ 0x24
 80f919e:	af00      	add	r7, sp, #0
 80f91a0:	4604      	mov	r4, r0
 80f91a2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80f91a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80f91aa:	4623      	mov	r3, r4
 80f91ac:	71fb      	strb	r3, [r7, #7]

    FDCAN_FilterTypeDef sFilterConfig = {0}; // Initialize all fields to zero
 80f91ae:	f107 0308 	add.w	r3, r7, #8
 80f91b2:	2200      	movs	r2, #0
 80f91b4:	601a      	str	r2, [r3, #0]
 80f91b6:	605a      	str	r2, [r3, #4]
 80f91b8:	609a      	str	r2, [r3, #8]
 80f91ba:	60da      	str	r2, [r3, #12]
 80f91bc:	611a      	str	r2, [r3, #16]
 80f91be:	615a      	str	r2, [r3, #20]

	sFilterConfig.IdType = GET_CAN_IDENTIFIER(can_message.identifier_type);
 80f91c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f91c2:	2b00      	cmp	r3, #0
 80f91c4:	d007      	beq.n	80f91d6 <sf_can_configure_filters+0x3e>
 80f91c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80f91c8:	2b01      	cmp	r3, #1
 80f91ca:	d102      	bne.n	80f91d2 <sf_can_configure_filters+0x3a>
 80f91cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80f91d0:	e002      	b.n	80f91d8 <sf_can_configure_filters+0x40>
 80f91d2:	23ff      	movs	r3, #255	@ 0xff
 80f91d4:	e000      	b.n	80f91d8 <sf_can_configure_filters+0x40>
 80f91d6:	2300      	movs	r3, #0
 80f91d8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = can_message.filter_index;  						// Index of the filter configuration
 80f91da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80f91dc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = GET_CAN_FILTER_TYPE(can_message.filter_type); 	// Dual filter mode
 80f91de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f91e0:	2b00      	cmp	r3, #0
 80f91e2:	d010      	beq.n	80f9206 <sf_can_configure_filters+0x6e>
 80f91e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f91e6:	2b01      	cmp	r3, #1
 80f91e8:	d00b      	beq.n	80f9202 <sf_can_configure_filters+0x6a>
 80f91ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f91ec:	2b02      	cmp	r3, #2
 80f91ee:	d006      	beq.n	80f91fe <sf_can_configure_filters+0x66>
 80f91f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80f91f2:	2b03      	cmp	r3, #3
 80f91f4:	d101      	bne.n	80f91fa <sf_can_configure_filters+0x62>
 80f91f6:	2303      	movs	r3, #3
 80f91f8:	e006      	b.n	80f9208 <sf_can_configure_filters+0x70>
 80f91fa:	23ff      	movs	r3, #255	@ 0xff
 80f91fc:	e004      	b.n	80f9208 <sf_can_configure_filters+0x70>
 80f91fe:	2302      	movs	r3, #2
 80f9200:	e002      	b.n	80f9208 <sf_can_configure_filters+0x70>
 80f9202:	2301      	movs	r3, #1
 80f9204:	e000      	b.n	80f9208 <sf_can_configure_filters+0x70>
 80f9206:	2300      	movs	r3, #0
 80f9208:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = GET_CAN_FILTER_CONFIG(can_message.filter_config);// Assign matching frames to RX FIFO 0
 80f920a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f920c:	2b00      	cmp	r3, #0
 80f920e:	d01f      	beq.n	80f9250 <sf_can_configure_filters+0xb8>
 80f9210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f9212:	2b01      	cmp	r3, #1
 80f9214:	d01a      	beq.n	80f924c <sf_can_configure_filters+0xb4>
 80f9216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f9218:	2b02      	cmp	r3, #2
 80f921a:	d015      	beq.n	80f9248 <sf_can_configure_filters+0xb0>
 80f921c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f921e:	2b03      	cmp	r3, #3
 80f9220:	d010      	beq.n	80f9244 <sf_can_configure_filters+0xac>
 80f9222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f9224:	2b04      	cmp	r3, #4
 80f9226:	d00b      	beq.n	80f9240 <sf_can_configure_filters+0xa8>
 80f9228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f922a:	2b05      	cmp	r3, #5
 80f922c:	d006      	beq.n	80f923c <sf_can_configure_filters+0xa4>
 80f922e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80f9230:	2b06      	cmp	r3, #6
 80f9232:	d101      	bne.n	80f9238 <sf_can_configure_filters+0xa0>
 80f9234:	2306      	movs	r3, #6
 80f9236:	e00c      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f9238:	23ff      	movs	r3, #255	@ 0xff
 80f923a:	e00a      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f923c:	2305      	movs	r3, #5
 80f923e:	e008      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f9240:	2304      	movs	r3, #4
 80f9242:	e006      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f9244:	2303      	movs	r3, #3
 80f9246:	e004      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f9248:	2302      	movs	r3, #2
 80f924a:	e002      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f924c:	2301      	movs	r3, #1
 80f924e:	e000      	b.n	80f9252 <sf_can_configure_filters+0xba>
 80f9250:	2300      	movs	r3, #0
 80f9252:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = can_message.filter_id1;	// ID to accept
 80f9254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80f9256:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = can_message.filter_id2;  	// Duplicate ID for exact match configuration
 80f9258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80f925a:	61fb      	str	r3, [r7, #28]

	// Initialize reporting status
	filt_queue_report_status = CAN_FILTERED_REPORT_RX_MESSAGE_RESET;
 80f925c:	4b13      	ldr	r3, [pc, #76]	@ (80f92ac <sf_can_configure_filters+0x114>)
 80f925e:	2200      	movs	r2, #0
 80f9260:	801a      	strh	r2, [r3, #0]
	rx_message_count = 0;
 80f9262:	4b13      	ldr	r3, [pc, #76]	@ (80f92b0 <sf_can_configure_filters+0x118>)
 80f9264:	2200      	movs	r2, #0
 80f9266:	601a      	str	r2, [r3, #0]
	filt_queue_report_index = 0;
 80f9268:	4b12      	ldr	r3, [pc, #72]	@ (80f92b4 <sf_can_configure_filters+0x11c>)
 80f926a:	2200      	movs	r2, #0
 80f926c:	601a      	str	r2, [r3, #0]

	// Configure the filter and check for errors
	if (HAL_FDCAN_ConfigFilter(GET_CAN_HANDLER(peripheral_number), &sFilterConfig) != HAL_OK)
 80f926e:	79fb      	ldrb	r3, [r7, #7]
 80f9270:	2b01      	cmp	r3, #1
 80f9272:	d006      	beq.n	80f9282 <sf_can_configure_filters+0xea>
 80f9274:	79fb      	ldrb	r3, [r7, #7]
 80f9276:	2b02      	cmp	r3, #2
 80f9278:	d101      	bne.n	80f927e <sf_can_configure_filters+0xe6>
 80f927a:	4b0f      	ldr	r3, [pc, #60]	@ (80f92b8 <sf_can_configure_filters+0x120>)
 80f927c:	e002      	b.n	80f9284 <sf_can_configure_filters+0xec>
 80f927e:	2300      	movs	r3, #0
 80f9280:	e000      	b.n	80f9284 <sf_can_configure_filters+0xec>
 80f9282:	4b0e      	ldr	r3, [pc, #56]	@ (80f92bc <sf_can_configure_filters+0x124>)
 80f9284:	f107 0208 	add.w	r2, r7, #8
 80f9288:	4611      	mov	r1, r2
 80f928a:	4618      	mov	r0, r3
 80f928c:	f7f4 fdd2 	bl	80ede34 <HAL_FDCAN_ConfigFilter>
 80f9290:	4603      	mov	r3, r0
 80f9292:	2b00      	cmp	r3, #0
 80f9294:	d001      	beq.n	80f929a <sf_can_configure_filters+0x102>
	{
		return CAN_STATUS_NOOK;
 80f9296:	2301      	movs	r3, #1
 80f9298:	e000      	b.n	80f929c <sf_can_configure_filters+0x104>
	}
	return CAN_STATUS_OK;
 80f929a:	2300      	movs	r3, #0
}
 80f929c:	4618      	mov	r0, r3
 80f929e:	3724      	adds	r7, #36	@ 0x24
 80f92a0:	46bd      	mov	sp, r7
 80f92a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80f92a6:	b004      	add	sp, #16
 80f92a8:	4770      	bx	lr
 80f92aa:	bf00      	nop
 80f92ac:	20003924 	.word	0x20003924
 80f92b0:	2000392c 	.word	0x2000392c
 80f92b4:	20003928 	.word	0x20003928
 80f92b8:	200029c0 	.word	0x200029c0
 80f92bc:	200002dc 	.word	0x200002dc

080f92c0 <sf_can_configure_general_filter>:
 * @return     can_status_t Returns CAN_STATUS_OK if the global filter configuration is successful, otherwise returns CAN_STATUS_NOOK.
 *
 * @note       This function should be called after specific filter configurations to ensure all non-matching frames are handled correctly.
 *             Proper initialization of the FDCAN peripheral must be verified before configuring the global filter.
 */
can_status_t sf_can_configure_general_filter(uint8_t peripheral_number, can_general_filter_t can_message) {
 80f92c0:	b084      	sub	sp, #16
 80f92c2:	b590      	push	{r4, r7, lr}
 80f92c4:	b085      	sub	sp, #20
 80f92c6:	af02      	add	r7, sp, #8
 80f92c8:	4604      	mov	r4, r0
 80f92ca:	f107 001c 	add.w	r0, r7, #28
 80f92ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80f92d2:	4623      	mov	r3, r4
 80f92d4:	71fb      	strb	r3, [r7, #7]
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f92d6:	79fb      	ldrb	r3, [r7, #7]
 80f92d8:	2b01      	cmp	r3, #1
 80f92da:	d006      	beq.n	80f92ea <sf_can_configure_general_filter+0x2a>
 80f92dc:	79fb      	ldrb	r3, [r7, #7]
 80f92de:	2b02      	cmp	r3, #2
 80f92e0:	d101      	bne.n	80f92e6 <sf_can_configure_general_filter+0x26>
 80f92e2:	4826      	ldr	r0, [pc, #152]	@ (80f937c <sf_can_configure_general_filter+0xbc>)
 80f92e4:	e002      	b.n	80f92ec <sf_can_configure_general_filter+0x2c>
 80f92e6:	2000      	movs	r0, #0
 80f92e8:	e000      	b.n	80f92ec <sf_can_configure_general_filter+0x2c>
 80f92ea:	4825      	ldr	r0, [pc, #148]	@ (80f9380 <sf_can_configure_general_filter+0xc0>)
    		GET_CAN_NON_MATCHING_FRAMES(can_message.non_matching_std),
 80f92ec:	69fb      	ldr	r3, [r7, #28]
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f92ee:	2b00      	cmp	r3, #0
 80f92f0:	d00b      	beq.n	80f930a <sf_can_configure_general_filter+0x4a>
    		GET_CAN_NON_MATCHING_FRAMES(can_message.non_matching_std),
 80f92f2:	69fb      	ldr	r3, [r7, #28]
 80f92f4:	2b01      	cmp	r3, #1
 80f92f6:	d006      	beq.n	80f9306 <sf_can_configure_general_filter+0x46>
 80f92f8:	69fb      	ldr	r3, [r7, #28]
 80f92fa:	2b02      	cmp	r3, #2
 80f92fc:	d101      	bne.n	80f9302 <sf_can_configure_general_filter+0x42>
 80f92fe:	2102      	movs	r1, #2
 80f9300:	e004      	b.n	80f930c <sf_can_configure_general_filter+0x4c>
 80f9302:	21ff      	movs	r1, #255	@ 0xff
 80f9304:	e002      	b.n	80f930c <sf_can_configure_general_filter+0x4c>
 80f9306:	2101      	movs	r1, #1
 80f9308:	e000      	b.n	80f930c <sf_can_configure_general_filter+0x4c>
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f930a:	2100      	movs	r1, #0
    		GET_CAN_NON_MATCHING_FRAMES(can_message.non_matching_ext),
 80f930c:	6a3b      	ldr	r3, [r7, #32]
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f930e:	2b00      	cmp	r3, #0
 80f9310:	d00b      	beq.n	80f932a <sf_can_configure_general_filter+0x6a>
    		GET_CAN_NON_MATCHING_FRAMES(can_message.non_matching_ext),
 80f9312:	6a3b      	ldr	r3, [r7, #32]
 80f9314:	2b01      	cmp	r3, #1
 80f9316:	d006      	beq.n	80f9326 <sf_can_configure_general_filter+0x66>
 80f9318:	6a3b      	ldr	r3, [r7, #32]
 80f931a:	2b02      	cmp	r3, #2
 80f931c:	d101      	bne.n	80f9322 <sf_can_configure_general_filter+0x62>
 80f931e:	2202      	movs	r2, #2
 80f9320:	e004      	b.n	80f932c <sf_can_configure_general_filter+0x6c>
 80f9322:	22ff      	movs	r2, #255	@ 0xff
 80f9324:	e002      	b.n	80f932c <sf_can_configure_general_filter+0x6c>
 80f9326:	2201      	movs	r2, #1
 80f9328:	e000      	b.n	80f932c <sf_can_configure_general_filter+0x6c>
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f932a:	2200      	movs	r2, #0
			GET_CAN_REJECT_REMOTE_FRAMES(can_message.reject_remote_ext),
 80f932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f932e:	2b00      	cmp	r3, #0
 80f9330:	d006      	beq.n	80f9340 <sf_can_configure_general_filter+0x80>
			GET_CAN_REJECT_REMOTE_FRAMES(can_message.reject_remote_ext),
 80f9332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80f9334:	2b01      	cmp	r3, #1
 80f9336:	d101      	bne.n	80f933c <sf_can_configure_general_filter+0x7c>
 80f9338:	2401      	movs	r4, #1
 80f933a:	e002      	b.n	80f9342 <sf_can_configure_general_filter+0x82>
 80f933c:	24ff      	movs	r4, #255	@ 0xff
 80f933e:	e000      	b.n	80f9342 <sf_can_configure_general_filter+0x82>
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f9340:	2400      	movs	r4, #0
			GET_CAN_REJECT_REMOTE_FRAMES(can_message.reject_remote_std)) != HAL_OK) {
 80f9342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f9344:	2b00      	cmp	r3, #0
 80f9346:	d006      	beq.n	80f9356 <sf_can_configure_general_filter+0x96>
			GET_CAN_REJECT_REMOTE_FRAMES(can_message.reject_remote_std)) != HAL_OK) {
 80f9348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80f934a:	2b01      	cmp	r3, #1
 80f934c:	d101      	bne.n	80f9352 <sf_can_configure_general_filter+0x92>
 80f934e:	2301      	movs	r3, #1
 80f9350:	e002      	b.n	80f9358 <sf_can_configure_general_filter+0x98>
 80f9352:	23ff      	movs	r3, #255	@ 0xff
 80f9354:	e000      	b.n	80f9358 <sf_can_configure_general_filter+0x98>
    if (HAL_FDCAN_ConfigGlobalFilter(GET_CAN_HANDLER(peripheral_number),
 80f9356:	2300      	movs	r3, #0
 80f9358:	9300      	str	r3, [sp, #0]
 80f935a:	4623      	mov	r3, r4
 80f935c:	f7f4 fdc4 	bl	80edee8 <HAL_FDCAN_ConfigGlobalFilter>
 80f9360:	4603      	mov	r3, r0
 80f9362:	2b00      	cmp	r3, #0
 80f9364:	d001      	beq.n	80f936a <sf_can_configure_general_filter+0xaa>
        return CAN_STATUS_NOOK;
 80f9366:	2301      	movs	r3, #1
 80f9368:	e000      	b.n	80f936c <sf_can_configure_general_filter+0xac>
    }
    return CAN_STATUS_OK;
 80f936a:	2300      	movs	r3, #0
}
 80f936c:	4618      	mov	r0, r3
 80f936e:	370c      	adds	r7, #12
 80f9370:	46bd      	mov	sp, r7
 80f9372:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80f9376:	b004      	add	sp, #16
 80f9378:	4770      	bx	lr
 80f937a:	bf00      	nop
 80f937c:	200029c0 	.word	0x200029c0
 80f9380:	200002dc 	.word	0x200002dc

080f9384 <sf_can_activate_notification>:

/**
 * @brief Activate Rx FIFO 0 new message notification.
 * ...
 */
can_status_t sf_can_activate_notification(uint8_t peripheral_number, can_activate_notification_t can_message) {
 80f9384:	b580      	push	{r7, lr}
 80f9386:	b082      	sub	sp, #8
 80f9388:	af00      	add	r7, sp, #0
 80f938a:	4603      	mov	r3, r0
 80f938c:	6039      	str	r1, [r7, #0]
 80f938e:	71fb      	strb	r3, [r7, #7]
	if (HAL_FDCAN_ActivateNotification(GET_CAN_HANDLER(peripheral_number),
 80f9390:	79fb      	ldrb	r3, [r7, #7]
 80f9392:	2b01      	cmp	r3, #1
 80f9394:	d006      	beq.n	80f93a4 <sf_can_activate_notification+0x20>
 80f9396:	79fb      	ldrb	r3, [r7, #7]
 80f9398:	2b02      	cmp	r3, #2
 80f939a:	d101      	bne.n	80f93a0 <sf_can_activate_notification+0x1c>
 80f939c:	4811      	ldr	r0, [pc, #68]	@ (80f93e4 <sf_can_activate_notification+0x60>)
 80f939e:	e002      	b.n	80f93a6 <sf_can_activate_notification+0x22>
 80f93a0:	2000      	movs	r0, #0
 80f93a2:	e000      	b.n	80f93a6 <sf_can_activate_notification+0x22>
 80f93a4:	4810      	ldr	r0, [pc, #64]	@ (80f93e8 <sf_can_activate_notification+0x64>)
			GET_RX_FIFO0_INTERRUPTS(can_message.rx_fifo0_interrupts),
 80f93a6:	683b      	ldr	r3, [r7, #0]
	if (HAL_FDCAN_ActivateNotification(GET_CAN_HANDLER(peripheral_number),
 80f93a8:	2b00      	cmp	r3, #0
 80f93aa:	d00b      	beq.n	80f93c4 <sf_can_activate_notification+0x40>
			GET_RX_FIFO0_INTERRUPTS(can_message.rx_fifo0_interrupts),
 80f93ac:	683b      	ldr	r3, [r7, #0]
 80f93ae:	2b01      	cmp	r3, #1
 80f93b0:	d006      	beq.n	80f93c0 <sf_can_activate_notification+0x3c>
 80f93b2:	683b      	ldr	r3, [r7, #0]
 80f93b4:	2b02      	cmp	r3, #2
 80f93b6:	d101      	bne.n	80f93bc <sf_can_activate_notification+0x38>
 80f93b8:	2301      	movs	r3, #1
 80f93ba:	e004      	b.n	80f93c6 <sf_can_activate_notification+0x42>
 80f93bc:	23ff      	movs	r3, #255	@ 0xff
 80f93be:	e002      	b.n	80f93c6 <sf_can_activate_notification+0x42>
 80f93c0:	2302      	movs	r3, #2
 80f93c2:	e000      	b.n	80f93c6 <sf_can_activate_notification+0x42>
	if (HAL_FDCAN_ActivateNotification(GET_CAN_HANDLER(peripheral_number),
 80f93c4:	2304      	movs	r3, #4
 80f93c6:	2200      	movs	r2, #0
 80f93c8:	4619      	mov	r1, r3
 80f93ca:	f7f4 ff63 	bl	80ee294 <HAL_FDCAN_ActivateNotification>
 80f93ce:	4603      	mov	r3, r0
 80f93d0:	2b00      	cmp	r3, #0
 80f93d2:	d001      	beq.n	80f93d8 <sf_can_activate_notification+0x54>
			0U) != HAL_OK)
    {
        return CAN_STATUS_NOOK;
 80f93d4:	2301      	movs	r3, #1
 80f93d6:	e000      	b.n	80f93da <sf_can_activate_notification+0x56>
    }
    return CAN_STATUS_OK;
 80f93d8:	2300      	movs	r3, #0
}
 80f93da:	4618      	mov	r0, r3
 80f93dc:	3708      	adds	r7, #8
 80f93de:	46bd      	mov	sp, r7
 80f93e0:	bd80      	pop	{r7, pc}
 80f93e2:	bf00      	nop
 80f93e4:	200029c0 	.word	0x200029c0
 80f93e8:	200002dc 	.word	0x200002dc

080f93ec <sf_can_start>:
 * @return     can_status_t Returns CAN_STATUS_OK if the FDCAN module is started successfully, otherwise returns CAN_STATUS_NOOK.
 *
 * @note       Ensure all necessary configurations, including message filtering and timing parameters, are set before calling
 *             this function. Failure to properly configure the FDCAN can lead to communication issues or errors during operation.
 */
can_status_t sf_can_start(uint8_t peripheral_number) {
 80f93ec:	b580      	push	{r7, lr}
 80f93ee:	b082      	sub	sp, #8
 80f93f0:	af00      	add	r7, sp, #0
 80f93f2:	4603      	mov	r3, r0
 80f93f4:	71fb      	strb	r3, [r7, #7]
    // Ensure FDCAN is properly configured before starting
    if (HAL_FDCAN_Start(GET_CAN_HANDLER(peripheral_number)) != HAL_OK) {
 80f93f6:	79fb      	ldrb	r3, [r7, #7]
 80f93f8:	2b01      	cmp	r3, #1
 80f93fa:	d006      	beq.n	80f940a <sf_can_start+0x1e>
 80f93fc:	79fb      	ldrb	r3, [r7, #7]
 80f93fe:	2b02      	cmp	r3, #2
 80f9400:	d101      	bne.n	80f9406 <sf_can_start+0x1a>
 80f9402:	4b09      	ldr	r3, [pc, #36]	@ (80f9428 <sf_can_start+0x3c>)
 80f9404:	e002      	b.n	80f940c <sf_can_start+0x20>
 80f9406:	2300      	movs	r3, #0
 80f9408:	e000      	b.n	80f940c <sf_can_start+0x20>
 80f940a:	4b08      	ldr	r3, [pc, #32]	@ (80f942c <sf_can_start+0x40>)
 80f940c:	4618      	mov	r0, r3
 80f940e:	f7f4 fd9c 	bl	80edf4a <HAL_FDCAN_Start>
 80f9412:	4603      	mov	r3, r0
 80f9414:	2b00      	cmp	r3, #0
 80f9416:	d001      	beq.n	80f941c <sf_can_start+0x30>
        // Optional: Log this error state
        return CAN_STATUS_NOOK;
 80f9418:	2301      	movs	r3, #1
 80f941a:	e000      	b.n	80f941e <sf_can_start+0x32>
    }
    return CAN_STATUS_OK;
 80f941c:	2300      	movs	r3, #0
}
 80f941e:	4618      	mov	r0, r3
 80f9420:	3708      	adds	r7, #8
 80f9422:	46bd      	mov	sp, r7
 80f9424:	bd80      	pop	{r7, pc}
 80f9426:	bf00      	nop
 80f9428:	200029c0 	.word	0x200029c0
 80f942c:	200002dc 	.word	0x200002dc

080f9430 <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80f9430:	b580      	push	{r7, lr}
 80f9432:	b082      	sub	sp, #8
 80f9434:	af00      	add	r7, sp, #0
 80f9436:	6078      	str	r0, [r7, #4]
 80f9438:	6039      	str	r1, [r7, #0]
    // Check if the interrupt is for a new message in RX FIFO 0
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0U)
 80f943a:	683b      	ldr	r3, [r7, #0]
 80f943c:	f003 0301 	and.w	r3, r3, #1
 80f9440:	2b00      	cmp	r3, #0
 80f9442:	d03f      	beq.n	80f94c4 <HAL_FDCAN_RxFifo0Callback+0x94>
    {
        // Process all messages available in RX FIFO 0
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0 && rx_message_count < MAX_RX_MESSAGES)
 80f9444:	e033      	b.n	80f94ae <HAL_FDCAN_RxFifo0Callback+0x7e>
        {
            if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader[rx_message_count], rxData[rx_message_count]) == HAL_OK)
 80f9446:	4b28      	ldr	r3, [pc, #160]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f9448:	681a      	ldr	r2, [r3, #0]
 80f944a:	4613      	mov	r3, r2
 80f944c:	009b      	lsls	r3, r3, #2
 80f944e:	4413      	add	r3, r2
 80f9450:	00db      	lsls	r3, r3, #3
 80f9452:	4a26      	ldr	r2, [pc, #152]	@ (80f94ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80f9454:	441a      	add	r2, r3
 80f9456:	4b24      	ldr	r3, [pc, #144]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f9458:	681b      	ldr	r3, [r3, #0]
 80f945a:	00db      	lsls	r3, r3, #3
 80f945c:	4924      	ldr	r1, [pc, #144]	@ (80f94f0 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80f945e:	440b      	add	r3, r1
 80f9460:	2140      	movs	r1, #64	@ 0x40
 80f9462:	6878      	ldr	r0, [r7, #4]
 80f9464:	f7f4 fdde 	bl	80ee024 <HAL_FDCAN_GetRxMessage>
 80f9468:	4603      	mov	r3, r0
 80f946a:	2b00      	cmp	r3, #0
 80f946c:	d11f      	bne.n	80f94ae <HAL_FDCAN_RxFifo0Callback+0x7e>
            {
            	// Translates ID type
            	rxHeader[rx_message_count].IdType = (rxHeader[rx_message_count].IdType == FDCAN_EXTENDED_ID)? SF_FDCAN_EXTENDED_ID:SF_FDCAN_STANDARD_ID;
 80f946e:	4b1e      	ldr	r3, [pc, #120]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f9470:	681a      	ldr	r2, [r3, #0]
 80f9472:	491e      	ldr	r1, [pc, #120]	@ (80f94ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80f9474:	4613      	mov	r3, r2
 80f9476:	009b      	lsls	r3, r3, #2
 80f9478:	4413      	add	r3, r2
 80f947a:	00db      	lsls	r3, r3, #3
 80f947c:	440b      	add	r3, r1
 80f947e:	3304      	adds	r3, #4
 80f9480:	681b      	ldr	r3, [r3, #0]
 80f9482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80f9486:	bf0c      	ite	eq
 80f9488:	2301      	moveq	r3, #1
 80f948a:	2300      	movne	r3, #0
 80f948c:	b2d9      	uxtb	r1, r3
 80f948e:	4b16      	ldr	r3, [pc, #88]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f9490:	681a      	ldr	r2, [r3, #0]
 80f9492:	4608      	mov	r0, r1
 80f9494:	4915      	ldr	r1, [pc, #84]	@ (80f94ec <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80f9496:	4613      	mov	r3, r2
 80f9498:	009b      	lsls	r3, r3, #2
 80f949a:	4413      	add	r3, r2
 80f949c:	00db      	lsls	r3, r3, #3
 80f949e:	440b      	add	r3, r1
 80f94a0:	3304      	adds	r3, #4
 80f94a2:	6018      	str	r0, [r3, #0]

            	// Here you could process data immediately or later
                // For example, logging, processing, or forwarding the message
            	rx_message_count++;  // Increment the message counter
 80f94a4:	4b10      	ldr	r3, [pc, #64]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f94a6:	681b      	ldr	r3, [r3, #0]
 80f94a8:	3301      	adds	r3, #1
 80f94aa:	4a0f      	ldr	r2, [pc, #60]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f94ac:	6013      	str	r3, [r2, #0]
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0 && rx_message_count < MAX_RX_MESSAGES)
 80f94ae:	2140      	movs	r1, #64	@ 0x40
 80f94b0:	6878      	ldr	r0, [r7, #4]
 80f94b2:	f7f4 febf 	bl	80ee234 <HAL_FDCAN_GetRxFifoFillLevel>
 80f94b6:	4603      	mov	r3, r0
 80f94b8:	2b00      	cmp	r3, #0
 80f94ba:	d003      	beq.n	80f94c4 <HAL_FDCAN_RxFifo0Callback+0x94>
 80f94bc:	4b0a      	ldr	r3, [pc, #40]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f94be:	681b      	ldr	r3, [r3, #0]
 80f94c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80f94c2:	ddc0      	ble.n	80f9446 <HAL_FDCAN_RxFifo0Callback+0x16>
            }
        }
    }

    // Reset the counter of messages
    if (rx_message_count > (MAX_RX_MESSAGES - 1)){
 80f94c4:	4b08      	ldr	r3, [pc, #32]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f94c6:	681b      	ldr	r3, [r3, #0]
 80f94c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80f94ca:	dd02      	ble.n	80f94d2 <HAL_FDCAN_RxFifo0Callback+0xa2>
    	rx_message_count = 0;
 80f94cc:	4b06      	ldr	r3, [pc, #24]	@ (80f94e8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80f94ce:	2200      	movs	r2, #0
 80f94d0:	601a      	str	r2, [r3, #0]
    }

    // Updates the condition that there is at least one message received
    filt_queue_report_status |= CAN_FILTERED_REPORT_RX_MESSAGE_AT_LEAST_ONE_RX_MASK;
 80f94d2:	4b08      	ldr	r3, [pc, #32]	@ (80f94f4 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 80f94d4:	881b      	ldrh	r3, [r3, #0]
 80f94d6:	f043 0301 	orr.w	r3, r3, #1
 80f94da:	b29a      	uxth	r2, r3
 80f94dc:	4b05      	ldr	r3, [pc, #20]	@ (80f94f4 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 80f94de:	801a      	strh	r2, [r3, #0]
}
 80f94e0:	bf00      	nop
 80f94e2:	3708      	adds	r7, #8
 80f94e4:	46bd      	mov	sp, r7
 80f94e6:	bd80      	pop	{r7, pc}
 80f94e8:	2000392c 	.word	0x2000392c
 80f94ec:	20002a24 	.word	0x20002a24
 80f94f0:	200036a4 	.word	0x200036a4
 80f94f4:	20003924 	.word	0x20003924

080f94f8 <sf_can_get_last_rx_filtered_message>:
 * Retrieves latest message received
 *
 * @param  can_message Pointer to the structure to return information about destination buffer where messages are to be copied.
 * @return can_status_t Returns CAN_STATUS_OK if there is a valid message received, otherwise returns CAN_STATUS_NOOK.
 */
can_status_t sf_can_get_last_rx_filtered_message (can_message_rx_t* can_message) {
 80f94f8:	b480      	push	{r7}
 80f94fa:	b085      	sub	sp, #20
 80f94fc:	af00      	add	r7, sp, #0
 80f94fe:	6078      	str	r0, [r7, #4]
	can_status_t ret = CAN_STATUS_NOOK;
 80f9500:	2301      	movs	r3, #1
 80f9502:	73fb      	strb	r3, [r7, #15]

	// Check if there is any message received and there�s a new one
	if ((can_message != NULL) &&
 80f9504:	687b      	ldr	r3, [r7, #4]
 80f9506:	2b00      	cmp	r3, #0
 80f9508:	d05b      	beq.n	80f95c2 <sf_can_get_last_rx_filtered_message+0xca>
			((filt_queue_report_status & CAN_FILTERED_REPORT_RX_MESSAGE_AT_LEAST_ONE_RX_MASK)!= 0) &&
 80f950a:	4b31      	ldr	r3, [pc, #196]	@ (80f95d0 <sf_can_get_last_rx_filtered_message+0xd8>)
 80f950c:	881b      	ldrh	r3, [r3, #0]
 80f950e:	f003 0301 	and.w	r3, r3, #1
	if ((can_message != NULL) &&
 80f9512:	2b00      	cmp	r3, #0
 80f9514:	d055      	beq.n	80f95c2 <sf_can_get_last_rx_filtered_message+0xca>
			(filt_queue_report_index != rx_message_count)) {
 80f9516:	4b2f      	ldr	r3, [pc, #188]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f9518:	681a      	ldr	r2, [r3, #0]
 80f951a:	4b2f      	ldr	r3, [pc, #188]	@ (80f95d8 <sf_can_get_last_rx_filtered_message+0xe0>)
 80f951c:	681b      	ldr	r3, [r3, #0]
			((filt_queue_report_status & CAN_FILTERED_REPORT_RX_MESSAGE_AT_LEAST_ONE_RX_MASK)!= 0) &&
 80f951e:	429a      	cmp	r2, r3
 80f9520:	d04f      	beq.n	80f95c2 <sf_can_get_last_rx_filtered_message+0xca>
		// Fills message structure with the available data
		can_message->identifier_type = rxHeader[filt_queue_report_index].IdType;
 80f9522:	4b2c      	ldr	r3, [pc, #176]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f9524:	681a      	ldr	r2, [r3, #0]
 80f9526:	492d      	ldr	r1, [pc, #180]	@ (80f95dc <sf_can_get_last_rx_filtered_message+0xe4>)
 80f9528:	4613      	mov	r3, r2
 80f952a:	009b      	lsls	r3, r3, #2
 80f952c:	4413      	add	r3, r2
 80f952e:	00db      	lsls	r3, r3, #3
 80f9530:	440b      	add	r3, r1
 80f9532:	3304      	adds	r3, #4
 80f9534:	681a      	ldr	r2, [r3, #0]
 80f9536:	687b      	ldr	r3, [r7, #4]
 80f9538:	605a      	str	r2, [r3, #4]
		can_message->identifier = rxHeader[filt_queue_report_index].Identifier;
 80f953a:	4b26      	ldr	r3, [pc, #152]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f953c:	681a      	ldr	r2, [r3, #0]
 80f953e:	4927      	ldr	r1, [pc, #156]	@ (80f95dc <sf_can_get_last_rx_filtered_message+0xe4>)
 80f9540:	4613      	mov	r3, r2
 80f9542:	009b      	lsls	r3, r3, #2
 80f9544:	4413      	add	r3, r2
 80f9546:	00db      	lsls	r3, r3, #3
 80f9548:	440b      	add	r3, r1
 80f954a:	681a      	ldr	r2, [r3, #0]
 80f954c:	687b      	ldr	r3, [r7, #4]
 80f954e:	601a      	str	r2, [r3, #0]
		can_message->data_length = rxHeader[filt_queue_report_index].DataLength;
 80f9550:	4b20      	ldr	r3, [pc, #128]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f9552:	681a      	ldr	r2, [r3, #0]
 80f9554:	4921      	ldr	r1, [pc, #132]	@ (80f95dc <sf_can_get_last_rx_filtered_message+0xe4>)
 80f9556:	4613      	mov	r3, r2
 80f9558:	009b      	lsls	r3, r3, #2
 80f955a:	4413      	add	r3, r2
 80f955c:	00db      	lsls	r3, r3, #3
 80f955e:	440b      	add	r3, r1
 80f9560:	330c      	adds	r3, #12
 80f9562:	681a      	ldr	r2, [r3, #0]
 80f9564:	687b      	ldr	r3, [r7, #4]
 80f9566:	60da      	str	r2, [r3, #12]
		if (can_message->data_length > MAX_DATA_LENGTH) {
 80f9568:	687b      	ldr	r3, [r7, #4]
 80f956a:	68db      	ldr	r3, [r3, #12]
 80f956c:	2b08      	cmp	r3, #8
 80f956e:	d902      	bls.n	80f9576 <sf_can_get_last_rx_filtered_message+0x7e>
			can_message->data_length = MAX_DATA_LENGTH;
 80f9570:	687b      	ldr	r3, [r7, #4]
 80f9572:	2208      	movs	r2, #8
 80f9574:	60da      	str	r2, [r3, #12]
		}
		for (int i = 0; i < can_message->data_length; i++) {
 80f9576:	2300      	movs	r3, #0
 80f9578:	60bb      	str	r3, [r7, #8]
 80f957a:	e00f      	b.n	80f959c <sf_can_get_last_rx_filtered_message+0xa4>
			can_message->data[i] = rxData[filt_queue_report_index][i];
 80f957c:	4b15      	ldr	r3, [pc, #84]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f957e:	681a      	ldr	r2, [r3, #0]
 80f9580:	687b      	ldr	r3, [r7, #4]
 80f9582:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80f9584:	68bb      	ldr	r3, [r7, #8]
 80f9586:	440b      	add	r3, r1
 80f9588:	4915      	ldr	r1, [pc, #84]	@ (80f95e0 <sf_can_get_last_rx_filtered_message+0xe8>)
 80f958a:	00d2      	lsls	r2, r2, #3
 80f958c:	4411      	add	r1, r2
 80f958e:	68ba      	ldr	r2, [r7, #8]
 80f9590:	440a      	add	r2, r1
 80f9592:	7812      	ldrb	r2, [r2, #0]
 80f9594:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < can_message->data_length; i++) {
 80f9596:	68bb      	ldr	r3, [r7, #8]
 80f9598:	3301      	adds	r3, #1
 80f959a:	60bb      	str	r3, [r7, #8]
 80f959c:	687b      	ldr	r3, [r7, #4]
 80f959e:	68da      	ldr	r2, [r3, #12]
 80f95a0:	68bb      	ldr	r3, [r7, #8]
 80f95a2:	429a      	cmp	r2, r3
 80f95a4:	d8ea      	bhi.n	80f957c <sf_can_get_last_rx_filtered_message+0x84>
	    }

	    // Updates next index to report
		filt_queue_report_index++;
 80f95a6:	4b0b      	ldr	r3, [pc, #44]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f95a8:	681b      	ldr	r3, [r3, #0]
 80f95aa:	3301      	adds	r3, #1
 80f95ac:	4a09      	ldr	r2, [pc, #36]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f95ae:	6013      	str	r3, [r2, #0]
	    if (filt_queue_report_index >= MAX_RX_MESSAGES){
 80f95b0:	4b08      	ldr	r3, [pc, #32]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f95b2:	681b      	ldr	r3, [r3, #0]
 80f95b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80f95b6:	dd02      	ble.n	80f95be <sf_can_get_last_rx_filtered_message+0xc6>
	    	filt_queue_report_index = 0;
 80f95b8:	4b06      	ldr	r3, [pc, #24]	@ (80f95d4 <sf_can_get_last_rx_filtered_message+0xdc>)
 80f95ba:	2200      	movs	r2, #0
 80f95bc:	601a      	str	r2, [r3, #0]
	    }

		ret = CAN_STATUS_OK;
 80f95be:	2300      	movs	r3, #0
 80f95c0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80f95c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80f95c4:	4618      	mov	r0, r3
 80f95c6:	3714      	adds	r7, #20
 80f95c8:	46bd      	mov	sp, r7
 80f95ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f95ce:	4770      	bx	lr
 80f95d0:	20003924 	.word	0x20003924
 80f95d4:	20003928 	.word	0x20003928
 80f95d8:	2000392c 	.word	0x2000392c
 80f95dc:	20002a24 	.word	0x20002a24
 80f95e0:	200036a4 	.word	0x200036a4

080f95e4 <sf_crc_init_crc32_deadbeef>:
#include "stm32h5xx_hal.h"

static CRC_HandleTypeDef hcrc;

void sf_crc_init_crc32_deadbeef(void)
{
 80f95e4:	b580      	push	{r7, lr}
 80f95e6:	b082      	sub	sp, #8
 80f95e8:	af00      	add	r7, sp, #0
    __HAL_RCC_CRC_CLK_ENABLE();
 80f95ea:	4b1a      	ldr	r3, [pc, #104]	@ (80f9654 <sf_crc_init_crc32_deadbeef+0x70>)
 80f95ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f95f0:	4a18      	ldr	r2, [pc, #96]	@ (80f9654 <sf_crc_init_crc32_deadbeef+0x70>)
 80f95f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80f95f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80f95fa:	4b16      	ldr	r3, [pc, #88]	@ (80f9654 <sf_crc_init_crc32_deadbeef+0x70>)
 80f95fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f9600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80f9604:	607b      	str	r3, [r7, #4]
 80f9606:	687b      	ldr	r3, [r7, #4]

    hcrc.Instance = CRC;
 80f9608:	4b13      	ldr	r3, [pc, #76]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f960a:	4a14      	ldr	r2, [pc, #80]	@ (80f965c <sf_crc_init_crc32_deadbeef+0x78>)
 80f960c:	601a      	str	r2, [r3, #0]
    hcrc.Init.DefaultPolynomialUse     = DEFAULT_POLYNOMIAL_DISABLE;
 80f960e:	4b12      	ldr	r3, [pc, #72]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9610:	2201      	movs	r2, #1
 80f9612:	711a      	strb	r2, [r3, #4]
    hcrc.Init.GeneratingPolynomial     = 0xDEADBEEF;
 80f9614:	4b10      	ldr	r3, [pc, #64]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9616:	4a12      	ldr	r2, [pc, #72]	@ (80f9660 <sf_crc_init_crc32_deadbeef+0x7c>)
 80f9618:	609a      	str	r2, [r3, #8]
    hcrc.Init.CRCLength                = CRC_POLYLENGTH_32B;
 80f961a:	4b0f      	ldr	r3, [pc, #60]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f961c:	2200      	movs	r2, #0
 80f961e:	60da      	str	r2, [r3, #12]
    hcrc.Init.DefaultInitValueUse      = DEFAULT_INIT_VALUE_DISABLE;
 80f9620:	4b0d      	ldr	r3, [pc, #52]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9622:	2201      	movs	r2, #1
 80f9624:	715a      	strb	r2, [r3, #5]
    hcrc.Init.InitValue                = 0x00000000;
 80f9626:	4b0c      	ldr	r3, [pc, #48]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9628:	2200      	movs	r2, #0
 80f962a:	611a      	str	r2, [r3, #16]
    hcrc.Init.InputDataInversionMode   = CRC_INPUTDATA_INVERSION_NONE;
 80f962c:	4b0a      	ldr	r3, [pc, #40]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f962e:	2200      	movs	r2, #0
 80f9630:	615a      	str	r2, [r3, #20]
    hcrc.Init.OutputDataInversionMode  = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80f9632:	4b09      	ldr	r3, [pc, #36]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9634:	2200      	movs	r2, #0
 80f9636:	619a      	str	r2, [r3, #24]
    hcrc.InputDataFormat               = CRC_INPUTDATA_FORMAT_BYTES;
 80f9638:	4b07      	ldr	r3, [pc, #28]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f963a:	2201      	movs	r2, #1
 80f963c:	621a      	str	r2, [r3, #32]

    HAL_CRC_DeInit(&hcrc);
 80f963e:	4806      	ldr	r0, [pc, #24]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9640:	f7f2 fab4 	bl	80ebbac <HAL_CRC_DeInit>
    HAL_CRC_Init(&hcrc);
 80f9644:	4804      	ldr	r0, [pc, #16]	@ (80f9658 <sf_crc_init_crc32_deadbeef+0x74>)
 80f9646:	f7f2 fa4d 	bl	80ebae4 <HAL_CRC_Init>
}
 80f964a:	bf00      	nop
 80f964c:	3708      	adds	r7, #8
 80f964e:	46bd      	mov	sp, r7
 80f9650:	bd80      	pop	{r7, pc}
 80f9652:	bf00      	nop
 80f9654:	44020c00 	.word	0x44020c00
 80f9658:	20003930 	.word	0x20003930
 80f965c:	40023000 	.word	0x40023000
 80f9660:	deadbeef 	.word	0xdeadbeef

080f9664 <sf_crc_init_crc16_deadbeef>:
    HAL_CRC_DeInit(&hcrc);
    HAL_CRC_Init(&hcrc);
}

void sf_crc_init_crc16_deadbeef(void)
{
 80f9664:	b580      	push	{r7, lr}
 80f9666:	b082      	sub	sp, #8
 80f9668:	af00      	add	r7, sp, #0
    __HAL_RCC_CRC_CLK_ENABLE();
 80f966a:	4b1a      	ldr	r3, [pc, #104]	@ (80f96d4 <sf_crc_init_crc16_deadbeef+0x70>)
 80f966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f9670:	4a18      	ldr	r2, [pc, #96]	@ (80f96d4 <sf_crc_init_crc16_deadbeef+0x70>)
 80f9672:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80f9676:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80f967a:	4b16      	ldr	r3, [pc, #88]	@ (80f96d4 <sf_crc_init_crc16_deadbeef+0x70>)
 80f967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f9680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80f9684:	607b      	str	r3, [r7, #4]
 80f9686:	687b      	ldr	r3, [r7, #4]

    hcrc.Instance = CRC;
 80f9688:	4b13      	ldr	r3, [pc, #76]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f968a:	4a14      	ldr	r2, [pc, #80]	@ (80f96dc <sf_crc_init_crc16_deadbeef+0x78>)
 80f968c:	601a      	str	r2, [r3, #0]
    hcrc.Init.DefaultPolynomialUse     = DEFAULT_POLYNOMIAL_DISABLE;
 80f968e:	4b12      	ldr	r3, [pc, #72]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f9690:	2201      	movs	r2, #1
 80f9692:	711a      	strb	r2, [r3, #4]
    hcrc.Init.GeneratingPolynomial     = 0xBEEF;
 80f9694:	4b10      	ldr	r3, [pc, #64]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f9696:	f64b 62ef 	movw	r2, #48879	@ 0xbeef
 80f969a:	609a      	str	r2, [r3, #8]
    hcrc.Init.CRCLength                = CRC_POLYLENGTH_16B;
 80f969c:	4b0e      	ldr	r3, [pc, #56]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f969e:	2208      	movs	r2, #8
 80f96a0:	60da      	str	r2, [r3, #12]
    hcrc.Init.DefaultInitValueUse      = DEFAULT_INIT_VALUE_DISABLE;
 80f96a2:	4b0d      	ldr	r3, [pc, #52]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96a4:	2201      	movs	r2, #1
 80f96a6:	715a      	strb	r2, [r3, #5]
    hcrc.Init.InitValue                = 0x0000;
 80f96a8:	4b0b      	ldr	r3, [pc, #44]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96aa:	2200      	movs	r2, #0
 80f96ac:	611a      	str	r2, [r3, #16]
    hcrc.Init.InputDataInversionMode   = CRC_INPUTDATA_INVERSION_NONE;
 80f96ae:	4b0a      	ldr	r3, [pc, #40]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96b0:	2200      	movs	r2, #0
 80f96b2:	615a      	str	r2, [r3, #20]
    hcrc.Init.OutputDataInversionMode  = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80f96b4:	4b08      	ldr	r3, [pc, #32]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96b6:	2200      	movs	r2, #0
 80f96b8:	619a      	str	r2, [r3, #24]
    hcrc.InputDataFormat               = CRC_INPUTDATA_FORMAT_BYTES;
 80f96ba:	4b07      	ldr	r3, [pc, #28]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96bc:	2201      	movs	r2, #1
 80f96be:	621a      	str	r2, [r3, #32]

    HAL_CRC_DeInit(&hcrc);
 80f96c0:	4805      	ldr	r0, [pc, #20]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96c2:	f7f2 fa73 	bl	80ebbac <HAL_CRC_DeInit>
    HAL_CRC_Init(&hcrc);
 80f96c6:	4804      	ldr	r0, [pc, #16]	@ (80f96d8 <sf_crc_init_crc16_deadbeef+0x74>)
 80f96c8:	f7f2 fa0c 	bl	80ebae4 <HAL_CRC_Init>
}
 80f96cc:	bf00      	nop
 80f96ce:	3708      	adds	r7, #8
 80f96d0:	46bd      	mov	sp, r7
 80f96d2:	bd80      	pop	{r7, pc}
 80f96d4:	44020c00 	.word	0x44020c00
 80f96d8:	20003930 	.word	0x20003930
 80f96dc:	40023000 	.word	0x40023000

080f96e0 <sf_crc_compute>:

uint32_t sf_crc_compute(uint32_t *data, uint32_t size)
{
 80f96e0:	b580      	push	{r7, lr}
 80f96e2:	b082      	sub	sp, #8
 80f96e4:	af00      	add	r7, sp, #0
 80f96e6:	6078      	str	r0, [r7, #4]
 80f96e8:	6039      	str	r1, [r7, #0]
    return HAL_CRC_Calculate(&hcrc, data, size);
 80f96ea:	683a      	ldr	r2, [r7, #0]
 80f96ec:	6879      	ldr	r1, [r7, #4]
 80f96ee:	4804      	ldr	r0, [pc, #16]	@ (80f9700 <sf_crc_compute+0x20>)
 80f96f0:	f7f2 fa89 	bl	80ebc06 <HAL_CRC_Calculate>
 80f96f4:	4603      	mov	r3, r0
}
 80f96f6:	4618      	mov	r0, r3
 80f96f8:	3708      	adds	r7, #8
 80f96fa:	46bd      	mov	sp, r7
 80f96fc:	bd80      	pop	{r7, pc}
 80f96fe:	bf00      	nop
 80f9700:	20003930 	.word	0x20003930

080f9704 <sf_crc_deinit>:

void sf_crc_deinit(void)
{
 80f9704:	b580      	push	{r7, lr}
 80f9706:	af00      	add	r7, sp, #0
    HAL_CRC_DeInit(&hcrc);
 80f9708:	4806      	ldr	r0, [pc, #24]	@ (80f9724 <sf_crc_deinit+0x20>)
 80f970a:	f7f2 fa4f 	bl	80ebbac <HAL_CRC_DeInit>
    __HAL_RCC_CRC_CLK_DISABLE();
 80f970e:	4b06      	ldr	r3, [pc, #24]	@ (80f9728 <sf_crc_deinit+0x24>)
 80f9710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80f9714:	4a04      	ldr	r2, [pc, #16]	@ (80f9728 <sf_crc_deinit+0x24>)
 80f9716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80f971a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80f971e:	bf00      	nop
 80f9720:	bd80      	pop	{r7, pc}
 80f9722:	bf00      	nop
 80f9724:	20003930 	.word	0x20003930
 80f9728:	44020c00 	.word	0x44020c00

080f972c <sf_crc_compute_crc32_deadbeef>:

uint32_t sf_crc_compute_crc32_deadbeef(uint32_t *data, uint32_t size)
{
 80f972c:	b580      	push	{r7, lr}
 80f972e:	b084      	sub	sp, #16
 80f9730:	af00      	add	r7, sp, #0
 80f9732:	6078      	str	r0, [r7, #4]
 80f9734:	6039      	str	r1, [r7, #0]
    sf_crc_init_crc32_deadbeef();
 80f9736:	f7ff ff55 	bl	80f95e4 <sf_crc_init_crc32_deadbeef>
    uint32_t result = sf_crc_compute(data, size);
 80f973a:	6839      	ldr	r1, [r7, #0]
 80f973c:	6878      	ldr	r0, [r7, #4]
 80f973e:	f7ff ffcf 	bl	80f96e0 <sf_crc_compute>
 80f9742:	60f8      	str	r0, [r7, #12]
    sf_crc_deinit();
 80f9744:	f7ff ffde 	bl	80f9704 <sf_crc_deinit>
    return result;
 80f9748:	68fb      	ldr	r3, [r7, #12]
}
 80f974a:	4618      	mov	r0, r3
 80f974c:	3710      	adds	r7, #16
 80f974e:	46bd      	mov	sp, r7
 80f9750:	bd80      	pop	{r7, pc}

080f9752 <sf_crc_compute_crc16_deadbeef>:
    sf_crc_deinit();
    return (uint16_t)(result & 0xFFFF);
}

uint16_t sf_crc_compute_crc16_deadbeef( uint32_t *data, uint32_t size)
{
 80f9752:	b580      	push	{r7, lr}
 80f9754:	b084      	sub	sp, #16
 80f9756:	af00      	add	r7, sp, #0
 80f9758:	6078      	str	r0, [r7, #4]
 80f975a:	6039      	str	r1, [r7, #0]

	sf_crc_init_crc16_deadbeef();
 80f975c:	f7ff ff82 	bl	80f9664 <sf_crc_init_crc16_deadbeef>
	uint32_t result = sf_crc_compute(data, size);
 80f9760:	6839      	ldr	r1, [r7, #0]
 80f9762:	6878      	ldr	r0, [r7, #4]
 80f9764:	f7ff ffbc 	bl	80f96e0 <sf_crc_compute>
 80f9768:	60f8      	str	r0, [r7, #12]
	sf_crc_deinit();
 80f976a:	f7ff ffcb 	bl	80f9704 <sf_crc_deinit>
	return (uint16_t)(result & 0xFFFF);
 80f976e:	68fb      	ldr	r3, [r7, #12]
 80f9770:	b29b      	uxth	r3, r3
}
 80f9772:	4618      	mov	r0, r3
 80f9774:	3710      	adds	r7, #16
 80f9776:	46bd      	mov	sp, r7
 80f9778:	bd80      	pop	{r7, pc}
	...

080f977c <sf_flash_get_page_index>:
 * @param page Pointer to nand_page_t structure to store page information.
 * @param context Optional context (unused here).
 * @return True if address is valid, otherwise false.
 */
bool sf_flash_get_page_index(uint32_t address, nand_page_t* page, void* context)
{
 80f977c:	b480      	push	{r7}
 80f977e:	b085      	sub	sp, #20
 80f9780:	af00      	add	r7, sp, #0
 80f9782:	60f8      	str	r0, [r7, #12]
 80f9784:	60b9      	str	r1, [r7, #8]
 80f9786:	607a      	str	r2, [r7, #4]
	/* Check if address is within FLASH range */
	if (address < FLASH_BASE || address >= FLASH_END_ADDRESS) {
 80f9788:	68fb      	ldr	r3, [r7, #12]
 80f978a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80f978e:	d317      	bcc.n	80f97c0 <sf_flash_get_page_index+0x44>
 80f9790:	4b1c      	ldr	r3, [pc, #112]	@ (80f9804 <sf_flash_get_page_index+0x88>)
 80f9792:	881b      	ldrh	r3, [r3, #0]
 80f9794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80f9798:	4293      	cmp	r3, r2
 80f979a:	d00c      	beq.n	80f97b6 <sf_flash_get_page_index+0x3a>
 80f979c:	4b19      	ldr	r3, [pc, #100]	@ (80f9804 <sf_flash_get_page_index+0x88>)
 80f979e:	881b      	ldrh	r3, [r3, #0]
 80f97a0:	2b00      	cmp	r3, #0
 80f97a2:	d005      	beq.n	80f97b0 <sf_flash_get_page_index+0x34>
 80f97a4:	4b17      	ldr	r3, [pc, #92]	@ (80f9804 <sf_flash_get_page_index+0x88>)
 80f97a6:	881b      	ldrh	r3, [r3, #0]
 80f97a8:	029b      	lsls	r3, r3, #10
 80f97aa:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80f97ae:	e004      	b.n	80f97ba <sf_flash_get_page_index+0x3e>
 80f97b0:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f97b4:	e001      	b.n	80f97ba <sf_flash_get_page_index+0x3e>
 80f97b6:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f97ba:	68fa      	ldr	r2, [r7, #12]
 80f97bc:	4293      	cmp	r3, r2
 80f97be:	d801      	bhi.n	80f97c4 <sf_flash_get_page_index+0x48>
		return false;
 80f97c0:	2300      	movs	r3, #0
 80f97c2:	e018      	b.n	80f97f6 <sf_flash_get_page_index+0x7a>
	}

	/* Calculate page index and addresses */
	page->index = (address - FLASH_BASE) / FLASH_SECTOR_SIZE;
 80f97c4:	68fb      	ldr	r3, [r7, #12]
 80f97c6:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80f97ca:	0b5a      	lsrs	r2, r3, #13
 80f97cc:	68bb      	ldr	r3, [r7, #8]
 80f97ce:	60da      	str	r2, [r3, #12]
	page->start_address = FLASH_BASE + page->index * FLASH_SECTOR_SIZE;
 80f97d0:	68bb      	ldr	r3, [r7, #8]
 80f97d2:	68db      	ldr	r3, [r3, #12]
 80f97d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80f97d8:	035a      	lsls	r2, r3, #13
 80f97da:	68bb      	ldr	r3, [r7, #8]
 80f97dc:	611a      	str	r2, [r3, #16]
	page->size          = FLASH_SECTOR_SIZE;
 80f97de:	68bb      	ldr	r3, [r7, #8]
 80f97e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80f97e4:	609a      	str	r2, [r3, #8]
	page->buffer        = sector_buffer;
 80f97e6:	68bb      	ldr	r3, [r7, #8]
 80f97e8:	4a07      	ldr	r2, [pc, #28]	@ (80f9808 <sf_flash_get_page_index+0x8c>)
 80f97ea:	601a      	str	r2, [r3, #0]
	page->buffer_size   = sizeof(sector_buffer);
 80f97ec:	68bb      	ldr	r3, [r7, #8]
 80f97ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80f97f2:	605a      	str	r2, [r3, #4]

	return true;
 80f97f4:	2301      	movs	r3, #1
}
 80f97f6:	4618      	mov	r0, r3
 80f97f8:	3714      	adds	r7, #20
 80f97fa:	46bd      	mov	sp, r7
 80f97fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f9800:	4770      	bx	lr
 80f9802:	bf00      	nop
 80f9804:	08fff80c 	.word	0x08fff80c
 80f9808:	20003954 	.word	0x20003954

080f980c <sf_flash_check>:
 * @param flash_data Current data in FLASH.
 * @param new_data Data intended to be written.
 * @return Always returns true (placeholder for custom checks).
 */
bool sf_flash_check(uint8_t flash_data, uint8_t new_data)
{
 80f980c:	b480      	push	{r7}
 80f980e:	b083      	sub	sp, #12
 80f9810:	af00      	add	r7, sp, #0
 80f9812:	4603      	mov	r3, r0
 80f9814:	460a      	mov	r2, r1
 80f9816:	71fb      	strb	r3, [r7, #7]
 80f9818:	4613      	mov	r3, r2
 80f981a:	71bb      	strb	r3, [r7, #6]
	/* Implement custom logic if needed */
	return true;
 80f981c:	2301      	movs	r3, #1
}
 80f981e:	4618      	mov	r0, r3
 80f9820:	370c      	adds	r7, #12
 80f9822:	46bd      	mov	sp, r7
 80f9824:	f85d 7b04 	ldr.w	r7, [sp], #4
 80f9828:	4770      	bx	lr

080f982a <sf_flash_write>:
 * @param context Optional context (unused here).
 * @return NAND_STATUS_SUCCESS on success, otherwise NAND_ERROR_WRITING.
 */

uint8_t sf_flash_write(uint32_t address, const uint8_t* data, uint32_t size, void *context)
{
 80f982a:	b580      	push	{r7, lr}
 80f982c:	b08c      	sub	sp, #48	@ 0x30
 80f982e:	af00      	add	r7, sp, #0
 80f9830:	60f8      	str	r0, [r7, #12]
 80f9832:	60b9      	str	r1, [r7, #8]
 80f9834:	607a      	str	r2, [r7, #4]
 80f9836:	603b      	str	r3, [r7, #0]
	if ((data == NULL) || (size == 0u)) {
 80f9838:	68bb      	ldr	r3, [r7, #8]
 80f983a:	2b00      	cmp	r3, #0
 80f983c:	d002      	beq.n	80f9844 <sf_flash_write+0x1a>
 80f983e:	687b      	ldr	r3, [r7, #4]
 80f9840:	2b00      	cmp	r3, #0
 80f9842:	d101      	bne.n	80f9848 <sf_flash_write+0x1e>
		return NAND_ERROR_INVALID_PARAM;
 80f9844:	2309      	movs	r3, #9
 80f9846:	e043      	b.n	80f98d0 <sf_flash_write+0xa6>
	}

	if (!IS_ALIGNED_16(address)) {
 80f9848:	68fb      	ldr	r3, [r7, #12]
 80f984a:	f003 030f 	and.w	r3, r3, #15
 80f984e:	2b00      	cmp	r3, #0
 80f9850:	d001      	beq.n	80f9856 <sf_flash_write+0x2c>
		return NAND_ERROR_WRITING;
 80f9852:	2301      	movs	r3, #1
 80f9854:	e03c      	b.n	80f98d0 <sf_flash_write+0xa6>
	}

	HAL_FLASH_Unlock();
 80f9856:	f7f5 f8f5 	bl	80eea44 <HAL_FLASH_Unlock>

	for (uint32_t i = 0; i < size; i += MEM_FLASH_WRITE_ALIGNMENT) {
 80f985a:	2300      	movs	r3, #0
 80f985c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80f985e:	e030      	b.n	80f98c2 <sf_flash_write+0x98>
		uint8_t quad[MEM_FLASH_WRITE_ALIGNMENT] = {0xFF};
 80f9860:	23ff      	movs	r3, #255	@ 0xff
 80f9862:	613b      	str	r3, [r7, #16]
 80f9864:	f107 0314 	add.w	r3, r7, #20
 80f9868:	2200      	movs	r2, #0
 80f986a:	601a      	str	r2, [r3, #0]
 80f986c:	605a      	str	r2, [r3, #4]
 80f986e:	609a      	str	r2, [r3, #8]
		uint32_t copy_len = (size - i < MEM_FLASH_WRITE_ALIGNMENT) ? (size - i) : MEM_FLASH_WRITE_ALIGNMENT;
 80f9870:	687a      	ldr	r2, [r7, #4]
 80f9872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f9874:	1ad3      	subs	r3, r2, r3
 80f9876:	2b10      	cmp	r3, #16
 80f9878:	bf28      	it	cs
 80f987a:	2310      	movcs	r3, #16
 80f987c:	62bb      	str	r3, [r7, #40]	@ 0x28
		memcpy(quad, &data[i], copy_len);
 80f987e:	68ba      	ldr	r2, [r7, #8]
 80f9880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f9882:	18d1      	adds	r1, r2, r3
 80f9884:	f107 0310 	add.w	r3, r7, #16
 80f9888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80f988a:	4618      	mov	r0, r3
 80f988c:	f000 fb41 	bl	80f9f12 <memcpy>

		uintptr_t p = (uintptr_t)quad;
 80f9890:	f107 0310 	add.w	r3, r7, #16
 80f9894:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_StatusTypeDef st = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address + i, (uint32_t)p);
 80f9896:	68fa      	ldr	r2, [r7, #12]
 80f9898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f989a:	4413      	add	r3, r2
 80f989c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80f989e:	4619      	mov	r1, r3
 80f98a0:	2002      	movs	r0, #2
 80f98a2:	f7f5 f857 	bl	80ee954 <HAL_FLASH_Program>
 80f98a6:	4603      	mov	r3, r0
 80f98a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (st != HAL_OK) {
 80f98ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80f98b0:	2b00      	cmp	r3, #0
 80f98b2:	d003      	beq.n	80f98bc <sf_flash_write+0x92>
			HAL_FLASH_Lock();
 80f98b4:	f7f5 f8ec 	bl	80eea90 <HAL_FLASH_Lock>
			return NAND_ERROR_WRITING;
 80f98b8:	2301      	movs	r3, #1
 80f98ba:	e009      	b.n	80f98d0 <sf_flash_write+0xa6>
	for (uint32_t i = 0; i < size; i += MEM_FLASH_WRITE_ALIGNMENT) {
 80f98bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f98be:	3310      	adds	r3, #16
 80f98c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80f98c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80f98c4:	687b      	ldr	r3, [r7, #4]
 80f98c6:	429a      	cmp	r2, r3
 80f98c8:	d3ca      	bcc.n	80f9860 <sf_flash_write+0x36>
		}
	}

	HAL_FLASH_Lock();
 80f98ca:	f7f5 f8e1 	bl	80eea90 <HAL_FLASH_Lock>
	return NAND_STATUS_SUCCESS;
 80f98ce:	2300      	movs	r3, #0
}
 80f98d0:	4618      	mov	r0, r3
 80f98d2:	3730      	adds	r7, #48	@ 0x30
 80f98d4:	46bd      	mov	sp, r7
 80f98d6:	bd80      	pop	{r7, pc}

080f98d8 <sf_flash_read>:
 * @param size Number of bytes to read.
 * @param context Optional context (unused here).
 * @return NAND_STATUS_SUCCESS on success, otherwise NAND_ERROR_READING.
 */
uint8_t sf_flash_read(uint32_t address, uint8_t* data, uint32_t size, void *context)
{
 80f98d8:	b580      	push	{r7, lr}
 80f98da:	b084      	sub	sp, #16
 80f98dc:	af00      	add	r7, sp, #0
 80f98de:	60f8      	str	r0, [r7, #12]
 80f98e0:	60b9      	str	r1, [r7, #8]
 80f98e2:	607a      	str	r2, [r7, #4]
 80f98e4:	603b      	str	r3, [r7, #0]
    if ((data == NULL) || (size == 0u)) {
 80f98e6:	68bb      	ldr	r3, [r7, #8]
 80f98e8:	2b00      	cmp	r3, #0
 80f98ea:	d002      	beq.n	80f98f2 <sf_flash_read+0x1a>
 80f98ec:	687b      	ldr	r3, [r7, #4]
 80f98ee:	2b00      	cmp	r3, #0
 80f98f0:	d101      	bne.n	80f98f6 <sf_flash_read+0x1e>
        return NAND_ERROR_INVALID_PARAM;
 80f98f2:	2309      	movs	r3, #9
 80f98f4:	e026      	b.n	80f9944 <sf_flash_read+0x6c>
    }

    if ((address < FLASH_BASE) || ((address + size) > FLASH_END_ADDRESS)) {
 80f98f6:	68fb      	ldr	r3, [r7, #12]
 80f98f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80f98fc:	d319      	bcc.n	80f9932 <sf_flash_read+0x5a>
 80f98fe:	68fa      	ldr	r2, [r7, #12]
 80f9900:	687b      	ldr	r3, [r7, #4]
 80f9902:	441a      	add	r2, r3
 80f9904:	4b11      	ldr	r3, [pc, #68]	@ (80f994c <sf_flash_read+0x74>)
 80f9906:	881b      	ldrh	r3, [r3, #0]
 80f9908:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80f990c:	428b      	cmp	r3, r1
 80f990e:	d00c      	beq.n	80f992a <sf_flash_read+0x52>
 80f9910:	4b0e      	ldr	r3, [pc, #56]	@ (80f994c <sf_flash_read+0x74>)
 80f9912:	881b      	ldrh	r3, [r3, #0]
 80f9914:	2b00      	cmp	r3, #0
 80f9916:	d005      	beq.n	80f9924 <sf_flash_read+0x4c>
 80f9918:	4b0c      	ldr	r3, [pc, #48]	@ (80f994c <sf_flash_read+0x74>)
 80f991a:	881b      	ldrh	r3, [r3, #0]
 80f991c:	029b      	lsls	r3, r3, #10
 80f991e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80f9922:	e004      	b.n	80f992e <sf_flash_read+0x56>
 80f9924:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f9928:	e001      	b.n	80f992e <sf_flash_read+0x56>
 80f992a:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f992e:	4293      	cmp	r3, r2
 80f9930:	d201      	bcs.n	80f9936 <sf_flash_read+0x5e>
        return NAND_ERROR_READING;
 80f9932:	2302      	movs	r3, #2
 80f9934:	e006      	b.n	80f9944 <sf_flash_read+0x6c>
    }

    memcpy(data, (const void*)address, size);
 80f9936:	68fb      	ldr	r3, [r7, #12]
 80f9938:	687a      	ldr	r2, [r7, #4]
 80f993a:	4619      	mov	r1, r3
 80f993c:	68b8      	ldr	r0, [r7, #8]
 80f993e:	f000 fae8 	bl	80f9f12 <memcpy>
    return NAND_STATUS_SUCCESS;
 80f9942:	2300      	movs	r3, #0
}
 80f9944:	4618      	mov	r0, r3
 80f9946:	3710      	adds	r7, #16
 80f9948:	46bd      	mov	sp, r7
 80f994a:	bd80      	pop	{r7, pc}
 80f994c:	08fff80c 	.word	0x08fff80c

080f9950 <sf_flash_erase_page>:
 * @param page_size Size of the page (unused, predefined).
 * @param context Optional context (unused here).
 * @return NAND_STATUS_SUCCESS on success, otherwise NAND_ERROR_ERASING.
 */
uint8_t sf_flash_erase_page(uint32_t page_index, uint32_t page_start_addr, uint32_t page_size, void* context)
{
 80f9950:	b580      	push	{r7, lr}
 80f9952:	b08c      	sub	sp, #48	@ 0x30
 80f9954:	af00      	add	r7, sp, #0
 80f9956:	60f8      	str	r0, [r7, #12]
 80f9958:	60b9      	str	r1, [r7, #8]
 80f995a:	607a      	str	r2, [r7, #4]
 80f995c:	603b      	str	r3, [r7, #0]
    if (!IS_ALIGNED_16(page_start_addr)) {
 80f995e:	68bb      	ldr	r3, [r7, #8]
 80f9960:	f003 030f 	and.w	r3, r3, #15
 80f9964:	2b00      	cmp	r3, #0
 80f9966:	d001      	beq.n	80f996c <sf_flash_erase_page+0x1c>
        return NAND_ERROR_ERASING;
 80f9968:	2303      	movs	r3, #3
 80f996a:	e049      	b.n	80f9a00 <sf_flash_erase_page+0xb0>
    }

    if ((page_start_addr < FLASH_BASE) || (page_start_addr >= FLASH_END_ADDRESS)) {
 80f996c:	68bb      	ldr	r3, [r7, #8]
 80f996e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80f9972:	d317      	bcc.n	80f99a4 <sf_flash_erase_page+0x54>
 80f9974:	4b24      	ldr	r3, [pc, #144]	@ (80f9a08 <sf_flash_erase_page+0xb8>)
 80f9976:	881b      	ldrh	r3, [r3, #0]
 80f9978:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80f997c:	4293      	cmp	r3, r2
 80f997e:	d00c      	beq.n	80f999a <sf_flash_erase_page+0x4a>
 80f9980:	4b21      	ldr	r3, [pc, #132]	@ (80f9a08 <sf_flash_erase_page+0xb8>)
 80f9982:	881b      	ldrh	r3, [r3, #0]
 80f9984:	2b00      	cmp	r3, #0
 80f9986:	d005      	beq.n	80f9994 <sf_flash_erase_page+0x44>
 80f9988:	4b1f      	ldr	r3, [pc, #124]	@ (80f9a08 <sf_flash_erase_page+0xb8>)
 80f998a:	881b      	ldrh	r3, [r3, #0]
 80f998c:	029b      	lsls	r3, r3, #10
 80f998e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80f9992:	e004      	b.n	80f999e <sf_flash_erase_page+0x4e>
 80f9994:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f9998:	e001      	b.n	80f999e <sf_flash_erase_page+0x4e>
 80f999a:	f04f 6302 	mov.w	r3, #136314880	@ 0x8200000
 80f999e:	68ba      	ldr	r2, [r7, #8]
 80f99a0:	4293      	cmp	r3, r2
 80f99a2:	d801      	bhi.n	80f99a8 <sf_flash_erase_page+0x58>
        return NAND_ERROR_INVALID_PARAM;
 80f99a4:	2309      	movs	r3, #9
 80f99a6:	e02b      	b.n	80f9a00 <sf_flash_erase_page+0xb0>
    }

    HAL_FLASH_Unlock();
 80f99a8:	f7f5 f84c 	bl	80eea44 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase = {0};
 80f99ac:	f107 0318 	add.w	r3, r7, #24
 80f99b0:	2200      	movs	r2, #0
 80f99b2:	601a      	str	r2, [r3, #0]
 80f99b4:	605a      	str	r2, [r3, #4]
 80f99b6:	609a      	str	r2, [r3, #8]
 80f99b8:	60da      	str	r2, [r3, #12]
    uint32_t page_error = 0;
 80f99ba:	2300      	movs	r3, #0
 80f99bc:	617b      	str	r3, [r7, #20]

    uint32_t sector_index = (page_start_addr - FLASH_BASE) / FLASH_SECTOR_SIZE;
 80f99be:	68bb      	ldr	r3, [r7, #8]
 80f99c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80f99c4:	0b5b      	lsrs	r3, r3, #13
 80f99c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    erase.TypeErase  = FLASH_TYPEERASE_SECTORS;
 80f99c8:	2304      	movs	r3, #4
 80f99ca:	61bb      	str	r3, [r7, #24]
    erase.Banks      = FLASH_BANK_1;
 80f99cc:	2301      	movs	r3, #1
 80f99ce:	61fb      	str	r3, [r7, #28]
    erase.Sector     = sector_index;
 80f99d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80f99d2:	623b      	str	r3, [r7, #32]
    erase.NbSectors  = 1;
 80f99d4:	2301      	movs	r3, #1
 80f99d6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_StatusTypeDef st = HAL_FLASHEx_Erase(&erase, &page_error);
 80f99d8:	f107 0214 	add.w	r2, r7, #20
 80f99dc:	f107 0318 	add.w	r3, r7, #24
 80f99e0:	4611      	mov	r1, r2
 80f99e2:	4618      	mov	r0, r3
 80f99e4:	f7f5 f97a 	bl	80eecdc <HAL_FLASHEx_Erase>
 80f99e8:	4603      	mov	r3, r0
 80f99ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    HAL_FLASH_Lock();
 80f99ee:	f7f5 f84f 	bl	80eea90 <HAL_FLASH_Lock>

    return (st == HAL_OK) ? NAND_STATUS_SUCCESS : NAND_ERROR_ERASING;
 80f99f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80f99f6:	2b00      	cmp	r3, #0
 80f99f8:	d101      	bne.n	80f99fe <sf_flash_erase_page+0xae>
 80f99fa:	2300      	movs	r3, #0
 80f99fc:	e000      	b.n	80f9a00 <sf_flash_erase_page+0xb0>
 80f99fe:	2303      	movs	r3, #3
}
 80f9a00:	4618      	mov	r0, r3
 80f9a02:	3730      	adds	r7, #48	@ 0x30
 80f9a04:	46bd      	mov	sp, r7
 80f9a06:	bd80      	pop	{r7, pc}
 80f9a08:	08fff80c 	.word	0x08fff80c

080f9a0c <gpio_set>:
 * @return gpio_status_t Returns:
 *         - GPIO_STATUS_OK if the pin was successfully set
 *         - GPIO_WRONG_INPUT if the GPIO group or pin was invalid
 */
gpio_status_t gpio_set(gpios_t gpio)
{
 80f9a0c:	b580      	push	{r7, lr}
 80f9a0e:	b084      	sub	sp, #16
 80f9a10:	af00      	add	r7, sp, #0
 80f9a12:	4603      	mov	r3, r0
 80f9a14:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *port = GET_GPIO_GROUP(gpio);
 80f9a16:	79fb      	ldrb	r3, [r7, #7]
 80f9a18:	095b      	lsrs	r3, r3, #5
 80f9a1a:	b2db      	uxtb	r3, r3
 80f9a1c:	f003 031f 	and.w	r3, r3, #31
 80f9a20:	2b06      	cmp	r3, #6
 80f9a22:	dc08      	bgt.n	80f9a36 <gpio_set+0x2a>
 80f9a24:	79fb      	ldrb	r3, [r7, #7]
 80f9a26:	095b      	lsrs	r3, r3, #5
 80f9a28:	b2db      	uxtb	r3, r3
 80f9a2a:	f003 031f 	and.w	r3, r3, #31
 80f9a2e:	4a13      	ldr	r2, [pc, #76]	@ (80f9a7c <gpio_set+0x70>)
 80f9a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80f9a34:	e000      	b.n	80f9a38 <gpio_set+0x2c>
 80f9a36:	2300      	movs	r3, #0
 80f9a38:	60fb      	str	r3, [r7, #12]
    uint16_t pin = GET_GPIO_PIN(gpio);
 80f9a3a:	79fb      	ldrb	r3, [r7, #7]
 80f9a3c:	f003 0310 	and.w	r3, r3, #16
 80f9a40:	2b00      	cmp	r3, #0
 80f9a42:	d106      	bne.n	80f9a52 <gpio_set+0x46>
 80f9a44:	79fb      	ldrb	r3, [r7, #7]
 80f9a46:	f003 031f 	and.w	r3, r3, #31
 80f9a4a:	4a0d      	ldr	r2, [pc, #52]	@ (80f9a80 <gpio_set+0x74>)
 80f9a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80f9a50:	e000      	b.n	80f9a54 <gpio_set+0x48>
 80f9a52:	2300      	movs	r3, #0
 80f9a54:	817b      	strh	r3, [r7, #10]

    if (port == NULL || pin == GPIO_WRONG_INPUT) {
 80f9a56:	68fb      	ldr	r3, [r7, #12]
 80f9a58:	2b00      	cmp	r3, #0
 80f9a5a:	d002      	beq.n	80f9a62 <gpio_set+0x56>
 80f9a5c:	897b      	ldrh	r3, [r7, #10]
 80f9a5e:	2b03      	cmp	r3, #3
 80f9a60:	d101      	bne.n	80f9a66 <gpio_set+0x5a>
        return GPIO_WRONG_INPUT;
 80f9a62:	2303      	movs	r3, #3
 80f9a64:	e006      	b.n	80f9a74 <gpio_set+0x68>
    }

    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80f9a66:	897b      	ldrh	r3, [r7, #10]
 80f9a68:	2201      	movs	r2, #1
 80f9a6a:	4619      	mov	r1, r3
 80f9a6c:	68f8      	ldr	r0, [r7, #12]
 80f9a6e:	f7f5 fbaf 	bl	80ef1d0 <HAL_GPIO_WritePin>
    return GPIO_STATUS_OK;
 80f9a72:	2301      	movs	r3, #1
}
 80f9a74:	4618      	mov	r0, r3
 80f9a76:	3710      	adds	r7, #16
 80f9a78:	46bd      	mov	sp, r7
 80f9a7a:	bd80      	pop	{r7, pc}
 80f9a7c:	080fb0a0 	.word	0x080fb0a0
 80f9a80:	080fb0bc 	.word	0x080fb0bc

080f9a84 <gpio_clear>:
 * @return gpio_status_t Returns:
 *         - GPIO_STATUS_OK if the pin was cleared successfully
 *         - GPIO_WRONG_INPUT if the pin or port was invalid
 */
gpio_status_t gpio_clear(gpios_t gpio)
{
 80f9a84:	b580      	push	{r7, lr}
 80f9a86:	b084      	sub	sp, #16
 80f9a88:	af00      	add	r7, sp, #0
 80f9a8a:	4603      	mov	r3, r0
 80f9a8c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *port = GET_GPIO_GROUP(gpio);
 80f9a8e:	79fb      	ldrb	r3, [r7, #7]
 80f9a90:	095b      	lsrs	r3, r3, #5
 80f9a92:	b2db      	uxtb	r3, r3
 80f9a94:	f003 031f 	and.w	r3, r3, #31
 80f9a98:	2b06      	cmp	r3, #6
 80f9a9a:	dc08      	bgt.n	80f9aae <gpio_clear+0x2a>
 80f9a9c:	79fb      	ldrb	r3, [r7, #7]
 80f9a9e:	095b      	lsrs	r3, r3, #5
 80f9aa0:	b2db      	uxtb	r3, r3
 80f9aa2:	f003 031f 	and.w	r3, r3, #31
 80f9aa6:	4a13      	ldr	r2, [pc, #76]	@ (80f9af4 <gpio_clear+0x70>)
 80f9aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80f9aac:	e000      	b.n	80f9ab0 <gpio_clear+0x2c>
 80f9aae:	2300      	movs	r3, #0
 80f9ab0:	60fb      	str	r3, [r7, #12]
    uint16_t pin = GET_GPIO_PIN(gpio);
 80f9ab2:	79fb      	ldrb	r3, [r7, #7]
 80f9ab4:	f003 0310 	and.w	r3, r3, #16
 80f9ab8:	2b00      	cmp	r3, #0
 80f9aba:	d106      	bne.n	80f9aca <gpio_clear+0x46>
 80f9abc:	79fb      	ldrb	r3, [r7, #7]
 80f9abe:	f003 031f 	and.w	r3, r3, #31
 80f9ac2:	4a0d      	ldr	r2, [pc, #52]	@ (80f9af8 <gpio_clear+0x74>)
 80f9ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80f9ac8:	e000      	b.n	80f9acc <gpio_clear+0x48>
 80f9aca:	2300      	movs	r3, #0
 80f9acc:	817b      	strh	r3, [r7, #10]

    if (port == NULL || pin == GPIO_WRONG_INPUT) {
 80f9ace:	68fb      	ldr	r3, [r7, #12]
 80f9ad0:	2b00      	cmp	r3, #0
 80f9ad2:	d002      	beq.n	80f9ada <gpio_clear+0x56>
 80f9ad4:	897b      	ldrh	r3, [r7, #10]
 80f9ad6:	2b03      	cmp	r3, #3
 80f9ad8:	d101      	bne.n	80f9ade <gpio_clear+0x5a>
        return GPIO_WRONG_INPUT;
 80f9ada:	2303      	movs	r3, #3
 80f9adc:	e006      	b.n	80f9aec <gpio_clear+0x68>
    }

    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80f9ade:	897b      	ldrh	r3, [r7, #10]
 80f9ae0:	2200      	movs	r2, #0
 80f9ae2:	4619      	mov	r1, r3
 80f9ae4:	68f8      	ldr	r0, [r7, #12]
 80f9ae6:	f7f5 fb73 	bl	80ef1d0 <HAL_GPIO_WritePin>
    return GPIO_STATUS_OK;
 80f9aea:	2301      	movs	r3, #1
}
 80f9aec:	4618      	mov	r0, r3
 80f9aee:	3710      	adds	r7, #16
 80f9af0:	46bd      	mov	sp, r7
 80f9af2:	bd80      	pop	{r7, pc}
 80f9af4:	080fb0a0 	.word	0x080fb0a0
 80f9af8:	080fb0bc 	.word	0x080fb0bc

080f9afc <gpio_get>:
 *
 * @param[in] gpio GPIO identifier as defined in @ref gpios_t
 * @return uint8_t Logic level (0 = low, 1 = high), or 0xFF on invalid input
 */
uint8_t gpio_get(gpios_t gpio)
{
 80f9afc:	b580      	push	{r7, lr}
 80f9afe:	b084      	sub	sp, #16
 80f9b00:	af00      	add	r7, sp, #0
 80f9b02:	4603      	mov	r3, r0
 80f9b04:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef *port = GET_GPIO_GROUP(gpio);
 80f9b06:	79fb      	ldrb	r3, [r7, #7]
 80f9b08:	095b      	lsrs	r3, r3, #5
 80f9b0a:	b2db      	uxtb	r3, r3
 80f9b0c:	f003 031f 	and.w	r3, r3, #31
 80f9b10:	2b06      	cmp	r3, #6
 80f9b12:	dc08      	bgt.n	80f9b26 <gpio_get+0x2a>
 80f9b14:	79fb      	ldrb	r3, [r7, #7]
 80f9b16:	095b      	lsrs	r3, r3, #5
 80f9b18:	b2db      	uxtb	r3, r3
 80f9b1a:	f003 031f 	and.w	r3, r3, #31
 80f9b1e:	4a16      	ldr	r2, [pc, #88]	@ (80f9b78 <gpio_get+0x7c>)
 80f9b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80f9b24:	e000      	b.n	80f9b28 <gpio_get+0x2c>
 80f9b26:	2300      	movs	r3, #0
 80f9b28:	60fb      	str	r3, [r7, #12]
    uint16_t pin = GET_GPIO_PIN(gpio);
 80f9b2a:	79fb      	ldrb	r3, [r7, #7]
 80f9b2c:	f003 0310 	and.w	r3, r3, #16
 80f9b30:	2b00      	cmp	r3, #0
 80f9b32:	d106      	bne.n	80f9b42 <gpio_get+0x46>
 80f9b34:	79fb      	ldrb	r3, [r7, #7]
 80f9b36:	f003 031f 	and.w	r3, r3, #31
 80f9b3a:	4a10      	ldr	r2, [pc, #64]	@ (80f9b7c <gpio_get+0x80>)
 80f9b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80f9b40:	e000      	b.n	80f9b44 <gpio_get+0x48>
 80f9b42:	2300      	movs	r3, #0
 80f9b44:	817b      	strh	r3, [r7, #10]

    if (port == NULL || pin == GPIO_WRONG_INPUT) {
 80f9b46:	68fb      	ldr	r3, [r7, #12]
 80f9b48:	2b00      	cmp	r3, #0
 80f9b4a:	d002      	beq.n	80f9b52 <gpio_get+0x56>
 80f9b4c:	897b      	ldrh	r3, [r7, #10]
 80f9b4e:	2b03      	cmp	r3, #3
 80f9b50:	d101      	bne.n	80f9b56 <gpio_get+0x5a>
        return 0xFF; // Invalid input
 80f9b52:	23ff      	movs	r3, #255	@ 0xff
 80f9b54:	e00c      	b.n	80f9b70 <gpio_get+0x74>
    }

    GPIO_PinState state = HAL_GPIO_ReadPin(port, pin);
 80f9b56:	897b      	ldrh	r3, [r7, #10]
 80f9b58:	4619      	mov	r1, r3
 80f9b5a:	68f8      	ldr	r0, [r7, #12]
 80f9b5c:	f7f5 fb20 	bl	80ef1a0 <HAL_GPIO_ReadPin>
 80f9b60:	4603      	mov	r3, r0
 80f9b62:	727b      	strb	r3, [r7, #9]
    return (state == GPIO_PIN_SET) ? 1 : 0;
 80f9b64:	7a7b      	ldrb	r3, [r7, #9]
 80f9b66:	2b01      	cmp	r3, #1
 80f9b68:	bf0c      	ite	eq
 80f9b6a:	2301      	moveq	r3, #1
 80f9b6c:	2300      	movne	r3, #0
 80f9b6e:	b2db      	uxtb	r3, r3
}
 80f9b70:	4618      	mov	r0, r3
 80f9b72:	3710      	adds	r7, #16
 80f9b74:	46bd      	mov	sp, r7
 80f9b76:	bd80      	pop	{r7, pc}
 80f9b78:	080fb0a0 	.word	0x080fb0a0
 80f9b7c:	080fb0bc 	.word	0x080fb0bc

080f9b80 <get_1ms_counter>:
/**
 * @brief Get a counter that increases every 1ms
 * @details This function returns the value of a counter that increases every 1 ms.
 * @return 1 ms counter value
 */
uint32_t get_1ms_counter(void) {
 80f9b80:	b580      	push	{r7, lr}
 80f9b82:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80f9b84:	f7f0 fde6 	bl	80ea754 <HAL_GetTick>
 80f9b88:	4603      	mov	r3, r0
}
 80f9b8a:	4618      	mov	r0, r3
 80f9b8c:	bd80      	pop	{r7, pc}
	...

080f9b90 <__assert_func>:
 80f9b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80f9b92:	4614      	mov	r4, r2
 80f9b94:	461a      	mov	r2, r3
 80f9b96:	4b09      	ldr	r3, [pc, #36]	@ (80f9bbc <__assert_func+0x2c>)
 80f9b98:	4605      	mov	r5, r0
 80f9b9a:	681b      	ldr	r3, [r3, #0]
 80f9b9c:	68d8      	ldr	r0, [r3, #12]
 80f9b9e:	b14c      	cbz	r4, 80f9bb4 <__assert_func+0x24>
 80f9ba0:	4b07      	ldr	r3, [pc, #28]	@ (80f9bc0 <__assert_func+0x30>)
 80f9ba2:	9100      	str	r1, [sp, #0]
 80f9ba4:	4907      	ldr	r1, [pc, #28]	@ (80f9bc4 <__assert_func+0x34>)
 80f9ba6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80f9baa:	462b      	mov	r3, r5
 80f9bac:	f000 f8b2 	bl	80f9d14 <fiprintf>
 80f9bb0:	f000 f9bc 	bl	80f9f2c <abort>
 80f9bb4:	4b04      	ldr	r3, [pc, #16]	@ (80f9bc8 <__assert_func+0x38>)
 80f9bb6:	461c      	mov	r4, r3
 80f9bb8:	e7f3      	b.n	80f9ba2 <__assert_func+0x12>
 80f9bba:	bf00      	nop
 80f9bbc:	20000034 	.word	0x20000034
 80f9bc0:	080fb0dc 	.word	0x080fb0dc
 80f9bc4:	080fb0e9 	.word	0x080fb0e9
 80f9bc8:	080fb117 	.word	0x080fb117

080f9bcc <std>:
 80f9bcc:	2300      	movs	r3, #0
 80f9bce:	b510      	push	{r4, lr}
 80f9bd0:	4604      	mov	r4, r0
 80f9bd2:	6083      	str	r3, [r0, #8]
 80f9bd4:	8181      	strh	r1, [r0, #12]
 80f9bd6:	4619      	mov	r1, r3
 80f9bd8:	6643      	str	r3, [r0, #100]	@ 0x64
 80f9bda:	81c2      	strh	r2, [r0, #14]
 80f9bdc:	2208      	movs	r2, #8
 80f9bde:	6183      	str	r3, [r0, #24]
 80f9be0:	e9c0 3300 	strd	r3, r3, [r0]
 80f9be4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80f9be8:	305c      	adds	r0, #92	@ 0x5c
 80f9bea:	f000 f916 	bl	80f9e1a <memset>
 80f9bee:	4b0d      	ldr	r3, [pc, #52]	@ (80f9c24 <std+0x58>)
 80f9bf0:	6224      	str	r4, [r4, #32]
 80f9bf2:	6263      	str	r3, [r4, #36]	@ 0x24
 80f9bf4:	4b0c      	ldr	r3, [pc, #48]	@ (80f9c28 <std+0x5c>)
 80f9bf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80f9bf8:	4b0c      	ldr	r3, [pc, #48]	@ (80f9c2c <std+0x60>)
 80f9bfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80f9bfc:	4b0c      	ldr	r3, [pc, #48]	@ (80f9c30 <std+0x64>)
 80f9bfe:	6323      	str	r3, [r4, #48]	@ 0x30
 80f9c00:	4b0c      	ldr	r3, [pc, #48]	@ (80f9c34 <std+0x68>)
 80f9c02:	429c      	cmp	r4, r3
 80f9c04:	d006      	beq.n	80f9c14 <std+0x48>
 80f9c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80f9c0a:	4294      	cmp	r4, r2
 80f9c0c:	d002      	beq.n	80f9c14 <std+0x48>
 80f9c0e:	33d0      	adds	r3, #208	@ 0xd0
 80f9c10:	429c      	cmp	r4, r3
 80f9c12:	d105      	bne.n	80f9c20 <std+0x54>
 80f9c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80f9c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80f9c1c:	f000 b976 	b.w	80f9f0c <__retarget_lock_init_recursive>
 80f9c20:	bd10      	pop	{r4, pc}
 80f9c22:	bf00      	nop
 80f9c24:	080f9d75 	.word	0x080f9d75
 80f9c28:	080f9d97 	.word	0x080f9d97
 80f9c2c:	080f9dcf 	.word	0x080f9dcf
 80f9c30:	080f9df3 	.word	0x080f9df3
 80f9c34:	20005954 	.word	0x20005954

080f9c38 <stdio_exit_handler>:
 80f9c38:	4a02      	ldr	r2, [pc, #8]	@ (80f9c44 <stdio_exit_handler+0xc>)
 80f9c3a:	4903      	ldr	r1, [pc, #12]	@ (80f9c48 <stdio_exit_handler+0x10>)
 80f9c3c:	4803      	ldr	r0, [pc, #12]	@ (80f9c4c <stdio_exit_handler+0x14>)
 80f9c3e:	f000 b87b 	b.w	80f9d38 <_fwalk_sglue>
 80f9c42:	bf00      	nop
 80f9c44:	20000028 	.word	0x20000028
 80f9c48:	080fa7d9 	.word	0x080fa7d9
 80f9c4c:	20000038 	.word	0x20000038

080f9c50 <cleanup_stdio>:
 80f9c50:	6841      	ldr	r1, [r0, #4]
 80f9c52:	4b0c      	ldr	r3, [pc, #48]	@ (80f9c84 <cleanup_stdio+0x34>)
 80f9c54:	4299      	cmp	r1, r3
 80f9c56:	b510      	push	{r4, lr}
 80f9c58:	4604      	mov	r4, r0
 80f9c5a:	d001      	beq.n	80f9c60 <cleanup_stdio+0x10>
 80f9c5c:	f000 fdbc 	bl	80fa7d8 <_fflush_r>
 80f9c60:	68a1      	ldr	r1, [r4, #8]
 80f9c62:	4b09      	ldr	r3, [pc, #36]	@ (80f9c88 <cleanup_stdio+0x38>)
 80f9c64:	4299      	cmp	r1, r3
 80f9c66:	d002      	beq.n	80f9c6e <cleanup_stdio+0x1e>
 80f9c68:	4620      	mov	r0, r4
 80f9c6a:	f000 fdb5 	bl	80fa7d8 <_fflush_r>
 80f9c6e:	68e1      	ldr	r1, [r4, #12]
 80f9c70:	4b06      	ldr	r3, [pc, #24]	@ (80f9c8c <cleanup_stdio+0x3c>)
 80f9c72:	4299      	cmp	r1, r3
 80f9c74:	d004      	beq.n	80f9c80 <cleanup_stdio+0x30>
 80f9c76:	4620      	mov	r0, r4
 80f9c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80f9c7c:	f000 bdac 	b.w	80fa7d8 <_fflush_r>
 80f9c80:	bd10      	pop	{r4, pc}
 80f9c82:	bf00      	nop
 80f9c84:	20005954 	.word	0x20005954
 80f9c88:	200059bc 	.word	0x200059bc
 80f9c8c:	20005a24 	.word	0x20005a24

080f9c90 <global_stdio_init.part.0>:
 80f9c90:	b510      	push	{r4, lr}
 80f9c92:	4b0b      	ldr	r3, [pc, #44]	@ (80f9cc0 <global_stdio_init.part.0+0x30>)
 80f9c94:	2104      	movs	r1, #4
 80f9c96:	4c0b      	ldr	r4, [pc, #44]	@ (80f9cc4 <global_stdio_init.part.0+0x34>)
 80f9c98:	4a0b      	ldr	r2, [pc, #44]	@ (80f9cc8 <global_stdio_init.part.0+0x38>)
 80f9c9a:	4620      	mov	r0, r4
 80f9c9c:	601a      	str	r2, [r3, #0]
 80f9c9e:	2200      	movs	r2, #0
 80f9ca0:	f7ff ff94 	bl	80f9bcc <std>
 80f9ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80f9ca8:	2201      	movs	r2, #1
 80f9caa:	2109      	movs	r1, #9
 80f9cac:	f7ff ff8e 	bl	80f9bcc <std>
 80f9cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80f9cb4:	2202      	movs	r2, #2
 80f9cb6:	2112      	movs	r1, #18
 80f9cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80f9cbc:	f7ff bf86 	b.w	80f9bcc <std>
 80f9cc0:	20005a8c 	.word	0x20005a8c
 80f9cc4:	20005954 	.word	0x20005954
 80f9cc8:	080f9c39 	.word	0x080f9c39

080f9ccc <__sfp_lock_acquire>:
 80f9ccc:	4801      	ldr	r0, [pc, #4]	@ (80f9cd4 <__sfp_lock_acquire+0x8>)
 80f9cce:	f000 b91e 	b.w	80f9f0e <__retarget_lock_acquire_recursive>
 80f9cd2:	bf00      	nop
 80f9cd4:	20005a95 	.word	0x20005a95

080f9cd8 <__sfp_lock_release>:
 80f9cd8:	4801      	ldr	r0, [pc, #4]	@ (80f9ce0 <__sfp_lock_release+0x8>)
 80f9cda:	f000 b919 	b.w	80f9f10 <__retarget_lock_release_recursive>
 80f9cde:	bf00      	nop
 80f9ce0:	20005a95 	.word	0x20005a95

080f9ce4 <__sinit>:
 80f9ce4:	b510      	push	{r4, lr}
 80f9ce6:	4604      	mov	r4, r0
 80f9ce8:	f7ff fff0 	bl	80f9ccc <__sfp_lock_acquire>
 80f9cec:	6a23      	ldr	r3, [r4, #32]
 80f9cee:	b11b      	cbz	r3, 80f9cf8 <__sinit+0x14>
 80f9cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80f9cf4:	f7ff bff0 	b.w	80f9cd8 <__sfp_lock_release>
 80f9cf8:	4b04      	ldr	r3, [pc, #16]	@ (80f9d0c <__sinit+0x28>)
 80f9cfa:	6223      	str	r3, [r4, #32]
 80f9cfc:	4b04      	ldr	r3, [pc, #16]	@ (80f9d10 <__sinit+0x2c>)
 80f9cfe:	681b      	ldr	r3, [r3, #0]
 80f9d00:	2b00      	cmp	r3, #0
 80f9d02:	d1f5      	bne.n	80f9cf0 <__sinit+0xc>
 80f9d04:	f7ff ffc4 	bl	80f9c90 <global_stdio_init.part.0>
 80f9d08:	e7f2      	b.n	80f9cf0 <__sinit+0xc>
 80f9d0a:	bf00      	nop
 80f9d0c:	080f9c51 	.word	0x080f9c51
 80f9d10:	20005a8c 	.word	0x20005a8c

080f9d14 <fiprintf>:
 80f9d14:	b40e      	push	{r1, r2, r3}
 80f9d16:	b503      	push	{r0, r1, lr}
 80f9d18:	ab03      	add	r3, sp, #12
 80f9d1a:	4601      	mov	r1, r0
 80f9d1c:	4805      	ldr	r0, [pc, #20]	@ (80f9d34 <fiprintf+0x20>)
 80f9d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 80f9d22:	6800      	ldr	r0, [r0, #0]
 80f9d24:	9301      	str	r3, [sp, #4]
 80f9d26:	f000 fa2b 	bl	80fa180 <_vfiprintf_r>
 80f9d2a:	b002      	add	sp, #8
 80f9d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 80f9d30:	b003      	add	sp, #12
 80f9d32:	4770      	bx	lr
 80f9d34:	20000034 	.word	0x20000034

080f9d38 <_fwalk_sglue>:
 80f9d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80f9d3c:	4607      	mov	r7, r0
 80f9d3e:	4688      	mov	r8, r1
 80f9d40:	4614      	mov	r4, r2
 80f9d42:	2600      	movs	r6, #0
 80f9d44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80f9d48:	f1b9 0901 	subs.w	r9, r9, #1
 80f9d4c:	d505      	bpl.n	80f9d5a <_fwalk_sglue+0x22>
 80f9d4e:	6824      	ldr	r4, [r4, #0]
 80f9d50:	2c00      	cmp	r4, #0
 80f9d52:	d1f7      	bne.n	80f9d44 <_fwalk_sglue+0xc>
 80f9d54:	4630      	mov	r0, r6
 80f9d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80f9d5a:	89ab      	ldrh	r3, [r5, #12]
 80f9d5c:	2b01      	cmp	r3, #1
 80f9d5e:	d907      	bls.n	80f9d70 <_fwalk_sglue+0x38>
 80f9d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80f9d64:	3301      	adds	r3, #1
 80f9d66:	d003      	beq.n	80f9d70 <_fwalk_sglue+0x38>
 80f9d68:	4629      	mov	r1, r5
 80f9d6a:	4638      	mov	r0, r7
 80f9d6c:	47c0      	blx	r8
 80f9d6e:	4306      	orrs	r6, r0
 80f9d70:	3568      	adds	r5, #104	@ 0x68
 80f9d72:	e7e9      	b.n	80f9d48 <_fwalk_sglue+0x10>

080f9d74 <__sread>:
 80f9d74:	b510      	push	{r4, lr}
 80f9d76:	460c      	mov	r4, r1
 80f9d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80f9d7c:	f000 f878 	bl	80f9e70 <_read_r>
 80f9d80:	2800      	cmp	r0, #0
 80f9d82:	bfab      	itete	ge
 80f9d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80f9d86:	89a3      	ldrhlt	r3, [r4, #12]
 80f9d88:	181b      	addge	r3, r3, r0
 80f9d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80f9d8e:	bfac      	ite	ge
 80f9d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 80f9d92:	81a3      	strhlt	r3, [r4, #12]
 80f9d94:	bd10      	pop	{r4, pc}

080f9d96 <__swrite>:
 80f9d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80f9d9a:	461f      	mov	r7, r3
 80f9d9c:	898b      	ldrh	r3, [r1, #12]
 80f9d9e:	4605      	mov	r5, r0
 80f9da0:	460c      	mov	r4, r1
 80f9da2:	05db      	lsls	r3, r3, #23
 80f9da4:	4616      	mov	r6, r2
 80f9da6:	d505      	bpl.n	80f9db4 <__swrite+0x1e>
 80f9da8:	2302      	movs	r3, #2
 80f9daa:	2200      	movs	r2, #0
 80f9dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80f9db0:	f000 f84c 	bl	80f9e4c <_lseek_r>
 80f9db4:	89a3      	ldrh	r3, [r4, #12]
 80f9db6:	4632      	mov	r2, r6
 80f9db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80f9dbc:	4628      	mov	r0, r5
 80f9dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80f9dc2:	81a3      	strh	r3, [r4, #12]
 80f9dc4:	463b      	mov	r3, r7
 80f9dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80f9dca:	f000 b863 	b.w	80f9e94 <_write_r>

080f9dce <__sseek>:
 80f9dce:	b510      	push	{r4, lr}
 80f9dd0:	460c      	mov	r4, r1
 80f9dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80f9dd6:	f000 f839 	bl	80f9e4c <_lseek_r>
 80f9dda:	1c43      	adds	r3, r0, #1
 80f9ddc:	89a3      	ldrh	r3, [r4, #12]
 80f9dde:	bf15      	itete	ne
 80f9de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80f9de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80f9de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80f9dea:	81a3      	strheq	r3, [r4, #12]
 80f9dec:	bf18      	it	ne
 80f9dee:	81a3      	strhne	r3, [r4, #12]
 80f9df0:	bd10      	pop	{r4, pc}

080f9df2 <__sclose>:
 80f9df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80f9df6:	f000 b819 	b.w	80f9e2c <_close_r>

080f9dfa <memcmp>:
 80f9dfa:	3901      	subs	r1, #1
 80f9dfc:	4402      	add	r2, r0
 80f9dfe:	b510      	push	{r4, lr}
 80f9e00:	4290      	cmp	r0, r2
 80f9e02:	d101      	bne.n	80f9e08 <memcmp+0xe>
 80f9e04:	2000      	movs	r0, #0
 80f9e06:	e005      	b.n	80f9e14 <memcmp+0x1a>
 80f9e08:	7803      	ldrb	r3, [r0, #0]
 80f9e0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80f9e0e:	42a3      	cmp	r3, r4
 80f9e10:	d001      	beq.n	80f9e16 <memcmp+0x1c>
 80f9e12:	1b18      	subs	r0, r3, r4
 80f9e14:	bd10      	pop	{r4, pc}
 80f9e16:	3001      	adds	r0, #1
 80f9e18:	e7f2      	b.n	80f9e00 <memcmp+0x6>

080f9e1a <memset>:
 80f9e1a:	4402      	add	r2, r0
 80f9e1c:	4603      	mov	r3, r0
 80f9e1e:	4293      	cmp	r3, r2
 80f9e20:	d100      	bne.n	80f9e24 <memset+0xa>
 80f9e22:	4770      	bx	lr
 80f9e24:	f803 1b01 	strb.w	r1, [r3], #1
 80f9e28:	e7f9      	b.n	80f9e1e <memset+0x4>
	...

080f9e2c <_close_r>:
 80f9e2c:	b538      	push	{r3, r4, r5, lr}
 80f9e2e:	2300      	movs	r3, #0
 80f9e30:	4d05      	ldr	r5, [pc, #20]	@ (80f9e48 <_close_r+0x1c>)
 80f9e32:	4604      	mov	r4, r0
 80f9e34:	4608      	mov	r0, r1
 80f9e36:	602b      	str	r3, [r5, #0]
 80f9e38:	f7ef fc5a 	bl	80e96f0 <_close>
 80f9e3c:	1c43      	adds	r3, r0, #1
 80f9e3e:	d102      	bne.n	80f9e46 <_close_r+0x1a>
 80f9e40:	682b      	ldr	r3, [r5, #0]
 80f9e42:	b103      	cbz	r3, 80f9e46 <_close_r+0x1a>
 80f9e44:	6023      	str	r3, [r4, #0]
 80f9e46:	bd38      	pop	{r3, r4, r5, pc}
 80f9e48:	20005a90 	.word	0x20005a90

080f9e4c <_lseek_r>:
 80f9e4c:	b538      	push	{r3, r4, r5, lr}
 80f9e4e:	4604      	mov	r4, r0
 80f9e50:	4d06      	ldr	r5, [pc, #24]	@ (80f9e6c <_lseek_r+0x20>)
 80f9e52:	4608      	mov	r0, r1
 80f9e54:	4611      	mov	r1, r2
 80f9e56:	2200      	movs	r2, #0
 80f9e58:	602a      	str	r2, [r5, #0]
 80f9e5a:	461a      	mov	r2, r3
 80f9e5c:	f7ef fc6f 	bl	80e973e <_lseek>
 80f9e60:	1c43      	adds	r3, r0, #1
 80f9e62:	d102      	bne.n	80f9e6a <_lseek_r+0x1e>
 80f9e64:	682b      	ldr	r3, [r5, #0]
 80f9e66:	b103      	cbz	r3, 80f9e6a <_lseek_r+0x1e>
 80f9e68:	6023      	str	r3, [r4, #0]
 80f9e6a:	bd38      	pop	{r3, r4, r5, pc}
 80f9e6c:	20005a90 	.word	0x20005a90

080f9e70 <_read_r>:
 80f9e70:	b538      	push	{r3, r4, r5, lr}
 80f9e72:	4604      	mov	r4, r0
 80f9e74:	4d06      	ldr	r5, [pc, #24]	@ (80f9e90 <_read_r+0x20>)
 80f9e76:	4608      	mov	r0, r1
 80f9e78:	4611      	mov	r1, r2
 80f9e7a:	2200      	movs	r2, #0
 80f9e7c:	602a      	str	r2, [r5, #0]
 80f9e7e:	461a      	mov	r2, r3
 80f9e80:	f7ef fbfd 	bl	80e967e <_read>
 80f9e84:	1c43      	adds	r3, r0, #1
 80f9e86:	d102      	bne.n	80f9e8e <_read_r+0x1e>
 80f9e88:	682b      	ldr	r3, [r5, #0]
 80f9e8a:	b103      	cbz	r3, 80f9e8e <_read_r+0x1e>
 80f9e8c:	6023      	str	r3, [r4, #0]
 80f9e8e:	bd38      	pop	{r3, r4, r5, pc}
 80f9e90:	20005a90 	.word	0x20005a90

080f9e94 <_write_r>:
 80f9e94:	b538      	push	{r3, r4, r5, lr}
 80f9e96:	4604      	mov	r4, r0
 80f9e98:	4d06      	ldr	r5, [pc, #24]	@ (80f9eb4 <_write_r+0x20>)
 80f9e9a:	4608      	mov	r0, r1
 80f9e9c:	4611      	mov	r1, r2
 80f9e9e:	2200      	movs	r2, #0
 80f9ea0:	602a      	str	r2, [r5, #0]
 80f9ea2:	461a      	mov	r2, r3
 80f9ea4:	f7ef fc08 	bl	80e96b8 <_write>
 80f9ea8:	1c43      	adds	r3, r0, #1
 80f9eaa:	d102      	bne.n	80f9eb2 <_write_r+0x1e>
 80f9eac:	682b      	ldr	r3, [r5, #0]
 80f9eae:	b103      	cbz	r3, 80f9eb2 <_write_r+0x1e>
 80f9eb0:	6023      	str	r3, [r4, #0]
 80f9eb2:	bd38      	pop	{r3, r4, r5, pc}
 80f9eb4:	20005a90 	.word	0x20005a90

080f9eb8 <__errno>:
 80f9eb8:	4b01      	ldr	r3, [pc, #4]	@ (80f9ec0 <__errno+0x8>)
 80f9eba:	6818      	ldr	r0, [r3, #0]
 80f9ebc:	4770      	bx	lr
 80f9ebe:	bf00      	nop
 80f9ec0:	20000034 	.word	0x20000034

080f9ec4 <__libc_init_array>:
 80f9ec4:	b570      	push	{r4, r5, r6, lr}
 80f9ec6:	4d0d      	ldr	r5, [pc, #52]	@ (80f9efc <__libc_init_array+0x38>)
 80f9ec8:	2600      	movs	r6, #0
 80f9eca:	4c0d      	ldr	r4, [pc, #52]	@ (80f9f00 <__libc_init_array+0x3c>)
 80f9ecc:	1b64      	subs	r4, r4, r5
 80f9ece:	10a4      	asrs	r4, r4, #2
 80f9ed0:	42a6      	cmp	r6, r4
 80f9ed2:	d109      	bne.n	80f9ee8 <__libc_init_array+0x24>
 80f9ed4:	4d0b      	ldr	r5, [pc, #44]	@ (80f9f04 <__libc_init_array+0x40>)
 80f9ed6:	2600      	movs	r6, #0
 80f9ed8:	4c0b      	ldr	r4, [pc, #44]	@ (80f9f08 <__libc_init_array+0x44>)
 80f9eda:	f000 fe1f 	bl	80fab1c <_init>
 80f9ede:	1b64      	subs	r4, r4, r5
 80f9ee0:	10a4      	asrs	r4, r4, #2
 80f9ee2:	42a6      	cmp	r6, r4
 80f9ee4:	d105      	bne.n	80f9ef2 <__libc_init_array+0x2e>
 80f9ee6:	bd70      	pop	{r4, r5, r6, pc}
 80f9ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 80f9eec:	3601      	adds	r6, #1
 80f9eee:	4798      	blx	r3
 80f9ef0:	e7ee      	b.n	80f9ed0 <__libc_init_array+0xc>
 80f9ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 80f9ef6:	3601      	adds	r6, #1
 80f9ef8:	4798      	blx	r3
 80f9efa:	e7f2      	b.n	80f9ee2 <__libc_init_array+0x1e>
 80f9efc:	080fb14c 	.word	0x080fb14c
 80f9f00:	080fb14c 	.word	0x080fb14c
 80f9f04:	080fb14c 	.word	0x080fb14c
 80f9f08:	080fb150 	.word	0x080fb150

080f9f0c <__retarget_lock_init_recursive>:
 80f9f0c:	4770      	bx	lr

080f9f0e <__retarget_lock_acquire_recursive>:
 80f9f0e:	4770      	bx	lr

080f9f10 <__retarget_lock_release_recursive>:
 80f9f10:	4770      	bx	lr

080f9f12 <memcpy>:
 80f9f12:	440a      	add	r2, r1
 80f9f14:	1e43      	subs	r3, r0, #1
 80f9f16:	4291      	cmp	r1, r2
 80f9f18:	d100      	bne.n	80f9f1c <memcpy+0xa>
 80f9f1a:	4770      	bx	lr
 80f9f1c:	b510      	push	{r4, lr}
 80f9f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80f9f22:	4291      	cmp	r1, r2
 80f9f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 80f9f28:	d1f9      	bne.n	80f9f1e <memcpy+0xc>
 80f9f2a:	bd10      	pop	{r4, pc}

080f9f2c <abort>:
 80f9f2c:	2006      	movs	r0, #6
 80f9f2e:	b508      	push	{r3, lr}
 80f9f30:	f000 fd36 	bl	80fa9a0 <raise>
 80f9f34:	2001      	movs	r0, #1
 80f9f36:	f7ef fb97 	bl	80e9668 <_exit>
	...

080f9f3c <_free_r>:
 80f9f3c:	b538      	push	{r3, r4, r5, lr}
 80f9f3e:	4605      	mov	r5, r0
 80f9f40:	2900      	cmp	r1, #0
 80f9f42:	d041      	beq.n	80f9fc8 <_free_r+0x8c>
 80f9f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80f9f48:	1f0c      	subs	r4, r1, #4
 80f9f4a:	2b00      	cmp	r3, #0
 80f9f4c:	bfb8      	it	lt
 80f9f4e:	18e4      	addlt	r4, r4, r3
 80f9f50:	f000 f8e0 	bl	80fa114 <__malloc_lock>
 80f9f54:	4a1d      	ldr	r2, [pc, #116]	@ (80f9fcc <_free_r+0x90>)
 80f9f56:	6813      	ldr	r3, [r2, #0]
 80f9f58:	b933      	cbnz	r3, 80f9f68 <_free_r+0x2c>
 80f9f5a:	6063      	str	r3, [r4, #4]
 80f9f5c:	6014      	str	r4, [r2, #0]
 80f9f5e:	4628      	mov	r0, r5
 80f9f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80f9f64:	f000 b8dc 	b.w	80fa120 <__malloc_unlock>
 80f9f68:	42a3      	cmp	r3, r4
 80f9f6a:	d908      	bls.n	80f9f7e <_free_r+0x42>
 80f9f6c:	6820      	ldr	r0, [r4, #0]
 80f9f6e:	1821      	adds	r1, r4, r0
 80f9f70:	428b      	cmp	r3, r1
 80f9f72:	bf01      	itttt	eq
 80f9f74:	6819      	ldreq	r1, [r3, #0]
 80f9f76:	685b      	ldreq	r3, [r3, #4]
 80f9f78:	1809      	addeq	r1, r1, r0
 80f9f7a:	6021      	streq	r1, [r4, #0]
 80f9f7c:	e7ed      	b.n	80f9f5a <_free_r+0x1e>
 80f9f7e:	461a      	mov	r2, r3
 80f9f80:	685b      	ldr	r3, [r3, #4]
 80f9f82:	b10b      	cbz	r3, 80f9f88 <_free_r+0x4c>
 80f9f84:	42a3      	cmp	r3, r4
 80f9f86:	d9fa      	bls.n	80f9f7e <_free_r+0x42>
 80f9f88:	6811      	ldr	r1, [r2, #0]
 80f9f8a:	1850      	adds	r0, r2, r1
 80f9f8c:	42a0      	cmp	r0, r4
 80f9f8e:	d10b      	bne.n	80f9fa8 <_free_r+0x6c>
 80f9f90:	6820      	ldr	r0, [r4, #0]
 80f9f92:	4401      	add	r1, r0
 80f9f94:	1850      	adds	r0, r2, r1
 80f9f96:	6011      	str	r1, [r2, #0]
 80f9f98:	4283      	cmp	r3, r0
 80f9f9a:	d1e0      	bne.n	80f9f5e <_free_r+0x22>
 80f9f9c:	6818      	ldr	r0, [r3, #0]
 80f9f9e:	685b      	ldr	r3, [r3, #4]
 80f9fa0:	4408      	add	r0, r1
 80f9fa2:	6053      	str	r3, [r2, #4]
 80f9fa4:	6010      	str	r0, [r2, #0]
 80f9fa6:	e7da      	b.n	80f9f5e <_free_r+0x22>
 80f9fa8:	d902      	bls.n	80f9fb0 <_free_r+0x74>
 80f9faa:	230c      	movs	r3, #12
 80f9fac:	602b      	str	r3, [r5, #0]
 80f9fae:	e7d6      	b.n	80f9f5e <_free_r+0x22>
 80f9fb0:	6820      	ldr	r0, [r4, #0]
 80f9fb2:	1821      	adds	r1, r4, r0
 80f9fb4:	428b      	cmp	r3, r1
 80f9fb6:	bf02      	ittt	eq
 80f9fb8:	6819      	ldreq	r1, [r3, #0]
 80f9fba:	685b      	ldreq	r3, [r3, #4]
 80f9fbc:	1809      	addeq	r1, r1, r0
 80f9fbe:	6063      	str	r3, [r4, #4]
 80f9fc0:	bf08      	it	eq
 80f9fc2:	6021      	streq	r1, [r4, #0]
 80f9fc4:	6054      	str	r4, [r2, #4]
 80f9fc6:	e7ca      	b.n	80f9f5e <_free_r+0x22>
 80f9fc8:	bd38      	pop	{r3, r4, r5, pc}
 80f9fca:	bf00      	nop
 80f9fcc:	20005a9c 	.word	0x20005a9c

080f9fd0 <sbrk_aligned>:
 80f9fd0:	b570      	push	{r4, r5, r6, lr}
 80f9fd2:	4e0f      	ldr	r6, [pc, #60]	@ (80fa010 <sbrk_aligned+0x40>)
 80f9fd4:	460c      	mov	r4, r1
 80f9fd6:	4605      	mov	r5, r0
 80f9fd8:	6831      	ldr	r1, [r6, #0]
 80f9fda:	b911      	cbnz	r1, 80f9fe2 <sbrk_aligned+0x12>
 80f9fdc:	f000 fcfc 	bl	80fa9d8 <_sbrk_r>
 80f9fe0:	6030      	str	r0, [r6, #0]
 80f9fe2:	4621      	mov	r1, r4
 80f9fe4:	4628      	mov	r0, r5
 80f9fe6:	f000 fcf7 	bl	80fa9d8 <_sbrk_r>
 80f9fea:	1c43      	adds	r3, r0, #1
 80f9fec:	d103      	bne.n	80f9ff6 <sbrk_aligned+0x26>
 80f9fee:	f04f 34ff 	mov.w	r4, #4294967295
 80f9ff2:	4620      	mov	r0, r4
 80f9ff4:	bd70      	pop	{r4, r5, r6, pc}
 80f9ff6:	1cc4      	adds	r4, r0, #3
 80f9ff8:	f024 0403 	bic.w	r4, r4, #3
 80f9ffc:	42a0      	cmp	r0, r4
 80f9ffe:	d0f8      	beq.n	80f9ff2 <sbrk_aligned+0x22>
 80fa000:	1a21      	subs	r1, r4, r0
 80fa002:	4628      	mov	r0, r5
 80fa004:	f000 fce8 	bl	80fa9d8 <_sbrk_r>
 80fa008:	3001      	adds	r0, #1
 80fa00a:	d1f2      	bne.n	80f9ff2 <sbrk_aligned+0x22>
 80fa00c:	e7ef      	b.n	80f9fee <sbrk_aligned+0x1e>
 80fa00e:	bf00      	nop
 80fa010:	20005a98 	.word	0x20005a98

080fa014 <_malloc_r>:
 80fa014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80fa018:	1ccd      	adds	r5, r1, #3
 80fa01a:	4606      	mov	r6, r0
 80fa01c:	f025 0503 	bic.w	r5, r5, #3
 80fa020:	3508      	adds	r5, #8
 80fa022:	2d0c      	cmp	r5, #12
 80fa024:	bf38      	it	cc
 80fa026:	250c      	movcc	r5, #12
 80fa028:	2d00      	cmp	r5, #0
 80fa02a:	db01      	blt.n	80fa030 <_malloc_r+0x1c>
 80fa02c:	42a9      	cmp	r1, r5
 80fa02e:	d904      	bls.n	80fa03a <_malloc_r+0x26>
 80fa030:	230c      	movs	r3, #12
 80fa032:	6033      	str	r3, [r6, #0]
 80fa034:	2000      	movs	r0, #0
 80fa036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80fa03a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80fa110 <_malloc_r+0xfc>
 80fa03e:	f000 f869 	bl	80fa114 <__malloc_lock>
 80fa042:	f8d8 3000 	ldr.w	r3, [r8]
 80fa046:	461c      	mov	r4, r3
 80fa048:	bb44      	cbnz	r4, 80fa09c <_malloc_r+0x88>
 80fa04a:	4629      	mov	r1, r5
 80fa04c:	4630      	mov	r0, r6
 80fa04e:	f7ff ffbf 	bl	80f9fd0 <sbrk_aligned>
 80fa052:	1c43      	adds	r3, r0, #1
 80fa054:	4604      	mov	r4, r0
 80fa056:	d158      	bne.n	80fa10a <_malloc_r+0xf6>
 80fa058:	f8d8 4000 	ldr.w	r4, [r8]
 80fa05c:	4627      	mov	r7, r4
 80fa05e:	2f00      	cmp	r7, #0
 80fa060:	d143      	bne.n	80fa0ea <_malloc_r+0xd6>
 80fa062:	2c00      	cmp	r4, #0
 80fa064:	d04b      	beq.n	80fa0fe <_malloc_r+0xea>
 80fa066:	6823      	ldr	r3, [r4, #0]
 80fa068:	4639      	mov	r1, r7
 80fa06a:	4630      	mov	r0, r6
 80fa06c:	eb04 0903 	add.w	r9, r4, r3
 80fa070:	f000 fcb2 	bl	80fa9d8 <_sbrk_r>
 80fa074:	4581      	cmp	r9, r0
 80fa076:	d142      	bne.n	80fa0fe <_malloc_r+0xea>
 80fa078:	6821      	ldr	r1, [r4, #0]
 80fa07a:	4630      	mov	r0, r6
 80fa07c:	1a6d      	subs	r5, r5, r1
 80fa07e:	4629      	mov	r1, r5
 80fa080:	f7ff ffa6 	bl	80f9fd0 <sbrk_aligned>
 80fa084:	3001      	adds	r0, #1
 80fa086:	d03a      	beq.n	80fa0fe <_malloc_r+0xea>
 80fa088:	6823      	ldr	r3, [r4, #0]
 80fa08a:	442b      	add	r3, r5
 80fa08c:	6023      	str	r3, [r4, #0]
 80fa08e:	f8d8 3000 	ldr.w	r3, [r8]
 80fa092:	685a      	ldr	r2, [r3, #4]
 80fa094:	bb62      	cbnz	r2, 80fa0f0 <_malloc_r+0xdc>
 80fa096:	f8c8 7000 	str.w	r7, [r8]
 80fa09a:	e00f      	b.n	80fa0bc <_malloc_r+0xa8>
 80fa09c:	6822      	ldr	r2, [r4, #0]
 80fa09e:	1b52      	subs	r2, r2, r5
 80fa0a0:	d420      	bmi.n	80fa0e4 <_malloc_r+0xd0>
 80fa0a2:	2a0b      	cmp	r2, #11
 80fa0a4:	d917      	bls.n	80fa0d6 <_malloc_r+0xc2>
 80fa0a6:	1961      	adds	r1, r4, r5
 80fa0a8:	42a3      	cmp	r3, r4
 80fa0aa:	6025      	str	r5, [r4, #0]
 80fa0ac:	bf18      	it	ne
 80fa0ae:	6059      	strne	r1, [r3, #4]
 80fa0b0:	6863      	ldr	r3, [r4, #4]
 80fa0b2:	bf08      	it	eq
 80fa0b4:	f8c8 1000 	streq.w	r1, [r8]
 80fa0b8:	5162      	str	r2, [r4, r5]
 80fa0ba:	604b      	str	r3, [r1, #4]
 80fa0bc:	4630      	mov	r0, r6
 80fa0be:	f000 f82f 	bl	80fa120 <__malloc_unlock>
 80fa0c2:	f104 000b 	add.w	r0, r4, #11
 80fa0c6:	1d23      	adds	r3, r4, #4
 80fa0c8:	f020 0007 	bic.w	r0, r0, #7
 80fa0cc:	1ac2      	subs	r2, r0, r3
 80fa0ce:	bf1c      	itt	ne
 80fa0d0:	1a1b      	subne	r3, r3, r0
 80fa0d2:	50a3      	strne	r3, [r4, r2]
 80fa0d4:	e7af      	b.n	80fa036 <_malloc_r+0x22>
 80fa0d6:	6862      	ldr	r2, [r4, #4]
 80fa0d8:	42a3      	cmp	r3, r4
 80fa0da:	bf0c      	ite	eq
 80fa0dc:	f8c8 2000 	streq.w	r2, [r8]
 80fa0e0:	605a      	strne	r2, [r3, #4]
 80fa0e2:	e7eb      	b.n	80fa0bc <_malloc_r+0xa8>
 80fa0e4:	4623      	mov	r3, r4
 80fa0e6:	6864      	ldr	r4, [r4, #4]
 80fa0e8:	e7ae      	b.n	80fa048 <_malloc_r+0x34>
 80fa0ea:	463c      	mov	r4, r7
 80fa0ec:	687f      	ldr	r7, [r7, #4]
 80fa0ee:	e7b6      	b.n	80fa05e <_malloc_r+0x4a>
 80fa0f0:	461a      	mov	r2, r3
 80fa0f2:	685b      	ldr	r3, [r3, #4]
 80fa0f4:	42a3      	cmp	r3, r4
 80fa0f6:	d1fb      	bne.n	80fa0f0 <_malloc_r+0xdc>
 80fa0f8:	2300      	movs	r3, #0
 80fa0fa:	6053      	str	r3, [r2, #4]
 80fa0fc:	e7de      	b.n	80fa0bc <_malloc_r+0xa8>
 80fa0fe:	230c      	movs	r3, #12
 80fa100:	4630      	mov	r0, r6
 80fa102:	6033      	str	r3, [r6, #0]
 80fa104:	f000 f80c 	bl	80fa120 <__malloc_unlock>
 80fa108:	e794      	b.n	80fa034 <_malloc_r+0x20>
 80fa10a:	6005      	str	r5, [r0, #0]
 80fa10c:	e7d6      	b.n	80fa0bc <_malloc_r+0xa8>
 80fa10e:	bf00      	nop
 80fa110:	20005a9c 	.word	0x20005a9c

080fa114 <__malloc_lock>:
 80fa114:	4801      	ldr	r0, [pc, #4]	@ (80fa11c <__malloc_lock+0x8>)
 80fa116:	f7ff befa 	b.w	80f9f0e <__retarget_lock_acquire_recursive>
 80fa11a:	bf00      	nop
 80fa11c:	20005a94 	.word	0x20005a94

080fa120 <__malloc_unlock>:
 80fa120:	4801      	ldr	r0, [pc, #4]	@ (80fa128 <__malloc_unlock+0x8>)
 80fa122:	f7ff bef5 	b.w	80f9f10 <__retarget_lock_release_recursive>
 80fa126:	bf00      	nop
 80fa128:	20005a94 	.word	0x20005a94

080fa12c <__sfputc_r>:
 80fa12c:	6893      	ldr	r3, [r2, #8]
 80fa12e:	3b01      	subs	r3, #1
 80fa130:	2b00      	cmp	r3, #0
 80fa132:	b410      	push	{r4}
 80fa134:	6093      	str	r3, [r2, #8]
 80fa136:	da08      	bge.n	80fa14a <__sfputc_r+0x1e>
 80fa138:	6994      	ldr	r4, [r2, #24]
 80fa13a:	42a3      	cmp	r3, r4
 80fa13c:	db01      	blt.n	80fa142 <__sfputc_r+0x16>
 80fa13e:	290a      	cmp	r1, #10
 80fa140:	d103      	bne.n	80fa14a <__sfputc_r+0x1e>
 80fa142:	f85d 4b04 	ldr.w	r4, [sp], #4
 80fa146:	f000 bb6f 	b.w	80fa828 <__swbuf_r>
 80fa14a:	6813      	ldr	r3, [r2, #0]
 80fa14c:	1c58      	adds	r0, r3, #1
 80fa14e:	6010      	str	r0, [r2, #0]
 80fa150:	4608      	mov	r0, r1
 80fa152:	7019      	strb	r1, [r3, #0]
 80fa154:	f85d 4b04 	ldr.w	r4, [sp], #4
 80fa158:	4770      	bx	lr

080fa15a <__sfputs_r>:
 80fa15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80fa15c:	4606      	mov	r6, r0
 80fa15e:	460f      	mov	r7, r1
 80fa160:	4614      	mov	r4, r2
 80fa162:	18d5      	adds	r5, r2, r3
 80fa164:	42ac      	cmp	r4, r5
 80fa166:	d101      	bne.n	80fa16c <__sfputs_r+0x12>
 80fa168:	2000      	movs	r0, #0
 80fa16a:	e007      	b.n	80fa17c <__sfputs_r+0x22>
 80fa16c:	463a      	mov	r2, r7
 80fa16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80fa172:	4630      	mov	r0, r6
 80fa174:	f7ff ffda 	bl	80fa12c <__sfputc_r>
 80fa178:	1c43      	adds	r3, r0, #1
 80fa17a:	d1f3      	bne.n	80fa164 <__sfputs_r+0xa>
 80fa17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080fa180 <_vfiprintf_r>:
 80fa180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80fa184:	460d      	mov	r5, r1
 80fa186:	b09d      	sub	sp, #116	@ 0x74
 80fa188:	4614      	mov	r4, r2
 80fa18a:	4698      	mov	r8, r3
 80fa18c:	4606      	mov	r6, r0
 80fa18e:	b118      	cbz	r0, 80fa198 <_vfiprintf_r+0x18>
 80fa190:	6a03      	ldr	r3, [r0, #32]
 80fa192:	b90b      	cbnz	r3, 80fa198 <_vfiprintf_r+0x18>
 80fa194:	f7ff fda6 	bl	80f9ce4 <__sinit>
 80fa198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80fa19a:	07d9      	lsls	r1, r3, #31
 80fa19c:	d405      	bmi.n	80fa1aa <_vfiprintf_r+0x2a>
 80fa19e:	89ab      	ldrh	r3, [r5, #12]
 80fa1a0:	059a      	lsls	r2, r3, #22
 80fa1a2:	d402      	bmi.n	80fa1aa <_vfiprintf_r+0x2a>
 80fa1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80fa1a6:	f7ff feb2 	bl	80f9f0e <__retarget_lock_acquire_recursive>
 80fa1aa:	89ab      	ldrh	r3, [r5, #12]
 80fa1ac:	071b      	lsls	r3, r3, #28
 80fa1ae:	d501      	bpl.n	80fa1b4 <_vfiprintf_r+0x34>
 80fa1b0:	692b      	ldr	r3, [r5, #16]
 80fa1b2:	b99b      	cbnz	r3, 80fa1dc <_vfiprintf_r+0x5c>
 80fa1b4:	4629      	mov	r1, r5
 80fa1b6:	4630      	mov	r0, r6
 80fa1b8:	f000 fb74 	bl	80fa8a4 <__swsetup_r>
 80fa1bc:	b170      	cbz	r0, 80fa1dc <_vfiprintf_r+0x5c>
 80fa1be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80fa1c0:	07dc      	lsls	r4, r3, #31
 80fa1c2:	d504      	bpl.n	80fa1ce <_vfiprintf_r+0x4e>
 80fa1c4:	f04f 30ff 	mov.w	r0, #4294967295
 80fa1c8:	b01d      	add	sp, #116	@ 0x74
 80fa1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80fa1ce:	89ab      	ldrh	r3, [r5, #12]
 80fa1d0:	0598      	lsls	r0, r3, #22
 80fa1d2:	d4f7      	bmi.n	80fa1c4 <_vfiprintf_r+0x44>
 80fa1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80fa1d6:	f7ff fe9b 	bl	80f9f10 <__retarget_lock_release_recursive>
 80fa1da:	e7f3      	b.n	80fa1c4 <_vfiprintf_r+0x44>
 80fa1dc:	2300      	movs	r3, #0
 80fa1de:	f8cd 800c 	str.w	r8, [sp, #12]
 80fa1e2:	f04f 0901 	mov.w	r9, #1
 80fa1e6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80fa39c <_vfiprintf_r+0x21c>
 80fa1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80fa1ec:	2320      	movs	r3, #32
 80fa1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80fa1f2:	2330      	movs	r3, #48	@ 0x30
 80fa1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80fa1f8:	4623      	mov	r3, r4
 80fa1fa:	469a      	mov	sl, r3
 80fa1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80fa200:	b10a      	cbz	r2, 80fa206 <_vfiprintf_r+0x86>
 80fa202:	2a25      	cmp	r2, #37	@ 0x25
 80fa204:	d1f9      	bne.n	80fa1fa <_vfiprintf_r+0x7a>
 80fa206:	ebba 0b04 	subs.w	fp, sl, r4
 80fa20a:	d00b      	beq.n	80fa224 <_vfiprintf_r+0xa4>
 80fa20c:	465b      	mov	r3, fp
 80fa20e:	4622      	mov	r2, r4
 80fa210:	4629      	mov	r1, r5
 80fa212:	4630      	mov	r0, r6
 80fa214:	f7ff ffa1 	bl	80fa15a <__sfputs_r>
 80fa218:	3001      	adds	r0, #1
 80fa21a:	f000 80a7 	beq.w	80fa36c <_vfiprintf_r+0x1ec>
 80fa21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80fa220:	445a      	add	r2, fp
 80fa222:	9209      	str	r2, [sp, #36]	@ 0x24
 80fa224:	f89a 3000 	ldrb.w	r3, [sl]
 80fa228:	2b00      	cmp	r3, #0
 80fa22a:	f000 809f 	beq.w	80fa36c <_vfiprintf_r+0x1ec>
 80fa22e:	2300      	movs	r3, #0
 80fa230:	f04f 32ff 	mov.w	r2, #4294967295
 80fa234:	f10a 0a01 	add.w	sl, sl, #1
 80fa238:	9304      	str	r3, [sp, #16]
 80fa23a:	9307      	str	r3, [sp, #28]
 80fa23c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80fa240:	931a      	str	r3, [sp, #104]	@ 0x68
 80fa242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80fa246:	4654      	mov	r4, sl
 80fa248:	2205      	movs	r2, #5
 80fa24a:	4854      	ldr	r0, [pc, #336]	@ (80fa39c <_vfiprintf_r+0x21c>)
 80fa24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80fa250:	f000 fbd2 	bl	80fa9f8 <memchr>
 80fa254:	9a04      	ldr	r2, [sp, #16]
 80fa256:	b9d8      	cbnz	r0, 80fa290 <_vfiprintf_r+0x110>
 80fa258:	06d1      	lsls	r1, r2, #27
 80fa25a:	bf44      	itt	mi
 80fa25c:	2320      	movmi	r3, #32
 80fa25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80fa262:	0713      	lsls	r3, r2, #28
 80fa264:	bf44      	itt	mi
 80fa266:	232b      	movmi	r3, #43	@ 0x2b
 80fa268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80fa26c:	f89a 3000 	ldrb.w	r3, [sl]
 80fa270:	2b2a      	cmp	r3, #42	@ 0x2a
 80fa272:	d015      	beq.n	80fa2a0 <_vfiprintf_r+0x120>
 80fa274:	9a07      	ldr	r2, [sp, #28]
 80fa276:	4654      	mov	r4, sl
 80fa278:	2000      	movs	r0, #0
 80fa27a:	f04f 0c0a 	mov.w	ip, #10
 80fa27e:	4621      	mov	r1, r4
 80fa280:	f811 3b01 	ldrb.w	r3, [r1], #1
 80fa284:	3b30      	subs	r3, #48	@ 0x30
 80fa286:	2b09      	cmp	r3, #9
 80fa288:	d94b      	bls.n	80fa322 <_vfiprintf_r+0x1a2>
 80fa28a:	b1b0      	cbz	r0, 80fa2ba <_vfiprintf_r+0x13a>
 80fa28c:	9207      	str	r2, [sp, #28]
 80fa28e:	e014      	b.n	80fa2ba <_vfiprintf_r+0x13a>
 80fa290:	eba0 0308 	sub.w	r3, r0, r8
 80fa294:	46a2      	mov	sl, r4
 80fa296:	fa09 f303 	lsl.w	r3, r9, r3
 80fa29a:	4313      	orrs	r3, r2
 80fa29c:	9304      	str	r3, [sp, #16]
 80fa29e:	e7d2      	b.n	80fa246 <_vfiprintf_r+0xc6>
 80fa2a0:	9b03      	ldr	r3, [sp, #12]
 80fa2a2:	1d19      	adds	r1, r3, #4
 80fa2a4:	681b      	ldr	r3, [r3, #0]
 80fa2a6:	2b00      	cmp	r3, #0
 80fa2a8:	9103      	str	r1, [sp, #12]
 80fa2aa:	bfbb      	ittet	lt
 80fa2ac:	425b      	neglt	r3, r3
 80fa2ae:	f042 0202 	orrlt.w	r2, r2, #2
 80fa2b2:	9307      	strge	r3, [sp, #28]
 80fa2b4:	9307      	strlt	r3, [sp, #28]
 80fa2b6:	bfb8      	it	lt
 80fa2b8:	9204      	strlt	r2, [sp, #16]
 80fa2ba:	7823      	ldrb	r3, [r4, #0]
 80fa2bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80fa2be:	d10a      	bne.n	80fa2d6 <_vfiprintf_r+0x156>
 80fa2c0:	7863      	ldrb	r3, [r4, #1]
 80fa2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80fa2c4:	d132      	bne.n	80fa32c <_vfiprintf_r+0x1ac>
 80fa2c6:	9b03      	ldr	r3, [sp, #12]
 80fa2c8:	3402      	adds	r4, #2
 80fa2ca:	1d1a      	adds	r2, r3, #4
 80fa2cc:	681b      	ldr	r3, [r3, #0]
 80fa2ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80fa2d2:	9203      	str	r2, [sp, #12]
 80fa2d4:	9305      	str	r3, [sp, #20]
 80fa2d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80fa3ac <_vfiprintf_r+0x22c>
 80fa2da:	2203      	movs	r2, #3
 80fa2dc:	7821      	ldrb	r1, [r4, #0]
 80fa2de:	4650      	mov	r0, sl
 80fa2e0:	f000 fb8a 	bl	80fa9f8 <memchr>
 80fa2e4:	b138      	cbz	r0, 80fa2f6 <_vfiprintf_r+0x176>
 80fa2e6:	eba0 000a 	sub.w	r0, r0, sl
 80fa2ea:	2240      	movs	r2, #64	@ 0x40
 80fa2ec:	9b04      	ldr	r3, [sp, #16]
 80fa2ee:	3401      	adds	r4, #1
 80fa2f0:	4082      	lsls	r2, r0
 80fa2f2:	4313      	orrs	r3, r2
 80fa2f4:	9304      	str	r3, [sp, #16]
 80fa2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80fa2fa:	2206      	movs	r2, #6
 80fa2fc:	4828      	ldr	r0, [pc, #160]	@ (80fa3a0 <_vfiprintf_r+0x220>)
 80fa2fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80fa302:	f000 fb79 	bl	80fa9f8 <memchr>
 80fa306:	2800      	cmp	r0, #0
 80fa308:	d03f      	beq.n	80fa38a <_vfiprintf_r+0x20a>
 80fa30a:	4b26      	ldr	r3, [pc, #152]	@ (80fa3a4 <_vfiprintf_r+0x224>)
 80fa30c:	bb1b      	cbnz	r3, 80fa356 <_vfiprintf_r+0x1d6>
 80fa30e:	9b03      	ldr	r3, [sp, #12]
 80fa310:	3307      	adds	r3, #7
 80fa312:	f023 0307 	bic.w	r3, r3, #7
 80fa316:	3308      	adds	r3, #8
 80fa318:	9303      	str	r3, [sp, #12]
 80fa31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80fa31c:	443b      	add	r3, r7
 80fa31e:	9309      	str	r3, [sp, #36]	@ 0x24
 80fa320:	e76a      	b.n	80fa1f8 <_vfiprintf_r+0x78>
 80fa322:	fb0c 3202 	mla	r2, ip, r2, r3
 80fa326:	460c      	mov	r4, r1
 80fa328:	2001      	movs	r0, #1
 80fa32a:	e7a8      	b.n	80fa27e <_vfiprintf_r+0xfe>
 80fa32c:	2300      	movs	r3, #0
 80fa32e:	3401      	adds	r4, #1
 80fa330:	f04f 0c0a 	mov.w	ip, #10
 80fa334:	4619      	mov	r1, r3
 80fa336:	9305      	str	r3, [sp, #20]
 80fa338:	4620      	mov	r0, r4
 80fa33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 80fa33e:	3a30      	subs	r2, #48	@ 0x30
 80fa340:	2a09      	cmp	r2, #9
 80fa342:	d903      	bls.n	80fa34c <_vfiprintf_r+0x1cc>
 80fa344:	2b00      	cmp	r3, #0
 80fa346:	d0c6      	beq.n	80fa2d6 <_vfiprintf_r+0x156>
 80fa348:	9105      	str	r1, [sp, #20]
 80fa34a:	e7c4      	b.n	80fa2d6 <_vfiprintf_r+0x156>
 80fa34c:	fb0c 2101 	mla	r1, ip, r1, r2
 80fa350:	4604      	mov	r4, r0
 80fa352:	2301      	movs	r3, #1
 80fa354:	e7f0      	b.n	80fa338 <_vfiprintf_r+0x1b8>
 80fa356:	ab03      	add	r3, sp, #12
 80fa358:	462a      	mov	r2, r5
 80fa35a:	a904      	add	r1, sp, #16
 80fa35c:	4630      	mov	r0, r6
 80fa35e:	9300      	str	r3, [sp, #0]
 80fa360:	4b11      	ldr	r3, [pc, #68]	@ (80fa3a8 <_vfiprintf_r+0x228>)
 80fa362:	f3af 8000 	nop.w
 80fa366:	4607      	mov	r7, r0
 80fa368:	1c78      	adds	r0, r7, #1
 80fa36a:	d1d6      	bne.n	80fa31a <_vfiprintf_r+0x19a>
 80fa36c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80fa36e:	07d9      	lsls	r1, r3, #31
 80fa370:	d405      	bmi.n	80fa37e <_vfiprintf_r+0x1fe>
 80fa372:	89ab      	ldrh	r3, [r5, #12]
 80fa374:	059a      	lsls	r2, r3, #22
 80fa376:	d402      	bmi.n	80fa37e <_vfiprintf_r+0x1fe>
 80fa378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80fa37a:	f7ff fdc9 	bl	80f9f10 <__retarget_lock_release_recursive>
 80fa37e:	89ab      	ldrh	r3, [r5, #12]
 80fa380:	065b      	lsls	r3, r3, #25
 80fa382:	f53f af1f 	bmi.w	80fa1c4 <_vfiprintf_r+0x44>
 80fa386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80fa388:	e71e      	b.n	80fa1c8 <_vfiprintf_r+0x48>
 80fa38a:	ab03      	add	r3, sp, #12
 80fa38c:	462a      	mov	r2, r5
 80fa38e:	a904      	add	r1, sp, #16
 80fa390:	4630      	mov	r0, r6
 80fa392:	9300      	str	r3, [sp, #0]
 80fa394:	4b04      	ldr	r3, [pc, #16]	@ (80fa3a8 <_vfiprintf_r+0x228>)
 80fa396:	f000 f87d 	bl	80fa494 <_printf_i>
 80fa39a:	e7e4      	b.n	80fa366 <_vfiprintf_r+0x1e6>
 80fa39c:	080fb118 	.word	0x080fb118
 80fa3a0:	080fb122 	.word	0x080fb122
 80fa3a4:	00000000 	.word	0x00000000
 80fa3a8:	080fa15b 	.word	0x080fa15b
 80fa3ac:	080fb11e 	.word	0x080fb11e

080fa3b0 <_printf_common>:
 80fa3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80fa3b4:	4616      	mov	r6, r2
 80fa3b6:	4698      	mov	r8, r3
 80fa3b8:	688a      	ldr	r2, [r1, #8]
 80fa3ba:	4607      	mov	r7, r0
 80fa3bc:	690b      	ldr	r3, [r1, #16]
 80fa3be:	460c      	mov	r4, r1
 80fa3c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80fa3c4:	4293      	cmp	r3, r2
 80fa3c6:	bfb8      	it	lt
 80fa3c8:	4613      	movlt	r3, r2
 80fa3ca:	6033      	str	r3, [r6, #0]
 80fa3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80fa3d0:	b10a      	cbz	r2, 80fa3d6 <_printf_common+0x26>
 80fa3d2:	3301      	adds	r3, #1
 80fa3d4:	6033      	str	r3, [r6, #0]
 80fa3d6:	6823      	ldr	r3, [r4, #0]
 80fa3d8:	0699      	lsls	r1, r3, #26
 80fa3da:	bf42      	ittt	mi
 80fa3dc:	6833      	ldrmi	r3, [r6, #0]
 80fa3de:	3302      	addmi	r3, #2
 80fa3e0:	6033      	strmi	r3, [r6, #0]
 80fa3e2:	6825      	ldr	r5, [r4, #0]
 80fa3e4:	f015 0506 	ands.w	r5, r5, #6
 80fa3e8:	d106      	bne.n	80fa3f8 <_printf_common+0x48>
 80fa3ea:	f104 0a19 	add.w	sl, r4, #25
 80fa3ee:	68e3      	ldr	r3, [r4, #12]
 80fa3f0:	6832      	ldr	r2, [r6, #0]
 80fa3f2:	1a9b      	subs	r3, r3, r2
 80fa3f4:	42ab      	cmp	r3, r5
 80fa3f6:	dc2b      	bgt.n	80fa450 <_printf_common+0xa0>
 80fa3f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80fa3fc:	6822      	ldr	r2, [r4, #0]
 80fa3fe:	3b00      	subs	r3, #0
 80fa400:	bf18      	it	ne
 80fa402:	2301      	movne	r3, #1
 80fa404:	0692      	lsls	r2, r2, #26
 80fa406:	d430      	bmi.n	80fa46a <_printf_common+0xba>
 80fa408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80fa40c:	4641      	mov	r1, r8
 80fa40e:	4638      	mov	r0, r7
 80fa410:	47c8      	blx	r9
 80fa412:	3001      	adds	r0, #1
 80fa414:	d023      	beq.n	80fa45e <_printf_common+0xae>
 80fa416:	6823      	ldr	r3, [r4, #0]
 80fa418:	341a      	adds	r4, #26
 80fa41a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80fa41e:	f003 0306 	and.w	r3, r3, #6
 80fa422:	2b04      	cmp	r3, #4
 80fa424:	bf0a      	itet	eq
 80fa426:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80fa42a:	2500      	movne	r5, #0
 80fa42c:	6833      	ldreq	r3, [r6, #0]
 80fa42e:	f04f 0600 	mov.w	r6, #0
 80fa432:	bf08      	it	eq
 80fa434:	1aed      	subeq	r5, r5, r3
 80fa436:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80fa43a:	bf08      	it	eq
 80fa43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80fa440:	4293      	cmp	r3, r2
 80fa442:	bfc4      	itt	gt
 80fa444:	1a9b      	subgt	r3, r3, r2
 80fa446:	18ed      	addgt	r5, r5, r3
 80fa448:	42b5      	cmp	r5, r6
 80fa44a:	d11a      	bne.n	80fa482 <_printf_common+0xd2>
 80fa44c:	2000      	movs	r0, #0
 80fa44e:	e008      	b.n	80fa462 <_printf_common+0xb2>
 80fa450:	2301      	movs	r3, #1
 80fa452:	4652      	mov	r2, sl
 80fa454:	4641      	mov	r1, r8
 80fa456:	4638      	mov	r0, r7
 80fa458:	47c8      	blx	r9
 80fa45a:	3001      	adds	r0, #1
 80fa45c:	d103      	bne.n	80fa466 <_printf_common+0xb6>
 80fa45e:	f04f 30ff 	mov.w	r0, #4294967295
 80fa462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80fa466:	3501      	adds	r5, #1
 80fa468:	e7c1      	b.n	80fa3ee <_printf_common+0x3e>
 80fa46a:	18e1      	adds	r1, r4, r3
 80fa46c:	1c5a      	adds	r2, r3, #1
 80fa46e:	2030      	movs	r0, #48	@ 0x30
 80fa470:	3302      	adds	r3, #2
 80fa472:	4422      	add	r2, r4
 80fa474:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80fa478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80fa47c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80fa480:	e7c2      	b.n	80fa408 <_printf_common+0x58>
 80fa482:	2301      	movs	r3, #1
 80fa484:	4622      	mov	r2, r4
 80fa486:	4641      	mov	r1, r8
 80fa488:	4638      	mov	r0, r7
 80fa48a:	47c8      	blx	r9
 80fa48c:	3001      	adds	r0, #1
 80fa48e:	d0e6      	beq.n	80fa45e <_printf_common+0xae>
 80fa490:	3601      	adds	r6, #1
 80fa492:	e7d9      	b.n	80fa448 <_printf_common+0x98>

080fa494 <_printf_i>:
 80fa494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80fa498:	7e0f      	ldrb	r7, [r1, #24]
 80fa49a:	4691      	mov	r9, r2
 80fa49c:	4680      	mov	r8, r0
 80fa49e:	460c      	mov	r4, r1
 80fa4a0:	2f78      	cmp	r7, #120	@ 0x78
 80fa4a2:	469a      	mov	sl, r3
 80fa4a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80fa4a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80fa4aa:	d807      	bhi.n	80fa4bc <_printf_i+0x28>
 80fa4ac:	2f62      	cmp	r7, #98	@ 0x62
 80fa4ae:	d80a      	bhi.n	80fa4c6 <_printf_i+0x32>
 80fa4b0:	2f00      	cmp	r7, #0
 80fa4b2:	f000 80d1 	beq.w	80fa658 <_printf_i+0x1c4>
 80fa4b6:	2f58      	cmp	r7, #88	@ 0x58
 80fa4b8:	f000 80b8 	beq.w	80fa62c <_printf_i+0x198>
 80fa4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80fa4c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80fa4c4:	e03a      	b.n	80fa53c <_printf_i+0xa8>
 80fa4c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80fa4ca:	2b15      	cmp	r3, #21
 80fa4cc:	d8f6      	bhi.n	80fa4bc <_printf_i+0x28>
 80fa4ce:	a101      	add	r1, pc, #4	@ (adr r1, 80fa4d4 <_printf_i+0x40>)
 80fa4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80fa4d4:	080fa52d 	.word	0x080fa52d
 80fa4d8:	080fa541 	.word	0x080fa541
 80fa4dc:	080fa4bd 	.word	0x080fa4bd
 80fa4e0:	080fa4bd 	.word	0x080fa4bd
 80fa4e4:	080fa4bd 	.word	0x080fa4bd
 80fa4e8:	080fa4bd 	.word	0x080fa4bd
 80fa4ec:	080fa541 	.word	0x080fa541
 80fa4f0:	080fa4bd 	.word	0x080fa4bd
 80fa4f4:	080fa4bd 	.word	0x080fa4bd
 80fa4f8:	080fa4bd 	.word	0x080fa4bd
 80fa4fc:	080fa4bd 	.word	0x080fa4bd
 80fa500:	080fa63f 	.word	0x080fa63f
 80fa504:	080fa56b 	.word	0x080fa56b
 80fa508:	080fa5f9 	.word	0x080fa5f9
 80fa50c:	080fa4bd 	.word	0x080fa4bd
 80fa510:	080fa4bd 	.word	0x080fa4bd
 80fa514:	080fa661 	.word	0x080fa661
 80fa518:	080fa4bd 	.word	0x080fa4bd
 80fa51c:	080fa56b 	.word	0x080fa56b
 80fa520:	080fa4bd 	.word	0x080fa4bd
 80fa524:	080fa4bd 	.word	0x080fa4bd
 80fa528:	080fa601 	.word	0x080fa601
 80fa52c:	6833      	ldr	r3, [r6, #0]
 80fa52e:	1d1a      	adds	r2, r3, #4
 80fa530:	681b      	ldr	r3, [r3, #0]
 80fa532:	6032      	str	r2, [r6, #0]
 80fa534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80fa538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80fa53c:	2301      	movs	r3, #1
 80fa53e:	e09c      	b.n	80fa67a <_printf_i+0x1e6>
 80fa540:	6833      	ldr	r3, [r6, #0]
 80fa542:	6820      	ldr	r0, [r4, #0]
 80fa544:	1d19      	adds	r1, r3, #4
 80fa546:	6031      	str	r1, [r6, #0]
 80fa548:	0606      	lsls	r6, r0, #24
 80fa54a:	d501      	bpl.n	80fa550 <_printf_i+0xbc>
 80fa54c:	681d      	ldr	r5, [r3, #0]
 80fa54e:	e003      	b.n	80fa558 <_printf_i+0xc4>
 80fa550:	0645      	lsls	r5, r0, #25
 80fa552:	d5fb      	bpl.n	80fa54c <_printf_i+0xb8>
 80fa554:	f9b3 5000 	ldrsh.w	r5, [r3]
 80fa558:	2d00      	cmp	r5, #0
 80fa55a:	da03      	bge.n	80fa564 <_printf_i+0xd0>
 80fa55c:	232d      	movs	r3, #45	@ 0x2d
 80fa55e:	426d      	negs	r5, r5
 80fa560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80fa564:	4858      	ldr	r0, [pc, #352]	@ (80fa6c8 <_printf_i+0x234>)
 80fa566:	230a      	movs	r3, #10
 80fa568:	e011      	b.n	80fa58e <_printf_i+0xfa>
 80fa56a:	6821      	ldr	r1, [r4, #0]
 80fa56c:	6833      	ldr	r3, [r6, #0]
 80fa56e:	0608      	lsls	r0, r1, #24
 80fa570:	f853 5b04 	ldr.w	r5, [r3], #4
 80fa574:	d402      	bmi.n	80fa57c <_printf_i+0xe8>
 80fa576:	0649      	lsls	r1, r1, #25
 80fa578:	bf48      	it	mi
 80fa57a:	b2ad      	uxthmi	r5, r5
 80fa57c:	2f6f      	cmp	r7, #111	@ 0x6f
 80fa57e:	6033      	str	r3, [r6, #0]
 80fa580:	4851      	ldr	r0, [pc, #324]	@ (80fa6c8 <_printf_i+0x234>)
 80fa582:	bf14      	ite	ne
 80fa584:	230a      	movne	r3, #10
 80fa586:	2308      	moveq	r3, #8
 80fa588:	2100      	movs	r1, #0
 80fa58a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80fa58e:	6866      	ldr	r6, [r4, #4]
 80fa590:	2e00      	cmp	r6, #0
 80fa592:	60a6      	str	r6, [r4, #8]
 80fa594:	db05      	blt.n	80fa5a2 <_printf_i+0x10e>
 80fa596:	6821      	ldr	r1, [r4, #0]
 80fa598:	432e      	orrs	r6, r5
 80fa59a:	f021 0104 	bic.w	r1, r1, #4
 80fa59e:	6021      	str	r1, [r4, #0]
 80fa5a0:	d04b      	beq.n	80fa63a <_printf_i+0x1a6>
 80fa5a2:	4616      	mov	r6, r2
 80fa5a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80fa5a8:	fb03 5711 	mls	r7, r3, r1, r5
 80fa5ac:	5dc7      	ldrb	r7, [r0, r7]
 80fa5ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80fa5b2:	462f      	mov	r7, r5
 80fa5b4:	460d      	mov	r5, r1
 80fa5b6:	42bb      	cmp	r3, r7
 80fa5b8:	d9f4      	bls.n	80fa5a4 <_printf_i+0x110>
 80fa5ba:	2b08      	cmp	r3, #8
 80fa5bc:	d10b      	bne.n	80fa5d6 <_printf_i+0x142>
 80fa5be:	6823      	ldr	r3, [r4, #0]
 80fa5c0:	07df      	lsls	r7, r3, #31
 80fa5c2:	d508      	bpl.n	80fa5d6 <_printf_i+0x142>
 80fa5c4:	6923      	ldr	r3, [r4, #16]
 80fa5c6:	6861      	ldr	r1, [r4, #4]
 80fa5c8:	4299      	cmp	r1, r3
 80fa5ca:	bfde      	ittt	le
 80fa5cc:	2330      	movle	r3, #48	@ 0x30
 80fa5ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80fa5d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80fa5d6:	1b92      	subs	r2, r2, r6
 80fa5d8:	6122      	str	r2, [r4, #16]
 80fa5da:	464b      	mov	r3, r9
 80fa5dc:	aa03      	add	r2, sp, #12
 80fa5de:	4621      	mov	r1, r4
 80fa5e0:	4640      	mov	r0, r8
 80fa5e2:	f8cd a000 	str.w	sl, [sp]
 80fa5e6:	f7ff fee3 	bl	80fa3b0 <_printf_common>
 80fa5ea:	3001      	adds	r0, #1
 80fa5ec:	d14a      	bne.n	80fa684 <_printf_i+0x1f0>
 80fa5ee:	f04f 30ff 	mov.w	r0, #4294967295
 80fa5f2:	b004      	add	sp, #16
 80fa5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80fa5f8:	6823      	ldr	r3, [r4, #0]
 80fa5fa:	f043 0320 	orr.w	r3, r3, #32
 80fa5fe:	6023      	str	r3, [r4, #0]
 80fa600:	2778      	movs	r7, #120	@ 0x78
 80fa602:	4832      	ldr	r0, [pc, #200]	@ (80fa6cc <_printf_i+0x238>)
 80fa604:	6823      	ldr	r3, [r4, #0]
 80fa606:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80fa60a:	061f      	lsls	r7, r3, #24
 80fa60c:	6831      	ldr	r1, [r6, #0]
 80fa60e:	f851 5b04 	ldr.w	r5, [r1], #4
 80fa612:	d402      	bmi.n	80fa61a <_printf_i+0x186>
 80fa614:	065f      	lsls	r7, r3, #25
 80fa616:	bf48      	it	mi
 80fa618:	b2ad      	uxthmi	r5, r5
 80fa61a:	6031      	str	r1, [r6, #0]
 80fa61c:	07d9      	lsls	r1, r3, #31
 80fa61e:	bf44      	itt	mi
 80fa620:	f043 0320 	orrmi.w	r3, r3, #32
 80fa624:	6023      	strmi	r3, [r4, #0]
 80fa626:	b11d      	cbz	r5, 80fa630 <_printf_i+0x19c>
 80fa628:	2310      	movs	r3, #16
 80fa62a:	e7ad      	b.n	80fa588 <_printf_i+0xf4>
 80fa62c:	4826      	ldr	r0, [pc, #152]	@ (80fa6c8 <_printf_i+0x234>)
 80fa62e:	e7e9      	b.n	80fa604 <_printf_i+0x170>
 80fa630:	6823      	ldr	r3, [r4, #0]
 80fa632:	f023 0320 	bic.w	r3, r3, #32
 80fa636:	6023      	str	r3, [r4, #0]
 80fa638:	e7f6      	b.n	80fa628 <_printf_i+0x194>
 80fa63a:	4616      	mov	r6, r2
 80fa63c:	e7bd      	b.n	80fa5ba <_printf_i+0x126>
 80fa63e:	6833      	ldr	r3, [r6, #0]
 80fa640:	6825      	ldr	r5, [r4, #0]
 80fa642:	1d18      	adds	r0, r3, #4
 80fa644:	6961      	ldr	r1, [r4, #20]
 80fa646:	6030      	str	r0, [r6, #0]
 80fa648:	062e      	lsls	r6, r5, #24
 80fa64a:	681b      	ldr	r3, [r3, #0]
 80fa64c:	d501      	bpl.n	80fa652 <_printf_i+0x1be>
 80fa64e:	6019      	str	r1, [r3, #0]
 80fa650:	e002      	b.n	80fa658 <_printf_i+0x1c4>
 80fa652:	0668      	lsls	r0, r5, #25
 80fa654:	d5fb      	bpl.n	80fa64e <_printf_i+0x1ba>
 80fa656:	8019      	strh	r1, [r3, #0]
 80fa658:	2300      	movs	r3, #0
 80fa65a:	4616      	mov	r6, r2
 80fa65c:	6123      	str	r3, [r4, #16]
 80fa65e:	e7bc      	b.n	80fa5da <_printf_i+0x146>
 80fa660:	6833      	ldr	r3, [r6, #0]
 80fa662:	2100      	movs	r1, #0
 80fa664:	1d1a      	adds	r2, r3, #4
 80fa666:	6032      	str	r2, [r6, #0]
 80fa668:	681e      	ldr	r6, [r3, #0]
 80fa66a:	6862      	ldr	r2, [r4, #4]
 80fa66c:	4630      	mov	r0, r6
 80fa66e:	f000 f9c3 	bl	80fa9f8 <memchr>
 80fa672:	b108      	cbz	r0, 80fa678 <_printf_i+0x1e4>
 80fa674:	1b80      	subs	r0, r0, r6
 80fa676:	6060      	str	r0, [r4, #4]
 80fa678:	6863      	ldr	r3, [r4, #4]
 80fa67a:	6123      	str	r3, [r4, #16]
 80fa67c:	2300      	movs	r3, #0
 80fa67e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80fa682:	e7aa      	b.n	80fa5da <_printf_i+0x146>
 80fa684:	6923      	ldr	r3, [r4, #16]
 80fa686:	4632      	mov	r2, r6
 80fa688:	4649      	mov	r1, r9
 80fa68a:	4640      	mov	r0, r8
 80fa68c:	47d0      	blx	sl
 80fa68e:	3001      	adds	r0, #1
 80fa690:	d0ad      	beq.n	80fa5ee <_printf_i+0x15a>
 80fa692:	6823      	ldr	r3, [r4, #0]
 80fa694:	079b      	lsls	r3, r3, #30
 80fa696:	d413      	bmi.n	80fa6c0 <_printf_i+0x22c>
 80fa698:	68e0      	ldr	r0, [r4, #12]
 80fa69a:	9b03      	ldr	r3, [sp, #12]
 80fa69c:	4298      	cmp	r0, r3
 80fa69e:	bfb8      	it	lt
 80fa6a0:	4618      	movlt	r0, r3
 80fa6a2:	e7a6      	b.n	80fa5f2 <_printf_i+0x15e>
 80fa6a4:	2301      	movs	r3, #1
 80fa6a6:	4632      	mov	r2, r6
 80fa6a8:	4649      	mov	r1, r9
 80fa6aa:	4640      	mov	r0, r8
 80fa6ac:	47d0      	blx	sl
 80fa6ae:	3001      	adds	r0, #1
 80fa6b0:	d09d      	beq.n	80fa5ee <_printf_i+0x15a>
 80fa6b2:	3501      	adds	r5, #1
 80fa6b4:	68e3      	ldr	r3, [r4, #12]
 80fa6b6:	9903      	ldr	r1, [sp, #12]
 80fa6b8:	1a5b      	subs	r3, r3, r1
 80fa6ba:	42ab      	cmp	r3, r5
 80fa6bc:	dcf2      	bgt.n	80fa6a4 <_printf_i+0x210>
 80fa6be:	e7eb      	b.n	80fa698 <_printf_i+0x204>
 80fa6c0:	2500      	movs	r5, #0
 80fa6c2:	f104 0619 	add.w	r6, r4, #25
 80fa6c6:	e7f5      	b.n	80fa6b4 <_printf_i+0x220>
 80fa6c8:	080fb129 	.word	0x080fb129
 80fa6cc:	080fb13a 	.word	0x080fb13a

080fa6d0 <__sflush_r>:
 80fa6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80fa6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80fa6d8:	0716      	lsls	r6, r2, #28
 80fa6da:	4605      	mov	r5, r0
 80fa6dc:	460c      	mov	r4, r1
 80fa6de:	d454      	bmi.n	80fa78a <__sflush_r+0xba>
 80fa6e0:	684b      	ldr	r3, [r1, #4]
 80fa6e2:	2b00      	cmp	r3, #0
 80fa6e4:	dc02      	bgt.n	80fa6ec <__sflush_r+0x1c>
 80fa6e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80fa6e8:	2b00      	cmp	r3, #0
 80fa6ea:	dd48      	ble.n	80fa77e <__sflush_r+0xae>
 80fa6ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80fa6ee:	2e00      	cmp	r6, #0
 80fa6f0:	d045      	beq.n	80fa77e <__sflush_r+0xae>
 80fa6f2:	2300      	movs	r3, #0
 80fa6f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80fa6f8:	682f      	ldr	r7, [r5, #0]
 80fa6fa:	6a21      	ldr	r1, [r4, #32]
 80fa6fc:	602b      	str	r3, [r5, #0]
 80fa6fe:	d030      	beq.n	80fa762 <__sflush_r+0x92>
 80fa700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80fa702:	89a3      	ldrh	r3, [r4, #12]
 80fa704:	0759      	lsls	r1, r3, #29
 80fa706:	d505      	bpl.n	80fa714 <__sflush_r+0x44>
 80fa708:	6863      	ldr	r3, [r4, #4]
 80fa70a:	1ad2      	subs	r2, r2, r3
 80fa70c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80fa70e:	b10b      	cbz	r3, 80fa714 <__sflush_r+0x44>
 80fa710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80fa712:	1ad2      	subs	r2, r2, r3
 80fa714:	2300      	movs	r3, #0
 80fa716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80fa718:	6a21      	ldr	r1, [r4, #32]
 80fa71a:	4628      	mov	r0, r5
 80fa71c:	47b0      	blx	r6
 80fa71e:	1c43      	adds	r3, r0, #1
 80fa720:	89a3      	ldrh	r3, [r4, #12]
 80fa722:	d106      	bne.n	80fa732 <__sflush_r+0x62>
 80fa724:	6829      	ldr	r1, [r5, #0]
 80fa726:	291d      	cmp	r1, #29
 80fa728:	d82b      	bhi.n	80fa782 <__sflush_r+0xb2>
 80fa72a:	4a2a      	ldr	r2, [pc, #168]	@ (80fa7d4 <__sflush_r+0x104>)
 80fa72c:	40ca      	lsrs	r2, r1
 80fa72e:	07d6      	lsls	r6, r2, #31
 80fa730:	d527      	bpl.n	80fa782 <__sflush_r+0xb2>
 80fa732:	2200      	movs	r2, #0
 80fa734:	04d9      	lsls	r1, r3, #19
 80fa736:	6062      	str	r2, [r4, #4]
 80fa738:	6922      	ldr	r2, [r4, #16]
 80fa73a:	6022      	str	r2, [r4, #0]
 80fa73c:	d504      	bpl.n	80fa748 <__sflush_r+0x78>
 80fa73e:	1c42      	adds	r2, r0, #1
 80fa740:	d101      	bne.n	80fa746 <__sflush_r+0x76>
 80fa742:	682b      	ldr	r3, [r5, #0]
 80fa744:	b903      	cbnz	r3, 80fa748 <__sflush_r+0x78>
 80fa746:	6560      	str	r0, [r4, #84]	@ 0x54
 80fa748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80fa74a:	602f      	str	r7, [r5, #0]
 80fa74c:	b1b9      	cbz	r1, 80fa77e <__sflush_r+0xae>
 80fa74e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80fa752:	4299      	cmp	r1, r3
 80fa754:	d002      	beq.n	80fa75c <__sflush_r+0x8c>
 80fa756:	4628      	mov	r0, r5
 80fa758:	f7ff fbf0 	bl	80f9f3c <_free_r>
 80fa75c:	2300      	movs	r3, #0
 80fa75e:	6363      	str	r3, [r4, #52]	@ 0x34
 80fa760:	e00d      	b.n	80fa77e <__sflush_r+0xae>
 80fa762:	2301      	movs	r3, #1
 80fa764:	4628      	mov	r0, r5
 80fa766:	47b0      	blx	r6
 80fa768:	4602      	mov	r2, r0
 80fa76a:	1c50      	adds	r0, r2, #1
 80fa76c:	d1c9      	bne.n	80fa702 <__sflush_r+0x32>
 80fa76e:	682b      	ldr	r3, [r5, #0]
 80fa770:	2b00      	cmp	r3, #0
 80fa772:	d0c6      	beq.n	80fa702 <__sflush_r+0x32>
 80fa774:	2b1d      	cmp	r3, #29
 80fa776:	d001      	beq.n	80fa77c <__sflush_r+0xac>
 80fa778:	2b16      	cmp	r3, #22
 80fa77a:	d11d      	bne.n	80fa7b8 <__sflush_r+0xe8>
 80fa77c:	602f      	str	r7, [r5, #0]
 80fa77e:	2000      	movs	r0, #0
 80fa780:	e021      	b.n	80fa7c6 <__sflush_r+0xf6>
 80fa782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80fa786:	b21b      	sxth	r3, r3
 80fa788:	e01a      	b.n	80fa7c0 <__sflush_r+0xf0>
 80fa78a:	690f      	ldr	r7, [r1, #16]
 80fa78c:	2f00      	cmp	r7, #0
 80fa78e:	d0f6      	beq.n	80fa77e <__sflush_r+0xae>
 80fa790:	0793      	lsls	r3, r2, #30
 80fa792:	680e      	ldr	r6, [r1, #0]
 80fa794:	600f      	str	r7, [r1, #0]
 80fa796:	bf0c      	ite	eq
 80fa798:	694b      	ldreq	r3, [r1, #20]
 80fa79a:	2300      	movne	r3, #0
 80fa79c:	eba6 0807 	sub.w	r8, r6, r7
 80fa7a0:	608b      	str	r3, [r1, #8]
 80fa7a2:	f1b8 0f00 	cmp.w	r8, #0
 80fa7a6:	ddea      	ble.n	80fa77e <__sflush_r+0xae>
 80fa7a8:	4643      	mov	r3, r8
 80fa7aa:	463a      	mov	r2, r7
 80fa7ac:	6a21      	ldr	r1, [r4, #32]
 80fa7ae:	4628      	mov	r0, r5
 80fa7b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80fa7b2:	47b0      	blx	r6
 80fa7b4:	2800      	cmp	r0, #0
 80fa7b6:	dc08      	bgt.n	80fa7ca <__sflush_r+0xfa>
 80fa7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80fa7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80fa7c0:	f04f 30ff 	mov.w	r0, #4294967295
 80fa7c4:	81a3      	strh	r3, [r4, #12]
 80fa7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80fa7ca:	4407      	add	r7, r0
 80fa7cc:	eba8 0800 	sub.w	r8, r8, r0
 80fa7d0:	e7e7      	b.n	80fa7a2 <__sflush_r+0xd2>
 80fa7d2:	bf00      	nop
 80fa7d4:	20400001 	.word	0x20400001

080fa7d8 <_fflush_r>:
 80fa7d8:	b538      	push	{r3, r4, r5, lr}
 80fa7da:	690b      	ldr	r3, [r1, #16]
 80fa7dc:	4605      	mov	r5, r0
 80fa7de:	460c      	mov	r4, r1
 80fa7e0:	b913      	cbnz	r3, 80fa7e8 <_fflush_r+0x10>
 80fa7e2:	2500      	movs	r5, #0
 80fa7e4:	4628      	mov	r0, r5
 80fa7e6:	bd38      	pop	{r3, r4, r5, pc}
 80fa7e8:	b118      	cbz	r0, 80fa7f2 <_fflush_r+0x1a>
 80fa7ea:	6a03      	ldr	r3, [r0, #32]
 80fa7ec:	b90b      	cbnz	r3, 80fa7f2 <_fflush_r+0x1a>
 80fa7ee:	f7ff fa79 	bl	80f9ce4 <__sinit>
 80fa7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80fa7f6:	2b00      	cmp	r3, #0
 80fa7f8:	d0f3      	beq.n	80fa7e2 <_fflush_r+0xa>
 80fa7fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80fa7fc:	07d0      	lsls	r0, r2, #31
 80fa7fe:	d404      	bmi.n	80fa80a <_fflush_r+0x32>
 80fa800:	0599      	lsls	r1, r3, #22
 80fa802:	d402      	bmi.n	80fa80a <_fflush_r+0x32>
 80fa804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80fa806:	f7ff fb82 	bl	80f9f0e <__retarget_lock_acquire_recursive>
 80fa80a:	4628      	mov	r0, r5
 80fa80c:	4621      	mov	r1, r4
 80fa80e:	f7ff ff5f 	bl	80fa6d0 <__sflush_r>
 80fa812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80fa814:	4605      	mov	r5, r0
 80fa816:	07da      	lsls	r2, r3, #31
 80fa818:	d4e4      	bmi.n	80fa7e4 <_fflush_r+0xc>
 80fa81a:	89a3      	ldrh	r3, [r4, #12]
 80fa81c:	059b      	lsls	r3, r3, #22
 80fa81e:	d4e1      	bmi.n	80fa7e4 <_fflush_r+0xc>
 80fa820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80fa822:	f7ff fb75 	bl	80f9f10 <__retarget_lock_release_recursive>
 80fa826:	e7dd      	b.n	80fa7e4 <_fflush_r+0xc>

080fa828 <__swbuf_r>:
 80fa828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80fa82a:	460e      	mov	r6, r1
 80fa82c:	4614      	mov	r4, r2
 80fa82e:	4605      	mov	r5, r0
 80fa830:	b118      	cbz	r0, 80fa83a <__swbuf_r+0x12>
 80fa832:	6a03      	ldr	r3, [r0, #32]
 80fa834:	b90b      	cbnz	r3, 80fa83a <__swbuf_r+0x12>
 80fa836:	f7ff fa55 	bl	80f9ce4 <__sinit>
 80fa83a:	69a3      	ldr	r3, [r4, #24]
 80fa83c:	60a3      	str	r3, [r4, #8]
 80fa83e:	89a3      	ldrh	r3, [r4, #12]
 80fa840:	071a      	lsls	r2, r3, #28
 80fa842:	d501      	bpl.n	80fa848 <__swbuf_r+0x20>
 80fa844:	6923      	ldr	r3, [r4, #16]
 80fa846:	b943      	cbnz	r3, 80fa85a <__swbuf_r+0x32>
 80fa848:	4621      	mov	r1, r4
 80fa84a:	4628      	mov	r0, r5
 80fa84c:	f000 f82a 	bl	80fa8a4 <__swsetup_r>
 80fa850:	b118      	cbz	r0, 80fa85a <__swbuf_r+0x32>
 80fa852:	f04f 37ff 	mov.w	r7, #4294967295
 80fa856:	4638      	mov	r0, r7
 80fa858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80fa85a:	6823      	ldr	r3, [r4, #0]
 80fa85c:	b2f6      	uxtb	r6, r6
 80fa85e:	6922      	ldr	r2, [r4, #16]
 80fa860:	4637      	mov	r7, r6
 80fa862:	1a98      	subs	r0, r3, r2
 80fa864:	6963      	ldr	r3, [r4, #20]
 80fa866:	4283      	cmp	r3, r0
 80fa868:	dc05      	bgt.n	80fa876 <__swbuf_r+0x4e>
 80fa86a:	4621      	mov	r1, r4
 80fa86c:	4628      	mov	r0, r5
 80fa86e:	f7ff ffb3 	bl	80fa7d8 <_fflush_r>
 80fa872:	2800      	cmp	r0, #0
 80fa874:	d1ed      	bne.n	80fa852 <__swbuf_r+0x2a>
 80fa876:	68a3      	ldr	r3, [r4, #8]
 80fa878:	3b01      	subs	r3, #1
 80fa87a:	60a3      	str	r3, [r4, #8]
 80fa87c:	6823      	ldr	r3, [r4, #0]
 80fa87e:	1c5a      	adds	r2, r3, #1
 80fa880:	6022      	str	r2, [r4, #0]
 80fa882:	701e      	strb	r6, [r3, #0]
 80fa884:	1c43      	adds	r3, r0, #1
 80fa886:	6962      	ldr	r2, [r4, #20]
 80fa888:	429a      	cmp	r2, r3
 80fa88a:	d004      	beq.n	80fa896 <__swbuf_r+0x6e>
 80fa88c:	89a3      	ldrh	r3, [r4, #12]
 80fa88e:	07db      	lsls	r3, r3, #31
 80fa890:	d5e1      	bpl.n	80fa856 <__swbuf_r+0x2e>
 80fa892:	2e0a      	cmp	r6, #10
 80fa894:	d1df      	bne.n	80fa856 <__swbuf_r+0x2e>
 80fa896:	4621      	mov	r1, r4
 80fa898:	4628      	mov	r0, r5
 80fa89a:	f7ff ff9d 	bl	80fa7d8 <_fflush_r>
 80fa89e:	2800      	cmp	r0, #0
 80fa8a0:	d0d9      	beq.n	80fa856 <__swbuf_r+0x2e>
 80fa8a2:	e7d6      	b.n	80fa852 <__swbuf_r+0x2a>

080fa8a4 <__swsetup_r>:
 80fa8a4:	b538      	push	{r3, r4, r5, lr}
 80fa8a6:	4b29      	ldr	r3, [pc, #164]	@ (80fa94c <__swsetup_r+0xa8>)
 80fa8a8:	4605      	mov	r5, r0
 80fa8aa:	460c      	mov	r4, r1
 80fa8ac:	6818      	ldr	r0, [r3, #0]
 80fa8ae:	b118      	cbz	r0, 80fa8b8 <__swsetup_r+0x14>
 80fa8b0:	6a03      	ldr	r3, [r0, #32]
 80fa8b2:	b90b      	cbnz	r3, 80fa8b8 <__swsetup_r+0x14>
 80fa8b4:	f7ff fa16 	bl	80f9ce4 <__sinit>
 80fa8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80fa8bc:	0719      	lsls	r1, r3, #28
 80fa8be:	d422      	bmi.n	80fa906 <__swsetup_r+0x62>
 80fa8c0:	06da      	lsls	r2, r3, #27
 80fa8c2:	d407      	bmi.n	80fa8d4 <__swsetup_r+0x30>
 80fa8c4:	2209      	movs	r2, #9
 80fa8c6:	602a      	str	r2, [r5, #0]
 80fa8c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80fa8cc:	f04f 30ff 	mov.w	r0, #4294967295
 80fa8d0:	81a3      	strh	r3, [r4, #12]
 80fa8d2:	e033      	b.n	80fa93c <__swsetup_r+0x98>
 80fa8d4:	0758      	lsls	r0, r3, #29
 80fa8d6:	d512      	bpl.n	80fa8fe <__swsetup_r+0x5a>
 80fa8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80fa8da:	b141      	cbz	r1, 80fa8ee <__swsetup_r+0x4a>
 80fa8dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80fa8e0:	4299      	cmp	r1, r3
 80fa8e2:	d002      	beq.n	80fa8ea <__swsetup_r+0x46>
 80fa8e4:	4628      	mov	r0, r5
 80fa8e6:	f7ff fb29 	bl	80f9f3c <_free_r>
 80fa8ea:	2300      	movs	r3, #0
 80fa8ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80fa8ee:	89a3      	ldrh	r3, [r4, #12]
 80fa8f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80fa8f4:	81a3      	strh	r3, [r4, #12]
 80fa8f6:	2300      	movs	r3, #0
 80fa8f8:	6063      	str	r3, [r4, #4]
 80fa8fa:	6923      	ldr	r3, [r4, #16]
 80fa8fc:	6023      	str	r3, [r4, #0]
 80fa8fe:	89a3      	ldrh	r3, [r4, #12]
 80fa900:	f043 0308 	orr.w	r3, r3, #8
 80fa904:	81a3      	strh	r3, [r4, #12]
 80fa906:	6923      	ldr	r3, [r4, #16]
 80fa908:	b94b      	cbnz	r3, 80fa91e <__swsetup_r+0x7a>
 80fa90a:	89a3      	ldrh	r3, [r4, #12]
 80fa90c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80fa910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80fa914:	d003      	beq.n	80fa91e <__swsetup_r+0x7a>
 80fa916:	4621      	mov	r1, r4
 80fa918:	4628      	mov	r0, r5
 80fa91a:	f000 f8a0 	bl	80faa5e <__smakebuf_r>
 80fa91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80fa922:	f013 0201 	ands.w	r2, r3, #1
 80fa926:	d00a      	beq.n	80fa93e <__swsetup_r+0x9a>
 80fa928:	2200      	movs	r2, #0
 80fa92a:	60a2      	str	r2, [r4, #8]
 80fa92c:	6962      	ldr	r2, [r4, #20]
 80fa92e:	4252      	negs	r2, r2
 80fa930:	61a2      	str	r2, [r4, #24]
 80fa932:	6922      	ldr	r2, [r4, #16]
 80fa934:	b942      	cbnz	r2, 80fa948 <__swsetup_r+0xa4>
 80fa936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80fa93a:	d1c5      	bne.n	80fa8c8 <__swsetup_r+0x24>
 80fa93c:	bd38      	pop	{r3, r4, r5, pc}
 80fa93e:	0799      	lsls	r1, r3, #30
 80fa940:	bf58      	it	pl
 80fa942:	6962      	ldrpl	r2, [r4, #20]
 80fa944:	60a2      	str	r2, [r4, #8]
 80fa946:	e7f4      	b.n	80fa932 <__swsetup_r+0x8e>
 80fa948:	2000      	movs	r0, #0
 80fa94a:	e7f7      	b.n	80fa93c <__swsetup_r+0x98>
 80fa94c:	20000034 	.word	0x20000034

080fa950 <_raise_r>:
 80fa950:	291f      	cmp	r1, #31
 80fa952:	b538      	push	{r3, r4, r5, lr}
 80fa954:	4605      	mov	r5, r0
 80fa956:	460c      	mov	r4, r1
 80fa958:	d904      	bls.n	80fa964 <_raise_r+0x14>
 80fa95a:	2316      	movs	r3, #22
 80fa95c:	6003      	str	r3, [r0, #0]
 80fa95e:	f04f 30ff 	mov.w	r0, #4294967295
 80fa962:	bd38      	pop	{r3, r4, r5, pc}
 80fa964:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80fa966:	b112      	cbz	r2, 80fa96e <_raise_r+0x1e>
 80fa968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80fa96c:	b94b      	cbnz	r3, 80fa982 <_raise_r+0x32>
 80fa96e:	4628      	mov	r0, r5
 80fa970:	f000 f830 	bl	80fa9d4 <_getpid_r>
 80fa974:	4622      	mov	r2, r4
 80fa976:	4601      	mov	r1, r0
 80fa978:	4628      	mov	r0, r5
 80fa97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80fa97e:	f000 b817 	b.w	80fa9b0 <_kill_r>
 80fa982:	2b01      	cmp	r3, #1
 80fa984:	d00a      	beq.n	80fa99c <_raise_r+0x4c>
 80fa986:	1c59      	adds	r1, r3, #1
 80fa988:	d103      	bne.n	80fa992 <_raise_r+0x42>
 80fa98a:	2316      	movs	r3, #22
 80fa98c:	6003      	str	r3, [r0, #0]
 80fa98e:	2001      	movs	r0, #1
 80fa990:	e7e7      	b.n	80fa962 <_raise_r+0x12>
 80fa992:	2100      	movs	r1, #0
 80fa994:	4620      	mov	r0, r4
 80fa996:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80fa99a:	4798      	blx	r3
 80fa99c:	2000      	movs	r0, #0
 80fa99e:	e7e0      	b.n	80fa962 <_raise_r+0x12>

080fa9a0 <raise>:
 80fa9a0:	4b02      	ldr	r3, [pc, #8]	@ (80fa9ac <raise+0xc>)
 80fa9a2:	4601      	mov	r1, r0
 80fa9a4:	6818      	ldr	r0, [r3, #0]
 80fa9a6:	f7ff bfd3 	b.w	80fa950 <_raise_r>
 80fa9aa:	bf00      	nop
 80fa9ac:	20000034 	.word	0x20000034

080fa9b0 <_kill_r>:
 80fa9b0:	b538      	push	{r3, r4, r5, lr}
 80fa9b2:	2300      	movs	r3, #0
 80fa9b4:	4d06      	ldr	r5, [pc, #24]	@ (80fa9d0 <_kill_r+0x20>)
 80fa9b6:	4604      	mov	r4, r0
 80fa9b8:	4608      	mov	r0, r1
 80fa9ba:	4611      	mov	r1, r2
 80fa9bc:	602b      	str	r3, [r5, #0]
 80fa9be:	f7ee fe43 	bl	80e9648 <_kill>
 80fa9c2:	1c43      	adds	r3, r0, #1
 80fa9c4:	d102      	bne.n	80fa9cc <_kill_r+0x1c>
 80fa9c6:	682b      	ldr	r3, [r5, #0]
 80fa9c8:	b103      	cbz	r3, 80fa9cc <_kill_r+0x1c>
 80fa9ca:	6023      	str	r3, [r4, #0]
 80fa9cc:	bd38      	pop	{r3, r4, r5, pc}
 80fa9ce:	bf00      	nop
 80fa9d0:	20005a90 	.word	0x20005a90

080fa9d4 <_getpid_r>:
 80fa9d4:	f7ee be30 	b.w	80e9638 <_getpid>

080fa9d8 <_sbrk_r>:
 80fa9d8:	b538      	push	{r3, r4, r5, lr}
 80fa9da:	2300      	movs	r3, #0
 80fa9dc:	4d05      	ldr	r5, [pc, #20]	@ (80fa9f4 <_sbrk_r+0x1c>)
 80fa9de:	4604      	mov	r4, r0
 80fa9e0:	4608      	mov	r0, r1
 80fa9e2:	602b      	str	r3, [r5, #0]
 80fa9e4:	f7ee feb8 	bl	80e9758 <_sbrk>
 80fa9e8:	1c43      	adds	r3, r0, #1
 80fa9ea:	d102      	bne.n	80fa9f2 <_sbrk_r+0x1a>
 80fa9ec:	682b      	ldr	r3, [r5, #0]
 80fa9ee:	b103      	cbz	r3, 80fa9f2 <_sbrk_r+0x1a>
 80fa9f0:	6023      	str	r3, [r4, #0]
 80fa9f2:	bd38      	pop	{r3, r4, r5, pc}
 80fa9f4:	20005a90 	.word	0x20005a90

080fa9f8 <memchr>:
 80fa9f8:	b2c9      	uxtb	r1, r1
 80fa9fa:	4603      	mov	r3, r0
 80fa9fc:	4402      	add	r2, r0
 80fa9fe:	b510      	push	{r4, lr}
 80faa00:	4293      	cmp	r3, r2
 80faa02:	4618      	mov	r0, r3
 80faa04:	d101      	bne.n	80faa0a <memchr+0x12>
 80faa06:	2000      	movs	r0, #0
 80faa08:	e003      	b.n	80faa12 <memchr+0x1a>
 80faa0a:	7804      	ldrb	r4, [r0, #0]
 80faa0c:	3301      	adds	r3, #1
 80faa0e:	428c      	cmp	r4, r1
 80faa10:	d1f6      	bne.n	80faa00 <memchr+0x8>
 80faa12:	bd10      	pop	{r4, pc}

080faa14 <__swhatbuf_r>:
 80faa14:	b570      	push	{r4, r5, r6, lr}
 80faa16:	460c      	mov	r4, r1
 80faa18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80faa1c:	b096      	sub	sp, #88	@ 0x58
 80faa1e:	4615      	mov	r5, r2
 80faa20:	2900      	cmp	r1, #0
 80faa22:	461e      	mov	r6, r3
 80faa24:	da0c      	bge.n	80faa40 <__swhatbuf_r+0x2c>
 80faa26:	89a3      	ldrh	r3, [r4, #12]
 80faa28:	2100      	movs	r1, #0
 80faa2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80faa2e:	bf14      	ite	ne
 80faa30:	2340      	movne	r3, #64	@ 0x40
 80faa32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80faa36:	2000      	movs	r0, #0
 80faa38:	6031      	str	r1, [r6, #0]
 80faa3a:	602b      	str	r3, [r5, #0]
 80faa3c:	b016      	add	sp, #88	@ 0x58
 80faa3e:	bd70      	pop	{r4, r5, r6, pc}
 80faa40:	466a      	mov	r2, sp
 80faa42:	f000 f849 	bl	80faad8 <_fstat_r>
 80faa46:	2800      	cmp	r0, #0
 80faa48:	dbed      	blt.n	80faa26 <__swhatbuf_r+0x12>
 80faa4a:	9901      	ldr	r1, [sp, #4]
 80faa4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80faa50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80faa54:	4259      	negs	r1, r3
 80faa56:	4159      	adcs	r1, r3
 80faa58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80faa5c:	e7eb      	b.n	80faa36 <__swhatbuf_r+0x22>

080faa5e <__smakebuf_r>:
 80faa5e:	898b      	ldrh	r3, [r1, #12]
 80faa60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80faa62:	079d      	lsls	r5, r3, #30
 80faa64:	4606      	mov	r6, r0
 80faa66:	460c      	mov	r4, r1
 80faa68:	d507      	bpl.n	80faa7a <__smakebuf_r+0x1c>
 80faa6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80faa6e:	6023      	str	r3, [r4, #0]
 80faa70:	6123      	str	r3, [r4, #16]
 80faa72:	2301      	movs	r3, #1
 80faa74:	6163      	str	r3, [r4, #20]
 80faa76:	b003      	add	sp, #12
 80faa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80faa7a:	ab01      	add	r3, sp, #4
 80faa7c:	466a      	mov	r2, sp
 80faa7e:	f7ff ffc9 	bl	80faa14 <__swhatbuf_r>
 80faa82:	9f00      	ldr	r7, [sp, #0]
 80faa84:	4605      	mov	r5, r0
 80faa86:	4630      	mov	r0, r6
 80faa88:	4639      	mov	r1, r7
 80faa8a:	f7ff fac3 	bl	80fa014 <_malloc_r>
 80faa8e:	b948      	cbnz	r0, 80faaa4 <__smakebuf_r+0x46>
 80faa90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80faa94:	059a      	lsls	r2, r3, #22
 80faa96:	d4ee      	bmi.n	80faa76 <__smakebuf_r+0x18>
 80faa98:	f023 0303 	bic.w	r3, r3, #3
 80faa9c:	f043 0302 	orr.w	r3, r3, #2
 80faaa0:	81a3      	strh	r3, [r4, #12]
 80faaa2:	e7e2      	b.n	80faa6a <__smakebuf_r+0xc>
 80faaa4:	89a3      	ldrh	r3, [r4, #12]
 80faaa6:	6020      	str	r0, [r4, #0]
 80faaa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80faaac:	81a3      	strh	r3, [r4, #12]
 80faaae:	9b01      	ldr	r3, [sp, #4]
 80faab0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80faab4:	b15b      	cbz	r3, 80faace <__smakebuf_r+0x70>
 80faab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80faaba:	4630      	mov	r0, r6
 80faabc:	f000 f81e 	bl	80faafc <_isatty_r>
 80faac0:	b128      	cbz	r0, 80faace <__smakebuf_r+0x70>
 80faac2:	89a3      	ldrh	r3, [r4, #12]
 80faac4:	f023 0303 	bic.w	r3, r3, #3
 80faac8:	f043 0301 	orr.w	r3, r3, #1
 80faacc:	81a3      	strh	r3, [r4, #12]
 80faace:	89a3      	ldrh	r3, [r4, #12]
 80faad0:	431d      	orrs	r5, r3
 80faad2:	81a5      	strh	r5, [r4, #12]
 80faad4:	e7cf      	b.n	80faa76 <__smakebuf_r+0x18>
	...

080faad8 <_fstat_r>:
 80faad8:	b538      	push	{r3, r4, r5, lr}
 80faada:	2300      	movs	r3, #0
 80faadc:	4d06      	ldr	r5, [pc, #24]	@ (80faaf8 <_fstat_r+0x20>)
 80faade:	4604      	mov	r4, r0
 80faae0:	4608      	mov	r0, r1
 80faae2:	4611      	mov	r1, r2
 80faae4:	602b      	str	r3, [r5, #0]
 80faae6:	f7ee fe0f 	bl	80e9708 <_fstat>
 80faaea:	1c43      	adds	r3, r0, #1
 80faaec:	d102      	bne.n	80faaf4 <_fstat_r+0x1c>
 80faaee:	682b      	ldr	r3, [r5, #0]
 80faaf0:	b103      	cbz	r3, 80faaf4 <_fstat_r+0x1c>
 80faaf2:	6023      	str	r3, [r4, #0]
 80faaf4:	bd38      	pop	{r3, r4, r5, pc}
 80faaf6:	bf00      	nop
 80faaf8:	20005a90 	.word	0x20005a90

080faafc <_isatty_r>:
 80faafc:	b538      	push	{r3, r4, r5, lr}
 80faafe:	2300      	movs	r3, #0
 80fab00:	4d05      	ldr	r5, [pc, #20]	@ (80fab18 <_isatty_r+0x1c>)
 80fab02:	4604      	mov	r4, r0
 80fab04:	4608      	mov	r0, r1
 80fab06:	602b      	str	r3, [r5, #0]
 80fab08:	f7ee fe0e 	bl	80e9728 <_isatty>
 80fab0c:	1c43      	adds	r3, r0, #1
 80fab0e:	d102      	bne.n	80fab16 <_isatty_r+0x1a>
 80fab10:	682b      	ldr	r3, [r5, #0]
 80fab12:	b103      	cbz	r3, 80fab16 <_isatty_r+0x1a>
 80fab14:	6023      	str	r3, [r4, #0]
 80fab16:	bd38      	pop	{r3, r4, r5, pc}
 80fab18:	20005a90 	.word	0x20005a90

080fab1c <_init>:
 80fab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80fab1e:	bf00      	nop
 80fab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80fab22:	bc08      	pop	{r3}
 80fab24:	469e      	mov	lr, r3
 80fab26:	4770      	bx	lr

080fab28 <_fini>:
 80fab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80fab2a:	bf00      	nop
 80fab2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80fab2e:	bc08      	pop	{r3}
 80fab30:	469e      	mov	lr, r3
 80fab32:	4770      	bx	lr
